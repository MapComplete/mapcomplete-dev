{"version":3,"file":"grb_fixme-41647959.js","sources":["../../src/assets/generated/metatagging/grb_fixme.ts","../../index_grb_fixme.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"grb_fixme\"\n\n   public metaTaggging_for_named_streets(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_osm_buildings_fixme(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_grbNumber', () => (feat.properties.fixme?.match(/GRB thinks that this has number ([0-9a-zA-Z;]+)/) ?? ['','none']) [1] ) \n   }\n   public metaTaggging_for_address(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_closest_3_street_names', () => closestn(feat)('named_streets',3, 'name').map(f => f.feat.properties.name) ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:0:name', () => JSON.parse(feat.properties._closest_3_street_names)[0] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:1:name', () => JSON.parse(feat.properties._closest_3_street_names)[1] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:2:name', () => JSON.parse(feat.properties._closest_3_street_names)[2] ) \n   }\n   public metaTaggging_for_crab_address(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_HNRLABEL', () => (() => {const lbl = feat.properties.HNRLABEL?.split('-')?.map(l => Number(l))?.filter(i => !isNaN (i)) ;if(lbl?.length != 2) {return feat.properties.HNRLABEL}; const addresses = []; for(let i = lbl[0]; i <= lbl[1]; i += 1){addresses.push(''+i);}; return addresses.join(';')        })() ) \n   }\n   public metaTaggging_for_selected_element(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location_history(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_home_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_track(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_range(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_last_click(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n}","import layout from \"./src/assets/generated/themes/grb_fixme.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/grb_fixme\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nif (!webgl_support()) {\n     new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n}else{\n    MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n    const state = new ThemeViewState(new LayoutConfig(<any> layout))\n    const main = new SvelteUIElement(ThemeViewGUI, { state })\n    main.AttachTo(\"maindiv\")\n}    \n"],"names":["ThemeMetaTagging","feat","helperFunctions","Utils","_a","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","f","lbl","_c","_b","l","i","addresses","__publicField","webgl_support","canvas","FixedUiElement","MetaTagging","state","ThemeViewState","LayoutConfig","layout","SvelteUIElement","ThemeViewGUI"],"mappings":"+/6DAGO,MAAMA,CAAiB,CAGpB,+BAA+BC,EAAeC,EAAwE,CAE7H,CACO,qCAAqCD,EAAeC,EAAwE,CAEhIC,EAAM,gBAAgBF,EAAK,WAAY,aAAc,IAAA,OAAO,SAAAG,EAAAH,EAAK,WAAW,QAAhB,YAAAG,EAAuB,MAAM,qDAAsD,CAAC,GAAG,MAAM,GAAI,CAAC,EAAE,CACnK,CACO,yBAAyBH,EAAeC,EAAwE,CAC9G,KAAA,CAAC,WAAAG,EAAY,YAAAC,EAAa,kBAAAC,EAAmB,kBAAAC,EAAmB,QAAAC,EAAS,SAAAC,EAAU,IAAAC,CAAO,EAAAT,EAChGC,EAAM,gBAAgBF,EAAK,WAAY,0BAA2B,IAAMS,EAAST,CAAI,EAAE,gBAAgB,EAAG,MAAM,EAAE,IAAIW,GAAKA,EAAE,KAAK,WAAW,IAAI,CAAE,EACnJT,EAAM,gBAAgBF,EAAK,WAAY,yBAA0B,IAAM,KAAK,MAAMA,EAAK,WAAW,uBAAuB,EAAE,CAAC,CAAE,EAC9HE,EAAM,gBAAgBF,EAAK,WAAY,yBAA0B,IAAM,KAAK,MAAMA,EAAK,WAAW,uBAAuB,EAAE,CAAC,CAAE,EAC9HE,EAAM,gBAAgBF,EAAK,WAAY,yBAA0B,IAAM,KAAK,MAAMA,EAAK,WAAW,uBAAuB,EAAE,CAAC,CAAE,CACjI,CACO,8BAA8BA,EAAeC,EAAwE,CAEzHC,EAAM,gBAAgBF,EAAK,WAAY,YAAa,KAAO,IAAM,WAAC,MAAMY,GAAMC,GAAAC,GAAAX,EAAAH,EAAK,WAAW,WAAhB,YAAAG,EAA0B,MAAM,OAAhC,YAAAW,EAAsC,IAAIC,GAAK,OAAOA,CAAC,KAAvD,YAAAF,EAA2D,UAAY,CAAC,MAAOG,CAAC,GAAO,IAAAJ,GAAA,YAAAA,EAAK,SAAU,EAAI,OAAOZ,EAAK,WAAW,SAAW,MAAMiB,EAAY,CAAA,EAAY,QAAAD,EAAIJ,EAAI,CAAC,EAAGI,GAAKJ,EAAI,CAAC,EAAGI,GAAK,EAAaC,EAAA,KAAK,GAAGD,CAAC,EAAY,OAAAC,EAAU,KAAK,GAAG,KAAc,CAC3V,CACO,kCAAkCjB,EAAeC,EAAwE,CAEhI,CACO,8BAA8BD,EAAeC,EAAwE,CAE5H,CACO,sCAAsCD,EAAeC,EAAwE,CAEpI,CACO,+BAA+BD,EAAeC,EAAwE,CAE7H,CACO,2BAA2BD,EAAeC,EAAwE,CAEzH,CACO,uBAAuBD,EAAeC,EAAwE,CAErH,CACO,4BAA4BD,EAAeC,EAAwE,CAE1H,CACH,CAzCGiB,EADUnB,EACa,YAAY,aCKtC,SAASoB,GAAgB,CACjB,GAAA,CACI,IAAAC,EAAS,SAAS,cAAc,QAAQ,EAExC,MAAA,CAAC,CAAC,OAAO,wBACRA,EAAO,WAAW,OAAO,GAAKA,EAAO,WAAW,oBAAoB,SAGlE,MAAA,EACX,CACJ,CAEA,GAAI,CAACD,IACA,IAAIE,EAAe,2GAA2G,EAAE,SAAS,aAAa,EAAE,SAAS,SAAS,MAC1K,CACWC,EAAA,oBAAoB,IAAIvB,CAAkB,EACtD,MAAMwB,EAAQ,IAAIC,EAAe,IAAIC,EAAmBC,CAAM,CAAC,EAClD,IAAIC,EAAgBC,EAAc,CAAE,MAAAL,CAAO,CAAA,EACnD,SAAS,SAAS,CAC3B"}