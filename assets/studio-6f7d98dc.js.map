{"version":3,"file":"studio-6f7d98dc.js","sources":["../../node_modules/@rgossiaux/svelte-heroicons/solid/InformationCircle/InformationCircle.svelte","../../node_modules/@babeard/svelte-heroicons/mini/QuestionMarkCircle/QuestionMarkCircle.svelte","../../node_modules/@rgossiaux/svelte-heroicons/outline/Pencil/Pencil.svelte","../../node_modules/@rgossiaux/svelte-heroicons/outline/Trash/Trash.svelte","../../src/Customizations/AllSharedLayers.ts","../../src/UI/Studio/EditLayerState.ts","../../src/UI/Studio/configMeta.ts","../../src/UI/Studio/ShowConversionMessage.svelte","../../src/UI/Studio/SchemaBasedField.svelte","../../src/UI/Studio/QuestionPreview.svelte","../../src/UI/Studio/SchemaBasedMultiType.svelte","../../src/UI/Studio/SchemaBasedArray.svelte","../../src/UI/Studio/ArrayMultiAnswer.svelte","../../src/UI/Studio/SchemaBasedInput.svelte","../../src/UI/Studio/Region.svelte","../../src/UI/Studio/ErrorIndicatorForRegion.svelte","../../src/UI/Studio/MappingInput.svelte","../../src/UI/Studio/TagRenderingInput.svelte","../../src/UI/Studio/ShowConversionMessages.svelte","../../src/UI/Studio/EditLayer.svelte","../../src/assets/svg/Loading.svelte","../../src/UI/Studio/StudioServer.ts","../../src/UI/Studio/EditItemButton.svelte","../../src/UI/Studio/ChooseLayerToEdit.svelte","../../src/UI/Walkthrough/WalkthroughStep.svelte","../../src/UI/Walkthrough/Walkthrough.svelte","../../src/UI/Studio/EditTheme.svelte","../../src/UI/StudioGUI.svelte","../../src/UI/StudioGui.ts"],"sourcesContent":["<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM8.94 6.94a.75.75 0 11-1.061-1.061 3 3 0 112.871 5.026v.345a.75.75 0 01-1.5 0v-.5c0-.72.57-1.172 1.081-1.287A1.5 1.5 0 108.94 6.94zM10 15a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"/>\n</svg>","import LayerConfig from \"../Models/ThemeConfig/LayerConfig\"\nimport { Utils } from \"../Utils\"\nimport known_layers from \"../assets/generated/known_layers.json\"\nimport { LayerConfigJson } from \"../Models/ThemeConfig/Json/LayerConfigJson\"\n\nexport class AllSharedLayers {\n    public static sharedLayers: Map<string, LayerConfig> = AllSharedLayers.getSharedLayers()\n    public static getSharedLayersConfigs(): Map<string, LayerConfigJson> {\n        const sharedLayers = new Map<string, LayerConfigJson>()\n        for (const layer of known_layers.layers) {\n            // @ts-ignore\n            sharedLayers.set(layer.id, layer)\n        }\n\n        return sharedLayers\n    }\n    private static getSharedLayers(): Map<string, LayerConfig> {\n        const sharedLayers = new Map<string, LayerConfig>()\n        for (const layer of known_layers.layers) {\n            try {\n                // @ts-ignore\n                const parsed = new LayerConfig(layer, \"shared_layers\")\n                sharedLayers.set(layer.id, parsed)\n            } catch (e) {\n                if (!Utils.runningFromConsole) {\n                    console.error(\n                        \"CRITICAL: Could not parse a layer configuration!\",\n                        layer.id,\n                        \" due to\",\n                        e\n                    )\n                }\n            }\n        }\n\n        return sharedLayers\n    }\n}\n","import { ConfigMeta } from \"./configMeta\"\nimport { Store, UIEventSource } from \"../../Logic/UIEventSource\"\nimport { LayerConfigJson } from \"../../Models/ThemeConfig/Json/LayerConfigJson\"\nimport {\n    Conversion,\n    ConversionMessage,\n    DesugaringContext,\n    Pipe,\n} from \"../../Models/ThemeConfig/Conversion/Conversion\"\nimport { PrepareLayer } from \"../../Models/ThemeConfig/Conversion/PrepareLayer\"\nimport { ValidateLayer, ValidateTheme } from \"../../Models/ThemeConfig/Conversion/Validation\"\nimport { AllSharedLayers } from \"../../Customizations/AllSharedLayers\"\nimport { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\nimport { TagUtils } from \"../../Logic/Tags/TagUtils\"\nimport StudioServer from \"./StudioServer\"\nimport { Utils } from \"../../Utils\"\nimport { OsmConnection } from \"../../Logic/Osm/OsmConnection\"\nimport { OsmTags } from \"../../Models/OsmFeature\"\nimport { Feature, Point } from \"geojson\"\nimport LayerConfig from \"../../Models/ThemeConfig/LayerConfig\"\nimport { LayoutConfigJson } from \"../../Models/ThemeConfig/Json/LayoutConfigJson\"\nimport { PrepareTheme } from \"../../Models/ThemeConfig/Conversion/PrepareTheme\"\nimport { ConversionContext } from \"../../Models/ThemeConfig/Conversion/ConversionContext\"\n\nexport interface HighlightedTagRendering {\n    path: ReadonlyArray<string | number>\n    schema: ConfigMeta\n}\n\nexport abstract class EditJsonState<T> {\n    public readonly schema: ConfigMeta[]\n    public readonly category: \"layers\" | \"themes\"\n    public readonly server: StudioServer\n\n    public readonly configuration: UIEventSource<Partial<T>> = new UIEventSource<Partial<T>>({})\n    public readonly messages: Store<ConversionMessage[]>\n\n    /**\n     * The EditLayerUI shows a 'schemaBasedInput' for this path to pop advanced questions out\n     */\n    public readonly highlightedItem: UIEventSource<HighlightedTagRendering> = new UIEventSource(\n        undefined\n    )\n    private sendingUpdates = false\n    private readonly _stores = new Map<string, UIEventSource<any>>()\n\n    constructor(schema: ConfigMeta[], server: StudioServer, category: \"layers\" | \"themes\") {\n        this.schema = schema\n        this.server = server\n        this.category = category\n\n        this.messages = this.setupErrorsForLayers()\n\n        const layerId = this.getId()\n        this.highlightedItem.addCallbackD((hl) => console.log(\"Highlighted item is\", hl))\n        this.configuration\n            .mapD((config) => {\n                if (!this.sendingUpdates) {\n                    console.log(\"Not sending updates yet! Trigger 'startSendingUpdates' first\")\n                    return undefined\n                }\n                return JSON.stringify(config, null, \"  \")\n            })\n            .stabilized(100)\n            .addCallbackD(async (config) => {\n                const id = layerId.data\n                if (id === undefined) {\n                    console.warn(\"No id found in layer, not updating\")\n                    return\n                }\n                await this.server.update(id, config, this.category)\n            })\n    }\n\n    public startSavingUpdates(enabled = true) {\n        this.sendingUpdates = enabled\n        if (enabled) {\n            this.configuration.ping()\n        }\n    }\n\n    public getCurrentValueFor(path: ReadonlyArray<string | number>): any | undefined {\n        // Walk the path down to see if we find something\n        let entry = this.configuration.data\n        for (let i = 0; i < path.length; i++) {\n            if (entry === undefined) {\n                // We reached a dead end - no old vlaue\n                return undefined\n            }\n            const breadcrumb = path[i]\n            entry = entry[breadcrumb]\n        }\n        return entry\n    }\n\n    public getStoreFor<T>(path: ReadonlyArray<string | number>): UIEventSource<T | undefined> {\n        const key = path.join(\".\")\n\n        // TODO check if this gives problems when changing the order of e.g. mappings and questions\n        if (this._stores.has(key)) {\n            return this._stores.get(key)\n        }\n        const store = new UIEventSource<any>(this.getCurrentValueFor(path))\n        store.addCallback((v) => {\n            this.setValueAt(path, v)\n        })\n        this._stores.set(key, store)\n        this.configuration.addCallbackD((config) => {\n            store.setData(this.getCurrentValueFor(path))\n        })\n        return store\n    }\n\n    public register(\n        path: ReadonlyArray<string | number>,\n        value: Store<any>,\n        noInitialSync: boolean = true\n    ): () => void {\n        const unsync = value.addCallback((v) => {\n            this.setValueAt(path, v)\n        })\n        if (!noInitialSync) {\n            this.setValueAt(path, value.data)\n        }\n        return unsync\n    }\n\n    public getSchemaStartingWith(path: string[]) {\n        return this.schema.filter(\n            (sch) =>\n                !path.some((part, i) => !(sch.path.length > path.length && sch.path[i] === part))\n        )\n    }\n\n    public getTranslationAt(path: string[]): ConfigMeta {\n        const origConfig = this.getSchema(path)[0]\n        return {\n            path,\n            type: \"translation\",\n            hints: {\n                typehint: \"translation\",\n            },\n            required: origConfig.required ?? false,\n            description: origConfig.description ?? \"A translatable object\",\n        }\n    }\n\n    public getSchema(path: string[]): ConfigMeta[] {\n        const schemas = this.schema.filter(\n            (sch) =>\n                sch !== undefined &&\n                !path.some((part, i) => !(sch.path.length == path.length && sch.path[i] === part))\n        )\n        if (schemas.length == 0) {\n            console.warn(\"No schemas found for path\", path.join(\".\"))\n        }\n        return schemas\n    }\n\n    public setValueAt(path: ReadonlyArray<string | number>, v: any) {\n        let entry = this.configuration.data\n        const isUndefined =\n            v === undefined ||\n            v === null ||\n            v === \"\" ||\n            (typeof v === \"object\" && Object.keys(v).length === 0)\n\n        for (let i = 0; i < path.length - 1; i++) {\n            const breadcrumb = path[i]\n            if (entry[breadcrumb] === undefined) {\n                if (isUndefined) {\n                    // we have a dead end _and_ we do not need to set a value - we do an early return\n                    return\n                }\n                entry[breadcrumb] = typeof path[i + 1] === \"number\" ? [] : {}\n            }\n            entry = entry[breadcrumb]\n        }\n\n        const lastBreadcrumb = path.at(-1)\n        if (isUndefined) {\n            if (entry && entry[lastBreadcrumb]) {\n                delete entry[lastBreadcrumb]\n                this.configuration.ping()\n            }\n        } else if (entry[lastBreadcrumb] !== v) {\n            entry[lastBreadcrumb] = v\n            this.configuration.ping()\n        }\n    }\n\n    public messagesFor(path: ReadonlyArray<string | number>): Store<ConversionMessage[]> {\n        return this.messages.map((msgs) => {\n            if (!msgs) {\n                return []\n            }\n            return msgs.filter((msg) => {\n                const pth = msg.context.path\n                for (let i = 0; i < Math.min(pth.length, path.length); i++) {\n                    if (pth[i] !== path[i]) {\n                        return false\n                    }\n                }\n                return true\n            })\n        })\n    }\n\n    protected abstract buildValidation(state: DesugaringContext): Conversion<T, any>\n\n    protected abstract getId(): Store<string>\n\n    private setupErrorsForLayers(): Store<ConversionMessage[]> {\n        const layers = AllSharedLayers.getSharedLayersConfigs()\n        const questions = layers.get(\"questions\")\n        const sharedQuestions = new Map<string, QuestionableTagRenderingConfigJson>()\n        for (const question of questions.tagRenderings) {\n            sharedQuestions.set(question[\"id\"], <QuestionableTagRenderingConfigJson>question)\n        }\n        let state: DesugaringContext = {\n            tagRenderings: sharedQuestions,\n            sharedLayers: layers,\n        }\n        const prepare = this.buildValidation(state)\n        return this.configuration.mapD((config) => {\n            const context = ConversionContext.construct([], [\"prepare\"])\n            try {\n                prepare.convert(<T>config, context)\n            } catch (e) {\n                console.error(e)\n                context.err(e)\n            }\n            return context.messages\n        })\n    }\n}\n\nexport default class EditLayerState extends EditJsonState<LayerConfigJson> {\n    // Needed for the special visualisations\n    public readonly osmConnection: OsmConnection\n    public readonly imageUploadManager = {\n        getCountsFor() {\n            return 0\n        },\n    }\n    public readonly layout: { getMatchingLayer: (key: any) => LayerConfig }\n    public readonly featureSwitches: {\n        featureSwitchIsDebugging: UIEventSource<boolean>\n    }\n\n    /**\n     * Used to preview and interact with the questions\n     */\n    public readonly testTags = new UIEventSource<OsmTags>({ id: \"node/-12345\" })\n    public readonly exampleFeature: Feature<Point> = {\n        type: \"Feature\",\n        properties: this.testTags.data,\n        geometry: {\n            type: \"Point\",\n            coordinates: [3.21, 51.2],\n        },\n    }\n\n    constructor(schema: ConfigMeta[], server: StudioServer, osmConnection: OsmConnection) {\n        super(schema, server, \"layers\")\n        this.osmConnection = osmConnection\n        this.layout = {\n            getMatchingLayer: (_) => {\n                try {\n                    return new LayerConfig(<LayerConfigJson>this.configuration.data, \"dynamic\")\n                } catch (e) {\n                    return undefined\n                }\n            },\n        }\n        this.featureSwitches = {\n            featureSwitchIsDebugging: new UIEventSource<boolean>(true),\n        }\n\n        this.addMissingTagRenderingIds()\n\n        this.configuration.addCallbackAndRunD((layer) => {\n            if (layer.tagRenderings) {\n                // A bit of cleanup\n                const lBefore = layer.tagRenderings.length\n                const cleaned = Utils.NoNull(layer.tagRenderings)\n                if (cleaned.length != lBefore) {\n                    layer.tagRenderings = cleaned\n                    this.configuration.ping()\n                }\n            }\n        })\n    }\n\n    protected buildValidation(state: DesugaringContext) {\n        return new Pipe(\n            new PrepareLayer(state),\n            new ValidateLayer(\"dynamic\", false, undefined, true)\n        )\n    }\n\n    protected getId(): Store<string> {\n        return this.configuration.mapD((config) => config.id)\n    }\n\n    private addMissingTagRenderingIds() {\n        this.configuration.addCallbackD((config) => {\n            const trs = Utils.NoNull(config.tagRenderings ?? [])\n            for (let i = 0; i < trs.length; i++) {\n                const tr = trs[i]\n                if (typeof tr === \"string\") {\n                    continue\n                }\n                if (!tr[\"id\"] && !tr[\"override\"]) {\n                    const qtr = <QuestionableTagRenderingConfigJson>tr\n                    let id = \"\" + i + \"_\" + Utils.randomString(5)\n                    if (qtr?.freeform?.key) {\n                        id = qtr?.freeform?.key\n                    } else if (qtr.mappings?.[0]?.if) {\n                        id =\n                            qtr.freeform?.key ??\n                            TagUtils.Tag(qtr.mappings[0].if).usedKeys()?.[0] ??\n                            \"\" + i\n                    }\n                    qtr[\"id\"] = id\n                }\n            }\n        })\n    }\n}\n\nexport class EditThemeState extends EditJsonState<LayoutConfigJson> {\n    constructor(schema: ConfigMeta[], server: StudioServer) {\n        super(schema, server, \"themes\")\n    }\n\n    protected buildValidation(state: DesugaringContext): Conversion<LayoutConfigJson, any> {\n        return new Pipe(\n            new PrepareTheme(state),\n            new ValidateTheme(undefined, \"\", false, new Set(state.tagRenderings.keys()))\n        )\n    }\n\n    protected getId(): Store<string> {\n        return this.configuration.mapD((config) => config.id)\n    }\n}\n","import { JsonSchema, JsonSchemaType } from \"./jsonSchema\"\n\nexport interface ConfigMeta {\n    path: string[]\n    type: JsonSchemaType | JsonSchema[]\n    /**\n     * All fields are lowercase, as they should be case-insensitive\n     */\n    hints: {\n        group?: string\n        typehint?: string\n        typehelper?: string\n        /**\n         * If multiple subcategories can be chosen\n         */\n        types?: string\n        question?: string\n        iftrue?: string\n        iffalse?: string\n        ifunset?: string\n        inline?: string\n        default?: string\n        typesdefault?: string\n        suggestions?: []\n        title?: string\n        multianswer?: \"true\" | string\n    }\n    required: boolean\n    description: string\n}\n\nexport class ConfigMetaUtils {\n    static isTranslation(configMeta: ConfigMeta) {\n        /*      {\n    \"$ref\": \"#/definitions/Record<string,string>\"\n  },\n  {\n    \"type\": \"string\"\n  }*/\n        if (!configMeta.type) {\n            return false\n        }\n        if (Array.isArray(configMeta.type)) {\n            return configMeta.type.some((t) => t[\"$ref\"] === \"#/definitions/Record<string,string>\")\n        } else {\n            return configMeta.type[\"$ref\"] === \"#/definitions/Record<string,string>\"\n        }\n    }\n}\n","<script lang=\"ts\">\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\";\n  import { ExclamationIcon, InformationCircleIcon } from \"@rgossiaux/svelte-heroicons/solid\";\n\n  /**\n   * Single conversion message, styled depending on the type\n   */\n  export let message: ConversionMessage;\n</script>\n\n{#if message.level === \"error\"}\n  <div class=\"alert flex justify-between items-center\">\n    <ExclamationIcon class=\"w-6 h-6 mx-1 shrink-0\" />\n    {message.message}\n    <div/>\n  </div>\n{:else if message.level === \"warning\"}\n  <div class=\"warning flex justify-between items-center\">\n    <ExclamationIcon class=\"w-6 h-6 mx-1 shrink-0\" />\n    {message.message}\n    <div/>\n  </div>\n{:else if message.level === \"information\"}\n  <div class=\"information flex justify-between items-center\">\n    <InformationCircleIcon class=\"w-6 h-6 mx-1 shrink-0\" />\n    {message.message}\n    <div/>\n  </div>\n{/if}\n","<script lang=\"ts\">\n\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\";\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\";\n  import nmd from \"nano-markdown\";\n  import type {\n    QuestionableTagRenderingConfigJson\n  } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\";\n  import EditLayerState from \"./EditLayerState\";\n  import { onDestroy } from \"svelte\";\n  import type { JsonSchemaType } from \"./jsonSchema\";\n  import { ConfigMetaUtils } from \"./configMeta.ts\";\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\";\n\n  export let state: EditLayerState;\n  export let path: (string | number)[] = [];\n  export let schema: ConfigMeta;\n  export let startInEditModeIfUnset: boolean = !schema.hints.ifunset\n  let value = new UIEventSource<string | any>(undefined);\n\n  const isTranslation = schema.hints.typehint === \"translation\" || schema.hints.typehint === \"rendered\" || ConfigMetaUtils.isTranslation(schema);\n  let type = schema.hints.typehint ?? \"string\";\n\n  let rendervalue = (schema.hints.inline ?? schema.path.join(\".\")) + (isTranslation ? \" <b>{translated(value)}</b>\": \" <b>{value}</b>\");\n \n  if(schema.type === \"boolean\"){\n    rendervalue = undefined\n  }\n  if(schema.hints.typehint === \"tag\" || schema.hints.typehint === \"simple_tag\") {\n    rendervalue = \"{tags()}\"\n  }\n  \n  let helperArgs = schema.hints.typehelper?.split(\",\");\n  let inline = schema.hints.inline !== undefined;\n  if (isTranslation) {\n    type = \"translation\";\n    if (schema.hints.inline) {\n      const inlineValue = schema.hints.inline;\n      rendervalue = inlineValue;\n      inline = false;\n      helperArgs = [inlineValue.substring(0, inlineValue.indexOf(\"{\")), inlineValue.substring(inlineValue.indexOf(\"}\") + 1)];\n    }\n  }\n  if (type.endsWith(\"[]\")) {\n    type = type.substring(0, type.length - 2);\n  }\n\n  const configJson: QuestionableTagRenderingConfigJson = {\n    id: path.join(\"_\"),\n    render: rendervalue,\n    question: schema.hints.question,\n    questionHint: nmd(schema.description),\n    freeform: schema.type === \"boolean\" ? undefined : {\n      key: \"value\",\n      type,\n      inline,\n      helperArgs\n    }\n  };\n\n  if (schema.hints.default) {\n    configJson.mappings = [{\n      if: \"value=\", // We leave this blank\n      then: path.at(-1) + \" is not set. The default value <b>\" + schema.hints.default + \"</b> will be used. \" + (schema.hints.ifunset ?? \"\")\n    }];\n  } else if (!schema.required) {\n    configJson.mappings = [{\n      if: \"value=\",\n      then: path.at(-1) + \" is not set. \" + (schema.hints.ifunset ?? \"\")\n    }];\n  }\n\n  function mightBeBoolean(type: undefined | JsonSchemaType): boolean {\n    if (type === undefined) {\n      return false;\n    }\n    if (type[\"type\"]) {\n      type = type[\"type\"];\n    }\n    if (type === \"boolean\") {\n      return true;\n    }\n    if (!Array.isArray(type)) {\n      return false;\n    }\n\n    return type.some(t => mightBeBoolean(t));\n  }\n\n  if (mightBeBoolean(schema.type)) {\n    configJson.mappings = configJson.mappings ?? [];\n    configJson.mappings.push(\n      {\n        if: \"value=true\",\n        then: schema.hints?.iftrue ?? \"Yes\"\n      },\n      {\n        if: \"value=false\",\n        then: schema.hints?.iffalse ?? \"No\"\n      }\n    );\n  }\n\n  if (schema.hints.suggestions) {\n    if (!configJson.mappings) {\n      configJson.mappings = [];\n    }\n    configJson.mappings.push(...schema.hints.suggestions);\n  }\n  let config: TagRenderingConfig;\n  let err: string = undefined;\n  let messages = state.messagesFor(path)\n  try {\n    config = new TagRenderingConfig(configJson, \"config based on \" + schema.path.join(\".\"));\n  } catch (e) {\n    console.error(e, config);\n    err = path.join(\".\") + \" \" + e;\n  }\n  let startValue = state.getCurrentValueFor(path);\n  let startInEditMode = !startValue && startInEditModeIfUnset\n  const tags = new UIEventSource<Record<string, string>>({ value: startValue });\n  try {\n    onDestroy(state.register(path, tags.map(tgs => {\n      const v = tgs[\"value\"];\n      if (typeof v !== \"string\") {\n        return { ... v };\n      }\n      if (schema.type === \"boolan\") {\n        return v === \"true\" || v === \"yes\" || v === \"1\";\n      }\n      if (mightBeBoolean(schema.type)) {\n        if (v === \"true\" || v === \"yes\" || v === \"1\") {\n          return true;\n        }\n        if (v === \"false\" || v === \"no\" || v === \"0\") {\n          return false;\n        }\n      }\n      if (schema.type === \"number\") {\n        if (v === \"\") {\n          return undefined;\n        }\n        return Number(v);\n      }\n      if (isTranslation && typeof v === \"string\") {\n        if (v === \"\") {\n          return {};\n        }\n        return JSON.parse(v);\n      }\n      return v;\n    }), isTranslation));\n  } catch (e) {\n    console.error(\"Could not register\", path, \"due to\", e);\n  }\n</script>\n{#if err !== undefined}\n  <span class=\"alert\">{err}</span>\n{:else}\n  <div class=\"w-full flex flex-col\">\n    <TagRenderingEditable editMode={startInEditMode} {config} selectedElement={undefined} showQuestionIfUnknown={true} {state} {tags} />\n    {#if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message}/>\n      {/each}\n    {/if}\n    {#if window.location.hostname === \"127.0.0.1\"}\n      <span class=\"subtle\">SchemaBasedField <b>{path.join(\".\")}</b> <span class=\"cursor-pointer\" on:click={() => console.log(schema)}>{schema.hints.typehint}</span></span>\n    {/if}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\";\n  import EditLayerState from \"./EditLayerState\";\n  import * as questions from \"../../assets/generated/layers/questions.json\";\n  import { ImmutableStore, Store } from \"../../Logic/UIEventSource\";\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\";\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\";\n  import nmd from \"nano-markdown\";\n  import type {\n    QuestionableTagRenderingConfigJson\n  } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson.js\";\n  import type { TagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/TagRenderingConfigJson\";\n  import FromHtml from \"../Base/FromHtml.svelte\";\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\";\n  import NextButton from \"../Base/NextButton.svelte\";\n\n  export let state: EditLayerState;\n  export let path: ReadonlyArray<string | number>;\n  export let schema: ConfigMeta;\n  let value = state.getStoreFor(path);\n\n  let perId: Record<string, TagRenderingConfigJson[]> = {};\n  for (let tagRendering of questions.tagRenderings) {\n    if (tagRendering.labels) {\n      for (let label of tagRendering.labels) {\n        perId[label] = (perId[label] ?? []).concat(tagRendering);\n      }\n    }\n    perId[tagRendering.id] = [tagRendering];\n  }\n\n  let configJson: Store<QuestionableTagRenderingConfigJson[]> = value.map(x => {\n    if (typeof x === \"string\") {\n      return perId[x];\n    } else {\n      return [x];\n    }\n  });\n  let configs: Store<TagRenderingConfig[]> = configJson.map(configs => {\n    if (!configs) {\n      return [{ error: \"No configuartions found\" }];\n    }\n    console.log(\"Regenerating configs\");\n    return configs.map(config => {\n      try {\n        return new TagRenderingConfig(config);\n      } catch (e) {\n        return { error: e };\n      }\n    });\n  });\n  let id: Store<string> = value.mapD(c => {\n    if (c?.id) {\n      return c.id;\n    }\n    if (typeof c === \"string\") {\n      return c;\n    }\n    return undefined;\n  });\n\n  let tags = state.testTags;\n\n  let messages = state.messagesFor(path);\n\n  let description = schema.description;\n  if (description) {\n    try {\n      description = nmd(description);\n    } catch (e) {\n      console.error(\"Could not convert description to markdown\", { description });\n    }\n  }\n</script>\n\n<div class=\"flex\">\n\n  <div class=\"flex flex-col interactive border-interactive m-4 w-full\">\n\n    {#if $id}\n      TagRendering {$id}\n    {/if}\n    <NextButton clss=\"primary\" on:click={() => state.highlightedItem.setData({path, schema})}>\n      {#if schema.hints.question}\n        {schema.hints.question}\n      {/if}\n    </NextButton>\n    {#if description}\n      <FromHtml src={description} />\n    {/if}\n    {#each $messages as message}\n      <ShowConversionMessage {message} />\n    {/each}\n\n    <slot class=\"self-end my-4\"></slot>\n\n\n  </div>\n\n  <div class=\"flex flex-col w-full m-4\">\n    <h3>Preview of this question</h3>\n    {#each $configs as config}\n      {#if config.error !== undefined}\n        <div class=\"alert\">Could not create a preview of this tagRendering: {config.error}</div>\n      {:else}\n        {#if config.condition && !config.condition.matchesProperties($tags)}\n          This tagRendering is currently not shown. It will appear if the feature matches the condition\n          <b>\n            <FromHtml src={config.condition.asHumanString(true, false, {})} />\n          </b>\n          \n          Try to answer the relevant question above\n          {:else if config.metacondition && !config.metacondition.matchesProperties($tags)}\n            This tagRendering is currently not shown. It will appear if the feature matches the metacondition\n            <b>\n              <FromHtml src={config.metacondition.asHumanString(true, false, {})} />\n            </b>\n          For a breakdown of usable meta conditions, go to a mapcomplete theme > settings and enable debug-data. The meta-tags will appear at the bottom \n        {:else}\n          <TagRenderingEditable\n            selectedElement={state.exampleFeature}\n            config={config} editingEnabled={new ImmutableStore(true)} showQuestionIfUnknown={true}\n            {state}\n            {tags}></TagRenderingEditable>\n        {/if}\n      {/if}\n    {/each}\n  </div>\n\n\n</div>\n","<script lang=\"ts\">\n\n  import EditLayerState from \"./EditLayerState\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import type {\n    QuestionableTagRenderingConfigJson\n  } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\";\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\";\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\";\n  import { onDestroy } from \"svelte\";\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\";\n  import type { JsonSchemaType } from \"./jsonSchema\";\n  // @ts-ignore\n  import nmd from \"nano-markdown\";\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\";\n\n  /**\n   * If 'types' is defined: allow the user to pick one of the types to input.\n   */\n\n  export let state: EditLayerState;\n  export let path: (string | number)[] = [];\n  export let schema: ConfigMeta;\n  const defaultOption = schema.hints.typesdefault ? Number(schema.hints.typesdefault) : undefined;\n\n  const hasBooleanOption = (<JsonSchemaType[]>schema.type)?.findIndex(t => t[\"type\"] === \"boolean\");\n  const types = schema.hints.types.split(\";\");\n  if (hasBooleanOption >= 0) {\n    types.splice(hasBooleanOption);\n  }\n\n\n  let lastIsString = false;\n  {\n    const types: string | string[] = Array.isArray(schema.type) ? schema.type[schema.type.length - 1].type : [];\n    lastIsString = types === \"string\" || (Array.isArray(types) && types.some(i => i === \"string\"));\n  }\n\n  if (lastIsString) {\n    types.splice(types.length - 1, 1);\n  }\n  const configJson: QuestionableTagRenderingConfigJson = {\n    id: \"TYPE_OF:\" + path.join(\"_\"),\n    question: \"Which subcategory is needed for \" + schema.path.at(-1) + \"?\",\n    questionHint: nmd(schema.description),\n    mappings: types.map(opt => opt.trim()).filter(opt => opt.length > 0).map((opt, i) => ({\n      if: \"chosen_type_index=\" + i,\n      addExtraTags: [\"value=\"],\n      then: opt + (i === defaultOption ? \" (Default)\" : \"\")\n    })),\n    render: !lastIsString ? undefined : (schema.hints.inline ?? \"Use a hardcoded value: <b>{value}</b>\"),\n    freeform: !lastIsString ? undefined : {\n      key: \"value\",\n      inline: true,\n      type: schema.hints.typehint,\n      addExtraTags: [\"chosen_type_index=\"]\n    }\n  };\n  let tags = new UIEventSource<Record<string, string>>({});\n\n  if (schema.hints.ifunset) {\n    configJson.mappings.push(\n      {\n        if: { and: [\"value=\", \"chosen_type_index=\"] },\n        then: schema.hints.ifunset\n      }\n    );\n  }\n  if (schema.hints.suggestions) {\n    configJson.mappings.push(...schema.hints.suggestions);\n  }\n\n  if (hasBooleanOption >= 0) {\n    configJson.mappings.unshift(\n      {\n        if: \"value=true\",\n        then: (schema.hints.iftrue ?? \"Yes\"),\n        addExtraTags: [\"chosen_type_index=\"]\n      },\n      {\n        if: \"value=false\",\n        then: (schema.hints.iffalse ?? \"No\"),\n        addExtraTags: [\"chosen_type_index=\"]\n      }\n    );\n  }\n  const config = new TagRenderingConfig(configJson, \"config based on \" + schema.path.join(\".\"));\n  let chosenOption: number = (defaultOption);\n\n\n  const existingValue = state.getCurrentValueFor(path);\n  let hasOverride = existingValue?.override !== undefined;\n  if (hasBooleanOption >= 0 && (existingValue === true || existingValue === false)) {\n    tags.setData({ value: \"\" + existingValue });\n  } else if (lastIsString && typeof existingValue === \"string\") {\n    tags.setData({ value: existingValue });\n    chosenOption = undefined;\n  } else if (existingValue) {\n    // We found an existing value. Let's figure out what type it matches and select that one\n    // We run over all possibilities and check what is required\n    const possibleTypes: { index: number, matchingPropertiesCount: number, optionalMatches: number }[] = [];\n    outer: for (let i = 0; i < (<[]>schema.type).length; i++) {\n      const type = schema.type[i];\n      let optionalMatches = 0;\n      for (const key of Object.keys(type.properties ?? {})) {\n        if (!!existingValue[key]) {\n          optionalMatches++;\n        }\n      }\n      if (type.required) {\n        let numberOfMatches = 0;\n\n        for (const requiredAttribute of type.required) {\n          if (existingValue[requiredAttribute] === undefined) {\n            // The 'existingValue' does _not_ have this required attribute, so it cannot be of this type\n            continue outer;\n          }\n          numberOfMatches++;\n        }\n        possibleTypes.push({ index: i, matchingPropertiesCount: numberOfMatches, optionalMatches });\n      } else {\n        possibleTypes.push({ index: i, matchingPropertiesCount: 0, optionalMatches });\n      }\n\n\n    }\n    possibleTypes.sort((a, b) => b.optionalMatches - a.optionalMatches);\n    possibleTypes.sort((a, b) => b.matchingPropertiesCount - a.matchingPropertiesCount);\n    if (possibleTypes.length > 0) {\n      chosenOption = possibleTypes[0].index;\n      tags.setData({ chosen_type_index: \"\" + chosenOption });\n\n    }\n  } else if (defaultOption !== undefined) {\n    tags.setData({ chosen_type_index: \"\" + defaultOption });\n  } else {\n    chosenOption = defaultOption;\n  }\n\n  if (hasBooleanOption >= 0 || lastIsString) {\n\n    const directValue = tags.mapD(tags => {\n      if (tags[\"chosen_type_index\"]) {\n        return \"\";\n      }\n      if (lastIsString) {\n        return tags[\"value\"];\n      }\n      return tags[\"value\"] === \"true\";\n    });\n    onDestroy(state.register(path, directValue));\n  }\n\n  let subSchemas: ConfigMeta[] = [];\n\n  let subpath = path;\n  const store = state.getStoreFor(path);\n  onDestroy(tags.addCallbackAndRun(tags => {\n    if (tags[\"value\"] !== undefined && tags[\"value\"] !== \"\") {\n      chosenOption = undefined;\n      return;\n    }\n    const oldOption = chosenOption;\n    chosenOption = tags[\"chosen_type_index\"] ? Number(tags[\"chosen_type_index\"]) : defaultOption;\n    const type = schema.type[chosenOption];\n    if (chosenOption !== oldOption) {\n      // Reset the values beneath\n      subSchemas = [];\n      const o = state.getCurrentValueFor(path) ?? {};\n      for (const key of type?.required ?? []) {\n        o[key] ??= {};\n      }\n      store.setData(o);\n    }\n    if (!type) {\n      return;\n    }\n    subpath = path;\n    const cleanPath = <string[]>path.filter(p => typeof p === \"string\");\n    if (type[\"$ref\"] === \"#/definitions/Record<string,string>\") {\n      // The subtype is a translation object\n      const schema = state.getTranslationAt(cleanPath);\n      subSchemas.push(schema);\n      subpath = path.slice(0, path.length - 2);\n      return;\n    }\n    if (!type.properties) {\n      return;\n    }\n    for (const crumble of Object.keys(type.properties)) {\n      subSchemas.push(...(state.getSchema([...cleanPath, crumble])));\n    }\n  }));\n  let messages = state.messagesFor(path);\n\n\n</script>\n\n<div class=\"p-2 border-2 border-dashed border-gray-300 flex flex-col gap-y-2 m-1\">\n  {#if schema.hints.title !== undefined}\n    <h3>{schema.hints.title}</h3>\n    <div> {schema.description} </div>\n  {/if}\n  {#if hasOverride}\n    This object refers to {existingValue.builtin} and overrides some properties. This cannot be edited with MapComplete\n    Studio\n  {:else}\n    <div>\n      <TagRenderingEditable {config} selectedElement={undefined} showQuestionIfUnknown={true} {state} {tags} />\n    </div>\n\n    {#if chosenOption !== undefined}\n      {#each subSchemas as subschema}\n        <SchemaBasedInput {state} schema={subschema}\n                          path={[...subpath, (subschema?.path?.at(-1) ?? \"???\")]}></SchemaBasedInput>\n      {/each}\n    {:else if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message}/>\n      {/each}\n    {/if}\n  {/if}\n  {#if window.location.hostname === \"127.0.0.1\"}\n    <span class=\"subtle\">SchemaBasedMultiType <b>{path.join(\".\")}</b> <span class=\"cursor-pointer\" on:click={() => console.log(schema)}>{schema.hints.typehint}</span></span>\n  {/if}\n</div>\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\";\n  import SchemaBasedField from \"./SchemaBasedField.svelte\";\n  import { TrashIcon } from \"@babeard/svelte-heroicons/mini\";\n  import QuestionPreview from \"./QuestionPreview.svelte\";\n  import { Utils } from \"../../Utils\";\n  import SchemaBasedMultiType from \"./SchemaBasedMultiType.svelte\";\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\";\n\n  export let state: EditLayerState;\n  export let schema: ConfigMeta;\n\n\n  let title = schema.path.at(-1);\n  let singular = title;\n  if (title?.endsWith(\"s\")) {\n    singular = title.slice(0, title.length - 1);\n  }\n  let article = \"a\";\n  if (singular?.match(/^[aeoui]/)) {\n    article = \"an\";\n  }\n  export let path: (string | number)[] = [];\n  const isTagRenderingBlock = path.length === 1 && path[0] === \"tagRenderings\";\n\n  if (isTagRenderingBlock) {\n    schema = { ...schema };\n    schema.description = undefined;\n  }\n\n  const subparts: ConfigMeta = state.getSchemaStartingWith(schema.path)\n    .filter(part => part.path.length - 1 === schema.path.length);\n  /**\n   * Store the _indices_\n   */\n  export let values: UIEventSource<number[]> = new UIEventSource<number[]>([]);\n\n  const currentValue = <[]>state.getCurrentValueFor(path);\n  if (currentValue) {\n    if (!Array.isArray(currentValue)) {\n      console.error(\"SchemaBaseArray for path\", path, \"expected an array as initial value, but got a\", typeof currentValue, currentValue);\n    } else {\n      values.setData(currentValue.map((_, i) => i));\n    }\n  }\n  let createdItems = values.data.length;\n  let messages = state.messagesFor(path)\n\n\n  function createItem(valueToSet?: any) {\n    values.data.push(createdItems);\n    if (valueToSet) {\n      state.getStoreFor([...path, createdItems]).setData(valueToSet);\n    }\n    createdItems++;\n    values.ping();\n    \n    if(isTagRenderingBlock){\n      if(typeof valueToSet === \"string\"){\n        // THis is very broken state.highlightedItem.setData({path: [...path, createdItems], schema})\n      }else{\n        state.highlightedItem.setData({path: [...path, createdItems], schema})\n      }\n    }\n  }\n\n  function fusePath(i: number, subpartPath: string[]): (string | number)[] {\n    const newPath = [...path, i];\n    const toAdd = [...subpartPath];\n    for (const part of path) {\n      if (toAdd[0] === part) {\n        toAdd.splice(0, 1);\n      }\n    }\n    newPath.push(...toAdd);\n    return newPath;\n  }\n\n  function del(i) {\n    const index = i;\n    console.log(\"Deleting\", index);\n    values.data.splice(index, 1);\n    values.ping();\n\n    const store = <UIEventSource<[]>>state.getStoreFor(path);\n    store.data.splice(index, 1);\n    store.setData(Utils.NoNull(store.data));\n    state.configuration.ping();\n  }\n\n  function swap(indexA, indexB) {\n    const valueA = values.data[indexA];\n    const valueB = values.data[indexB];\n\n    values.data[indexA] = valueB;\n    values.data[indexB] = valueA;\n    values.ping();\n\n    const store = <UIEventSource<[]>>state.getStoreFor(path);\n    const svalueA = store.data[indexA];\n    const svalueB = store.data[indexB];\n    store.data[indexA] = svalueB;\n    store.data[indexB] = svalueA;\n    store.ping();\n    state.configuration.ping();\n  }\n\n  function moveTo(currentIndex, targetIndex) {\n    const direction = currentIndex > targetIndex ? -1 : +1;\n    do {\n      swap(currentIndex, currentIndex + direction);\n      currentIndex = currentIndex + direction;\n    } while (currentIndex !== targetIndex);\n  }\n\n  function schemaForMultitype() {\n    const sch = {...schema}\n    sch.hints.typehint = undefined\n    return sch\n  }\n\n\n</script>\n<div class=\"pl-2\">\n  <h3>{schema.path.at(-1)}</h3>\n\n  {#if subparts.length > 0}\n        <span class=\"subtle\">\n            {schema.description}\n        </span>\n  {/if}\n\n  {#if $values.length === 0}\n    No values are defined\n    {#if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message}/>\n      {/each}\n    {/if}\n  {:else if subparts.length === 0}\n    <!-- We need an array of values, so we use the typehint of the _parent_ element as field -->\n    {#each $values as value, i (value)}\n      <div class=\"flex w-full\">\n        <SchemaBasedField {state} {schema} path={[...path, value]} />\n        <button class=\"border-black border rounded-full p-1 w-fit h-fit\"\n                on:click={() => {del(i)}}>\n          <TrashIcon class=\"w-4 h-4\" />\n        </button>\n      </div>\n    {/each}\n  {:else}\n    {#each $values as value, i (value)}\n\n      {#if !isTagRenderingBlock}\n        <div class=\"flex justify-between items-center\">\n          <h3 class=\"m-0\">{singular} {value}</h3>\n          <button class=\"border-black border rounded-full p-1 w-fit h-fit\"\n                  on:click={() => {del(i)}}>\n            <TrashIcon class=\"w-4 h-4\" />\n          </button>\n        </div>\n      {/if}\n      <div class=\"border border-black\">\n        {#if isTagRenderingBlock}\n          <QuestionPreview {state} path={[...path, value]} {schema}>\n            <button on:click={() => {del(i)}}>\n              <TrashIcon class=\"w-4 h-4\" />\n              Delete this question\n            </button>\n\n            {#if i > 0}\n              <button on:click={() => {moveTo(i, 0)}}>\n                Move to front\n              </button>\n\n              <button on:click={() => {swap(i, i-1)}}>\n                Move up\n              </button>\n            {/if}\n            {#if i + 1 < $values.length}\n              <button on:click={() => {swap(i, i+1)}}>\n                Move down\n              </button>\n              <button on:click={() => {moveTo(i, $values.length-1)}}>\n                Move to back\n              </button>\n            {/if}\n\n          </QuestionPreview>\n          {:else if schema.hints.types}\n         <SchemaBasedMultiType {state} path={fusePath(value, [])} schema={schemaForMultitype()}/>\n        {:else}\n          {#each subparts as subpart}\n            <SchemaBasedInput {state} path={fusePath(value, subpart.path)} schema={subpart} />\n          {/each}\n        {/if}\n      </div>\n    {/each}\n  {/if}\n  <div class=\"flex\">\n    <button on:click={() => createItem()}>Add {article} {singular}</button>\n    {#if path.length === 1 && path[0] === \"tagRenderings\"}\n      <button on:click={() => {createItem(\"images\");}}>Add a builtin tagRendering</button>\n    {/if}\n    <slot name=\"extra-button\" />\n  </div>\n</div>\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\";\n  import EditLayerState from \"./EditLayerState\";\n  import type {\n    QuestionableTagRenderingConfigJson\n  } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\";\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\";\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\";\n\n  export let schema: ConfigMeta;\n  export let state: EditLayerState;\n  export let path: (string | number)[] = [];\n\n  const configJson: QuestionableTagRenderingConfigJson = {\n    mappings: schema.hints.suggestions,\n    multiAnswer: true,\n    id: \"multi_anwser_\"+path.join(\"_\"),\n    question: schema.hints.question\n  }\n  const tags = new UIEventSource({})\n\n  {\n    // Setting the initial value\n    const v = <string[]> state.getCurrentValueFor(path)\n    if(v && v.length > 0){\n      tags.setData({value: v.join(\";\")})\n    }\n  }\n  \n  tags.addCallbackD(tags => {\n    const values = tags[\"value\"]?.split(\";\")\n    if(!values){\n      return\n    }\n    state.setValueAt(path, values)\n  })\n  \n  const config = new TagRenderingConfig(configJson)\n</script>\n\n<div>\n  <TagRenderingEditable {config} selectedElement={undefined} showQuestionIfUnknown={true} {state} {tags} />\n</div>\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\";\n  import SchemaBasedField from \"./SchemaBasedField.svelte\";\n  import EditLayerState from \"./EditLayerState\";\n  import SchemaBasedArray from \"./SchemaBasedArray.svelte\";\n  import SchemaBasedMultiType from \"./SchemaBasedMultiType.svelte\";\n  import ArrayMultiAnswer from \"./ArrayMultiAnswer.svelte\";\n\n  export let schema: ConfigMeta;\n  export let state: EditLayerState;\n  export let path: (string | number)[] = [];\n  \n</script>\n{#if schema.hints?.typehint?.endsWith(\"[]\")}\n  <!-- We cheat a bit here by matching this 'magical' type... -->\n  <SchemaBasedArray {path} {state} {schema} />\n{:else if schema.type === \"array\" && schema.hints.multianswer === \"true\"}\n  <ArrayMultiAnswer {path} {state} {schema}/>\n{:else if schema.type === \"array\"}\n  <SchemaBasedArray {path} {state} {schema} />\n{:else if schema.hints.types}\n  <SchemaBasedMultiType {path} {state} {schema} />\n{:else}\n  <SchemaBasedField {path} {state} {schema} />\n{/if}\n","<script lang=\"ts\">/***\n * A 'region' is a collection of properties that can be edited which are somewhat related.\n * They will typically be a subset of some properties\n */\nimport type { ConfigMeta } from \"./configMeta\";\nimport EditLayerState from \"./EditLayerState\";\nimport SchemaBasedInput from \"./SchemaBasedInput.svelte\";\n\nexport let state: EditLayerState;\nexport let configs: ConfigMeta[];\nexport let title: string | undefined = undefined;\n\nexport let path: (string | number)[] = [];\n\n</script>\n{#if configs === undefined}\n  Bug: 'Region' received 'undefined'\n{:else if configs.length === 0}\n  Bug: Region received empty list as configuration\n{:else if title}\n  <div class=\"w-full flex flex-col\">\n    <h3>{title}</h3>\n    <div class=\"pl-2 border border-black flex flex-col gap-y-1 w-full\">\n      <slot name=\"description\" />\n      {#each configs as config}\n        <SchemaBasedInput {state} path={config.path} schema={config} />\n      {/each}\n    </div>\n  </div>\n{:else}\n  <div class=\"pl-2 flex flex-col gap-y-1 w-full\">\n    {#each configs as config}\n      <SchemaBasedInput {state} path={path.concat(config.path)} schema={config} />\n    {/each}\n  </div>\n{/if}\n\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\";\n  import { ExclamationIcon } from \"@rgossiaux/svelte-heroicons/solid\";\n\n  export let firstPaths: Set<string>;\n  export let state: EditLayerState;\n  let messagesCount = state.messages.map(msgs => msgs.filter(msg => {\n    const pth = msg.context.path\n    return firstPaths.has(pth[0]) || (pth.length > 1 && firstPaths.has(pth[1]));\n  }).length);\n\n</script>\n\n{#if $messagesCount > 0}\n  <span class=\"alert flex w-min\">\n    <ExclamationIcon class=\"w-6 h-6\" />\n    {$messagesCount}\n  </span>\n{/if}\n","<script lang=\"ts\">\n\n  import EditLayerState from \"./EditLayerState\";\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import type { TagConfigJson } from \"../../Models/ThemeConfig/Json/TagConfigJson\";\n  import { TagUtils } from \"../../Logic/Tags/TagUtils\";\n  import FromHtml from \"../Base/FromHtml.svelte\";\n  import { PencilIcon } from \"@rgossiaux/svelte-heroicons/outline\";\n  import Region from \"./Region.svelte\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import configs from \"../../assets/schemas/questionabletagrenderingconfigmeta.json\";\n  import { Utils } from \"../../Utils\";\n  import ToSvelte from \"../Base/ToSvelte.svelte\";\n  import { VariableUiElement } from \"../Base/VariableUIElement\";\n\n  export let state: EditLayerState;\n  export let path: (string | number)[];\n  let tag: UIEventSource<TagConfigJson> = state.getStoreFor([...path, \"if\"]);\n  let parsedTag = tag.map(t => t ? TagUtils.Tag(t) : undefined);\n  let exampleTags = parsedTag.map(pt => {\n    if (!pt) {\n      return {};\n    }\n    const keys = pt.usedKeys();\n    const o = {};\n    for (const key of keys) {\n      o[key] = \"value\";\n    }\n    return o;\n  });\n  let uploadableOnly: boolean = true;\n\n  let thenText: UIEventSource<Record<string, string>> = state.getStoreFor([...path, \"then\"])\n  let thenTextEn = thenText   .mapD(translation => typeof translation === \"string\" ? translation : translation[\"en\"] )\n  let editMode = Object.keys($thenText).length === 0;\n\n  let mappingConfigs: ConfigMeta[] = configs.filter(c => c.path[0] === \"mappings\")\n    .map(c => <ConfigMeta>Utils.Clone(c))\n    .map(c => {\n      c.path.splice(0, 1);\n      return c;\n    })\n    .filter(c => c.path.length == 1 && c.hints.group !== \"hidden\");\n</script>\n\n<button on:click={() => {editMode = !editMode}}>\n  <PencilIcon class=\"w-6 h-6\" />\n</button>\n\n{#if editMode}\n  <div class=\"flex justify-between items-start w-full\">\n    <div class=\"flex flex-col w-full\">\n      <Region {state} configs={mappingConfigs} path={path} />\n    </div>\n\n    <slot name=\"delete\" />\n  </div>\n{:else}\n  <div>\n    {#if Object.keys($thenText).length > 0}\n      <b>\n        {$thenTextEn}\n      </b>\n    {:else}\n      <i>No then is set</i>\n    {/if}\n    <FromHtml src={ $parsedTag?.asHumanString(false, false, $exampleTags)} />\n  </div>\n{/if}\n\n","<script lang=\"ts\">/**\n * Little helper class to deal with choosing a builtin tagRendering or defining one yourself.\n * Breaks the ideology that everything should be schema based\n */\nimport EditLayerState from \"./EditLayerState\";\nimport type { ConfigMeta } from \"./configMeta\";\nimport type {\n  MappingConfigJson,\n  QuestionableTagRenderingConfigJson\n} from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\";\nimport TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\";\nimport TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\";\nimport { Store, UIEventSource } from \"../../Logic/UIEventSource\";\nimport * as questions from \"../../assets/generated/layers/questions.json\";\nimport MappingInput from \"./MappingInput.svelte\";\nimport { TrashIcon } from \"@rgossiaux/svelte-heroicons/outline\";\nimport questionableTagRenderingSchemaRaw from \"../../assets/schemas/questionabletagrenderingconfigmeta.json\";\nimport SchemaBasedField from \"./SchemaBasedField.svelte\";\nimport Region from \"./Region.svelte\";\n\nexport let state: EditLayerState;\nexport let schema: ConfigMeta;\nexport let path: (string | number)[];\nconst store = state.getStoreFor(path);\nlet value = store.data\nconsole.log(\">> initial value\", value, store)\n\n/**\n * Allows the theme builder to create 'writable' themes.\n * Should only be enabled for 'tagrenderings' in the theme, if the source is OSM\n */\nlet allowQuestions: Store<boolean> = (state.configuration.mapD(config => path.at(0) === \"tagRenderings\" && config.source?.geoJson === undefined))\n\n\nlet mappingsBuiltin: MappingConfigJson[] = [];\nlet perLabel: Record<string, MappingConfigJson> = {}\nfor (const tr of questions.tagRenderings) {\n  let description = tr[\"description\"] ?? tr[\"question\"] ?? \"No description available\";\n  description = description[\"en\"] ?? description;\n  if(tr[\"labels\"]){\n    const labels: string[] = tr[\"labels\"]\n    for (const label of labels) {\n      let labelMapping: MappingConfigJson = perLabel[label] \n      \n      if(!labelMapping){\n        labelMapping = {\n          if: \"value=\"+label,\n          then: {\n            en: \"Builtin collection <b>\"+label+\"</b>:\"\n          }\n        }\n        perLabel[label] = labelMapping\n        mappingsBuiltin.push(labelMapping)\n      }\n      labelMapping.then.en = labelMapping.then.en + \"<div>\"+description+\"</div>\"\n    }\n  }\n  \n  \n  mappingsBuiltin.push({\n    if: \"value=\" + tr[\"id\"],\n    then: {\n      \"en\": \"Builtin <b>\" + tr[\"id\"] + \"</b> <div class='subtle'>\" + description + \"</div>\"\n    }\n  });\n}\n\n\nconst configBuiltin = new TagRenderingConfig(<QuestionableTagRenderingConfigJson>{\n  question: \"Which builtin element should be shown?\",\n  mappings: mappingsBuiltin\n});\n\n\nconst tags = new UIEventSource({ value });\n\ntags.addCallbackAndRunD(tgs => {\n  store.setData(tgs[\"value\"]);\n});\n\nlet mappings: UIEventSource<MappingConfigJson[]> = state.getStoreFor([...path, \"mappings\"]);\n\nconst topLevelItems: Record<string, ConfigMeta> = {};\nfor (const item of questionableTagRenderingSchemaRaw) {\n  if (item.path.length === 1) {\n    topLevelItems[item.path[0]] = <ConfigMeta>item;\n  }\n}\n\nfunction initMappings() {\n  if (mappings.data === undefined) {\n    mappings.setData([]);\n  }\n}\n\nconst items = new Set([\"question\", \"questionHint\", \"multiAnswer\", \"freeform\", \"render\", \"condition\", \"metacondition\", \"mappings\", \"icon\"]);\nconst ignored = new Set([\"labels\", \"description\", \"classes\"]);\n\nconst freeformSchema = <ConfigMeta[]>questionableTagRenderingSchemaRaw\n  .filter(schema => schema.path.length == 2 && schema.path[0] === \"freeform\" && ($allowQuestions || schema.path[1] === \"key\"));\nconst missing: string[] = questionableTagRenderingSchemaRaw.filter(schema => schema.path.length >= 1 && !items.has(schema.path[0]) && !ignored.has(schema.path[0])).map(schema => schema.path.join(\".\"));\nconsole.log({state})\n\n</script>\n\n{#if typeof $store === \"string\"}\n  <div class=\"flex low-interaction\">\n    <TagRenderingEditable config={configBuiltin} selectedElement={undefined} showQuestionIfUnknown={true} {state}\n                          {tags} />\n    <slot name=\"upper-right\" />\n  </div>\n{:else}\n  <div class=\"flex flex-col w-full p-1 gap-y-1\">\n    <div class=\"flex justify-end\">\n      <slot name=\"upper-right\" />\n    </div>\n    {#if $allowQuestions}\n      <SchemaBasedField startInEditModeIfUnset={true} {state} path={[...path,\"question\"]} schema={topLevelItems[\"question\"]} />\n      <SchemaBasedField {state} path={[...path,\"questionHint\"]} schema={topLevelItems[\"questionHint\"]} />\n    {/if}\n    {#each ($mappings ?? []) as mapping, i (mapping)}\n      <div class=\"flex interactive w-full\">\n        <MappingInput {state} path={path.concat([\"mappings\", i])}>\n          <button slot=\"delete\" class=\"rounded-full no-image-background\" on:click={() => { \n            initMappings();\n                      mappings.data.splice(i, 1)\n                      mappings.ping()\n                   }}>\n            <TrashIcon class=\"w-4 h-4\" />\n          </button>\n        </MappingInput>\n      </div>\n    {/each}\n\n    <button class=\"primary\"\n            on:click={() =>{ initMappings(); mappings.data.push({if: undefined, then: {}}); mappings.ping()} }>\n      Add a predefined option\n    </button>\n\n    <SchemaBasedField {state} path={[...path,\"multiAnswer\"]} schema={topLevelItems[\"multiAnswer\"]} />\n\n    <h3>Text field and input element configuration</h3>\n    <div class=\"border-l pl-2 border-gray-800 border-dashed\">\n      <SchemaBasedField {state} path={[...path,\"render\"]} schema={topLevelItems[\"render\"]} />\n      <Region {state} {path} configs={freeformSchema} />\n      <SchemaBasedField {state} path={[...path,\"icon\"]} schema={topLevelItems[\"icon\"]} />\n\n    </div>\n\n    <SchemaBasedField {state} path={[...path,\"condition\"]} schema={topLevelItems[\"condition\"]} />\n    <SchemaBasedField {state} path={[...path,\"metacondition\"]} schema={topLevelItems[\"metacondition\"]} />\n\n    {#each missing as field}\n      <SchemaBasedField {state} path={[...path,field]} schema={topLevelItems[field]} />\n    {/each}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\";\n\n  export let messages: ConversionMessage[];\n</script>\n\n{#if messages.length === 0}\n<div class=\"thanks\">\n  No errors, warnings or messages\n</div>\n  {/if}\n\n{#each messages as message}\n  <li>\n    {message.level}\n    <span class=\"literal-code\">{message.context.path.join(\".\")}</span>\n    {message.message}\n    <span class=\"literal-code\">\n                {message.context.operation.join(\".\")}\n              </span>\n  </li>\n{/each}\n","<script lang=\"ts\">\n  import type { HighlightedTagRendering } from \"./EditLayerState\";\n  import EditLayerState from \"./EditLayerState\";\n  import layerSchemaRaw from \"../../assets/schemas/layerconfigmeta.json\";\n  import Region from \"./Region.svelte\";\n  import TabbedGroup from \"../Base/TabbedGroup.svelte\";\n  import { Store, UIEventSource } from \"../../Logic/UIEventSource\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import { Utils } from \"../../Utils\";\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\";\n  import ErrorIndicatorForRegion from \"./ErrorIndicatorForRegion.svelte\";\n  import { ChevronRightIcon } from \"@rgossiaux/svelte-heroicons/solid\";\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\";\n  import FloatOver from \"../Base/FloatOver.svelte\";\n  import TagRenderingInput from \"./TagRenderingInput.svelte\";\n  import FromHtml from \"../Base/FromHtml.svelte\";\n  import AllTagsPanel from \"../Popup/AllTagsPanel.svelte\";\n  import QuestionPreview from \"./QuestionPreview.svelte\";\n  import ShowConversionMessages from \"./ShowConversionMessages.svelte\";\n\n  const layerSchema: ConfigMeta[] = <any>layerSchemaRaw;\n\n  export let state: EditLayerState;\n  let messages = state.messages;\n  let hasErrors = messages.mapD((m: ConversionMessage[]) => m.filter(m => m.level === \"error\").length);\n  const configuration = state.configuration;\n\n  const allNames = Utils.Dedup(layerSchema.map(meta => meta.hints.group));\n\n  const perRegion: Record<string, ConfigMeta[]> = {};\n  for (const region of allNames) {\n    perRegion[region] = layerSchema.filter(meta => meta.hints.group === region);\n  }\n\n\n  let title: Store<string> = state.getStoreFor([\"id\"]);\n  const wl = window.location;\n  const baseUrl = wl.protocol + \"//\" + wl.host + \"/theme.html?userlayout=\";\n\n  function firstPathsFor(...regionNames: string[]): Set<string> {\n    const pathNames = new Set<string>();\n    for (const regionName of regionNames) {\n      const region: ConfigMeta[] = perRegion[regionName];\n      for (const configMeta of region) {\n        pathNames.add(configMeta.path[0]);\n      }\n    }\n    return pathNames;\n\n  }\n\n  function configForRequiredField(id: string): ConfigMeta {\n    let config = layerSchema.find(config => config.path.length === 1 && config.path[0] === id);\n    config = Utils.Clone(config);\n    config.required = true;\n    config.hints.ifunset = undefined;\n    return config;\n  }\n\n  let requiredFields = [\"id\", \"name\", \"description\", \"source\"];\n  let currentlyMissing = state.configuration.map(config => {\n    if (!config) {\n      return [];\n    }\n    const missing = [];\n    for (const requiredField of requiredFields) {\n      if (!config[requiredField]) {\n        missing.push(requiredField);\n      }\n    }\n    return missing;\n  });\n\n  let highlightedItem: UIEventSource<HighlightedTagRendering> = state.highlightedItem;\n</script>\n<div class=\"h-screen flex flex-col\">\n\n  <div class=\"w-full flex justify-between my-2\">\n    <slot />\n    {#if $title === undefined}\n      <h3>Creating a new layer</h3>\n    {:else}\n      <h3>Editing layer {$title}</h3>\n    {/if}\n    {#if $currentlyMissing.length > 0}\n      <div class=\"w-16\"/> <!-- Empty div, simply hide this -->\n    {:else if $hasErrors > 0}\n      <div class=\"alert\">{$hasErrors} errors detected</div>\n    {:else}\n      <a class=\"primary button\" href={baseUrl+state.server.layerUrl(title.data)} target=\"_blank\" rel=\"noopener\">\n        Try it out\n        <ChevronRightIcon class=\"h-6 w-6 shrink-0\" />\n      </a>\n    {/if}\n  </div>\n\n  {#if $currentlyMissing.length > 0}\n\n    {#each requiredFields as required}\n      <SchemaBasedInput {state}\n                        schema={configForRequiredField(required)}\n                        path={[required]} />\n    {/each}\n  {:else}\n    <div class=\"m4 h-full overflow-y-auto\">\n      <TabbedGroup>\n        <div slot=\"title0\" class=\"flex\">General properties\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"Basic\")} {state} />\n        </div>\n        <div class=\"flex flex-col\" slot=\"content0\">\n          <Region {state} configs={perRegion[\"Basic\"]} />\n\n        </div>\n\n\n        <div slot=\"title1\" class=\"flex\">Information panel (questions and answers)\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"title\",\"tagrenderings\",\"editing\")} {state} />\n        </div>\n        <div slot=\"content1\">\n          <QuestionPreview path={[\"title\"]} {state} schema={perRegion[\"title\"][0]}></QuestionPreview>\n          <Region configs={perRegion[\"tagrenderings\"]} {state} title=\"Popup contents\" />\n          <Region configs={perRegion[\"editing\"]} {state} title=\"Other editing elements\" />\n        </div>\n\n        <div slot=\"title2\">\n          Creating a new point\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"presets\")} {state} />\n        </div>\n\n        <div slot=\"content2\">\n          <Region {state} configs={perRegion[\"presets\"]} />\n        </div>\n\n        <div slot=\"title3\" class=\"flex\">Rendering on the map\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"linerendering\",\"pointrendering\")} {state} />\n        </div>\n        <div slot=\"content3\">\n          <Region configs={perRegion[\"linerendering\"]} {state} />\n          <Region configs={perRegion[\"pointrendering\"]} {state} />\n        </div>\n\n        <div slot=\"title4\" class=\"flex\">Advanced functionality\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"advanced\",\"expert\")} {state} />\n        </div>\n        <div slot=\"content4\">\n          <Region configs={perRegion[\"advanced\"]} {state} />\n          <Region configs={perRegion[\"expert\"]} {state} />\n        </div>\n        <div slot=\"title5\">Configuration file</div>\n        <div slot=\"content5\">\n          <div>\n            Below, you'll find the raw configuration file in `.json`-format.\n            This is mostly for debugging purposes\n          </div>\n          <div class=\"literal-code\">\n            <FromHtml src={JSON.stringify($configuration, null, \"  \").replaceAll(\"\\n\",\"</br>\")} />\n          </div>\n\n          <ShowConversionMessages messages={$messages} />\n          <div>\n            The testobject (which is used to render the questions in the 'information panel' item has the following\n            tags:\n          </div>\n\n          <AllTagsPanel tags={state.testTags}></AllTagsPanel>\n        </div>\n      </TabbedGroup>\n    </div>\n    {#if $highlightedItem !== undefined}\n      <FloatOver on:close={() => highlightedItem.setData(undefined)}>\n        <div class=\"mt-16\">\n          <TagRenderingInput path={$highlightedItem.path} {state} schema={$highlightedItem.schema} />\n        </div>\n      </FloatOver>\n    {/if}\n\n  {/if}\n</div>\n","<script>\nexport let color = \"#000000\"\n</script>\n <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"375px\" height=\"375px\" viewBox=\"0 0 375 375\" version=\"1.1\">   <g id=\"surface1\">     <path style=\"fill: none !important;stroke-width:3.262002;stroke-linecap:round;stroke-linejoin:round;stroke:{color};stroke-opacity:0.266355;stroke-miterlimit:4;\" d=\"M 22.390901 12.010996 C 22.390901 17.743283 17.744366 22.390319 12.012079 22.391069 C 6.279792 22.39157 1.632005 17.745285 1.631004 12.012998 C 1.630003 6.280711 6.275788 1.632674 12.008075 1.630922 C 17.740362 1.629421 22.388899 6.274705 22.390901 12.006992 \" transform=\"matrix(15.610589,0,0,15.610589,0,0.00128032)\"/>     <path style=\"fill: none !important;stroke-width:3.262002;stroke-linecap:round;stroke-linejoin:round;stroke:{color};stroke-opacity:1;stroke-miterlimit:4;\" d=\"M 22.390901 12.010996 C 22.390901 14.870133 21.211564 17.602903 19.130895 19.564212 C 17.050476 21.525521 14.252896 22.541458 11.398763 22.372803 \" transform=\"matrix(15.610589,0,0,15.610589,0,0.00128032)\"/>   </g> </svg>","import { Utils } from \"../../Utils\"\nimport Constants from \"../../Models/Constants\"\nimport { LayerConfigJson } from \"../../Models/ThemeConfig/Json/LayerConfigJson\"\nimport { Store } from \"../../Logic/UIEventSource\"\n\nexport default class StudioServer {\n    private readonly url: string\n    private readonly _userId: Store<number>\n\n    constructor(url: string, userId: Store<number>) {\n        this.url = url\n        this._userId = userId\n    }\n\n    public async fetchOverview(): Promise<\n        {\n            id: string\n            owner: number\n            category: \"layers\" | \"themes\"\n        }[]\n    > {\n        const uid = this._userId.data\n        const { allFiles } = <{ allFiles: string[] }>(\n            await Utils.downloadJson(this.url + \"/overview\")\n        )\n        const layerOverview: {\n            id: string\n            owner: number | undefined\n            category: \"layers\" | \"themes\"\n        }[] = []\n        for (let file of allFiles) {\n            let parts = file.split(\"/\")\n            let owner = Number(parts[0])\n            if (!isNaN(owner)) {\n                parts.splice(0, 1)\n                file = file.substring(file.indexOf(\"/\") + 1)\n            } else {\n                owner = undefined\n            }\n            const category = <\"layers\" | \"themes\">parts[0]\n            const id = file.substring(file.lastIndexOf(\"/\") + 1, file.length - \".json\".length)\n            if (Constants.priviliged_layers.indexOf(<any>id) > 0) {\n                continue\n            }\n            layerOverview.push({ id, owner, category })\n        }\n        return layerOverview\n    }\n\n    async fetch(\n        layerId: string,\n        category: \"layers\" | \"themes\",\n        uid?: number\n    ): Promise<LayerConfigJson> {\n        try {\n            return await Utils.downloadJson(this.urlFor(layerId, category, uid))\n        } catch (e) {\n            return undefined\n        }\n    }\n\n    async update(id: string, config: string, category: \"layers\" | \"themes\") {\n        if (id === undefined || id === \"\") {\n            return\n        }\n        await fetch(this.urlFor(id, category), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json;charset=utf-8\",\n            },\n            body: config,\n        })\n    }\n\n    public layerUrl(id: string) {\n        return this.urlFor(id, \"layers\")\n    }\n\n    public urlFor(id: string, category: \"layers\" | \"themes\", uid?: number) {\n        uid ??= this._userId.data\n        const uidStr = uid !== undefined ? \"/\" + uid : \"\"\n        return `${this.url}${uidStr}/${category}/${id}/${id}.json`\n    }\n}\n","<script lang=\"ts\">\n  import { UIEventSource } from \"../../Logic/UIEventSource\";\n  import { OsmConnection } from \"../../Logic/Osm/OsmConnection\";\n  import Marker from \"../Map/Marker.svelte\";\n  import NextButton from \"../Base/NextButton.svelte\";\n  import { AllKnownLayouts } from \"../../Customizations/AllKnownLayouts\";\n  import { AllSharedLayers } from \"../../Customizations/AllSharedLayers\";\n  import { createEventDispatcher } from \"svelte\";\n\n  export let info: { id: string, owner: number };\n  export let category: \"layers\" | \"themes\";\n  export let osmConnection: OsmConnection;\n\n  let displayName = UIEventSource.FromPromise(osmConnection.getInformationAboutUser(info.owner)).mapD(response => response.display_name);\n\n  let selfId = osmConnection.userDetails.mapD(ud => ud.uid)\n  function fetchIconDescription(layerId): any {\n    if (category === \"themes\") {\n      return AllKnownLayouts.allKnownLayouts.get(layerId).icon;\n    }\n    return AllSharedLayers.getSharedLayersConfigs().get(layerId)?._layerIcon;\n  }\n\n  const dispatch = createEventDispatcher<{ layerSelected: string }>();\n\n</script>\n\n<NextButton clss=\"small\" on:click={() => dispatch(\"layerSelected\", info)}>\n  <div class=\"w-4 h-4 mr-1\">\n    <Marker icons={fetchIconDescription(info.id)} />\n  </div>\n  <b class=\"px-1\">  {info.id}</b>\n  {#if info.owner && info.owner !== $selfId}\n    (made by {$displayName ?? info.owner})\n  {/if}\n</NextButton>\n","<script lang=\"ts\">\n  import { OsmConnection } from \"../../Logic/Osm/OsmConnection\";\n  import EditItemButton from \"./EditItemButton.svelte\";\n\n  export let layerIds: { id: string, owner: number }[];\n  export let category: \"layers\" | \"themes\" = \"layers\";\n  export let osmConnection: OsmConnection;\n\n</script>\n\n{#if layerIds.length > 0}\n  <slot name=\"title\" />\n  <div class=\"flex flex-wrap\">\n    {#each Array.from(layerIds) as layer}\n      <EditItemButton info={layer} {category} {osmConnection} on:layerSelected/>\n    {/each}\n  </div>\n{/if}\n","<script lang=\"ts\">\n\n  import BackButton from \"../Base/BackButton.svelte\";\n  import NextButton from \"../Base/NextButton.svelte\";\n  import { createEventDispatcher } from \"svelte\";\n\n  const dispatch = createEventDispatcher<{ back, next }>();\n  export let islast = false;\n  export let isFirst = false\n</script>\n\n\n<div class=\"flex flex-col h-full w-full justify-between\">\n\n  <div class=\"overflow-y-auto\">\n    <slot />\n  </div>\n\n  <div class=\"flex w-full\">\n    {#if !isFirst}\n    <BackButton clss=\"w-full\" on:click={() => dispatch(\"back\")}>\n      Back\n    </BackButton>\n      {:else}\n      <div class=\"w-full\"/>\n      {/if}\n    <NextButton clss=\"primary w-full\" on:click={() => dispatch(\"next\")}>\n      {#if islast}\n        Finish\n      {:else}\n        Next\n      {/if}\n    </NextButton>\n  </div>\n\n</div>\n","<script lang=\"ts\">\n\n  import nmd from \"nano-markdown\";\n  import { createEventDispatcher } from \"svelte\";\n  import WalkthroughStep from \"./WalkthroughStep.svelte\";\n  import FromHtml from \"../Base/FromHtml.svelte\";\n\n  /**\n   * Markdown\n   */\n  export let pages: string[];\n  console.log(\"Walkthrough pages are\", pages)\n\n  let currentPage: number = 0;\n\n  const dispatch = createEventDispatcher<{ done }>();\n\n  function step(incr: number) {\n    if (incr > 0 && currentPage + 1 === pages.length) {\n      dispatch(\"done\");\n      currentPage = 0\n      return\n    }\n    currentPage = Math.min(Math.max(0, currentPage + incr), pages.length);\n  }\n\n</script>\n\n\n<WalkthroughStep on:back={() => step(-1)} on:next={() => step(1)} isFirst={currentPage === 0} islast={currentPage + 1 === pages.length}>\n  <FromHtml src={nmd(pages[currentPage])} />\n</WalkthroughStep>\n\n","<script lang=\"ts\">\n  import { EditThemeState } from \"./EditLayerState\";\n  import type { ConfigMeta } from \"./configMeta\";\n  import { ChevronRightIcon } from \"@rgossiaux/svelte-heroicons/solid\";\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\";\n  import TabbedGroup from \"../Base/TabbedGroup.svelte\";\n  import ShowConversionMessages from \"./ShowConversionMessages.svelte\";\n  import Region from \"./Region.svelte\";\n\n  export let state: EditThemeState;\n  let schema: ConfigMeta[] = state.schema.filter(schema => schema.path.length > 0);\n  let config = state.configuration;\n  let messages = state.messages;\n  let hasErrors = messages.map((m: ConversionMessage[]) => m.filter(m => m.level === \"error\").length);\n  let title = state.getStoreFor([\"id\"]);\n  const wl = window.location;\n  const baseUrl = wl.protocol + \"//\" + wl.host + \"/theme.html?userlayout=\";\n\n  const perRegion: Record<string, ConfigMeta[]> = {};\n  for (const schemaElement of schema) {\n    const key = schemaElement.hints.group ?? \"no-group\";\n    const list = perRegion[key] ?? (perRegion[key] = []);\n    list.push(schemaElement);\n  }\nconsole.log({perRegion, schema})\n</script>\n<div class=\"flex flex-col h-screen\">\n  <div class=\"w-full flex justify-between my-2\">\n    <slot />\n    <h3>Editing theme {$title}</h3>\n    {#if $hasErrors > 0}\n      <div class=\"alert\">{$hasErrors} errors detected</div>\n    {:else}\n      <a class=\"primary button\" href={baseUrl+state.server.urlFor($title, \"themes\")} target=\"_blank\" rel=\"noopener\">\n        Try it out\n        <ChevronRightIcon class=\"h-6 w-6 shrink-0\" />\n      </a>\n    {/if}\n  </div>\n\n  <div class=\"m4 h-full overflow-y-auto\">\n    {Object.keys(perRegion).join(\";\")}\n    <TabbedGroup>\n      <div slot=\"title0\">Basic properties</div>\n      <div slot=\"content0\">\n        <Region configs={perRegion[\"basic\"]} path={[]} {state} title=\"Basic properties\"/>\n        <Region configs={perRegion[\"start_location\"]} path={[]} {state} title=\"Start location\"/>\n        \n      </div>\n      \n      <div slot=\"title1\">Layers</div>\n      <div slot=\"content1\">\n        <Region configs={perRegion[\"layers\"]} path={[]} {state} />\n        \n      </div>\n      <div slot=\"title2\">Feature switches</div>\n      <div slot=\"content2\">\n        <Region configs={perRegion[\"feature_switches\"]} path={[]} {state}></Region>\n      </div>\n\n      <div slot=\"title3\">Advanced options</div>\n      <div slot=\"content3\">\n        <Region configs={perRegion[\"advanced\"]} path={[]} {state}></Region>\n      </div>\n      \n      <div slot=\"title4\">Configuration file</div>\n      <div slot=\"content4\">\n        <div class=\"literal-code\">\n          {JSON.stringify($config)}\n        </div>\n\n        <ShowConversionMessages messages={$messages}></ShowConversionMessages>\n\n      </div>\n    </TabbedGroup>\n  </div>\n\n</div>\n","<script lang=\"ts\">\n\n\n  import NextButton from \"./Base/NextButton.svelte\";\n  import { Store, UIEventSource } from \"../Logic/UIEventSource\";\n  import EditLayerState, { EditThemeState } from \"./Studio/EditLayerState\";\n  import EditLayer from \"./Studio/EditLayer.svelte\";\n  import Loading from \"../assets/svg/Loading.svelte\";\n  import StudioServer from \"./Studio/StudioServer\";\n  import LoginToggle from \"./Base/LoginToggle.svelte\";\n  import { OsmConnection } from \"../Logic/Osm/OsmConnection\";\n  import { QueryParameters } from \"../Logic/Web/QueryParameters\";\n\n  import layerSchemaRaw from \"../../src/assets/schemas/layerconfigmeta.json\";\n  import layoutSchemaRaw from \"../../src/assets/schemas/layoutconfigmeta.json\";\n\n  import If from \"./Base/If.svelte\";\n  import BackButton from \"./Base/BackButton.svelte\";\n  import ChooseLayerToEdit from \"./Studio/ChooseLayerToEdit.svelte\";\n  import { LocalStorageSource } from \"../Logic/Web/LocalStorageSource\";\n  import FloatOver from \"./Base/FloatOver.svelte\";\n  import Walkthrough from \"./Walkthrough/Walkthrough.svelte\";\n  import * as intro from \"../assets/studio_introduction.json\";\n  import { QuestionMarkCircleIcon } from \"@babeard/svelte-heroicons/mini\";\n  import type { ConfigMeta } from \"./Studio/configMeta\";\n  import EditTheme from \"./Studio/EditTheme.svelte\";\n  import * as meta from \"../../package.json\"\n  \n  export let studioUrl = window.location.hostname === \"127.0.0.2\" ? \"http://127.0.0.1:1235\" : \"https://studio.mapcomplete.org\";\n\n  let osmConnection = new OsmConnection(new OsmConnection({\n    oauth_token: QueryParameters.GetQueryParameter(\n      \"oauth_token\",\n      undefined,\n      \"Used to complete the login\"\n    )\n  }));\n  const createdBy = osmConnection.userDetails.data.name;\n  const uid = osmConnection.userDetails.map(ud => ud?.uid);\n  const studio = new StudioServer(studioUrl, uid);\n\n  let layersWithErr = UIEventSource.FromPromiseWithErr(studio.fetchOverview());\n  let layers: Store<{ owner: number }[]> = layersWithErr.mapD(l => l.success?.filter(l => l.category === \"layers\"));\n  let selfLayers = layers.mapD(ls => ls.filter(l => l.owner === uid.data), [uid]);\n  let otherLayers = layers.mapD(ls => ls.filter(l => l.owner !== undefined && l.owner !== uid.data), [uid]);\n  let officialLayers = layers.mapD(ls => ls.filter(l => l.owner === undefined), [uid]);\n  \n  \n  let themes: Store<{ owner: number }[]> = layersWithErr.mapD(l => l.success?.filter(l => l.category === \"themes\"));\n  let selfThemes = themes.mapD(ls => ls.filter(l => l.owner === uid.data), [uid]);\n  let otherThemes = themes.mapD(ls => ls.filter(l => l.owner !== undefined && l.owner !== uid.data), [uid]);\n  let officialThemes = themes.mapD(ls => ls.filter(l => l.owner === undefined), [uid]);\n\n  let state: undefined | \"edit_layer\" | \"edit_theme\" | \"editing_layer\" | \"editing_theme\" | \"loading\" = undefined;\n\n  const layerSchema: ConfigMeta[] = <any>layerSchemaRaw;\n  let editLayerState = new EditLayerState(layerSchema, studio, osmConnection);\n\n  const layoutSchema: ConfigMeta[] = <any>layoutSchemaRaw;\n  let editThemeState = new EditThemeState(layoutSchema, studio);\n\n  let layerId = editLayerState.configuration.map(layerConfig => layerConfig.id);\n\n  let showIntro = UIEventSource.asBoolean(LocalStorageSource.Get(\"studio-show-intro\", \"true\"));\nconst version = meta.version\n  async function editLayer(event: Event) {\n    const layerId: {owner: number, id: string} = event.detail;\n    state = \"loading\";\n    editLayerState.startSavingUpdates(false)\n    editLayerState.configuration.setData(await studio.fetch(layerId.id, \"layers\", layerId.owner));\n    editLayerState.startSavingUpdates()\n    state = \"editing_layer\";\n  }\n\n  async function editTheme(event: Event) {\n    const id : {id: string, owner: number} = event.detail;\n    state = \"loading\";\n    editThemeState.startSavingUpdates(false)\n    editThemeState.configuration.setData(await studio.fetch(id.id, \"themes\", id.owner));\n    editThemeState.startSavingUpdates()\n    state = \"editing_theme\";\n  }\n\n  async function createNewLayer() {\n    state = \"loading\";\n    const initialLayerConfig = {\n      credits: createdBy,\n      minzoom: 15,\n      pointRendering: [\n        {\n          location: [\"point\", \"centroid\"],\n          marker: [{\n            icon: \"circle\",\n            color: \"white\"\n          }]\n        }\n      ],\n      tagRenderings: [\"images\"],\n      lineRendering: [{\n        width: 1,\n        color: \"blue\"\n      }]\n    };\n    editLayerState.configuration.setData(initialLayerConfig);\n    editLayerState.startSavingUpdates()\n    state = \"editing_layer\";\n  }\n\n\n</script>\n\n<If condition={layersWithErr.map(d => d?.error !== undefined)}>\n  <div>\n    <div class=\"alert\">\n      Something went wrong while contacting the MapComplete Studio Server: {$layersWithErr[\"error\"]}\n    </div>\n    The server might be offline. Please:\n    <ul>\n\n      <li>\n        Try again in a few minutes\n      </li>\n      <li>\n        Contact <a href=\"https://app.element.io/#/room/#MapComplete:matrix.org\">the MapComplete community via the\n        chat.</a> Someone might be able to help you\n      </li>\n      <li>\n        File <a href=\"https://github.com/pietervdvn/MapComplete/issues\">an issue</a>\n      </li>\n      <li>\n        Contact the devs via <a href=\"mailto:info@posteo.net\">email</a>\n      </li>\n    </ul>\n  </div>\n  <LoginToggle ignoreLoading={true} slot=\"else\" state={{osmConnection}}>\n    <div slot=\"not-logged-in\">\n      <NextButton clss=\"primary\" on:click={() => osmConnection.AttemptLogin()}>\n        Please log in to use MapComplete Studio\n      </NextButton>\n    </div>\n    {#if state === undefined}\n      <div class=\"m-4\">\n        <h1>MapComplete Studio</h1>\n        <div class=\"w-full flex flex-col\">\n\n          <NextButton on:click={() => state = \"edit_layer\"}>\n            Edit an existing layer\n          </NextButton>\n          <NextButton on:click={() => createNewLayer()}>\n            Create a new layer\n          </NextButton>\n          <NextButton on:click={() => state = \"edit_theme\"}>\n            Edit a theme\n          </NextButton>\n          <NextButton on:click={() => {editThemeState.configuration.setData({}); state = \"editing_theme\"}}>\n            Create a new theme\n          </NextButton>\n          <NextButton clss=\"small\" on:click={() => {showIntro.setData(true)} }>\n            <QuestionMarkCircleIcon class=\"w-6 h-6\" />\n            Show the introduction again\n          </NextButton>\n        </div>\n        <span class=\"subtle\">MapComplete version {version}</span>\n      </div>\n    {:else if state === \"edit_layer\"}\n\n      <div class=\"flex flex-col m-4\">\n        <BackButton clss=\"small p-1\" imageClass=\"w-8 h-8\" on:click={() => {state =undefined}}>MapComplete Studio\n        </BackButton>\n        <h2>Choose a layer to edit</h2>\n        <ChooseLayerToEdit {osmConnection} layerIds={$selfLayers} on:layerSelected={editLayer}>\n          <h3 slot=\"title\">Your layers</h3>\n        </ChooseLayerToEdit>\n        <h3>Layers by other contributors</h3>\n        <ChooseLayerToEdit {osmConnection} layerIds={$otherLayers} on:layerSelected={editLayer} />\n\n        <h3>Official layers by MapComplete</h3>\n        <ChooseLayerToEdit  {osmConnection} layerIds={$officialLayers} on:layerSelected={editLayer} />\n      </div>\n    {:else if state === \"edit_theme\"}\n\n      <div class=\"flex flex-col m-4\">\n        <BackButton clss=\"small p-1\" imageClass=\"w-8 h-8\" on:click={() => {state =undefined}}>MapComplete Studio\n        </BackButton>\n        <h2>Choose a theme to edit</h2>\n        <ChooseLayerToEdit {osmConnection} layerIds={$selfThemes} on:layerSelected={editTheme}>\n          <h3 slot=\"title\">Your themes</h3>\n        </ChooseLayerToEdit>\n        <h3>Themes by other contributors</h3>\n        <ChooseLayerToEdit {osmConnection} layerIds={$otherThemes} on:layerSelected={editTheme} />\n        <h3>Official themes by MapComplete</h3>\n        <ChooseLayerToEdit {osmConnection} layerIds={$officialThemes} on:layerSelected={editTheme} />\n\n      </div>\n    {:else if state === \"loading\"}\n      <div class=\"w-8 h-8\">\n        <Loading />\n      </div>\n    {:else if state === \"editing_layer\"}\n      <EditLayer state={editLayerState}>\n        <BackButton clss=\"small p-1\" imageClass=\"w-8 h-8\" on:click={() => {state =undefined}}>MapComplete Studio\n        </BackButton>\n      </EditLayer>\n    {:else if state === \"editing_theme\"}\n      <EditTheme state={editThemeState} >\n        <BackButton clss=\"small p-1\" imageClass=\"w-8 h-8\" on:click={() => {state =undefined}}>MapComplete Studio\n        </BackButton>\n      </EditTheme>\n    {/if}\n  </LoginToggle>\n</If>\n\n\n{#if $showIntro}\n  <FloatOver on:close={() => {showIntro.setData(false)}}>\n    <div class=\"flex p-4 h-full\">\n      <Walkthrough pages={intro.sections} on:done={() => {showIntro.setData(false)}} />\n    </div>\n  </FloatOver>\n\n{/if}\n","import SvelteUIElement from \"./Base/SvelteUIElement\"\nimport StudioGUI from \"./StudioGUI.svelte\"\n\nexport default class StudioGui {\n    public setup() {\n        new SvelteUIElement(StudioGUI, {}).AttachTo(\"main\")\n    }\n}\n\nnew StudioGui().setup()\n"],"names":["ctx","insert","target","svg","anchor","append","path","_AllSharedLayers","sharedLayers","layer","known_layers","parsed","LayerConfig","e","Utils","AllSharedLayers","__publicField","EditJsonState","schema","server","category","UIEventSource","layerId","hl","config","id","enabled","entry","i","breadcrumb","key","store","v","value","noInitialSync","unsync","sch","part","origConfig","schemas","isUndefined","lastBreadcrumb","msgs","msg","pth","layers","questions","sharedQuestions","question","state","prepare","context","ConversionContext","EditLayerState","osmConnection","_","lBefore","cleaned","Pipe","PrepareLayer","ValidateLayer","trs","tr","qtr","_a","_b","_d","_c","_e","_f","TagUtils","EditThemeState","PrepareTheme","ValidateTheme","ConfigMetaUtils","configMeta","t","t1_value","div1","div0","current","dirty","set_data","t1","message","$$props","create_if_block_2","if_block1","create_if_block_1","div","span","each_blocks","span1","b","span0","t3","t3_value","mightBeBoolean","type","startInEditModeIfUnset","isTranslation","rendervalue","helperArgs","inline","inlineValue","configJson","nmd","err","messages","TagRenderingConfig","startValue","startInEditMode","tags","onDestroy","tgs","t_value","create_if_block_4","ImmutableStore","tagrenderingeditable_changes","fromhtml_changes","create_if_block_5","create_if_block_3","div2","h3","each_blocks_1","perId","tagRendering","questions.tagRenderings","label","configs","x","c","description","click_handler","t2_value","t0","t0_value","t2","if_block0","if_block2","create_if_block","defaultOption","hasBooleanOption","types","lastIsString","opt","chosenOption","existingValue","hasOverride","possibleTypes","outer","optionalMatches","numberOfMatches","requiredAttribute","a","directValue","subSchemas","subpath","$$invalidate","oldOption","o","cleanPath","p","crumble","button","schemabasedmultitype_changes","questionpreview_changes","schemabasedinput_changes","button0","button1","create_if_block_6","create_if_block_8","schemabasedfield_changes","create_if_block_9","title","singular","article","isTagRenderingBlock","subparts","values","currentValue","createdItems","createItem","valueToSet","fusePath","subpartPath","newPath","toAdd","del","index","swap","indexA","indexB","valueA","valueB","svalueA","svalueB","moveTo","currentIndex","targetIndex","direction","schemaForMultitype","$values","show_if","if_block","firstPaths","messagesCount","parsedTag","exampleTags","pt","keys","thenText","thenTextEn","translation","editMode","$thenText","mappingConfigs","schemabasedfield0_changes","schemabasedfield1_changes","schemabasedfield2_changes","schemabasedfield3_changes","schemabasedfield4_changes","mappinginput_changes","allowQuestions","mappingsBuiltin","perLabel","labels","labelMapping","configBuiltin","mappings","topLevelItems","item","questionableTagRenderingSchemaRaw","initMappings","items","ignored","freeformSchema","$allowQuestions","missing","t4_value","t6_value","li","t4","t6","region_changes","region0_changes","region1_changes","div3","alltagspanel_changes","tagrenderinginput_changes","layerSchema","layerSchemaRaw","hasErrors","m","configuration","allNames","meta","perRegion","region","wl","baseUrl","firstPathsFor","regionNames","pathNames","regionName","configForRequiredField","requiredFields","currentlyMissing","requiredField","highlightedItem","g","path0","path1","color","StudioServer","url","userId","allFiles","layerOverview","file","parts","owner","Constants","uid","uidStr","info","displayName","response","selfId","ud","fetchIconDescription","AllKnownLayouts","dispatch","createEventDispatcher","layerIds","islast","isFirst","click_handler_1","walkthroughstep_changes","pages","currentPage","step","incr","back_handler","next_handler","t5_value","t5","schemaElement","ul","h2","h30","h31","h1","walkthrough","Walkthrough","intro.sections","studioUrl","OsmConnection","QueryParameters","createdBy","studio","layersWithErr","l","selfLayers","ls","otherLayers","officialLayers","themes","selfThemes","otherThemes","officialThemes","editLayerState","layoutSchema","layoutSchemaRaw","editThemeState","layerConfig","showIntro","LocalStorageSource","version","meta.version","editLayer","event","editTheme","createNewLayer","initialLayerConfig","click_handler_3","func","d","StudioGui","SvelteUIElement","StudioGUI"],"mappings":"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"}