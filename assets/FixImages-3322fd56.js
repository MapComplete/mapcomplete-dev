var Mh=Object.defineProperty;var Lh=(n,e,t)=>e in n?Mh(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var w=(n,e,t)=>(Lh(n,typeof e!="symbol"?e+"":e,t),t);import{U as P}from"./Utils-7814fca2.js";import{F as Xe,a as J,d as en,L as $l,C as K,b as qt,V as hs,c as Ph,Q as Wh}from"./Tr-ccc3fee0.js";import{B as Si,l as Ke,I as Eo,S as Re,i as Ee,s as Ie,G as V,H as B,b as D,X as v,J as ie,d as xe,f as H,z as R,K as Le,n as X,h as Ae,L as Pe,M as se,N as We,O as E,o as Sl,t as pe,u as As,g as ye,v as ks,e as Ko,r as pa,c as Fe,m as je,j as Oe,P as Jh,q as Vh,T as Hh,k as ga}from"./tw-merge-84eb4a03.js";import{U as vn,a as Uh,I as qs,S as Gh}from"./LocalStorageSource-7f535556.js";import{c as O,g as Dl}from"./_commonjsHelpers-87174ba5.js";import{C as zh}from"./Constants-c67befae.js";var cs={},Yh={get exports(){return cs},set exports(n){cs=n}};/**
 * @license
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash exports="node" include="clone,merge,isEmpty,isArray,compact,each" -d`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(n,e){(function(){var t,i="4.15.0",s=200,o="Expected a function",r="__lodash_hash_undefined__",u=1,l=2,a=1/0,c=9007199254740991,d="[object Arguments]",m="[object Array]",f="[object Boolean]",y="[object Date]",g="[object Error]",x="[object Function]",k="[object GeneratorFunction]",A="[object Map]",_="[object Number]",S="[object Object]",T="[object Promise]",q="[object RegExp]",I="[object Set]",$="[object String]",N="[object Symbol]",G="[object WeakMap]",U="[object ArrayBuffer]",z="[object DataView]",ae="[object Float32Array]",ee="[object Float64Array]",Ge="[object Int8Array]",Me="[object Int16Array]",tt="[object Int32Array]",ze="[object Uint8Array]",L="[object Uint8ClampedArray]",te="[object Uint16Array]",he="[object Uint32Array]",ge=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,_e=/^\w*$/,Y=/^\./,ce=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,be=/[\\^$.*+?()[\]{}|]/g,fe=/\\(\\)?/g,Be=/\w*$/,He=/^\[object .+?Constructor\]$/,ke=/^(?:0|[1-9]\d*)$/,Z={};Z[ae]=Z[ee]=Z[Ge]=Z[Me]=Z[tt]=Z[ze]=Z[L]=Z[te]=Z[he]=!0,Z[d]=Z[m]=Z[U]=Z[f]=Z[z]=Z[y]=Z[g]=Z[x]=Z[A]=Z[_]=Z[S]=Z[q]=Z[I]=Z[$]=Z[G]=!1;var oe={};oe[d]=oe[m]=oe[U]=oe[z]=oe[f]=oe[y]=oe[ae]=oe[ee]=oe[Ge]=oe[Me]=oe[tt]=oe[A]=oe[_]=oe[S]=oe[q]=oe[I]=oe[$]=oe[N]=oe[ze]=oe[L]=oe[te]=oe[he]=!0,oe[g]=oe[x]=oe[G]=!1;var Rt=typeof O=="object"&&O&&O.Object===Object&&O,kn=typeof self=="object"&&self&&self.Object===Object&&self,Ve=Rt||kn||Function("return this")(),Tt=e&&!e.nodeType&&e,Ct=Tt&&!0&&n&&!n.nodeType&&n,si=Ct&&Ct.exports===Tt,oi=si&&Rt.process,qe=function(){try{return oi&&oi.binding("util")}catch{}}(),bt=qe&&qe.isTypedArray;function Et(h,p){return h.set(p[0],p[1]),h}function qn(h,p){return h.add(p),h}function ln(h,p,b){switch(b.length){case 0:return h.call(p);case 1:return h.call(p,b[0]);case 2:return h.call(p,b[0],b[1]);case 3:return h.call(p,b[0],b[1],b[2])}return h.apply(p,b)}function $n(h,p){for(var b=-1,C=h?h.length:0;++b<C&&p(h[b],b,h)!==!1;);return h}function Ht(h,p){for(var b=-1,C=p.length,j=h.length;++b<C;)h[j+b]=p[b];return h}function nt(h,p,b,C){var j=-1,F=h?h.length:0;for(C&&F&&(b=h[++j]);++j<F;)b=p(b,h[j],j,h);return b}function un(h,p){for(var b=-1,C=h?h.length:0;++b<C;)if(p(h[b],b,h))return!0;return!1}function ri(h){return function(p){return p==null?t:p[h]}}function ai(h,p){for(var b=-1,C=Array(h);++b<h;)C[b]=p(b);return C}function Sn(h){return function(p){return h(p)}}function li(h,p){return h==null?t:h[p]}function Ut(h){var p=!1;if(h!=null&&typeof h.toString!="function")try{p=!!(h+"")}catch{}return p}function dn(h){var p=-1,b=Array(h.size);return h.forEach(function(C,j){b[++p]=[j,C]}),b}function ui(h,p){return function(b){return h(p(b))}}function Dn(h){var p=-1,b=Array(h.size);return h.forEach(function(C){b[++p]=C}),b}var Ks=Array.prototype,hd=Function.prototype,Fi=Object.prototype,Zs=Ve["__core-js_shared__"],Fr=function(){var h=/[^.]+$/.exec(Zs&&Zs.keys&&Zs.keys.IE_PROTO||"");return h?"Symbol(src)_1."+h:""}(),ji=hd.toString,lt=Fi.hasOwnProperty,cd=ji.call(Object),hn=Fi.toString,pd=RegExp("^"+ji.call(lt).replace(be,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),jr=si?Ve.Buffer:t,Or=Ve.Symbol,Oi=Ve.Uint8Array,Br=ui(Object.getPrototypeOf,Object),gd=Object.create,Nr=Fi.propertyIsEnumerable,fd=Ks.splice,Mr=Object.getOwnPropertySymbols,md=jr?jr.isBuffer:t,Lr=ui(Object.keys,Object),Pr=Math.max,Qs=En(Ve,"DataView"),di=En(Ve,"Map"),Xs=En(Ve,"Promise"),eo=En(Ve,"Set"),to=En(Ve,"WeakMap"),hi=En(Object,"create"),yd=!Nr.call({valueOf:1},"valueOf"),bd=pn(Qs),wd=pn(di),vd=pn(Xs),_d=pn(eo),Td=pn(to),Bi=Or?Or.prototype:t,ci=Bi?Bi.valueOf:t,Wr=Bi?Bi.toString:t;function le(){}function cn(h){var p=-1,b=h?h.length:0;for(this.clear();++p<b;){var C=h[p];this.set(C[0],C[1])}}function Cd(){this.__data__=hi?hi(null):{}}function xd(h){return this.has(h)&&delete this.__data__[h]}function Ad(h){var p=this.__data__;if(hi){var b=p[h];return b===r?t:b}return lt.call(p,h)?p[h]:t}function kd(h){var p=this.__data__;return hi?p[h]!==t:lt.call(p,h)}function qd(h,p){var b=this.__data__;return b[h]=hi&&p===t?r:p,this}cn.prototype.clear=Cd,cn.prototype.delete=xd,cn.prototype.get=Ad,cn.prototype.has=kd,cn.prototype.set=qd;function It(h){var p=-1,b=h?h.length:0;for(this.clear();++p<b;){var C=h[p];this.set(C[0],C[1])}}function $d(){this.__data__=[]}function Sd(h){var p=this.__data__,b=Mi(p,h);if(b<0)return!1;var C=p.length-1;return b==C?p.pop():fd.call(p,b,1),!0}function Dd(h){var p=this.__data__,b=Mi(p,h);return b<0?t:p[b][1]}function Rd(h){return Mi(this.__data__,h)>-1}function Ed(h,p){var b=this.__data__,C=Mi(b,h);return C<0?b.push([h,p]):b[C][1]=p,this}It.prototype.clear=$d,It.prototype.delete=Sd,It.prototype.get=Dd,It.prototype.has=Rd,It.prototype.set=Ed;function Ft(h){var p=-1,b=h?h.length:0;for(this.clear();++p<b;){var C=h[p];this.set(C[0],C[1])}}function Id(){this.__data__={hash:new cn,map:new(di||It),string:new cn}}function Fd(h){return Li(this,h).delete(h)}function jd(h){return Li(this,h).get(h)}function Od(h){return Li(this,h).has(h)}function Bd(h,p){return Li(this,h).set(h,p),this}Ft.prototype.clear=Id,Ft.prototype.delete=Fd,Ft.prototype.get=jd,Ft.prototype.has=Od,Ft.prototype.set=Bd;function Ni(h){var p=-1,b=h?h.length:0;for(this.__data__=new Ft;++p<b;)this.add(h[p])}function Nd(h){return this.__data__.set(h,r),this}function Md(h){return this.__data__.has(h)}Ni.prototype.add=Ni.prototype.push=Nd,Ni.prototype.has=Md;function xt(h){this.__data__=new It(h)}function Ld(){this.__data__=new It}function Pd(h){return this.__data__.delete(h)}function Wd(h){return this.__data__.get(h)}function Jd(h){return this.__data__.has(h)}function Vd(h,p){var b=this.__data__;if(b instanceof It){var C=b.__data__;if(!di||C.length<s-1)return C.push([h,p]),this;b=this.__data__=new Ft(C)}return b.set(h,p),this}xt.prototype.clear=Ld,xt.prototype.delete=Pd,xt.prototype.get=Wd,xt.prototype.has=Jd,xt.prototype.set=Vd;function Jr(h,p){var b=it(h)||Fn(h)?ai(h.length,String):[],C=b.length,j=!!C;for(var F in h)(p||lt.call(h,F))&&!(j&&(F=="length"||ro(F,C)))&&b.push(F);return b}function no(h,p,b){(b!==t&&!In(h[p],b)||typeof p=="number"&&b===t&&!(p in h))&&(h[p]=b)}function Vr(h,p,b){var C=h[p];(!(lt.call(h,p)&&In(C,b))||b===t&&!(p in h))&&(h[p]=b)}function Mi(h,p){for(var b=h.length;b--;)if(In(h[b][0],p))return b;return-1}function Hd(h,p){return h&&oo(p,Gt(p),h)}function Rn(h,p,b,C,j,F,M){var W;if(C&&(W=F?C(h,j,F,M):C(h)),W!==t)return W;if(!At(h))return h;var Q=it(h);if(Q){if(W=qh(h),!p)return Kr(h,W)}else{var ve=$t(h),me=ve==x||ve==k;if(lo(h))return dh(h,p);if(ve==S||ve==d||me&&!F){if(Ut(h))return F?h:{};if(W=$h(me?{}:h),!p)return yh(h,Hd(W,h))}else{if(!oe[ve])return F?h:{};W=Sh(h,ve,Rn,p)}}M||(M=new xt);var Se=M.get(h);if(Se)return Se;if(M.set(h,W),!Q)var Ne=b?Ch(h):Gt(h);return $n(Ne||h,function(Ze,Ye){Ne&&(Ye=Ze,Ze=h[Ye]),Vr(W,Ye,Rn(Ze,p,b,C,Ye,h,M))}),W}function Ud(h){return At(h)?gd(h):{}}var Gd=wh(Yd),zd=vh();function Yd(h,p){return h&&zd(h,p,Gt)}function Hr(h,p){p=Pi(p,h)?[p]:Yr(p);for(var b=0,C=p.length;h!=null&&b<C;)h=h[Ji(p[b++])];return b&&b==C?h:t}function Kd(h,p,b){var C=p(h);return it(h)?C:Ht(C,b(h))}function Zd(h){return hn.call(h)}function Qd(h,p){return h!=null&&p in Object(h)}function io(h,p,b,C,j){return h===p?!0:h==null||p==null||!At(h)&&!jn(p)?h!==h&&p!==p:Xd(h,p,io,b,C,j)}function Xd(h,p,b,C,j,F){var M=it(h),W=it(p),Q=m,ve=m;M||(Q=$t(h),Q=Q==d?S:Q),W||(ve=$t(p),ve=ve==d?S:ve);var me=Q==S&&!Ut(h),Se=ve==S&&!Ut(p),Ne=Q==ve;if(Ne&&!me)return F||(F=new xt),M||zi(h)?Zr(h,p,b,C,j,F):_h(h,p,Q,b,C,j,F);if(!(j&l)){var Ze=me&&lt.call(h,"__wrapped__"),Ye=Se&&lt.call(p,"__wrapped__");if(Ze||Ye){var zt=Ze?h.value():h,jt=Ye?p.value():p;return F||(F=new xt),b(zt,jt,C,j,F)}}return Ne?(F||(F=new xt),Th(h,p,b,C,j,F)):!1}function eh(h,p,b,C){var j=b.length,F=j,M=!C;if(h==null)return!F;for(h=Object(h);j--;){var W=b[j];if(M&&W[2]?W[1]!==h[W[0]]:!(W[0]in h))return!1}for(;++j<F;){W=b[j];var Q=W[0],ve=h[Q],me=W[1];if(M&&W[2]){if(ve===t&&!(Q in h))return!1}else{var Se=new xt;if(C)var Ne=C(ve,me,Q,h,p,Se);if(!(Ne===t?io(me,ve,C,u|l,Se):Ne))return!1}}return!0}function th(h){if(!At(h)||Eh(h))return!1;var p=Hi(h)||Ut(h)?pd:He;return p.test(pn(h))}function nh(h){return jn(h)&&Ui(h.length)&&!!Z[hn.call(h)]}function Ur(h){return typeof h=="function"?h:h==null?la:typeof h=="object"?it(h)?oh(h[0],h[1]):sh(h):ua(h)}function ih(h){if(!Wi(h))return Lr(h);var p=[];for(var b in Object(h))lt.call(h,b)&&b!="constructor"&&p.push(b);return p}function Gr(h){if(!At(h))return Ih(h);var p=Wi(h),b=[];for(var C in h)C=="constructor"&&(p||!lt.call(h,C))||b.push(C);return b}function sh(h){var p=Ah(h);return p.length==1&&p[0][2]?ea(p[0][0],p[0][1]):function(b){return b===h||eh(b,h,p)}}function oh(h,p){return Pi(h)&&Xr(p)?ea(Ji(h),p):function(b){var C=oa(b,h);return C===t&&C===p?ra(b,h):io(p,C,t,u|l)}}function zr(h,p,b,C,j){if(h!==p){if(!(it(p)||zi(p)))var F=Gr(p);$n(F||p,function(M,W){if(F&&(W=M,M=p[W]),At(M))j||(j=new xt),rh(h,p,W,b,zr,C,j);else{var Q=C?C(h[W],M,W+"",h,p,j):t;Q===t&&(Q=M),no(h,W,Q)}})}}function rh(h,p,b,C,j,F,M){var W=h[b],Q=p[b],ve=M.get(Q);if(ve){no(h,b,ve);return}var me=F?F(W,Q,b+"",h,p,M):t,Se=me===t;Se&&(me=Q,it(Q)||zi(Q)?it(W)?me=W:ao(W)?me=Kr(W):(Se=!1,me=Rn(Q,!0)):na(Q)||Fn(Q)?Fn(W)?me=ia(W):!At(W)||C&&Hi(W)?(Se=!1,me=Rn(Q,!0)):me=W:Se=!1),Se&&(M.set(Q,me),j(me,Q,C,F,M),M.delete(Q)),no(h,b,me)}function ah(h){return function(p){return Hr(p,h)}}function lh(h,p){return p=Pr(p===t?h.length-1:p,0),function(){for(var b=arguments,C=-1,j=Pr(b.length-p,0),F=Array(j);++C<j;)F[C]=b[p+C];C=-1;for(var M=Array(p+1);++C<p;)M[C]=b[C];return M[p]=F,ln(h,this,M)}}function uh(h){if(typeof h=="string")return h;if(Gi(h))return Wr?Wr.call(h):"";var p=h+"";return p=="0"&&1/h==-a?"-0":p}function Yr(h){return it(h)?h:Fh(h)}function dh(h,p){if(p)return h.slice();var b=new h.constructor(h.length);return h.copy(b),b}function so(h){var p=new h.constructor(h.byteLength);return new Oi(p).set(new Oi(h)),p}function hh(h,p){var b=p?so(h.buffer):h.buffer;return new h.constructor(b,h.byteOffset,h.byteLength)}function ch(h,p,b){var C=p?b(dn(h),!0):dn(h);return nt(C,Et,new h.constructor)}function ph(h){var p=new h.constructor(h.source,Be.exec(h));return p.lastIndex=h.lastIndex,p}function gh(h,p,b){var C=p?b(Dn(h),!0):Dn(h);return nt(C,qn,new h.constructor)}function fh(h){return ci?Object(ci.call(h)):{}}function mh(h,p){var b=p?so(h.buffer):h.buffer;return new h.constructor(b,h.byteOffset,h.length)}function Kr(h,p){var b=-1,C=h.length;for(p||(p=Array(C));++b<C;)p[b]=h[b];return p}function oo(h,p,b,C){b||(b={});for(var j=-1,F=p.length;++j<F;){var M=p[j],W=C?C(b[M],h[M],M,b,h):t;Vr(b,M,W===t?h[M]:W)}return b}function yh(h,p){return oo(h,Qr(h),p)}function bh(h){return lh(function(p,b){var C=-1,j=b.length,F=j>1?b[j-1]:t,M=j>2?b[2]:t;for(F=h.length>3&&typeof F=="function"?(j--,F):t,M&&Dh(b[0],b[1],M)&&(F=j<3?t:F,j=1),p=Object(p);++C<j;){var W=b[C];W&&h(p,W,C,F)}return p})}function wh(h,p){return function(b,C){if(b==null)return b;if(!gn(b))return h(b,C);for(var j=b.length,F=p?j:-1,M=Object(b);(p?F--:++F<j)&&C(M[F],F,M)!==!1;);return b}}function vh(h){return function(p,b,C){for(var j=-1,F=Object(p),M=C(p),W=M.length;W--;){var Q=M[h?W:++j];if(b(F[Q],Q,F)===!1)break}return p}}function Zr(h,p,b,C,j,F){var M=j&l,W=h.length,Q=p.length;if(W!=Q&&!(M&&Q>W))return!1;var ve=F.get(h);if(ve&&F.get(p))return ve==p;var me=-1,Se=!0,Ne=j&u?new Ni:t;for(F.set(h,p),F.set(p,h);++me<W;){var Ze=h[me],Ye=p[me];if(C)var zt=M?C(Ye,Ze,me,p,h,F):C(Ze,Ye,me,h,p,F);if(zt!==t){if(zt)continue;Se=!1;break}if(Ne){if(!un(p,function(jt,fn){if(!Ne.has(fn)&&(Ze===jt||b(Ze,jt,C,j,F)))return Ne.add(fn)})){Se=!1;break}}else if(!(Ze===Ye||b(Ze,Ye,C,j,F))){Se=!1;break}}return F.delete(h),F.delete(p),Se}function _h(h,p,b,C,j,F,M){switch(b){case z:if(h.byteLength!=p.byteLength||h.byteOffset!=p.byteOffset)return!1;h=h.buffer,p=p.buffer;case U:return!(h.byteLength!=p.byteLength||!C(new Oi(h),new Oi(p)));case f:case y:case _:return In(+h,+p);case g:return h.name==p.name&&h.message==p.message;case q:case $:return h==p+"";case A:var W=dn;case I:var Q=F&l;if(W||(W=Dn),h.size!=p.size&&!Q)return!1;var ve=M.get(h);if(ve)return ve==p;F|=u,M.set(h,p);var me=Zr(W(h),W(p),C,j,F,M);return M.delete(h),me;case N:if(ci)return ci.call(h)==ci.call(p)}return!1}function Th(h,p,b,C,j,F){var M=j&l,W=Gt(h),Q=W.length,ve=Gt(p),me=ve.length;if(Q!=me&&!M)return!1;for(var Se=Q;Se--;){var Ne=W[Se];if(!(M?Ne in p:lt.call(p,Ne)))return!1}var Ze=F.get(h);if(Ze&&F.get(p))return Ze==p;var Ye=!0;F.set(h,p),F.set(p,h);for(var zt=M;++Se<Q;){Ne=W[Se];var jt=h[Ne],fn=p[Ne];if(C)var ca=M?C(fn,jt,Ne,p,h,F):C(jt,fn,Ne,h,p,F);if(!(ca===t?jt===fn||b(jt,fn,C,j,F):ca)){Ye=!1;break}zt||(zt=Ne=="constructor")}if(Ye&&!zt){var Yi=h.constructor,Ki=p.constructor;Yi!=Ki&&"constructor"in h&&"constructor"in p&&!(typeof Yi=="function"&&Yi instanceof Yi&&typeof Ki=="function"&&Ki instanceof Ki)&&(Ye=!1)}return F.delete(h),F.delete(p),Ye}function Ch(h){return Kd(h,Gt,Qr)}function xh(){var h=le.iteratee||uo;return h=h===uo?Ur:h,arguments.length?h(arguments[0],arguments[1]):h}function Li(h,p){var b=h.__data__;return Rh(p)?b[typeof p=="string"?"string":"hash"]:b.map}function Ah(h){for(var p=Gt(h),b=p.length;b--;){var C=p[b],j=h[C];p[b]=[C,j,Xr(j)]}return p}function En(h,p){var b=li(h,p);return th(b)?b:t}var Qr=Mr?ui(Mr,Object):da,$t=Zd;(Qs&&$t(new Qs(new ArrayBuffer(1)))!=z||di&&$t(new di)!=A||Xs&&$t(Xs.resolve())!=T||eo&&$t(new eo)!=I||to&&$t(new to)!=G)&&($t=function(h){var p=hn.call(h),b=p==S?h.constructor:t,C=b?pn(b):t;if(C)switch(C){case bd:return z;case wd:return A;case vd:return T;case _d:return I;case Td:return G}return p});function kh(h,p,b){p=Pi(p,h)?[p]:Yr(p);for(var C,j=-1,M=p.length;++j<M;){var F=Ji(p[j]);if(!(C=h!=null&&b(h,F)))break;h=h[F]}if(C)return C;var M=h?h.length:0;return!!M&&Ui(M)&&ro(F,M)&&(it(h)||Fn(h))}function qh(h){var p=h.length,b=h.constructor(p);return p&&typeof h[0]=="string"&&lt.call(h,"index")&&(b.index=h.index,b.input=h.input),b}function $h(h){return typeof h.constructor=="function"&&!Wi(h)?Ud(Br(h)):{}}function Sh(h,p,b,C){var j=h.constructor;switch(p){case U:return so(h);case f:case y:return new j(+h);case z:return hh(h,C);case ae:case ee:case Ge:case Me:case tt:case ze:case L:case te:case he:return mh(h,C);case A:return ch(h,C,b);case _:case $:return new j(h);case q:return ph(h);case I:return gh(h,C,b);case N:return fh(h)}}function ro(h,p){return p=p??c,!!p&&(typeof h=="number"||ke.test(h))&&h>-1&&h%1==0&&h<p}function Dh(h,p,b){if(!At(b))return!1;var C=typeof p;return(C=="number"?gn(b)&&ro(p,b.length):C=="string"&&p in b)?In(b[p],h):!1}function Pi(h,p){if(it(h))return!1;var b=typeof h;return b=="number"||b=="symbol"||b=="boolean"||h==null||Gi(h)?!0:_e.test(h)||!ge.test(h)||p!=null&&h in Object(p)}function Rh(h){var p=typeof h;return p=="string"||p=="number"||p=="symbol"||p=="boolean"?h!=="__proto__":h===null}function Eh(h){return!!Fr&&Fr in h}function Wi(h){var p=h&&h.constructor,b=typeof p=="function"&&p.prototype||Fi;return h===b}function Xr(h){return h===h&&!At(h)}function ea(h,p){return function(b){return b==null?!1:b[h]===p&&(p!==t||h in Object(b))}}function Ih(h){var p=[];if(h!=null)for(var b in Object(h))p.push(b);return p}var Fh=Vi(function(h){h=sa(h);var p=[];return Y.test(h)&&p.push(""),h.replace(ce,function(b,C,j,F){p.push(j?F.replace(fe,"$1"):C||b)}),p});function Ji(h){if(typeof h=="string"||Gi(h))return h;var p=h+"";return p=="0"&&1/h==-a?"-0":p}function pn(h){if(h!=null){try{return ji.call(h)}catch{}try{return h+""}catch{}}return""}function jh(h){for(var p=-1,b=h?h.length:0,C=0,j=[];++p<b;){var F=h[p];F&&(j[C++]=F)}return j}function ta(h,p){var b=it(h)?$n:Gd;return b(h,xh(p,3))}function Vi(h,p){if(typeof h!="function"||p&&typeof p!="function")throw new TypeError(o);var b=function(){var C=arguments,j=p?p.apply(this,C):C[0],F=b.cache;if(F.has(j))return F.get(j);var M=h.apply(this,C);return b.cache=F.set(j,M),M};return b.cache=new(Vi.Cache||Ft),b}Vi.Cache=Ft;function Oh(h){return Rn(h,!1,!0)}function In(h,p){return h===p||h!==h&&p!==p}function Fn(h){return ao(h)&&lt.call(h,"callee")&&(!Nr.call(h,"callee")||hn.call(h)==d)}var it=Array.isArray;function gn(h){return h!=null&&Ui(h.length)&&!Hi(h)}function ao(h){return jn(h)&&gn(h)}var lo=md||ha;function Bh(h){if(gn(h)&&(it(h)||typeof h=="string"||typeof h.splice=="function"||lo(h)||Fn(h)))return!h.length;var p=$t(h);if(p==A||p==I)return!h.size;if(yd||Wi(h))return!Lr(h).length;for(var b in h)if(lt.call(h,b))return!1;return!0}function Hi(h){var p=At(h)?hn.call(h):"";return p==x||p==k}function Ui(h){return typeof h=="number"&&h>-1&&h%1==0&&h<=c}function At(h){var p=typeof h;return!!h&&(p=="object"||p=="function")}function jn(h){return!!h&&typeof h=="object"}function na(h){if(!jn(h)||hn.call(h)!=S||Ut(h))return!1;var p=Br(h);if(p===null)return!0;var b=lt.call(p,"constructor")&&p.constructor;return typeof b=="function"&&b instanceof b&&ji.call(b)==cd}function Gi(h){return typeof h=="symbol"||jn(h)&&hn.call(h)==N}var zi=bt?Sn(bt):nh;function ia(h){return oo(h,aa(h))}function sa(h){return h==null?"":uh(h)}function oa(h,p,b){var C=h==null?t:Hr(h,p);return C===t?b:C}function ra(h,p){return h!=null&&kh(h,p,Qd)}function Gt(h){return gn(h)?Jr(h):ih(h)}function aa(h){return gn(h)?Jr(h,!0):Gr(h)}var Nh=bh(function(h,p,b){zr(h,p,b)});function la(h){return h}function uo(h){return Ur(typeof h=="function"?h:Rn(h,!0))}function ua(h){return Pi(h)?ri(Ji(h)):ah(h)}function da(){return[]}function ha(){return!1}le.compact=jh,le.iteratee=uo,le.keys=Gt,le.keysIn=aa,le.memoize=Vi,le.merge=Nh,le.property=ua,le.toPlainObject=ia,le.clone=Oh,le.eq=In,le.forEach=ta,le.get=oa,le.hasIn=ra,le.identity=la,le.isArguments=Fn,le.isArray=it,le.isArrayLike=gn,le.isArrayLikeObject=ao,le.isBuffer=lo,le.isEmpty=Bh,le.isFunction=Hi,le.isLength=Ui,le.isObject=At,le.isObjectLike=jn,le.isPlainObject=na,le.isSymbol=Gi,le.isTypedArray=zi,le.stubArray=da,le.stubFalse=ha,le.toString=sa,le.each=ta,le.VERSION=i,Ct&&((Ct.exports=le)._=le,Tt._=le)}).call(O)})(Yh,cs);var Kh=ns;function ns(n,e){var t=n&&n.type,i;if(t==="FeatureCollection")for(i=0;i<n.features.length;i++)ns(n.features[i],e);else if(t==="GeometryCollection")for(i=0;i<n.geometries.length;i++)ns(n.geometries[i],e);else if(t==="Feature")ns(n.geometry,e);else if(t==="Polygon")fa(n.coordinates,e);else if(t==="MultiPolygon")for(i=0;i<n.coordinates.length;i++)fa(n.coordinates[i],e);return n}function fa(n,e){if(n.length!==0){ma(n[0],e);for(var t=1;t<n.length;t++)ma(n[t],!e)}}function ma(n,e){for(var t=0,i=0,s=0,o=n.length,r=o-1;s<o;r=s++){var u=(n[s][0]-n[r][0])*(n[r][1]+n[s][1]),l=t+u;i+=Math.abs(t)>=Math.abs(u)?t-l+u:u-l+t,t=l}t+i>=0!=!!e&&n.reverse()}var Io={},Zh={get exports(){return Io},set exports(n){Io=n}};const Qh=[{key:"building",polygon:"all"},{key:"highway",polygon:"whitelist",values:["services","rest_area","escape","elevator"]},{key:"natural",polygon:"blacklist",values:["coastline","cliff","ridge","arete","tree_row"]},{key:"landuse",polygon:"all"},{key:"waterway",polygon:"whitelist",values:["riverbank","dock","boatyard","dam"]},{key:"amenity",polygon:"all"},{key:"leisure",polygon:"all"},{key:"barrier",polygon:"whitelist",values:["city_wall","ditch","hedge","retaining_wall","wall","spikes"]},{key:"railway",polygon:"whitelist",values:["station","turntable","roundhouse","platform"]},{key:"area",polygon:"all"},{key:"boundary",polygon:"all"},{key:"man_made",polygon:"blacklist",values:["cutline","embankment","pipeline"]},{key:"power",polygon:"whitelist",values:["plant","substation","generator","transformer"]},{key:"place",polygon:"all"},{key:"shop",polygon:"all"},{key:"aeroway",polygon:"blacklist",values:["taxiway"]},{key:"tourism",polygon:"all"},{key:"historic",polygon:"all"},{key:"public_transport",polygon:"all"},{key:"office",polygon:"all"},{key:"building:part",polygon:"all"},{key:"military",polygon:"all"},{key:"ruins",polygon:"all"},{key:"area:highway",polygon:"all"},{key:"craft",polygon:"all"},{key:"golf",polygon:"all"},{key:"indoor",polygon:"all"}];(function(n){n.exports=Qh})(Zh);var ne=cs,Zi=Kh,is={};Io.forEach(function(n){if(n.polygon==="all")is[n.key]=!0;else{var e=n.polygon==="whitelist"?"included_values":"excluded_values",t={};n.values.forEach(function(i){t[i]=!0}),is[n.key]={},is[n.key][e]=t}});function Xh(n,e){return(n.version||e.version)&&n.version!==e.version?(+n.version||0)>(+e.version||0)?n:e:ne.merge(n,e)}var ps={};ps=function(n,e,t){e=ne.merge({verbose:!1,flatProperties:!0,uninterestingTags:{source:!0,source_ref:!0,"source:ref":!0,history:!0,attribution:!0,created_by:!0,"tiger:county":!0,"tiger:tlid":!0,"tiger:upload_uuid":!0},polygonFeatures:is,deduplicator:Xh},e);var i;return typeof XMLDocument<"u"&&n instanceof XMLDocument||typeof XMLDocument>"u"&&n.childNodes?i=o(n):i=s(n),i;function s(l){var a=new Array,c=new Array,d=new Array;function m(T){var q=ne.clone(T);q.lat=T.center.lat,q.lon=T.center.lon,q.__is_center_placeholder=!0,a.push(q)}function f(T){var q=ne.clone(T);q.nodes=[];function I($,N,G){var U={type:"node",id:"_"+q.type+"/"+q.id+"bounds"+G,lat:$,lon:N};q.nodes.push(U.id),a.push(U)}I(q.bounds.minlat,q.bounds.minlon,1),I(q.bounds.maxlat,q.bounds.minlon,2),I(q.bounds.maxlat,q.bounds.maxlon,3),I(q.bounds.minlat,q.bounds.maxlon,4),q.nodes.push(q.nodes[0]),q.__is_bounds_placeholder=!0,c.push(q)}function y(T){function q(I,$,N){var G={type:"node",id:N,lat:I,lon:$};a.push(G)}ne.isArray(T.nodes)||(T.nodes=T.geometry.map(function(I){return I!==null?"_anonymous@"+I.lat+"/"+I.lon:"_anonymous@unknown_location"})),T.geometry.forEach(function(I,$){I&&q(I.lat,I.lon,T.nodes[$])})}function g(T){function q($,N,G){var U={type:"node",id:G,lat:$,lon:N};a.push(U)}function I($,N){if(c.some(function(z){return z.type=="way"&&z.id==N}))return;var G={type:"way",id:N,nodes:[]};function U(z,ae){var ee={type:"node",id:"_anonymous@"+z+"/"+ae,lat:z,lon:ae};G.nodes.push(ee.id),a.push(ee)}$.forEach(function(z){z?U(z.lat,z.lon):G.nodes.push(void 0)}),c.push(G)}T.members.forEach(function($,N){$.type=="node"?$.lat&&q($.lat,$.lon,$.ref):$.type=="way"&&$.geometry&&($.ref="_fullGeom"+$.ref,I($.geometry,$.ref))})}for(var x=0;x<l.elements.length;x++)switch(l.elements[x].type){case"node":var k=l.elements[x];a.push(k);break;case"way":var A=ne.clone(l.elements[x]);A.nodes=ne.clone(A.nodes),c.push(A),A.center&&m(A),A.geometry?y(A):A.bounds&&f(A);break;case"relation":var _=ne.clone(l.elements[x]);_.members=ne.clone(_.members),d.push(_);var S=_.members&&_.members.some(function(T){return T.type=="node"&&T.lat||T.type=="way"&&T.geometry&&T.geometry.length>0});_.center&&m(_),S?g(_):_.bounds&&f(_);break}return r(a,c,d)}function o(l){var a=new Array,c=new Array,d=new Array;function m(_,S,T){_.hasAttribute(T)&&(S[T]=_.getAttribute(T))}function f(_,S){var T=ne.clone(_);m(S,T,"lat"),m(S,T,"lon"),T.__is_center_placeholder=!0,a.push(T)}function y(_,S){var T=ne.clone(_);T.nodes=[];function q(I,$,N){var G={type:"node",id:"_"+T.type+"/"+T.id+"bounds"+N,lat:I,lon:$};T.nodes.push(G.id),a.push(G)}q(S.getAttribute("minlat"),S.getAttribute("minlon"),1),q(S.getAttribute("maxlat"),S.getAttribute("minlon"),2),q(S.getAttribute("maxlat"),S.getAttribute("maxlon"),3),q(S.getAttribute("minlat"),S.getAttribute("maxlon"),4),T.nodes.push(T.nodes[0]),T.__is_bounds_placeholder=!0,c.push(T)}function g(_,S){function T(q,I,$){var N={type:"node",id:$,lat:q,lon:I};return a.push(N),N.id}ne.isArray(_.nodes)||(_.nodes=[],ne.each(S,function(q,I){_.nodes.push("_anonymous@"+q.getAttribute("lat")+"/"+q.getAttribute("lon"))})),ne.each(S,function(q,I){q.getAttribute("lat")&&T(q.getAttribute("lat"),q.getAttribute("lon"),_.nodes[I])})}function x(_,S){function T(I,$,N){var G={type:"node",id:N,lat:I,lon:$};a.push(G)}function q(I,$){if(c.some(function(U){return U.type=="way"&&U.id==$}))return;var N={type:"way",id:$,nodes:[]};function G(U,z){var ae={type:"node",id:"_anonymous@"+U+"/"+z,lat:U,lon:z};N.nodes.push(ae.id),a.push(ae)}ne.each(I,function(U){U.getAttribute("lat")?G(U.getAttribute("lat"),U.getAttribute("lon")):N.nodes.push(void 0)}),c.push(N)}ne.each(S,function(I,$){_.members[$].type=="node"?I.getAttribute("lat")&&T(I.getAttribute("lat"),I.getAttribute("lon"),_.members[$].ref):_.members[$].type=="way"&&I.getElementsByTagName("nd").length>0&&(_.members[$].ref="_fullGeom"+_.members[$].ref,q(I.getElementsByTagName("nd"),_.members[$].ref))})}ne.each(l.getElementsByTagName("node"),function(_,S){var T={};ne.each(_.getElementsByTagName("tag"),function(I){T[I.getAttribute("k")]=I.getAttribute("v")});var q={type:"node"};m(_,q,"id"),m(_,q,"lat"),m(_,q,"lon"),m(_,q,"version"),m(_,q,"timestamp"),m(_,q,"changeset"),m(_,q,"uid"),m(_,q,"user"),ne.isEmpty(T)||(q.tags=T),a.push(q)});var k,A;return ne.each(l.getElementsByTagName("way"),function(_,S){var T={},q=[];ne.each(_.getElementsByTagName("tag"),function(N){T[N.getAttribute("k")]=N.getAttribute("v")});var I=!1;ne.each(_.getElementsByTagName("nd"),function(N,G){var U;(U=N.getAttribute("ref"))&&(q[G]=U),!I&&N.getAttribute("lat")&&(I=!0)});var $={type:"way"};m(_,$,"id"),m(_,$,"version"),m(_,$,"timestamp"),m(_,$,"changeset"),m(_,$,"uid"),m(_,$,"user"),q.length>0&&($.nodes=q),ne.isEmpty(T)||($.tags=T),(k=_.getElementsByTagName("center")[0])&&f($,k),I?g($,_.getElementsByTagName("nd")):(A=_.getElementsByTagName("bounds")[0])&&y($,A),c.push($)}),ne.each(l.getElementsByTagName("relation"),function(_,S){var T={},q=[];ne.each(_.getElementsByTagName("tag"),function(N){T[N.getAttribute("k")]=N.getAttribute("v")});var I=!1;ne.each(_.getElementsByTagName("member"),function(N,G){q[G]={},m(N,q[G],"ref"),m(N,q[G],"role"),m(N,q[G],"type"),(!I&&q[G].type=="node"&&N.getAttribute("lat")||q[G].type=="way"&&N.getElementsByTagName("nd").length>0)&&(I=!0)});var $={type:"relation"};m(_,$,"id"),m(_,$,"version"),m(_,$,"timestamp"),m(_,$,"changeset"),m(_,$,"uid"),m(_,$,"user"),q.length>0&&($.members=q),ne.isEmpty(T)||($.tags=T),(k=_.getElementsByTagName("center")[0])&&f($,k),I?x($,_.getElementsByTagName("member")):(A=_.getElementsByTagName("bounds")[0])&&y($,A),d.push($)}),r(a,c,d)}function r(l,a,c){function d(ge,_e){if(typeof _e!="object"&&(_e={}),typeof e.uninterestingTags=="function")return!e.uninterestingTags(ge,_e);for(var Y in ge)if(e.uninterestingTags[Y]!==!0&&!(_e[Y]===!0||_e[Y]===ge[Y]))return!0;return!1}function m(ge){var _e={timestamp:ge.timestamp,version:ge.version,changeset:ge.changeset,user:ge.user,uid:ge.uid};for(var Y in _e)_e[Y]===void 0&&delete _e[Y];return _e}for(var f=new Object,y=new Object,g=0;g<l.length;g++){var x=l[g];f[x.id]!==void 0&&(x=e.deduplicator(x,f[x.id])),f[x.id]=x,typeof x.tags<"u"&&d(x.tags)&&(y[x.id]=!0)}for(var g=0;g<c.length;g++)if(ne.isArray(c[g].members))for(var k=0;k<c[g].members.length;k++)c[g].members[k].type=="node"&&(y[c[g].members[k].ref]=!0);for(var A=new Object,_=new Object,g=0;g<a.length;g++){var S=a[g];if(A[S.id]&&(S=e.deduplicator(S,A[S.id])),A[S.id]=S,ne.isArray(S.nodes))for(var k=0;k<S.nodes.length;k++)typeof S.nodes[k]!="object"&&(_[S.nodes[k]]=!0,S.nodes[k]=f[S.nodes[k]])}var T=new Array;for(var q in f){var x=f[q];(!_[q]||y[q])&&T.push(x)}for(var I=new Array,g=0;g<c.length;g++){var $=c[g];I[$.id]&&($=e.deduplicator($,I[$.id])),I[$.id]=$}var N={node:{},way:{},relation:{}};for(var q in I){var $=I[q];if(!ne.isArray($.members)){e.verbose&&console.warn("Relation",$.type+"/"+$.id,"ignored because it has no members");continue}for(var k=0;k<$.members.length;k++){var G=$.members[k].type,U=$.members[k].ref;if(typeof U!="number"&&(U=U.replace("_fullGeom","")),!N[G]){e.verbose&&console.warn("Relation",$.type+"/"+$.id,"member",G+"/"+U,"ignored because it has an invalid type");continue}typeof N[G][U]>"u"&&(N[G][U]=[]),N[G][U].push({role:$.members[k].role,rel:$.id,reltags:$.tags})}}var z,ae=[];for(g=0;g<T.length;g++){if(typeof T[g].lon>"u"||typeof T[g].lat>"u"){e.verbose&&console.warn("POI",T[g].type+"/"+T[g].id,"ignored because it lacks coordinates");continue}var ee={type:"Feature",id:T[g].type+"/"+T[g].id,properties:{type:T[g].type,id:T[g].id,tags:T[g].tags||{},relations:N.node[T[g].id]||[],meta:m(T[g])},geometry:{type:"Point",coordinates:[+T[g].lon,+T[g].lat]}};T[g].__is_center_placeholder&&(ee.properties.geometry="center"),t?t(ee):ae.push(ee)}for(var Ge=[],Me=[],g=0;g<c.length;g++)if(I[c[g].id]===c[g]){if(typeof c[g].tags<"u"&&(c[g].tags.type=="route"||c[g].tags.type=="waterway")){let _e=function(Y){var ce=!1,be;be=Y.members.filter(function(ke){return ke.type==="way"}),be=be.map(function(ke){var Z=A[ke.ref];if(Z===void 0||Z.nodes===void 0){e.verbose&&console.warn("Route "+Y.type+"/"+Y.id,"tainted by a missing or incomplete  way",ke.type+"/"+ke.ref),ce=!0;return}return{id:ke.ref,role:ke.role,way:Z,nodes:Z.nodes.filter(function(oe){return oe!==void 0?!0:(ce=!0,e.verbose&&console.warn("Route",Y.type+"/"+Y.id,"tainted by a way",ke.type+"/"+ke.ref,"with a missing node"),!1)})}}),be=ne.compact(be);var fe;fe=ho(be);var Be=[];if(Be=ne.compact(fe.map(function(ke){return ne.compact(ke.map(function(Z){return[+Z.lon,+Z.lat]}))})),Be.length==0)return e.verbose&&console.warn("Route",Y.type+"/"+Y.id,"contains no coordinates"),!1;var He={type:"Feature",id:Y.type+"/"+Y.id,properties:{type:Y.type,id:Y.id,tags:Y.tags||{},relations:N[Y.type][Y.id]||[],meta:m(Y)},geometry:{type:Be.length===1?"LineString":"MultiLineString",coordinates:Be.length===1?Be[0]:Be}};return ce&&(e.verbose&&console.warn("Route",Y.type+"/"+Y.id,"is tainted"),He.properties.tainted=!0),He};if(!ne.isArray(c[g].members)){e.verbose&&console.warn("Route",c[g].type+"/"+c[g].id,"ignored because it has no members");continue}if(c[g].members.forEach(function(Y){A[Y.ref]&&!d(A[Y.ref].tags)&&(A[Y.ref].is_skippablerelationmember=!0)}),ee=_e(c[g]),ee===!1){e.verbose&&console.warn("Route relation",c[g].type+"/"+c[g].id,"ignored because it has invalid geometry");continue}t?t(Zi(ee)):Me.push(ee)}if(typeof c[g].tags<"u"&&(c[g].tags.type=="multipolygon"||c[g].tags.type=="boundary")){let Y=function(ce,be){var fe=!1,Be=ze?"way":"relation",He=typeof ce.id=="number"?ce.id:+ce.id.replace("_fullGeom",""),ke;ke=be.members.filter(function(qe){return qe.type==="way"}),ke=ke.map(function(qe){var bt=A[qe.ref];if(bt===void 0||bt.nodes===void 0){e.verbose&&console.warn("Multipolygon",Be+"/"+He,"tainted by a missing or incomplete way",qe.type+"/"+qe.ref),fe=!0;return}return{id:qe.ref,role:qe.role||"outer",way:bt,nodes:bt.nodes.filter(function(Et){return Et!==void 0?!0:(fe=!0,e.verbose&&console.warn("Multipolygon",Be+"/"+He,"tainted by a way",qe.type+"/"+qe.ref,"with a missing node"),!1)})}}),ke=ne.compact(ke);var Z,oe;Z=ho(ke.filter(function(qe){return qe.role==="outer"})),oe=ho(ke.filter(function(qe){return qe.role==="inner"}));var Rt;function kn(qe){var bt=function(Ht,nt){for(var un=0;un<nt.length;un++)if(qn(nt[un],Ht))return!0;return!1},Et=function(Ht){return Ht.map(function(nt){return[+nt.lat,+nt.lon]})},qn=function(Ht,nt){for(var un=Ht[0],ri=Ht[1],ai=!1,Sn=0,li=nt.length-1;Sn<nt.length;li=Sn++){var Ut=nt[Sn][0],dn=nt[Sn][1],ui=nt[li][0],Dn=nt[li][1],Ks=dn>ri!=Dn>ri&&un<(ui-Ut)*(ri-dn)/(Dn-dn)+Ut;Ks&&(ai=!ai)}return ai},ln,$n;for(qe=Et(qe),ln=0;ln<Z.length;ln++)if($n=Et(Z[ln]),bt($n,qe))return ln}Rt=Z.map(function(qe){return[qe]});for(var Ve=0;Ve<oe.length;Ve++){var Tt=kn(oe[Ve]);Tt!==void 0?Rt[Tt].push(oe[Ve]):e.verbose&&console.warn("Multipolygon",Be+"/"+He,"contains an inner ring with no containing outer")}var Ct=[];if(Ct=ne.compact(Rt.map(function(qe){var bt=ne.compact(qe.map(function(Et){if(Et.length<4){e.verbose&&console.warn("Multipolygon",Be+"/"+He,"contains a ring with less than four nodes");return}return ne.compact(Et.map(function(qn){return[+qn.lon,+qn.lat]}))}));if(bt.length==0){e.verbose&&console.warn("Multipolygon",Be+"/"+He,"contains an empty ring cluster");return}return bt})),Ct.length==0)return e.verbose&&console.warn("Multipolygon",Be+"/"+He,"contains no coordinates"),!1;var si="MultiPolygon";Ct.length===1&&(si="Polygon",Ct=Ct[0]);var oi={type:"Feature",id:ce.type+"/"+He,properties:{type:ce.type,id:He,tags:ce.tags||{},relations:N[ce.type][ce.id]||[],meta:m(ce)},geometry:{type:si,coordinates:Ct}};return fe&&(e.verbose&&console.warn("Multipolygon",Be+"/"+He,"is tainted"),oi.properties.tainted=!0),oi};if(!ne.isArray(c[g].members)){e.verbose&&console.warn("Multipolygon",c[g].type+"/"+c[g].id,"ignored because it has no members");continue}for(var tt=0,k=0;k<c[g].members.length;k++)c[g].members[k].role=="outer"?tt++:e.verbose&&c[g].members[k].role!="inner"&&console.warn("Multipolygon",c[g].type+"/"+c[g].id,"member",c[g].members[k].type+"/"+c[g].members[k].ref,'ignored because it has an invalid role: "'+c[g].members[k].role+'"');if(c[g].members.forEach(function(ce){A[ce.ref]&&(ce.role==="outer"&&!d(A[ce.ref].tags,c[g].tags)&&(A[ce.ref].is_skippablerelationmember=!0),ce.role==="inner"&&!d(A[ce.ref].tags)&&(A[ce.ref].is_skippablerelationmember=!0))}),tt==0){e.verbose&&console.warn("Multipolygon relation",c[g].type+"/"+c[g].id,"ignored because it has no outer ways");continue}var ze=!1;tt==1&&!d(c[g].tags,{type:!0})&&(ze=!0);var ee=null;if(!ze)ee=Y(c[g],c[g]);else{var L=c[g].members.filter(function(ce){return ce.role==="outer"})[0];if(L=A[L.ref],L===void 0){e.verbose&&console.warn("Multipolygon relation",c[g].type+"/"+c[g].id,"ignored because outer way",L.type+"/"+L.ref,"is missing");continue}L.is_skippablerelationmember=!0,ee=Y(L,c[g])}if(ee===!1){e.verbose&&console.warn("Multipolygon relation",c[g].type+"/"+c[g].id,"ignored because it has invalid geometry");continue}t?t(Zi(ee)):Me.push(ee)}}for(var g=0;g<a.length;g++)if(A[a[g].id]===a[g]){if(!ne.isArray(a[g].nodes)){e.verbose&&console.warn("Way",a[g].type+"/"+a[g].id,"ignored because it has no nodes");continue}if(!a[g].is_skippablerelationmember){typeof a[g].id!="number"&&(a[g].id=+a[g].id.replace("_fullGeom","")),a[g].tainted=!1,a[g].hidden=!1;var te=new Array;for(k=0;k<a[g].nodes.length;k++)typeof a[g].nodes[k]=="object"?te.push([+a[g].nodes[k].lon,+a[g].nodes[k].lat]):(e.verbose&&console.warn("Way",a[g].type+"/"+a[g].id,"is tainted by an invalid node"),a[g].tainted=!0);if(te.length<=1){e.verbose&&console.warn("Way",a[g].type+"/"+a[g].id,"ignored because it contains too few nodes");continue}var he="LineString";typeof a[g].nodes[0]<"u"&&typeof a[g].nodes[a[g].nodes.length-1]<"u"&&a[g].nodes[0].id===a[g].nodes[a[g].nodes.length-1].id&&(typeof a[g].tags<"u"&&u(a[g].tags)||a[g].__is_bounds_placeholder)&&(he="Polygon",te=[te]);var ee={type:"Feature",id:a[g].type+"/"+a[g].id,properties:{type:a[g].type,id:a[g].id,tags:a[g].tags||{},relations:N.way[a[g].id]||[],meta:m(a[g])},geometry:{type:he,coordinates:te}};a[g].tainted&&(e.verbose&&console.warn("Way",a[g].type+"/"+a[g].id,"is tainted"),ee.properties.tainted=!0),a[g].__is_bounds_placeholder&&(ee.properties.geometry="bounds"),t?t(Zi(ee)):he=="LineString"?Ge.push(ee):Me.push(ee)}}return t?!0:(z={type:"FeatureCollection",features:[]},z.features=z.features.concat(Me),z.features=z.features.concat(Ge),z.features=z.features.concat(ae),e.flatProperties&&z.features.forEach(function(ge){ge.properties=ne.merge(ge.properties.meta,ge.properties.tags,{id:ge.properties.type+"/"+ge.properties.id})}),z=Zi(z),z)}function u(l){var a=e.polygonFeatures;if(typeof a=="function")return a(l);if(l.area==="no")return!1;for(var c in l){var d=l[c],m=a[c];if(!(typeof m>"u")&&d!=="no"&&(m===!0||m.included_values&&m.included_values[d]===!0||m.excluded_values&&m.excluded_values[d]!==!0))return!0}return!1}};function ho(n){for(var e=function(d){return d[0]},t=function(d){return d[d.length-1]},i=function(d,m){return d!==void 0&&m!==void 0&&d.id===m.id},s=[],o,r,u,l,a,c;n.length;)for(o=n.pop().nodes.slice(),s.push(o);n.length&&!i(e(o),t(o));){for(r=e(o),u=t(o),l=0;l<n.length;l++)if(c=n[l].nodes,i(u,e(c))){a=o.push,c=c.slice(1);break}else if(i(u,t(c))){a=o.push,c=c.slice(0,-1).reverse();break}else if(i(r,t(c))){a=o.unshift,c=c.slice(0,-1);break}else if(i(r,e(c))){a=o.unshift,c=c.slice(1).reverse();break}else c=a=null;if(!c)break;n.splice(l,1),a.apply(o,c)}return s}ps.toGeojson=ps;var ec=ps;const Rr=class extends Si{constructor(t,i=3){var o,r,u;super();w(this,"title");w(this,"level");w(this,"id");if(t===void 0)throw"A title should have some content. Undefined is not allowed";typeof t=="string"?this.title=new Xe(t):this.title=t,this.level=i;let s;typeof t=="string"?s=t:t instanceof Xe?s=t.content:P.runningFromConsole||(s=(o=t.ConstructElement())==null?void 0:o.textContent),this.id=((u=(r=s==null?void 0:s.replace(/ /g,"-"))==null?void 0:r.replace(/[?#.;:/]/,""))==null?void 0:u.toLowerCase())??"",this.SetClass(Rr.defaultClassesPerLevel[i]??"")}AsMarkdown(){const t=" "+this.title.AsMarkdown()+" ";return this.level==1?`

`+t+`
`+"=".repeat(t.length)+`

`:this.level==2?`

`+t+`
`+"-".repeat(t.length)+`

`:`

`+"#".repeat(this.level)+t+`

`}InnerConstructElement(){const t=this.title.ConstructElement();if(t===void 0)return;const i=document.createElement("h"+this.level);return i.appendChild(t),t.id=this.id,i}};let et=Rr;w(et,"defaultClassesPerLevel",["","text-3xl font-bold","text-2xl font-bold","text-xl font-bold","text-lg font-bold"]);class $s{}class st extends $s{constructor(t,i){super();w(this,"key");w(this,"value");if(this.key=t,this.value=i,t===void 0||t==="")throw"Invalid key: undefined or empty";if(i===void 0)throw`Invalid value while constructing a Tag with key '${t}': value is undefined`;i==="*"&&console.warn(`Got suspicious tag ${t}=*   ; did you mean ${t}~* ?`)}matchesProperties(t){let i=t[this.key];if(i===void 0&&(this.value===""||this.value===void 0))return!0;if(typeof i!="string"){if(i===!0&&(this.value==="true"||this.value==="yes")||i===!1&&(this.value==="false"||this.value==="no"))return!0;i=""+i}return i===this.value}asOverpass(){return this.value===""?['[!"'+this.key+'"]']:[`["${this.key}"="${this.value}"]`]}asHumanString(t,i,s){let o=this.value;return typeof o!="string"&&(o=JSON.stringify(o)),i&&(o=P.EllipsesAfter(o,25)),(o===""||o===void 0)&&s!==void 0?!s||Object.keys(s).length===0?this.key+"=":(s[this.key]??"")===""?"":"<span class='line-through'>"+this.key+"</span>":t?`<a href='https://wiki.openstreetmap.org/wiki/Key:${this.key}' target='_blank'>${this.key}</a>=<a href='https://wiki.openstreetmap.org/wiki/Tag:${this.key}%3D${this.value}' target='_blank'>${o}</a>`:this.key+"="+o}isUsableAsAnswer(){return!0}shadows(t){return t.key!==void 0&&t.key!==this.key?!1:t.matchesProperties({[this.key]:this.value})}usedKeys(){return[this.key]}usedTags(){return this.value==""?[]:[this]}asChange(){return[{k:this.key,v:this.value}]}optimize(){return this}isNegative(){return!1}visit(t){t(this)}}class ot extends $s{constructor(t){super();w(this,"or");this.or=t}static construct(t){return t.length===1?t[0]:new ot(t)}matchesProperties(t){for(const i of this.or)if(i.matchesProperties(t))return!0;return!1}asOverpass(){const t=[];for(const i of this.or){const s=i.asOverpass();t.push(...s)}return t}asHumanString(t,i,s){return this.or.map(o=>{let r=o.asHumanString(t,i,s);return o.and&&(r="("+r+")"),r}).join(" | ")}isUsableAsAnswer(){return!1}shadows(t){if(t instanceof ot){for(const i of this.or){let s=!1;for(let o=0;o<t.or.length&&!s;o++){let r=t.or[o];s=i.shadows(r)}if(!s)return!1}return!0}return!1}usedKeys(){return[].concat(...this.or.map(t=>t.usedKeys()))}usedTags(){return[].concat(...this.or.map(t=>t.usedTags()))}asChange(t){const i=[];for(const s of this.or)i.push(...s.asChange(t));return i}removePhraseConsideredKnown(t,i){const s=[];for(const o of this.or){if(o instanceof ot)throw"Optimize expressions before using removePhraseConsideredKnown";if(o instanceof we){const r=o.removePhraseConsideredKnown(t,i);if(r===!1)continue;if(r===!0)return!0;s.push(r);continue}if(i&&t.shadows(o))return!0;!i&&o.shadows(t)||s.push(o)}return s.length===0?!1:ot.construct(s)}optimize(){if(this.or.length===0)return!1;const t=this.or.map(r=>r.optimize()).filter(r=>r!==!1);if(t.some(r=>r===!0))return!0;const i=t,s=[];let o=[];for(const r of i)r instanceof ot?s.push(...r.or):r instanceof we?o.push(r):s.push(r);{let r=!1;do{const u=[];e:for(let l of o){for(const a of s){const c=l.removePhraseConsideredKnown(a,!1);if(c===!1)continue e;if(c===!0)return!0;if(c instanceof we){l=c;continue}s.push(c),r=!0;continue e}u.push(l)}o=u}while(r)}if(o.length===1)s.push(o[0]);else if(o.length>1){let r=o[0].and;for(let u=1;u<o.length&&r.length>0;u++){const l=o[u];r=r.filter(a=>l.and.some(c=>c.shadows(a)))}if(r.length===0)s.push(...o);else{const u=[];for(const a of o){const c=a.and.filter(d=>!r.some(m=>m.shadows(d)));u.push(we.construct(c))}r.push(ot.construct(u));const l=new we(r).optimize();if(l===!0)return!0;l===!1||s.push(we.construct(r))}}return s.length===0?!1:de.ContainsOppositeTags(s)?!0:(de.sortFilters(s,!1),ot.construct(s))}isNegative(){return this.or.some(t=>t.isNegative())}visit(t){t(this),this.or.forEach(i=>i.visit(t))}}class Te extends $s{constructor(t,i,s=!1){super();w(this,"key");w(this,"value");w(this,"invert");w(this,"matchesEmpty");this.key=t,this.value=i,this.invert=s,this.matchesEmpty=Te.doesMatch("",this.value)}static doesMatch(t,i){if(t!==void 0)return typeof t=="number"&&(t=""+t),typeof i=="string"?t===i:i.test(t)}static source(t){return typeof t=="string"?t:t.source}asOverpass(){const t=this.invert?"!":"";if(typeof this.key!="string")return[`[~"${this.key.source}"${t}~"${Te.source(this.value)}"]`];if(this.value instanceof RegExp){const i=this.value.source;if(i==="^..*$"||i===".+")return[`[${t}"${this.key}"]`];const s=this.value.ignoreCase?",i":"";return[`["${this.key}"${t}~"${i}"${s}]`]}else return[`["${this.key}"${t}="${this.value}"]`]}isUsableAsAnswer(){return!1}matchesProperties(t){if(typeof this.key=="string"){let i=t[this.key];return!i||i===""?this.invert!==this.matchesEmpty:typeof i=="string"?Te.doesMatch(i,this.value)!=this.invert:typeof this.value!="string"&&this.value.source===".*"?!this.invert:(typeof i!="string"&&(i=JSON.stringify(i)),Te.doesMatch(i,this.value)!=this.invert)}for(const i in t)if(i!==void 0&&Te.doesMatch(i,this.key)){let s=t[i]??"";return typeof s!="string"&&(s=JSON.stringify(s)),Te.doesMatch(s,this.value)!=this.invert}return this.matchesEmpty?!this.invert:this.invert}asHumanString(){if(typeof this.key=="string"){const t=typeof this.value=="string"?"=":"~";return`${this.key}${this.invert?"!":""}${t}${Te.source(this.value)}`}return`${this.key.source}${this.invert?"!":""}~~${Te.source(this.value)}`}shadows(t){if(t instanceof Te){if((t.key.source??t.key)!==(this.key.source??this.key))return!1;if((t.value.source??t.key)===(this.value.source??this.key)&&this.invert==t.invert)return!0;if(typeof t.value=="string"){const i=Te.doesMatch(t.value,this.value);if(!this.invert&&!t.invert)return i;if(this.invert&&!t.invert||!this.invert&&t.invert)return!i;if(!this.invert&&!t.invert)return i}return!1}return t instanceof st&&Te.doesMatch(t.key,this.key)?this.value.source==="^..*$"?this.invert?t.value==="":!1:this.invert?!1:(this.value.source??this.value)===t.value:!1}usedKeys(){if(typeof this.key=="string")return[this.key];throw"Key cannot be determined as it is a regex"}usedTags(){return[]}asChange(){return this.invert?[]:typeof this.key=="string"?typeof this.value=="string"?[{k:this.key,v:this.value}]:[{k:this.key,v:void 0}]:(console.error("Cannot export regex tag to asChange; ",this.key,this.value),[])}optimize(){return this}isNegative(){return this.invert}visit(t){t(this)}}class we extends $s{constructor(t){super();w(this,"and");this.and=t}static construct(t){return t.length===1?t[0]:new we(t)}static combine(t,i){const s=[];for(const o of i)s.push(t+o);return s}normalize(){const t=[];for(const i of this.and)i instanceof we?t.push(...i.and):t.push(i);return new we(t)}matchesProperties(t){for(const i of this.and)if(!i.matchesProperties(t))return!1;return!0}asOverpass(){let t=null;for(const i of this.and){const s=i.asOverpass();if(t===null){t=s;continue}const o=[];for(const r of t)o.push(...we.combine(r,s));t=o}return t}asHumanString(t,i,s){return this.and.map(o=>{let r=o.asHumanString(t,i,s);return o.or&&(r="("+r+")"),r}).filter(o=>o!=="").join(" & ")}isUsableAsAnswer(){for(const t of this.and)if(!t.isUsableAsAnswer())return!1;return!0}shadows(t){if(!(t instanceof we))return!1;for(const i of this.and){let s=!1;for(const o of t.and)if(s=i.shadows(o),s)break;if(!s)return!1}for(const i of t.and){let s=!1;for(const o of this.and)if(s=o.shadows(i),s)break;if(!s)return!1}return!0}usedKeys(){return[].concat(...this.and.map(t=>t.usedKeys()))}usedTags(){return[].concat(...this.and.map(t=>t.usedTags()))}asChange(t){const i=[];for(const s of this.and)i.push(...s.asChange(t));return i}removePhraseConsideredKnown(t,i){const s=[];for(const o of this.and){if(o instanceof we)throw"Optimize expressions before using removePhraseConsideredKnown";if(o instanceof ot){const r=o.removePhraseConsideredKnown(t,i);if(r===!0)continue;if(r===!1)return!1;s.push(r);continue}if(!(i&&t.shadows(o))){if(!i&&o.shadows(t))return!1;s.push(o)}}return s.length===0?!0:we.construct(s)}optimize(){if(this.and.length===0)return!0;const t=this.and.map(r=>r.optimize()).filter(r=>r!==!0);if(t.some(r=>r===!1))return!1;const i=t;{const r={};for(const u of i)u instanceof st&&(r[u.key]=u.value);for(let u=0;u<i.length;u++){const l=i[u];if(l instanceof st){const a=l.key,c=r[a];if(c===void 0)continue;if(c!==l.value)return!1}if(l instanceof Te){const a=l.key;if(typeof a!="string")continue;const c=r[a];if(c===void 0)continue;if(l.invert){if(typeof l.value=="string"&&c===l.value||c.match(l.value)!==null)return!1;i.splice(u,1),u--}else if(c!==l.value)return!1}}}const s=[];let o=[];for(const r of i)r instanceof we?s.push(...r.and):r instanceof ot?o.push(r):s.push(r);{let r=!1;do{const u=[];e:for(let l of o){for(const a of s){const c=l.removePhraseConsideredKnown(a,!0);if(c===!0)continue e;if(c===!1)return!1;if(c instanceof ot){l=c;continue}s.push(c),r=!0;continue e}u.push(l)}o=u}while(r)}if(o=o.filter(r=>!de.containsEquivalents(s,r.or)),o.length===1)s.push(o[0]);else if(o.length>1){let r=o[0].or;for(let u=1;u<o.length&&r.length>0;u++){const l=o[u];r=r.filter(a=>l.or.some(c=>c.shadows(a)))}if(r.length===0)s.push(...o);else{const u=[];for(const a of o){const c=a.or.filter(d=>!r.some(m=>m.shadows(d)));u.push(ot.construct(c))}r.push(we.construct(u));const l=new ot(r).optimize();if(l===!1)return!1;l===!0||s.push(l)}}return s.length===0?!0:de.ContainsOppositeTags(s)?!1:(de.sortFilters(s,!0),we.construct(s))}isNegative(){return!this.and.some(t=>!t.isNegative())}visit(t){t(this),this.and.forEach(i=>i.visit(t))}}class tc{constructor(e,t,i=""){w(this,"_key");w(this,"_predicate");w(this,"_representation");this._key=e,this._predicate=t,this._representation=i}asChange(e){throw"A comparable tag can not be used to be uploaded to OSM"}asHumanString(e,t,i){return this._key+this._representation}asOverpass(){throw"A comparable tag can not be used as overpass filter"}shadows(e){return e===this}isUsableAsAnswer(){return!1}matchesProperties(e){return this._predicate(e[this._key])}usedKeys(){return[this._key]}usedTags(){return[]}optimize(){return this}isNegative(){return!0}visit(e){e(this)}}class Lt{constructor(e,t,i=!1){w(this,"_key");w(this,"_value");w(this,"_invert");this._key=e,this._value=t,this._invert=i}static substituteString(e,t){for(const i in t)e=e.replace(new RegExp("\\{"+i+"\\}","g"),t[i]);return e.replace(/{.*}/g,"")}asTag(e){if(this._invert)throw"Cannot convert an inverted substituting tag";return new st(this._key,P.SubstituteKeys(this._value,e))}asHumanString(e,t,i){return this._key+(this._invert?"!":"")+"="+Lt.substituteString(this._value,i)}asOverpass(){throw"A variable with substitution can not be used to query overpass"}shadows(e){return e instanceof Lt?e._key===this._key&&e._value===this._value&&e._invert===this._invert:!1}isUsableAsAnswer(){return!this._invert}matchesProperties(e){const t=e[this._key];if(t===void 0||t==="")return!1;const i=Lt.substituteString(this._value,e);return t===i!==this._invert}usedKeys(){return[this._key]}usedTags(){return[]}asChange(e){if(this._invert)throw"An inverted substituting tag can not be used to create a change";const t=Lt.substituteString(this._value,e);if(t.match(/{.*}/)!==null)throw"Could not calculate all the substitutions: still have "+t;return[{k:this._key,v:t}]}optimize(){return this}isNegative(){return!1}visit(e){e(this)}}const nc={"addr:street":117211930,"addr:housenumber":125040768,emergency:1939478,barrier:18424246,tourism:2683525,amenity:20541353,bench:894256,rental:8838,bicycle_rental:7447,vending:206755,"service:bicycle:rental":3570,pub:316,theme:426,"service:bicycle:.*":0,"service:bicycle:cleaning":807,shop:5062252,"service:bicycle:retail":9162,network:2181336,sport:2194801,"service:bicycle:repair":11381,association:369,ngo:42,leisure:7368076,club:38429,"disused:amenity":40880,"planned:amenity":205,tileId:0,"construction:amenity":1206,cycleway:906487,highway:218189453,bicycle:6218071,cyclestreet:8185,"camera:direction":40676,direction:1896015,access:16030036,entrance:2954076,"name:etymology":24485,memorial:132172,indoor:353116,"name:etymology:wikidata":285224,landuse:35524214,name:88330405,protect_class:73801,information:831513,man_made:5116088,boundary:2142378,"tower:type":451658,playground:109175,route:939184,"surveillance:type":116760,natural:52353504,building:500469053},ic={emergency:{defibrillator:51273,ambulance_station:11047,fire_extinguisher:7355,fire_hydrant:1598739},barrier:{cycle_barrier:104166,bollard:502220,wall:3535056},tourism:{artwork:187470,map:51,viewpoint:191765},amenity:{bench:1736979,bicycle_library:36,bicycle_rental:49082,vending_machine:201871,bar:199662,pub:174979,cafe:467521,restaurant:1211671,bicycle_wash:44,bike_wash:0,bicycle_repair_station:9247,bicycle_parking:435959,binoculars:479,biergarten:10309,charging_station:65402,drinking_water:250463,fast_food:460079,fire_station:122200,parking:4255206,public_bookcase:13120,toilets:350648,recycling:333925,waste_basket:550357,waste_disposal:156765},bench:{stand_up_bench:87,yes:524993},"service:bicycle:rental":{yes:3054},pub:{cycling:9,bicycle:0},theme:{cycling:8,bicycle:16},"service:bicycle:cleaning":{yes:607,diy:0},shop:{bicycle:46488,sports:37024},sport:{cycling:6045,bicycle:96},association:{cycling:5,bicycle:20},ngo:{cycling:0,bicycle:0},leisure:{bird_hide:5669,nature_reserve:117016,picnic_table:206322,pitch:1990293,playground:705102},club:{cycling:3,bicycle:49},"disused:amenity":{charging_station:164},"planned:amenity":{charging_station:115},"construction:amenity":{charging_station:221},cycleway:{lane:314576,track:86541,shared_lane:60824},highway:{residential:61321708,crossing:6119521,cycleway:1423789,traffic_signals:1512639,tertiary:7051727,unclassified:15756878,secondary:4486617,primary:3110552,footway:16496620,path:11438303,steps:1327396,corridor:27051,pedestrian:685989,bridleway:102280,track:22670967,living_street:1519108,street_lamp:2811705},bicycle:{designated:1110839},cyclestreet:{yes:8164},access:{public:6222,yes:1363526},memorial:{ghost_bike:503},indoor:{door:9722},landuse:{grass:4898559,village_green:104681},name:{"Park Oude God":1},information:{board:242007,map:85912,office:24139,visitor_centre:285},man_made:{surveillance:148172,watermill:9699},boundary:{protected_area:97075},"tower:type":{observation:19654},playground:{forest:56},"surveillance:type":{camera:112963,ALPR:2522,ANPR:3},natural:{tree:18245059}},sc={keys:nc,tags:ic},De=class{static KVtoProperties(e){const t={};for(const i of e)t[i.key]=i.value;return t}static changeAsProperties(e){const t={};for(const i of e)t[i.k]=i.v;return t}static AllKeysAreContained(e,t){for(const i in t){const s=e[i];if(s===void 0)return!1;const o=t[i];for(const r of o)if(s.indexOf(r)<0)return!1}return!0}static SplitKeys(e){return this.SplitKeysRegex(e,!1)}static SplitKeysRegex(e,t){const i={};for(e=[...e];e.length>0;){const s=e.shift();if(s!==void 0){if(s instanceof we){e.push(...s.and);continue}if(s instanceof st){i[s.key]===void 0&&(i[s.key]=[]),i[s.key].push(...s.value.split(";").map(o=>o.trim()));continue}if(t&&s instanceof Te){const o=s.key;if(typeof o!="string")throw console.error("Invalid type to flatten the multiAnswer: key is a regex too",s),"Invalid type to FlattenMultiAnswer: key is a regex too";const r=o;i[r]===void 0&&(i[r]=[]),i[r].push(s);continue}throw console.error("Invalid type to flatten the multiAnswer",s),"Invalid type to FlattenMultiAnswer, not one of RegexTag, Tag or And: "+s.asHumanString(!1,!1,{})}}return i}static FlattenAnd(e,t){const i=[];return e.visit(s=>{s instanceof st&&i.push(s),s instanceof Lt&&i.push(s.asTag(t))}),i}static FlattenMultiAnswer(e){if(e===void 0)return new we([]);let t=De.SplitKeys(e);const i=[];for(const s in t){const o=P.Dedup(t[s]).filter(r=>r!=="");o.sort(),i.push(new st(s,o.join(";")))}return new we(i)}static MatchesMultiAnswer(e,t){const i=De.SplitKeysRegex([e],!0);for(const s in i){const o=i[s];if(t[s]===void 0)return!1;const r=t[s].split(";").map(u=>u.trim());for(const u of o){if(u instanceof Te){if(!u.matchesProperties(t))return!1;continue}if(r.indexOf(u)<0)return!1}}return!0}static SimpleTag(e,t){const i=P.SplitFirst(e,"=");if(i.length!==2)throw`Invalid tag: no (or too much) '=' found (in ${t??"unkown context"})`;return new st(i[0],i[1])}static isValidKey(e){return e.match(/^[a-z][a-z0-9:_]{2,253}[a-z0-9]$/)!==null}static Tag(e,t=""){try{let i=typeof t=="string"?t:t.path.join(".");return this.ParseTagUnsafe(e,i)}catch(i){if(typeof t=="string")throw console.error("Could not parse tag",e,"in context",t,"due to ",i),i;t.err(i);return}}static ParseUploadableTag(e,t=""){const i=this.Tag(e,t);return i.visit(s=>{if(!(s instanceof we)&&!(s instanceof st)&&!(s instanceof Lt))throw`Error at ${t}: detected a non-uploadable tag at a location where this is not supported: ${s.asHumanString(!1,!1,{})}`}),i}static TagD(e,t=""){if(e!==void 0)return De.Tag(e,t)}static sortFilters(e,t){e.sort((i,s)=>De.order(i,s,t))}static toString(e,t=!0){let i;return e instanceof ot?i=De.joinL(e.or,"|",t):e instanceof we?i=De.joinL(e.and,"&",t):i=e.asHumanString(!1,!1,{}),t&&(i=i.trim()),i}static parseRegexOperator(e){const t=e.match(/^([_|a-zA-Z0-9: -]+)(!)?~([i]~)?(.*)$/);if(t==null)return null;const[i,s,o,r,u]=t;return{key:s,value:u,invert:o=="!",modifier:r=="i~"?"i":""}}static ContainsOppositeTags(e){for(let t=0;t<e.length;t++){const i=e[t];if(i instanceof st||i instanceof Te)for(let s=t+1;s<e.length;s++){const o=e[s];if((o instanceof st||o instanceof Te)&&o.key===i.key&&(o.value.source??o.value)===(i.value.source??i.value)&&(o.invert??!1)!==(i.invert??!1))return!0}}return!1}static removeShadowedElementsFrom(e,t){return t.filter(i=>!e.some(s=>s.shadows(i)))}static removeEquivalents(e){const t=[];e:for(let i=0;i<e.length;i++){const s=e[i];for(let o=0;o<e.length;o++){if(i===o)continue;if(e[o].shadows(s))continue e}t.push(s)}return t}static containsEquivalents(e,t){return t.some(i=>e.some(s=>s.shadows(i)))}static LevelsParser(e){if(e==null)return[];let t=P.NoNull([e]);return t=[].concat(...t.map(i=>i==null?void 0:i.split(";"))),t=[].concat(...t.map(i=>{if(i=i.trim(),i==="")return;if(i.indexOf("-")<0||i.startsWith("-"))return i;const[s,o]=i.split("-").map(u=>Number(u.trim()));if(isNaN(s)||isNaN(o))return;const r=[];for(let u=s;u<=o;u++)r.push(u+"");return r})),P.NoNull(t)}static ParseTagUnsafe(e,t=""){if(e===void 0)throw new Error(`Error while parsing a tag: 'json' is undefined in ${t}. Make sure all the tags are defined and at least one tag is present in a complex expression`);if(typeof e!="string"){if(e.and!==void 0&&e.or!==void 0)throw`Error while parsing a TagConfig: got an object where both 'and' and 'or' are defined. Did you override a value? Perhaps use \`"=parent": { ... }\` instead of "parent": {...}\` to trigger a replacement and not a fuse of values`;if(e.and!==void 0)return new we(e.and.map(o=>De.Tag(o,t)));if(e.or!==void 0)return new ot(e.or.map(o=>De.Tag(o,t)));throw`At ${t}: unrecognized tag: ${JSON.stringify(e)}`}const i=e;for(const[o,r]of De.comparators)if(i.indexOf(o)>=0){const u=P.SplitFirst(i,o);let l=Number(u[1].trim());isNaN(l)&&(l=new Date(u[1].trim()).getTime());const a=c=>{if(c===void 0)return!1;let d;return typeof c=="number"?d=c:typeof d=="string"?d=Number(c==null?void 0:c.trim()):d=Number(c),isNaN(d)&&typeof c=="string"&&(d=P.ParseDate(c).getTime(),isNaN(d))?!1:r(d,l)};return new tc(u[0],a,o+l)}if(i.indexOf("~~")>=0){const o=P.SplitFirst(i,"~~");let r;o[0]==="*"?r=new RegExp(".+","i"):r=new RegExp("^("+o[0]+")$");let u;return o[1]==="*"?u=new RegExp(".+","si"):u=new RegExp("^("+o[1]+")$","s"),new Te(r,u)}const s=De.parseRegexOperator(i);if(s!=null){if(s.value==="*"&&s.invert)throw`Don't use 'key!~*' - use 'key=' instead (empty string as value (in the tag ${i} while parsing ${t})`;if(s.value==="")throw"Detected a regextag with an empty regex; this is not allowed. Use '"+s.key+"='instead (at "+t+")";let o=s.value;return o==="*"?new Te(s.key,new RegExp(".+","si"+s.modifier),s.invert):new Te(s.key,new RegExp("^("+o+")$","s"+s.modifier),s.invert)}if(i.indexOf("!:=")>=0){const o=P.SplitFirst(i,"!:=");return new Lt(o[0],o[1],!0)}if(i.indexOf(":=")>=0){const o=P.SplitFirst(i,":=");return new Lt(o[0],o[1])}if(i.indexOf("!=")>=0){const o=P.SplitFirst(i,"!=");if(o[1]==="*")throw"At "+t+": invalid tag "+i+". To indicate a missing tag, use '"+o[0]+"!=' instead";return o[1]===""?new Te(o[0],/.+/is):new Te(o[0],o[1],!0)}if(i.indexOf("=")>=0){const o=P.SplitFirst(i,"=");if(o[1]=="*")throw`Error while parsing tag '${i}' in ${t}: detected a wildcard on a normal value. Use a regex pattern instead`;return new st(o[0],o[1])}throw`Error while parsing tag '${i}' in ${t}: no key part and value part were found`}static GetCount(e,t){if(e===void 0)return;const i=De.keyCounts.tags[e];return i!==void 0&&i[t]!==void 0?i[t]:De.keyCounts.keys[e]}static order(e,t,i){const s=e instanceof Te,o=t instanceof Te;if(s!==o)return s?1:-1;if(e.key!==void 0&&t.key!==void 0){if(i){const r=De.GetCount(e.key,e.value),u=De.GetCount(t.key,t.value);if(r!==void 0&&u!==void 0)return r-u}return e.key===t.key?0:e.key<t.key?-1:1}return 0}static joinL(e,t,i){const s=e.map(o=>De.toString(o,!1)).join(t);return i?s:" ("+s+") "}static generateDocs(){return[De.intro,...Object.keys(De.modeDocumentation).map(e=>{const t=De.modeDocumentation[e];return["","## `"+e+"` "+t.name,"",t.docs,"",""].join(`
`)}),"## "+De.comparators.map(e=>"`"+e[0]+"`").join(" ")+" Logical comparators",De.numberAndDateComparisonDocs,De.logicalOperator].join(`
`)}};let de=De;w(de,"comparators",[["<=",(e,t)=>e<=t],[">=",(e,t)=>e>=t],["<",(e,t)=>e<t],[">",(e,t)=>e>t]]),w(de,"modeDocumentation",{"=":{name:"strict equality",uploadable:!0,overpassSupport:!0,docs:"Strict equality is denoted by `key=value`. This key matches __only if__ the keypair is present exactly as stated.\n\n**Only normal tags (eventually in an `and`) can be used in places where they are uploaded**. Normal tags are used in the `mappings` of a [TagRendering] (unless `hideInAnswer` is specified), they are used in `addExtraTags` of [Freeform] and are used in the `tags`-list of a preset.\n\nIf a different kind of tag specification is given, your theme will fail to parse.\n\n### If key is not present\n\nIf you want to check if a key is not present, use `key=` (pronounce as *key is empty*). A tag collection will match this\nif `key` is missing or if `key` is a literal empty value.\n\n### Removing a key\n\nIf a key should be deleted in the OpenStreetMap-database, specify `key=` as well. This can be used e.g. to remove a\nfixme or value from another mapping if another field is filled out."},"!=":{name:"strict not equals",overpassSupport:!0,docs:"To check if a key does _not_ equal a certain value, use `key!=value`. This is converted behind the scenes\nto `key!~^value$`\n\nIf `key` is not present or empty, this will match too.\n\n### If key is present\n\nThis implies that, to check if a key is present, `key!=` can be used. This will only match if the key is present and not\nempty."},"~":{name:"Value matches regex",overpassSupport:!0,docs:"A tag can also be tested against a regex with `key~regex`. Note that this regex __must match__ the entire value. If the\nvalue is allowed to appear anywhere as substring, use `key~.*regex.*`.\nThe regex is put within braces as to prevent runaway values.\n\nUse `key~*` to indicate that any value is allowed. This is effectively the check that the attribute is present (defined _and_ not empty).\nRegexes will match the newline character with `.` too - the `s`-flag is enabled by default."},"~i~":{name:"Value matches case-invariant regex",overpassSupport:!0,docs:"A tag can also be tested against a regex with `key~i~regex`, where the case of the value will be ignored. The regex is still matched against the _entire_ value"},"!~":{name:"Value should _not_ match regex",overpassSupport:!0,docs:"A tag can also be tested against a regex with `key!~regex`. This filter will match if the value does *not* match the regex. \n If the\nvalue is allowed to appear anywhere as substring, use `key~.*regex.*`.\nThe regex is put within braces as to prevent runaway values.\n"},"!~i~":{name:"Value does *not* match case-invariant regex",overpassSupport:!0,docs:"A tag can also be tested against a regex with `key~i~regex`, where the case of the value will be ignored. The regex is still matched against the _entire_ value. This filter returns true if the value does *not* match"},"~~":{name:"Key and value should match given regex",overpassSupport:!0,docs:"Both the `key` and `value` part of this specification are interpreted as regexes, both the key and value musth completely match their respective regexes"},":=":{name:"Substitute `... {some_key} ...` and match `key`",overpassSupport:!1,uploadable:!0,docs:`**This is an advanced feature - use with caution**

Some tags are automatically set or calculated - see [CalculatedTags](CalculatedTags.md) for an entire overview. If one
wants to apply such a value as tag, use a substituting-tag such, for example\`survey:date:={_date:now}\`. Note that the
separator between key and value here is \`:=\`. The text between \`{\` and \`}\` is interpreted as a key, and the respective
value is substituted into the string.

One can also append, e.g. \`key:={some_key} fixed text {some_other_key}\`.

An assigning tag _cannot_ be used to query OpenStreetMap/Overpass.

If using a key or variable which might not be defined, add a condition in the mapping to hide the option. This is
because, if \`some_other_key\` is not defined, one might actually upload the literal text \`key={some_other_key}\` to OSM -
which we do not want.

To mitigate this, use:

\`\`\`json
{
    "mappings": [
        {
            "if":"key:={some_other_key}",
            "then": "...",
            "hideInAnswer": "some_other_key="
        }
    ]
}
\`\`\`

One can use \`key!:=prefix-{other_key}-postfix\` as well, to match if \`key\` is _not_ the same
as \`prefix-{other_key}-postfix\` (with \`other_key\` substituted by the value)`},"!:=":{name:"Substitute `{some_key}` should not match `key`",overpassSupport:!1,docs:"See `:=`, except that this filter is inverted"}}),w(de,"keyCounts",sc),w(de,"numberAndDateComparisonDocs","If the value of a tag is a number (e.g. `key=42`), one can use a filter `key<=42`, `key>=35`, `key>40` or `key<50` to\nmatch this, e.g. in conditions for renderings. These tags cannot be used to generate an answer nor can they be used to\nrequest data upstream from overpass.\n\nNote that the value coming from OSM will first be stripped by removing all non-numeric characters. For\nexample, `length=42 meter` will be interpreted as `length=42` and will thus match `length<=42` and `length>=42`. In\nspecial circumstances (e.g. `surface_area=42 m2` or `length=100 feet`), this will result in erronous\nvalues (`surface=422` or if a length in meters is compared to). However, this can be partially alleviated by using '\nUnits' to rewrite to a default format.\n\nDates can be compared with the same expression: `somekey<2022-06-22` will match if `somekey` is a date and is smaller\nthen 22nd june '22."),w(de,"logicalOperator",`
## Logical operators

One can combine multiple tags by using \`and\` or \`or\`, e.g.:

\`\`\`json
{
  "osmTags": {
    "or": [
      "amenity=school",
      "amenity=kindergarten"
    ]
  }
}
\`\`\`
`),w(de,"intro",`Tags format
=============

When creating the \`json\` file describing your layer or theme, you'll have to add a few tags to describe what you want.
This document gives an overview of what every expression means and how it behaves in edge cases.

If the schema-files note a type [\`TagConfigJson\`](https://github.com/pietervdvn/MapComplete/blob/develop/Models/ThemeConfig/Json/TagConfigJson.ts), you can use one of these values.

In some cases, not every type of tags-filter can be used. For example,  _rendering_ an option with a regex is
fine (\`"if": "brand~[Bb]randname", "then":" The brand is Brandname"\`); but this regex can not be used to write a value
into the database. The theme loader will however refuse to work with such inconsistencies and notify you of this while
you are building your theme.

Example
-------

This example shows the most common options on how to specify tags:

\`\`\`json
{
  "and": [
    "key=value",
    {
      "or": [
        "other_key=value",
        "other_key=some_other_value"
      ]
    },
    "key_which_should_be_missing=",
    "key_which_should_have_a_value~*",
    "key~.*some_regex_a*_b+_[a-z]?",
    "height<1"
  ]
}
\`\`\`


`);const oc={},rc=Object.freeze(Object.defineProperty({__proto__:null,default:oc},Symbol.toStringTag,{value:"Module"})),ac=Dl(rc);class lc{constructor(e,t){w(this,"osmTags");w(this,"geojsonSource");w(this,"geojsonZoomLevel");w(this,"isOsmCacheLayer");w(this,"mercatorCrs");w(this,"idKey");let i=0;if(e.osmTags&&i++,e.overpassScript&&i++,e.geojsonSource&&i++,i==0)throw`Source: nothing correct defined in the source (in ${t}) (the params are ${JSON.stringify(e)})`;if(e.isOsmCache&&e.geojsonSource==null)throw console.error(e),`Source said it is a OSM-cached layer, but didn't define the actual source of the cache (in context ${t})`;if(e.geojsonSource!==void 0&&e.geojsonSourceLevel!==void 0&&!["x","y","x_min","x_max","y_min","Y_max"].some(s=>e.geojsonSource.indexOf(s)>0))throw`Source defines a geojson-zoomLevel, but does not specify {x} nor {y} (or equivalent), this is probably a bug (in context ${t})`;if(e.osmTags!==void 0){const s=e.osmTags.optimize();if(s===!1)throw"Error at "+t+`: the specified tags are conflicting with each other: they will never match anything at all.
	The offending tags are: `+e.osmTags.asHumanString(!1,!1,{})+"	They optmize into 'false' ";if(s===!0)throw"Error at "+t+": the specified tags are very wide: they will always match everything"}this.osmTags=e.osmTags??new Te("id",/.*/),this.geojsonSource=e.geojsonSource,this.geojsonZoomLevel=e.geojsonSourceLevel,this.isOsmCacheLayer=e.isOsmCache??!1,this.mercatorCrs=e.mercatorCrs??!1,this.idKey=e.idKey}}class Fo extends Si{constructor(t,i=!1){super();w(this,"uiElements");w(this,"_ordered");this._ordered=i,this.uiElements=P.NoNull(t).map(s=>J.W(s))}AsMarkdown(){return this._ordered?`

`+this.uiElements.map((t,i)=>"  "+i+". "+t.AsMarkdown().replace(/\n/g,`  
`)).join(`
`)+`
`:`

`+this.uiElements.map(t=>"  - "+t.AsMarkdown().replace(/\n/g,`  
`)).join(`
`)+`
`}InnerConstructElement(){const t=document.createElement(this._ordered?"ol":"ul");for(const i of this.uiElements){if(i==null)continue;const s=i.ConstructElement();if(s!==void 0){const o=document.createElement("li");o.appendChild(s),t.appendChild(o)}}return t}}class uc extends Si{constructor(t){super();w(this,"content");this.content=t??""}AsMarkdown(){let t;return typeof this.content!="string"?t=this.content.AsMarkdown():t=this.content,`

`+t+`

`}InnerConstructElement(){const t=document.createElement("p");return typeof this.content!="string"?t.appendChild(this.content.ConstructElement()):t.innerHTML=this.content,t}}class Je{constructor(e,t,i,s){w(this,"name");w(this,"explanation");w(this,"inputmode");w(this,"textArea");w(this,"isMeta");this.name=e,this.inputmode=i,this.textArea=s??!1,this.name.endsWith("textfield")&&(this.name=this.name.substr(0,this.name.length-9)),this.name.endsWith("textfielddef")&&(this.name=this.name.substr(0,this.name.length-12)),typeof t=="string"?this.explanation=t:this.explanation=t.AsMarkdown()}getFeedback(e,t){if(this.isValid(e))return;const i=J.t.validation[this.name];if(i!==void 0)return i.feedback}getPlaceholder(){return J.t.validation[this.name].description}isValid(e,t){return!0}reformat(e,t){return e}}class dc extends Je{constructor(){super("string","A simple piece of text")}}class hc extends Je{constructor(){super("text","A longer piece of text. Uses an textArea instead of a textField","text",!0)}}class cc extends Je{constructor(){super("date","A date with date picker")}isValid(e){return!isNaN(new Date(e).getTime())}reformat(e){if(console.log("Reformatting",e),!this.isValid(e))return e;const t=new Date(e);let i=""+(t.getMonth()+1),s=""+t.getDate();const o=t.getFullYear();return i.length<2&&(i="0"+i),s.length<2&&(s="0"+s),[o,i,s].join("-")}}class Zo extends Je{constructor(e,t){super(e??"int",t??"A whole number, either positive, negative or zero","numeric")}isValid(e){return e=""+e,e!==void 0&&e.indexOf(".")<0&&!isNaN(Number(e))}getFeedback(e){const t=Number(e);if(isNaN(t))return J.t.validation.nat.notANumber;if(Math.floor(t)!==t)return J.t.validation.nat.mustBeWhole}}class Rl extends Zo{constructor(e,t){super(e??"nat",t??"A  whole, positive number or zero")}isValid(e){return e===void 0?!1:(e=""+e,e.indexOf(".")<0&&!isNaN(Number(e))&&Number(e)>=0)}getFeedback(e){const t=super.getFeedback(e);if(t!==void 0)return t;if(Number(e)<0)return J.t.validation.nat.mustBePositive}}class pc extends Je{constructor(){super("distance",'A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]',"decimal");w(this,"isValid",t=>{const i=Number(t);return!isNaN(i)})}}class gc extends Zo{constructor(){super("direction",["A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl).","### Input helper","This element has an input helper showing a map and 'viewport' indicating the direction. By default, this map is zoomed to zoomlevel 17, but this can be changed with the first argument"].join(`

`))}isValid(e){return e.endsWith("°")&&(e=e.substring(0,e.length-1)),super.isValid(e)}reformat(e){return e.endsWith("°")&&(e=e.substring(0,e.length-1)),""+Number(e)%360}}var _t={shortLang:n=>n.toLowerCase().split("_")[0],forceArray:n=>(typeof n=="string"&&(n=[n]),n||[]),isPlainObject:n=>!(!n||typeof n!="object"||n instanceof Array),fixedEncodeURIComponent:n=>encodeURIComponent(n).replace(/[!'()*]/g,fc),replaceSpaceByUnderscores:n=>n.replace(/\s/g,"_"),uniq:n=>Array.from(new Set(n))};const fc=n=>"%"+n.charCodeAt(0).toString(16),El=n=>e=>{const t={};return Object.keys(e).forEach(i=>{const s=e[i];s!=null?t[i]=n?s.map(mc):s.value:t[i]=n?[]:null}),t},mc=n=>n.value,pi=El(!1);var Qo={labels:pi,descriptions:pi,aliases:El(!0),lemmas:pi,representations:pi,glosses:pi},yc=n=>{typeof n=="object"&&(n=n.time);const e=n[0];let[t,i]=n.slice(1).split("T");t=t.replace(/-00/g,"-01");const s=`${t}T${i}`;return bc(e,s)};const bc=(n,e)=>{const t=e.split("-")[0];return n==="-"||t.length>4?wc(n,e,t):new Date(e)},wc=(n,e,t)=>{let i;return t.length===4?i=`${n}00${e}`:t.length===5?i=`${n}0${e}`:i=n+e,new Date(i)},Xo=yc,Ce={};Ce.isNumericId=n=>/^[1-9][0-9]*$/.test(n);Ce.isEntityId=n=>/^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)$/.test(n);Ce.isEntitySchemaId=n=>/^E[1-9][0-9]*$/.test(n);Ce.isItemId=n=>/^Q[1-9][0-9]*$/.test(n);Ce.isPropertyId=n=>/^P[1-9][0-9]*$/.test(n);Ce.isLexemeId=n=>/^L[1-9][0-9]*$/.test(n);Ce.isFormId=n=>/^L[1-9][0-9]*-F[1-9][0-9]*$/.test(n);Ce.isSenseId=n=>/^L[1-9][0-9]*-S[1-9][0-9]*$/.test(n);Ce.isGuid=n=>/^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(n);Ce.isHash=n=>/^[0-9a-f]{40}$/.test(n);Ce.isPropertyClaimsId=n=>{const[e,t]=n.split("#");return Ce.isEntityId(e)&&Ce.isPropertyId(t)};Ce.isRevisionId=n=>/^\d+$/.test(n);Ce.isEntityPageTitle=n=>{if(typeof n!="string")return!1;let[e,t]=n.split(":");return e&&t?_c(e)&&Ce[`is${e}Id`](t):(t=e,Ce.isItemId(t))};const vc=["Item","Property","Lexeme"],_c=n=>vc.includes(n),Tc=n=>/^(Q|P|L)[1-9][0-9]*$/.test(n);Ce.getNumericId=n=>{if(!Tc(n))throw new Error(`invalid entity id: ${n}`);return n.replace(/^(Q|P|L)/,"")};Ce.wikibaseTimeToDateObject=Xo;const er=n=>e=>{try{return n(e)}catch{e=e.time||e;const i=e[0];let[s,o]=e.slice(1).split("T");return s=s.replace(/-00/g,"-01"),`${i}${s}T${o}`}},Cc=n=>Xo(n).getTime(),xc=n=>Xo(n).toISOString(),Ac=n=>{if(typeof n=="object"){const{time:e,precision:t}=n;t===9?n=e.replace("-01-01T","-00-00T"):t===10?n=e.replace("-01T","-00T"):n=e}return n.split("T")[0].replace(/^\+/,"").replace(/^(-?)0+/,"$1").replace(/-00$/,"").replace(/-00$/,"")};Ce.wikibaseTimeToEpochTime=er(Cc);Ce.wikibaseTimeToISOString=er(xc);Ce.wikibaseTimeToSimpleDay=er(Ac);Ce.getImageUrl=(n,e)=>{let t=`https://commons.wikimedia.org/wiki/Special:FilePath/${n}`;return typeof e=="number"&&(t+=`?width=${e}`),t};Ce.getEntityIdFromGuid=n=>{const e=n.split(/[$-]/);if(e.length===6)return e[0].toUpperCase();if(e.length===7)return e.slice(0,2).join("-").toUpperCase();throw new Error(`invalid guid: ${n}`)};var Tn=Ce;const{wikibaseTimeToISOString:kc,wikibaseTimeToEpochTime:qc,wikibaseTimeToSimpleDay:$c}=Tn,Yt=n=>n.value,Sc=(n,e)=>e.keepRichValues?n.value:n.value.text,On=(n,e)=>Rc(n,e.entityPrefix),Dc={item:"Q",lexeme:"L",property:"P"},Rc=(n,e)=>{const{value:t}=n,i=t.id||Dc[t["entity-type"]]+t["numeric-id"];return typeof e=="string"?`${e}:${i}`:i},Ec=(n,e)=>{const{value:t}=n,i=parseFloat(t.amount);if(e.keepRichValues){const s={amount:parseFloat(t.amount),unit:t.unit.replace(/^https?:\/\/.*\/entity\//,"")};return t.upperBound!=null&&(s.upperBound=parseFloat(t.upperBound)),t.lowerBound!=null&&(s.lowerBound=parseFloat(t.lowerBound)),s}else return i},Ic=(n,e)=>e.keepRichValues?n.value:[n.value.latitude,n.value.longitude],Fc=(n,e)=>{let t;if(typeof e.timeConverter=="function"?t=e.timeConverter(n.value):t=jc(e.timeConverter)(n.value),e.keepRichValues){const{timezone:i,before:s,after:o,precision:r,calendarmodel:u}=n.value;return{time:t,timezone:i,before:s,after:o,precision:r,calendarmodel:u}}else return t},jc=(n="iso")=>{const e=Oc[n];if(!e)throw new Error(`invalid converter key: ${JSON.stringify(n).substring(0,100)}`);return e},Oc={iso:kc,epoch:qc,"simple-day":$c,none:n=>n.time||n},ya={commonsMedia:Yt,"external-id":Yt,"geo-shape":Yt,"globe-coordinate":Ic,math:Yt,monolingualtext:Sc,"musical-notation":Yt,quantity:Ec,string:Yt,"tabular-data":Yt,time:Fc,url:Yt,"wikibase-entityid":On,"wikibase-form":On,"wikibase-item":On,"wikibase-lexeme":On,"wikibase-property":On,"wikibase-sense":On};var Bc={parsers:ya,parse:(n,e,t,i)=>{n=n||e.type,n=n.replace(" ","-");try{return ya[n](e,t)}catch(s){throw s.message==="parsers[datatype] is not a function"&&(s.message=`${n} claim parser isn't implemented
        Claim id: ${i}
        Please report to https://github.com/maxlath/wikibase-sdk/issues`),s}}};const Il=n=>{const e=n.reduce(Mc,{});return e.preferred||e.normal||[]},Nc=n=>n.filter(e=>e.rank!=="deprecated"),Mc=(n,e)=>{const{rank:t}=e;return n[t]||(n[t]=[]),n[t].push(e),n},Lc=n=>{const e={};return Object.keys(n).forEach(t=>{e[t]=Il(n[t])}),e};var Fl={truthyClaims:Lc,truthyPropertyClaims:Il,nonDeprecatedPropertyClaims:Nc};const{parse:Pc}=Bc,{uniq:Wc}=_t,{truthyPropertyClaims:Jc,nonDeprecatedPropertyClaims:Vc}=Fl,tr=(n,...e)=>{const{propertyPrefix:t}=ir(e),i={};for(let s in n){const o=n[s];t&&(s=t+":"+s),i[s]=nr(o,...e)}return i},nr=(n,...e)=>{if(n==null||n.length===0)return[];const{keepNonTruthy:t,keepNonDeprecated:i,areSubSnaks:s}=ir(e);return i?n=Vc(n):t||s||(n=Jc(n)),n=n.map(o=>jo(o,...e)).filter(Hc),n[0]&&typeof n[0]!="object"?Wc(n):n},Hc=n=>n!==void 0,jo=(n,...e)=>{e=ir(e);const{keepQualifiers:t,keepReferences:i,keepIds:s,keepHashes:o,keepTypes:r,keepSnaktypes:u,keepRanks:l}=Yc(e),{mainsnak:a,rank:c}=n;let d,m,f,y,g,x;if(a?(m=a.datatype,f=a.datavalue,y=a.snaktype):(f=n.datavalue,m=n.datatype,y=n.snaktype,n.hash?g=!0:x=!0),f)d=Pc(m,f,e,n.id);else if(y==="somevalue")d=e.somevalueValue;else if(y==="novalue")d=e.novalueValue;else throw new Error("no datavalue or special snaktype found");if(g){if(!(o||r||u))return d;const _={value:d};return o&&(_.hash=n.hash),r&&(_.type=m),u&&(_.snaktype=y),_}if(x)return r?{type:m,value:d}:d;if(!(t||i||s||r||u||l))return d;const k={value:d};r&&(k.type=m),u&&(k.snaktype=y),l&&(k.rank=c);const A=Ss(e);return A.keepHashes=o,t&&(k.qualifiers=jl(n.qualifiers,A)),i&&(n.references=n.references||[],k.references=Ol(n.references,A)),s&&(k.id=n.id),k},ir=n=>{if(n==null)return{};if(n[0]&&typeof n[0]=="object")return n[0];const[e,t,i]=n;return{entityPrefix:e,propertyPrefix:t,keepQualifiers:i}},jl=(n,e)=>tr(n,Ss(e)),Uc=(n,e)=>nr(n,Ss(e)),Ol=(n,e)=>n.map(t=>Gc(t,e)),Gc=(n,e)=>{const t=Ss(e),i=tr(n.snaks,t);return t.keepHashes?{snaks:i,hash:n.hash}:i},Ss=(n={})=>n.areSubSnaks?n:Object.assign({},n,{areSubSnaks:!0}),zc=["keepQualifiers","keepReferences","keepIds","keepHashes","keepTypes","keepSnaktypes","keepRanks","keepRichValues"],Yc=n=>(n.keepAll&&zc.forEach(e=>{n[e]==null&&(n[e]=!0)}),n);var sr={simplifyClaims:tr,simplifyPropertyClaims:nr,simplifyClaim:jo,simplifyQualifiers:jl,simplifyPropertyQualifiers:Uc,simplifyQualifier:jo,simplifyReferences:Ol};const{isFormId:Kc}=Tn,{representations:Zc}=Qo,{simplifyClaims:Qc}=sr,Bl=(n,e)=>{const{id:t,representations:i,grammaticalFeatures:s,claims:o}=n;if(!Kc(t))throw new Error("invalid form object");return{id:t,representations:Zc(i),grammaticalFeatures:s,claims:Qc(o,e)}},Xc=(n,e)=>n.map(t=>Bl(t,e));var ep={simplifyForm:Bl,simplifyForms:Xc};const{isSenseId:tp}=Tn,{glosses:np}=Qo,{simplifyClaims:ip}=sr,Nl=(n,e)=>{const{id:t,glosses:i,claims:s}=n;if(!tp(t))throw new Error("invalid sense object");return{id:t,glosses:np(i),claims:ip(s,e)}},sp=(n,e)=>n.map(t=>Nl(t,e));var op={simplifySense:Nl,simplifySenses:sp},rp=["aa","ab","ace","ady","af","ak","als","alt","ami","am","ang","an","arc","ar","ary","arz","ast","as","atj","avk","av","awa","ay","azb","az","ban","bar","bat_smg","ba","bcl","be_x_old","be","bg","bh","bi","bjn","bm","bn","bo","bpy","br","bs","bug","bxr","ca","cbk_zam","cdo","ceb","ce","cho","chr","ch","chy","ckb","co","crh","cr","csb","cs","cu","cv","cy","dag","da","de","din","diq","dsb","dty","dv","dz","ee","el","eml","en","eo","es","et","eu","ext","fa","ff","fiu_vro","fi","fj","fo","frp","frr","fr","fur","fy","gag","gan","ga","gcr","gd","glk","gl","gn","gom","gor","got","gu","gv","hak","ha","haw","he","hif","hi","ho","hr","hsb","ht","hu","hy","hyw","hz","ia","id","ie","ig","ii","ik","ilo","inh","io","is","it","iu","jam","ja","jbo","jv","kaa","kab","ka","kbd","kbp","kg","ki","kj","kk","kl","km","kn","koi","ko","krc","kr","ksh","ks","ku","kv","kw","ky","lad","la","lbe","lb","lez","lfn","lg","lij","li","lld","lmo","ln","lo","lrc","ltg","lt","lv","mad","mai","map_bms","mdf","mg","mhr","mh","min","mi","mk","ml","mni","mn","mnw","mo","mrj","mr","ms","mt","mus","mwl","myv","my","mzn","nah","nap","na","nds_nl","nds","ne","new","ng","nia","nl","nn","nov","no","nqo","nrm","nso","nv","ny","oc","olo","om","or","os","pag","pam","pap","pa","pcd","pdc","pfl","pih","pi","pl","pms","pnb","pnt","ps","pt","pwn","qu","rm","rmy","rn","roa_rup","roa_tara","ro","rue","ru","rw","sah","sat","sa","scn","sco","sc","sd","se","sg","shi","shn","sh","shy","simple","si","skr","sk","sl","smn","sm","sn","sources","so","sq","srn","sr","ss","stq","st","su","sv","sw","szl","szy","ta","tay","tcy","tet","te","tg","th","ti","tk","tl","tn","to","tpi","trv","tr","ts","tt","tum","tw","tyv","ty","udm","ug","uk","ur","uz","vec","vep","ve","vi","vls","vo","war","wa","wo","wuu","xal","xh","xmf","yi","yo","yue","za","zea","zh_classical","zh_min_nan","zh_yue","zh","zu"];const{fixedEncodeURIComponent:ap,replaceSpaceByUnderscores:lp,isPlainObject:up}=_t,{isPropertyId:dp}=Tn,ba="https://www.wikidata.org/wiki/",hp=rp,cp=(n,e)=>{if(up(n)&&(e=n.title,n=n.site),!n)throw new Error("missing a site");if(!e)throw new Error("missing a title");const t=n.replace(/wiki$/,""),i=wa[t]||wa[n];if(i)return i(e);const{lang:s,project:o}=or(n);return e=ap(lp(e)),`https://${s}.${o}.org/wiki/${e}`},Qi=n=>e=>`https://${n}.wikimedia.org/wiki/${e}`,wa={commons:Qi("commons"),mediawiki:n=>`https://www.mediawiki.org/wiki/${n}`,meta:Qi("meta"),species:Qi("species"),wikidata:n=>dp(n)?`${ba}Property:${n}`:`${ba}${n}`,wikimania:Qi("wikimania")},pp=/^https?:\/\/([\w-]{2,10})\.(\w+)\.org\/\w+\/(.*)/,or=n=>{if(n.startsWith("http")){const e=n,t=e.match(pp);if(!t)throw new Error(`invalid sitelink url: ${e}`);let[i,s,o]=t.slice(1);o=decodeURIComponent(o);let r;return i==="www"?(i="en",r=s):i==="commons"?(i="en",s=r="commons"):r=`${i}${s}`.replace("wikipedia","wiki"),{lang:i,project:s,key:r,title:o,url:e}}else{const e=n,t=gp[e];if(t)return{lang:"en",project:t,key:e};const[i,s,o]=e.split("wik");if(o!=null)throw new Error(`invalid sitelink key: ${e}`);if(hp.indexOf(i)===-1)throw new Error(`sitelink lang not found: ${i}`);const r=mp[s];if(!r)throw new Error(`sitelink project not found: ${r}`);return{lang:i,project:r,key:e}}},gp={commonswiki:"commons",mediawikiwiki:"mediawiki",metawiki:"meta",specieswiki:"specieswiki",wikidatawiki:"wikidata",wikimaniawiki:"wikimania"},fp=n=>{try{return or(n),!0}catch{return!1}},mp={i:"wikipedia",isource:"wikisource",iquote:"wikiquote",tionary:"wiktionary",ibooks:"wikibooks",iversity:"wikiversity",ivoyage:"wikivoyage",inews:"wikinews"};var Ml={getSitelinkUrl:cp,getSitelinkData:or,isSitelinkKey:fp};const{getSitelinkUrl:yp}=Ml;var bp=(n,e={})=>{const{addUrl:t}=e;return Object.keys(n).reduce(wp(n,t),{})};const wp=(n,e)=>(t,i)=>{if(n[i]==null)return t[i]=n[i],t;const{title:s}=n[i];return e?t[i]={title:s,url:yp(i,s)}:t[i]=s,t};var vp=(n,e={})=>{typeof n=="string"&&(n=JSON.parse(n));const{vars:t}=n.head,i=n.results.bindings;if(t.length===1&&e.minimize===!0){const u=t[0];return i.map(l=>Oo(l[u])).filter(l=>l!=null)}const{richVars:s,associatedVars:o,standaloneVars:r}=qp(t);return i.map(Sp(s,o,r))};const Oo=n=>{if(!n)return;let{datatype:e}=n;return e=e&&e.replace("http://www.w3.org/2001/XMLSchema#",""),(_p[n.type]||Tp(e))(n)},_p={uri:n=>Ap(n.value),bnode:()=>null},Xi=n=>parseFloat(n.value),Tp=n=>(n=n&&n.replace("http://www.w3.org/2001/XMLSchema#",""),Cp[n]||xp),Cp={decimal:Xi,integer:Xi,float:Xi,double:Xi,boolean:n=>n.value==="true"},xp=n=>n.value,Ap=n=>n.match(/http.*\/entity\/statement\//)?kp(n):n.replace(/^https?:\/\/.*\/entity\//,"").replace(/^https?:\/\/.*\/prop\/direct\//,""),kp=n=>{n=n.replace(/^https?:\/\/.*\/entity\/statement\//,"");const e=n.split("-");return e[0]+"$"+e.slice(1).join("-")},qp=n=>{let e=n.filter(o=>n.some($p(o)));e=e.filter(o=>!e.some(r=>o!==r&&o.startsWith(r)));const t=new RegExp(`^(${e.join("|")})[A-Z]`),i=n.filter(o=>t.test(o)),s=n.filter(o=>!e.includes(o)&&!t.test(o));return{richVars:e,associatedVars:i,standaloneVars:s}},$p=n=>{const e=new RegExp(`^${n}[A-Z]\\w+`);return e.test.bind(e)},Sp=(n,e,t)=>i=>{const s={};for(const o of n){const r={},u=Oo(i[o]);u!=null&&(r.value=u);for(const l of e)l.startsWith(o)&&Dp(i,o,l,r);Object.keys(r).length>0&&(s[o]=r)}for(const o of t)s[o]=Oo(i[o]);return s},Dp=(n,e,t,i)=>{let s=t.split(e)[1];s=s[0].toLowerCase()+s.slice(1),s=Rp[s]||s;const o=n[t];o!=null&&(i[s]=o.value)},Rp={altLabel:"aliases"},{labels:Ep,descriptions:Ip,aliases:Fp,lemmas:jp,glosses:Op}=Qo,{simplifyClaim:va,simplifyPropertyClaims:_a,simplifyClaims:Ta,simplifyQualifier:Bp,simplifyPropertyQualifiers:Np,simplifyQualifiers:Mp,simplifyReferences:Lp}=sr,{simplifyForm:Pp,simplifyForms:Wp}=ep,{simplifySense:Jp,simplifySenses:Vp}=op,Hp=bp,Up=vp;var Ll={labels:Ep,descriptions:Ip,aliases:Fp,claim:va,propertyClaims:_a,claims:Ta,qualifier:Bp,propertyQualifiers:Np,qualifiers:Mp,references:Lp,sitelinks:Hp,snak:va,propertySnaks:_a,snaks:Ta,lemmas:jp,glosses:Op,form:Pp,forms:Wp,sense:Jp,senses:Vp,sparqlResults:Up};const rr=Ll,ar=(n,e)=>{const{type:t}=n,i={id:n.id,type:t,modified:n.modified};return n.datatype&&(i.datatype=n.datatype),t==="item"?(pt(n,i,"labels"),pt(n,i,"descriptions"),pt(n,i,"aliases"),pt(n,i,"claims",e),pt(n,i,"sitelinks",e)):t==="property"?(i.datatype=n.datatype,pt(n,i,"labels"),pt(n,i,"descriptions"),pt(n,i,"aliases"),pt(n,i,"claims",e)):t==="lexeme"&&(pt(n,i,"lemmas"),i.lexicalCategory=n.lexicalCategory,i.language=n.language,pt(n,i,"claims",e),pt(n,i,"forms",e),pt(n,i,"senses",e)),i},pt=(n,e,t,i)=>{n[t]!=null&&(e[t]=rr[t](n[t],i))},Pl=(n,e={})=>{n.entities&&(n=n.entities);const{entityPrefix:t}=e;return Object.keys(n).reduce((i,s)=>{const o=n[s];return t&&(s=`${t}:${s}`),i[s]=ar(o,e),i},{})};rr.entity=ar;rr.entities=Pl;var Gp={simplifyEntity:ar,simplifyEntities:Pl};const{simplifyEntity:zp}=Gp,Ca={entities:n=>{n=n.body||n;const{entities:e}=n;return Object.keys(e).forEach(t=>{e[t]=zp(e[t])}),e},pagesTitles:n=>(n=n.body||n,n.query.search.map(e=>e.title))};var Yp={wb:Ca,wd:Ca},co,xa;function Kp(){if(xa)return co;xa=1;const n=typeof location<"u"&&typeof document<"u";let e;return n?e=t=>new URLSearchParams(t).toString():e=ac.stringify,co=t=>i=>(n&&(i.origin="*"),Object.keys(i).forEach(s=>{i[s]==null&&delete i[s]}),t+"?"+e(i)),co}var po,Aa;function Zp(){if(Aa)return po;Aa=1;const{isPlainObject:n}=_t,e=["item","property","lexeme","form","sense"];return po=t=>(i,s,o,r,u)=>{let l,a;if(n(i)){const c=i;i=c.search,s=c.language,o=c.limit,a=c.continue,r=c.format,u=c.uselang,l=c.type}if(!(i&&i.length>0))throw new Error("search can't be empty");if(s=s||"en",u=u||s,o=o||"20",r=r||"json",l=l||"item",a=a||"0",!e.includes(l))throw new Error(`invalid type: ${l}`);return t({action:"wbsearchentities",search:i,language:s,limit:o,continue:a,format:r,uselang:u,type:l})},po}var go,ka;function Qp(){if(ka)return go;ka=1;const{isPlainObject:n}=_t,e=/^\d+[|\d]*$/;return go=t=>i=>{if(!n(i))throw new Error(`expected parameters to be passed as an object, got ${i} (${typeof i})`);for(const y in i)if(y.startsWith("sr")){const g=y.replace(/^sr/,"");if(i[g]!=null)throw new Error(`${g} and ${y} are the same`);i[g]=i[y]}const{search:s,haswbstatement:o,format:r="json",limit:u,offset:l,profile:a,sort:c}=i;let{namespace:d,prop:m}=i;if(!(s||o))throw new Error('missing "search" or "haswbstatement" parameter');let f="";if(s&&(f+=s),o){const y=o instanceof Array?o:[o];for(const g of y)g[0]==="-"?f+=` -haswbstatement:${g.slice(1)}`:f+=` haswbstatement:${g}`}if(u!=null&&(typeof u!="number"||u<1))throw new Error(`invalid limit: ${u}`);if(l!=null&&(typeof l!="number"||l<0))throw new Error(`invalid offset: ${l}`);if(d instanceof Array?d=d.join("|"):typeof d=="number"&&(d=d.toString()),d&&!e.test(d))throw new Error(`invalid namespace: ${d}`);if(a!=null&&typeof a!="string")throw new Error(`invalid profile: ${a} (${typeof a}, expected string)`);if(c!=null&&typeof c!="string")throw new Error(`invalid sort: ${c} (${typeof c}, expected string)`);if(m!=null&&(d instanceof Array&&(m=m.join("|")),typeof m!="string"))throw new Error(`invalid prop: ${m} (${typeof m}, expected string)`);return t({action:"query",list:"search",srsearch:f.trim(),format:r,srnamespace:d,srlimit:u,sroffset:l,srqiprofile:a,srsort:c,srprop:m})},go}var fo,qa;function Ds(){if(qa)return fo;qa=1;const n=Tn,e=(t,i)=>s=>{if(!n[i](s))throw new Error(`invalid ${t}: ${s}`)};return fo={entityId:e("entity id","isEntityId"),propertyId:e("property id","isPropertyId"),entityPageTitle:e("entity page title","isEntityPageTitle"),revisionId:e("revision id","isRevisionId")},fo}var mo,$a;function Wl(){if($a)return mo;$a=1;const{isPlainObject:n,forceArray:e,shortLang:t}=_t,i=Ds();return mo=s=>(o,r,u,l,a)=>{if(n(o)&&({ids:o,languages:r,props:u,format:l,redirects:a}=o),l=l||"json",!(o&&o.length>0))throw new Error("no id provided");o=e(o),o.forEach(i.entityId),o.length>50&&console.warn(`getEntities accepts 50 ids max to match Wikidata API limitations:
      this request won't get all the desired entities.
      You can use getManyEntities instead to generate several request urls
      to work around this limitation`);const c={action:"wbgetentities",ids:o.join("|"),format:l};return a===!1&&(c.redirects="no"),r&&(r=e(r).map(t),c.languages=r.join("|")),u&&u.length>0&&(c.props=e(u).join("|")),s(c)},mo}var yo,Sa;function Xp(){if(Sa)return yo;Sa=1;const{isPlainObject:n}=_t;yo=t=>{const i=Wl()(t);return(s,o,r,u,l)=>{if(n(s)&&({ids:s,languages:o,props:r,format:u,redirects:l}=s),!(s instanceof Array))throw new Error("getManyEntities expects an array of ids");return e(s).map(a=>i(a,o,r,u,l))}};const e=t=>{const i=[];for(;t.length>0;){const s=t.slice(0,50);t=t.slice(50),i.push(s)}return i};return yo}var bo,Da;function eg(){if(Da)return bo;Da=1;const{forceArray:n}=_t,e=Ds();bo=s=>(o,r={})=>{o=n(o),o.forEach(e.entityPageTitle);const u=o.length===1,l={action:"query",prop:"revisions"};l.titles=o.join("|"),l.format=r.format||"json",u&&(l.rvlimit=r.limit||"max"),u&&r.start&&(l.rvstart=t(r.start)),u&&r.end&&(l.rvend=t(r.end));const{prop:a,user:c,excludeuser:d,tag:m}=r;return a?l.rvprop=n(a).join("|"):l.rvprop="ids|flags|timestamp|user|userid|size|slotsize|sha1|slotsha1|contentmodel|comment|parsedcomment|content|tags|roles|oresscores",l.rvslots="*",c&&(l.rvuser=c),d&&(l.rvexcludeuser=d),m&&(l.rvtag=m),s(l)};const t=s=>typeof s=="number"&&s<i?s:Math.trunc(new Date(s).getTime()/1e3),i=new Date("2000-01-01").getTime();return bo}var wo,Ra;function tg(){if(Ra)return wo;Ra=1;const n=Ds(),{isPlainObject:e}=_t;return wo=(t,i)=>(s,o)=>(e(s)&&(o=s.revision,s=s.id),n.entityId(s),n.revisionId(o),`${t}/${i}/index.php?title=Special:EntityData/${s}.json&revision=${o}`),wo}var vo,Ea;function ng(){if(Ea)return vo;Ea=1;const{isPlainObject:n,forceArray:e,shortLang:t}=_t;vo=s=>(o,r,u,l,a,c)=>{if(n(o)){const m=o;o=m.titles,r=m.sites,u=m.languages,l=m.props,a=m.format,c=m.redirects}if(a=a||"json",!(o&&o.length>0))throw new Error("no titles provided");r&&r.length>0||(r=["enwiki"]),o=e(o),r=e(r).map(i),l=e(l);const d={action:"wbgetentities",titles:o.join("|"),sites:r.join("|"),format:a};return r.length===1&&o.length===1&&(d.normalize=!0),u&&(u=e(u).map(t),d.languages=u.join("|")),l&&l.length>0&&(d.props=l.join("|")),c===!1&&(d.redirects="no"),s(d)};const i=s=>s.length===2?`${s}wiki`:s;return vo}var _o,Ia;function Jl(){if(Ia)return _o;Ia=1;const{fixedEncodeURIComponent:n}=_t;return _o=e=>t=>{const i=n(t);return`${e}?format=json&query=${i}`},_o}var To,Fa;function ig(){if(Fa)return To;Fa=1;const{forceArray:n}=_t,{isItemId:e}=Tn,t=Ds(),i="FILTER NOT EXISTS { ?subject rdf:type wikibase:Property . } ";To=a=>{const c=Jl()(a);return(d,m,f={})=>{const{limit:y,caseInsensitive:g,keepProperties:x}=f,k=g?u:r,A=x?"":i;let _=n(d);_.forEach(t.propertyId),_=_.map(l).join("|");let T=`SELECT DISTINCT ?subject WHERE { ${s(m,k,_,A)} }`;return y&&(T+=` LIMIT ${y}`),c(T)}};const s=(a,c,d,m)=>a instanceof Array?"{ "+a.map(o).map(y=>c(d,y,m)).join("} UNION {")+" }":c(d,o(a),m),o=a=>(e(a)?a=`wd:${a}`:typeof a=="string"&&(a=`'${a}'`),a),r=(a,c,d,m)=>`?subject ${a} ${c} .
    ${d}`,u=(a,c,d,m)=>`?subject ${a} ?value .
    FILTER (lcase(?value) = ${c.toLowerCase()})
    ${d}`,l=a=>"wdt:"+a;return To}const{isPlainObject:sg}=_t,og=Ll,rg=Yp,ag=Tn,lg=Ml,ug=Fl,dg=`Tip: if you just want to access functions that don't need an instance or a sparqlEndpoint,
those are also exposed directly on the module object. Exemple:
const { isItemId, simplify } = require('wikibase-sdk')`,Vl=Object.assign({simplify:og,parse:rg},ag,lg,ug),Hl=n=>{if(!sg(n))throw new Error("invalid config");const{instance:e,sparqlEndpoint:t}=n;let{wgScriptPath:i="w"}=n;if(i=i.replace(/^\//,""),!(e||t))throw new Error(`one of instance or sparqlEndpoint should be set at initialization.
${dg}`);let s,o,r;if(e){ja("instance",e),o=e.replace(/\/$/,"").replace(`/${i}/api.php`,""),r=`${o}/${i}/api.php`;const a=Kp()(r);s={searchEntities:Zp()(a),cirrusSearchPages:Qp()(a),getEntities:Wl()(a),getManyEntities:Xp()(a),getRevisions:eg()(a),getEntityRevision:tg()(e,i),getEntitiesFromSitelinks:ng()(a)}}else s={searchEntities:mn("searchEntities"),cirrusSearchPages:mn("cirrusSearchPages"),getEntities:mn("getEntities"),getManyEntities:mn("getManyEntities"),getRevisions:mn("getRevisions"),getEntityRevision:mn("getEntityRevision"),getEntitiesFromSitelinks:mn("getEntitiesFromSitelinks")};let u;return t?(ja("sparqlEndpoint",t),u={sparqlQuery:Jl()(t),getReverseClaims:ig()(t)}):u={sparqlQuery:Oa("sparqlQuery"),getReverseClaims:Oa("getReverseClaims")},Object.assign({instance:{root:o,apiEndpoint:r}},Vl,s,u)};Object.assign(Hl,Vl);const ja=(n,e)=>{if(!(typeof e=="string"&&e.startsWith("http")))throw new Error(`invalid ${n}: ${e}`)},Ul=n=>e=>()=>{throw new Error(`${e} requires ${n} to be set at initialization`)},Oa=Ul("a sparqlEndpoint"),mn=Ul("an instance");var hg=Hl,Bo=hg({instance:"https://www.wikidata.org",sparqlEndpoint:"https://query.wikidata.org/sparql"});class Yn{constructor(e,t,i,s,o,r){w(this,"id");w(this,"labels");w(this,"descriptions");w(this,"claims");w(this,"wikisites");w(this,"commons");this.id=e,this.labels=t,this.descriptions=i,this.claims=s,this.wikisites=o,this.commons=r}static fromJson(e){const t=new Map;for(const u in e.labels)t.set(u,e.labels[u].value);const i=new Map;for(const u in e.descriptions)i.set(u,e.descriptions[u].value);const s=new Map;for(const u in e.sitelinks){const l=u.substring(0,u.length-4),a=e.sitelinks[u].title;s.set(l,a)}const o=s.get("commons");s.delete("commons");const r=Yn.extractClaims(e.claims);return new Yn(e.id,t,i,r,s,o)}static extractClaims(e){const t=Bo.simplify.claims(e,{timeConverter:"simple-day"}),i=new Map;for(const s in t){const o=t[s];i.set(s,new Set(o))}return i}}class cg{constructor(e){w(this,"id");w(this,"lemma");w(this,"senses");w(this,"claims");this.id=e.id,this.claims=Yn.extractClaims(e.claims),this.lemma=new Map;for(const t in e.lemmas)this.lemma.set(t,e.lemmas[t].value);this.senses=new Map;for(const t of e.senses){const i=t.glosses;for(const s in i){let o=this.senses.get(s);o===void 0?o="":o=o+"; ",this.senses.set(s,o+i[s].value)}}}asWikidataResponse(){return new Yn(this.id,this.lemma,this.senses,this.claims,new Map,void 0)}}const ut=class{static LoadWikidataEntry(e){const t=this.ExtractKey(e),i=ut._storeCache.get(t);if(i)return i;const s=vn.FromPromiseWithErr(ut.LoadWikidataEntryAsync(t));return ut._storeCache.set(t,s),s}static async searchAdvanced(e,t){let i="";(t==null?void 0:t.instanceOf)!==void 0&&t.instanceOf.length>0&&(i="{"+t.instanceOf.map(c=>`{ ?item wdt:P31/wdt:P279* wd:Q${c}. }`).join(" UNION ")+"}");const o=((t==null?void 0:t.notInstanceOf)??[]).concat([17379835]).map(a=>`MINUS {?item wdt:P31/wdt:P279* wd:Q${a} .}`),r=`SELECT * WHERE {
            SERVICE wikibase:mwapi {
                bd:serviceParam wikibase:api "EntitySearch" .
                bd:serviceParam wikibase:endpoint "www.wikidata.org" .
                bd:serviceParam mwapi:search "${e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}" .
                bd:serviceParam mwapi:language "${t.lang}" .
                ?item wikibase:apiOutputItem mwapi:item .
                ?num wikibase:apiOrdinal true .
                bd:serviceParam wikibase:limit ${Math.round(((t==null?void 0:t.maxCount)??20)*1.5)} .
                ?label wikibase:apiOutput mwapi:label .
                ?description wikibase:apiOutput "@description" .
            }
            ${i}
            ${o.join(`
    `)}
        } ORDER BY ASC(?num) LIMIT ${(t==null?void 0:t.maxCount)??20}`,u=Bo.sparqlQuery(r);return(await P.downloadJson(u)).results.bindings.map(({item:a,label:c,description:d,num:m})=>({relevance:m==null?void 0:m.value,id:a==null?void 0:a.value,label:c==null?void 0:c.value,description:d==null?void 0:d.value}))}static async search(e,t,i=1){const s=(t==null?void 0:t.maxCount)??20;let o=Math.min(s,50);const r=i*o-o,u=(t==null?void 0:t.lang)??"en",l="https://www.wikidata.org/w/api.php?action=wbsearchentities&search="+e+"&language="+u+"&limit="+o+"&continue="+r+"&format=json&uselang="+u+"&type=item&origin=*&props=",c=(await P.downloadJsonCached(l,1e4)).search;if(c.length<o)return c;if(c.length<s){const d={...t};d.maxCount=s-c.length,c.push(...await ut.search(e,d,i+1))}return c}static async searchAndFetch(e,t){const i=await ut.searchAdvanced(e,t),s=await Promise.all(i.map(async o=>{try{return console.log("Loading ",o.id),await ut.LoadWikidataEntry(o.id).AsPromise()}catch(r){console.error(r);return}}));return P.NoNull(s.map(o=>o.success))}static ExtractKey(e){if(typeof e=="number")return"Q"+e;if(e===void 0){console.error("ExtractKey: value is undefined");return}e=e.trim().toLowerCase();for(const t of ut._prefixesToRemove)e.startsWith(t)&&(e=e.substring(t.length));if(!(e.startsWith("http")&&e==="")){for(const t of ut._identifierPrefixes)if(e.startsWith(t)){const i=e.substring(t.length);if(i==="")return;const s=Number(i);return isNaN(s)?void 0:e.toUpperCase()}if(e!==""&&!isNaN(Number(e)))return"Q"+e}}static QIdToNumber(e){if(e==null)return;if(typeof e=="number")return e;if(e=e.trim(),!e.startsWith("Q"))return;e=e.substr(1);const t=Number(e);if(!isNaN(t))return t}static IdToArticle(e){if(e.startsWith("Q"))return"https://wikidata.org/wiki/"+e;if(e.startsWith("L"))return"https://wikidata.org/wiki/Lexeme:"+e;throw"Unknown id type: "+e}static async Sparql(e,t){const i="SELECT "+e.map(r=>r.startsWith("?")?r:"?"+r).join(" ")+`
WHERE
{
`+t.map(r=>r.endsWith(".")?r:r+".").join(`
`)+`  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}`,s=Bo.sparqlQuery(i);return(await P.downloadJsonCached(s,24*60*60*1e3)).results.bindings}static async LoadWikidataEntryAsync(e){const t=""+e,i=ut._cache.get(t);if(i)return i;const s=ut.LoadWikidataEntryUncachedAsync(e);return ut._cache.set(t,s),s}static async LoadWikidataEntryUncachedAsync(e){const t=ut.ExtractKey(e);if(t===void 0){console.warn("Could not extract a wikidata entry from",e);return}const i="https://www.wikidata.org/wiki/Special:EntityData/"+t+".json",s=(await P.downloadJsonCached(i,1e4)).entities,o=Array.from(Object.keys(s))[0],r=s[o];return t.startsWith("L")?new cg(r).asWikidataResponse():Yn.fromJson(r)}};let vt=ut;w(vt,"neededUrls",["https://www.wikidata.org/","https://wikidata.org/","https://query.wikidata.org","https://m.wikidata.org"]),w(vt,"_identifierPrefixes",["Q","L"].map(e=>e.toLowerCase())),w(vt,"_prefixesToRemove",["https://www.wikidata.org/wiki/Lexeme:","https://www.wikidata.org/wiki/","http://www.wikidata.org/entity/","Lexeme:"].map(e=>e.toLowerCase())),w(vt,"_storeCache",new Map),w(vt,"_cache",new Map);class Gl extends Si{}class lr extends Gl{constructor(t){super();w(this,"enterPressed",new vn(void 0));w(this,"value");w(this,"_actualField");w(this,"_isValid");w(this,"_rawValue");w(this,"_isFocused",!1);w(this,"_options");this._options=t??{},t=t??{},this.value=(t==null?void 0:t.value)??new vn(void 0),this._rawValue=new vn(""),this._isValid=t.isValid??(i=>!0)}static SetCursorPosition(t,i){t!=null&&(i===-1&&(i=t.value.length),t.focus(),t.setSelectionRange(i,i))}GetValue(){return this.value}IsValid(t){return t==null?!1:this._isValid(t)}InnerConstructElement(){const t=this._options,i=this;let s,o="";t.placeholder&&(typeof t.placeholder=="string"?(o=t.placeholder,s=void 0):(t.placeholder instanceof Uh&&t.placeholder.data!==void 0?s=t.placeholder:t.placeholder instanceof en&&t.placeholder.translations!==void 0&&(s=$l.language.map(a=>t.placeholder.textFor(a))),o=(s==null?void 0:s.data)??o??"")),this.SetClass("form-text-field");let r;if(t.htmlType==="area"){this.SetClass("w-full box-border max-w-full");const a=document.createElement("textarea");a.placeholder=o,a.rows=t.textAreaRows,a.cols=50,a.style.width="100%",a.dir="auto",r=a,s&&s.addCallbackAndRunD(c=>a.placeholder=c)}else{const a=document.createElement("input");a.type=t.htmlType??"text",a.inputMode=t.inputMode,a.placeholder=o,a.style.cssText=t.inputStyle??"width: 100%;",a.dir="auto",r=a,s&&s.addCallbackAndRunD(c=>a.placeholder=c)}const u=document.createElement("form");u.appendChild(r),u.onsubmit=()=>!1,t.label&&u.appendChild(t.label.ConstructElement());const l=r;return this.value.addCallbackAndRunD(a=>{l.value=a}),l.oninput=()=>{const a=l.value.substring(l.selectionEnd).replace(/ /g,"").length;let c=l.value;i._rawValue.setData(c),i.IsValid(c)?i.value.setData(c):i.value.setData(void 0),c=l.value;let d=c.length-a;for(;d>=0&&c.substr(d).replace(/ /g,"").length<a;)d--;lr.SetCursorPosition(l,d)},l.addEventListener("keyup",function(a){a.key==="Enter"&&i.enterPressed.setData(l.value)}),this._isFocused&&l.focus(),this._actualField=l,u}focus(){this._actualField===void 0?this._isFocused=!0:this._actualField.focus()}}class zl extends K{constructor(e){const t=J.W(e)??J.t.general.loading;t.SetClass("pl-2"),super([Ke.loading_svg().SetClass("animate-spin self-center").SetStyle("width: 1.5rem; height: 1.5rem; min-width: 1.5rem;"),t]),this.SetClass("flex p-1")}}class pg{GetRelevantUrls(e,t){const i=(t==null?void 0:t.prefixes)??this.defaultKeyPrefixes;if(i===void 0)throw"No `defaultKeyPrefixes` defined by this image provider";const s=new vn([]),o=new Set;return e.addCallbackAndRunD(r=>{var u,l;for(const a in r){if(!i.some(d=>a.startsWith(d)))continue;const c=P.NoEmpty(((l=(u=r[a])==null?void 0:u.split(";"))==null?void 0:l.map(d=>d.trim()))??[]);for(const d of c)o.has(d)||(o.add(d),this.ExtractUrls(a,d).then(m=>{for(const f of m??[])f!==void 0&&f.then(y=>{y!==void 0&&(s.data.push(y),s.ping())})}))}}),s}}class gg{constructor(){w(this,"title","");w(this,"artist","");w(this,"license");w(this,"licenseShortName","");w(this,"usageTerms","");w(this,"attributionRequired",!1);w(this,"copyrighted",!1);w(this,"credit","");w(this,"description","");w(this,"informationLocation")}}class ur{static async GetCategoryContents(e,t=10,i=void 0){var a;if(e==null||e==="")return[];e.startsWith("Category:")||(e="Category:"+e);let s="https://commons.wikimedia.org/w/api.php?action=query&list=categorymembers&format=json&&origin=*&cmtitle="+encodeURIComponent(e);i!==void 0&&(s=`${s}&cmcontinue=${i}`);const o=await P.downloadJson(s),u=(((a=o.query)==null?void 0:a.categorymembers)??[]).map(c=>c.title);if(o.continue===void 0)return u;if(t-u.length<=0)return console.debug(`Recursive wikimedia category load stopped for ${e}`),u;const l=await ur.GetCategoryContents(e,t-u.length,o.continue.cmcontinue);return u.push(...l),u}}const wt=class extends pg{constructor(){super();w(this,"commons_key","wikimedia_commons");w(this,"defaultKeyPrefixes",[this.commons_key,"image"])}static ExtractFileName(t){if(!t.startsWith("http"))return t;const i=new URL(t).pathname;return i.substring(i.lastIndexOf("/")+1)}static PrepareUrl(t){return t.toLowerCase().startsWith("https://commons.wikimedia.org/wiki/")?t:`https://commons.wikimedia.org/wiki/Special:FilePath/${encodeURIComponent(t)}?width=500&height=400`}static startsWithCommonsPrefix(t){return wt.commonsPrefixes.some(i=>t.startsWith(i))}static removeCommonsPrefix(t){if(t.startsWith("https://upload.wikimedia.org/"))return t=t.substring(t.lastIndexOf("/")+1),t=decodeURIComponent(t),t.startsWith("File:")||(t="File:"+t),t;for(const i of wt.commonsPrefixes)if(t.startsWith(i)){let s=t.substr(i.length);return i.startsWith("http")&&(s=decodeURIComponent(s)),s}return t}apiUrls(){return wt.apiUrls}SourceIcon(t){const i=Ke.wikimedia_commons_white_svg().SetStyle("width:2em;height: 2em");return t===void 0?i:new qt(Ke.wikimedia_commons_white_svg(),`https://commons.wikimedia.org/wiki/${t}`,!0)}PrepUrl(t){return t=wt.removeCommonsPrefix(t),t.startsWith("File:")?this.UrlForImage(t):this.UrlForImage("File:"+t)}async ExtractUrls(t,i){const s=wt.startsWithCommonsPrefix(i);return t!==void 0&&t!==this.commons_key&&!s?[]:(i=wt.removeCommonsPrefix(i),i.startsWith("Category:")?(await ur.GetCategoryContents(i)).filter(r=>r.startsWith("File:")).map(r=>Promise.resolve(this.UrlForImage(r))):i.startsWith("File:")?[Promise.resolve(this.UrlForImage(i))]:i.startsWith("http")?[]:[Promise.resolve(this.UrlForImage("File:"+i))])}async DownloadAttribution(t){var a,c,d,m,f,y,g,x,k;if(t=wt.ExtractFileName(t),t==="")return;const i="https://en.wikipedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles="+t+"&format=json&origin=*",s=await P.downloadJsonCached(i,365*24*60*60),o=new gg,r=s.query.pages[-1];if(r===void 0)return;const u=(a=(r.imageinfo??[])[0])==null?void 0:a.extmetadata;if(u===void 0){console.warn("The file",t,"has no usable metedata or license attached... Please fix the license info file yourself!");return}let l=r.title;return l.startsWith("File:")&&(l=l.substr(5)),(l.endsWith(".jpg")||l.endsWith(".png"))&&(l=l.substring(0,l.length-4)),o.title=l,o.artist=(c=u.Artist)==null?void 0:c.value,o.license=(d=u.License)==null?void 0:d.value,o.copyrighted=(m=u.Copyrighted)==null?void 0:m.value,o.attributionRequired=(f=u.AttributionRequired)==null?void 0:f.value,o.usageTerms=(y=u.UsageTerms)==null?void 0:y.value,o.licenseShortName=(g=u.LicenseShortName)==null?void 0:g.value,o.credit=(x=u.Credit)==null?void 0:x.value,o.description=(k=u.ImageDescription)==null?void 0:k.value,o.informationLocation=new URL("https://en.wikipedia.org/wiki/"+r.title),o}UrlForImage(t){return t.startsWith("File:")||(t="File:"+t),{url:wt.PrepareUrl(t),key:void 0,provider:this}}};let Nn=wt;w(Nn,"singleton",new wt),w(Nn,"apiUrls",["https://commons.wikimedia.org/wiki/","https://upload.wikimedia.org"]),w(Nn,"commonsPrefixes",[...wt.apiUrls,"File:"]);const Zt=class extends hs{constructor(e,t){let i=!1;const s=e.stabilized(250).bind(o=>o===void 0||o===""||o==="Q"?null:(i=!0,vt.LoadWikidataEntry(o)));super(s.map(o=>{if(o===null||!i)return t==null?void 0:t.whileLoading;if(o===void 0)return new zl(J.t.general.loading);if(o.error!==void 0)return new Xe(o.error).SetClass("alert");const r=o.success;return Zt.WikidataResponsePreview(r,t)}))}static WikidataResponsePreview(e,t){var r,u,l;let i=(r=new qt(new K([e.id,t!=null&&t.noImages?e.id:Ke.wikidata_svg().SetStyle("width: 2.5rem").SetClass("block")]).SetClass("flex"),vt.IdToArticle(e.id),!0))==null?void 0:r.SetClass("must-link"),s=new K([new K([(u=en.fromMap(e.labels))==null?void 0:u.SetClass("font-bold"),i]).SetClass("flex justify-between flex-wrap-reverse"),en.fromMap(e.descriptions),Zt.QuickFacts(e,t),...(t==null?void 0:t.extraItems)??[]]).SetClass("flex flex-col link-underline"),o;return((l=e.claims.get("P18"))==null?void 0:l.size)>0&&(o=Array.from(e.claims.get("P18"))[0]),o&&!(t!=null&&t.noImages)&&(o=Nn.singleton.PrepUrl(o).url,s=new K([new Eo(o).SetStyle((t==null?void 0:t.imageStyle)??"max-width: 5rem; width: unset; height: 4rem").SetClass("rounded-xl mr-2"),s.SetClass("w-full")]).SetClass("flex")),s.SetClass("p-2 w-full"),s}static QuickFacts(e,t){var s,o,r;const i=[];for(const u of Zt.extraProperties){let l=!0;for(const y of u.requires){if(!((s=e.claims)!=null&&s.has("P"+y.p))){l=!1;break}if(!((o=e.claims)!=null&&o.get("P"+y.p).has("Q"+y.q))){l=!1;break}}if(!l)continue;const a=u.property,c=(t!=null&&t.noImages?u.textMode:u.display)??u.display;if(((r=e.claims)==null?void 0:r.get(a))===void 0)continue;const d=Array.from(e.claims.get(a));if(c instanceof en){i.push(c.Subs({value:d.join(", ")}).SetClass("m-2"));continue}const f=P.NoNull(d.map(y=>c.get(y))).map(y=>typeof y=="string"?new Xe(y):y());i.push(new K(f).SetClass("flex m-2"))}if(i.length!==0)return new K(i).SetClass("flex")}};let bi=Zt;w(bi,"isHuman",[{p:31,q:5}]),w(bi,"extraProperties",[{requires:Zt.isHuman,property:"P21",display:new Map([["Q6581097",()=>Ke.gender_male_svg().SetStyle("width: 1rem; height: auto")],["Q6581072",()=>Ke.gender_female_svg().SetStyle("width: 1rem; height: auto")],["Q1097630",()=>Ke.gender_inter_svg().SetStyle("width: 1rem; height: auto")],["Q1052281",()=>Ke.gender_trans_svg().SetStyle("width: 1rem; height: auto")],["Q2449503",()=>Ke.gender_trans_svg().SetStyle("width: 1rem; height: auto")],["Q48270",()=>Ke.gender_queer_svg().SetStyle("width: 1rem; height: auto")]]),textMode:new Map([["Q6581097","♂️"],["Q6581072","♀️"],["Q1097630","⚥️"],["Q1052281","🏳️‍⚧️"],["Q2449503","🏳️‍⚧️"],["Q48270","🏳️‍🌈 ⚧"]])},{property:"P569",requires:Zt.isHuman,display:J.t.general.wikipedia.previewbox.born},{property:"P570",requires:Zt.isHuman,display:J.t.general.wikipedia.previewbox.died}]);class Kn extends Si{constructor(t,i,s){super();w(this,"_header");w(this,"_contents");w(this,"_contentStyle");w(this,"_sortable");this._contentStyle=(s==null?void 0:s.contentStyle)??[["min-width: 9rem"]],this._header=t==null?void 0:t.map(J.W),this._contents=i.map(o=>o.map(J.W)),this._sortable=(s==null?void 0:s.sortable)??!1}AsMarkdown(){const t=this._header.map(r=>(r==null?void 0:r.AsMarkdown())??" "),i=P.NoNull(t).join(" | "),s=t.map(r=>"-".repeat(r.length+2)).join(" | "),o=this._contents.map(r=>r.map(u=>{var l,a;return((a=(l=u==null?void 0:u.AsMarkdown())==null?void 0:l.replaceAll("\\","\\\\"))==null?void 0:a.replaceAll("|","\\|"))??" "}).join(" | ")).join(`
`);return`

`+[i,s,o,""].join(`
`)}InnerConstructElement(){const t=document.createElement("table"),i=new vn(void 0),s=this,o=P.NoNull((this._header??[]).map((r,u)=>(s._sortable&&r.onClick(()=>{i.data==u?i.setData(-1-u):i.setData(u)}),r.ConstructElement())));if(o.length>0){const r=document.createElement("thead"),u=document.createElement("tr");o.forEach(l=>{const a=document.createElement("th");a.appendChild(l),u.appendChild(a)}),r.appendChild(u),t.appendChild(r)}for(let r=0;r<this._contents.length;r++){let u=this._contents[r];const l=document.createElement("tr");for(let a=0;a<u.length;a++)try{let c=u[a];if((c==null?void 0:c.ConstructElement)===void 0)continue;const d=c==null?void 0:c.ConstructElement();if(d===void 0)continue;let m;this._contentStyle!==void 0&&this._contentStyle[r]!==void 0&&this._contentStyle[a]!==void 0&&(m=this._contentStyle[r][a]);const f=document.createElement("td");f.style.cssText=m,f.appendChild(d),l.appendChild(f)}catch(c){console.error("Could not render an element in a table due to",c,u[a])}t.appendChild(l)}return i.addCallback(r=>{if(r===void 0)return;const u=r<0,l=u?-r-1:r;let a=Array.from(t.rows);a.splice(0,1),a=a.sort((c,d)=>{var y,g,x,k;const m=(g=(y=c.cells[l])==null?void 0:y.textContent)==null?void 0:g.toLowerCase(),f=(k=(x=d.cells[l])==null?void 0:x.textContent)==null?void 0:k.toLowerCase();return m===f?0:m<f!==u?-1:1});for(let c=a.length;c>1;c--)t.deleteRow(c);for(const c of a)t.appendChild(c)}),t}}const Ts=class extends Gl{constructor(t){super();w(this,"wikidataId");w(this,"searchText");w(this,"instanceOf");w(this,"notInstanceOf");this.searchText=t==null?void 0:t.searchText,this.wikidataId=(t==null?void 0:t.value)??new vn(void 0),this.instanceOf=t==null?void 0:t.instanceOf,this.notInstanceOf=t==null?void 0:t.notInstanceOf}GetValue(){return this.wikidataId}IsValid(t){return t.startsWith("Q")&&!isNaN(Number(t.substring(1)))}InnerConstructElement(){const t=new lr({placeholder:J.t.general.wikipedia.searchWikidata,value:this.searchText,inputStyle:"width: calc(100% - 0.5rem); border: 1px solid black"}),i=this.wikidataId,s=new qs({success:void 0}),o=t.GetValue().bind(u=>{if(u.length<3&&!u.match(/[qQ][0-9]+/))return s;const l=$l.language.data,a=l+":"+u;let c=Ts._searchCache.get(a);return c===void 0&&(c=vt.searchAndFetch(u,{lang:l,maxCount:5,notInstanceOf:this.notInstanceOf,instanceOf:this.instanceOf}),Ts._searchCache.set(a,c)),Gh.FromPromiseWithErr(c)}),r=new hs(o.map(u=>{if(t.GetValue().data.length===0)return J.t.general.wikipedia.doSearch;if(t.GetValue().data.length<3)return J.t.general.wikipedia.searchToShort;if(u===void 0)return new zl(J.t.general.loading);if(u.error!==void 0)return new K([J.t.general.wikipedia.failed.Clone().SetClass("alert"),u.error]);const l=u.success;return l.length===0?J.t.general.wikipedia.noResults.Subs({search:t.GetValue().data??""}):new K(l.map(a=>{const c=bi.WikidataResponsePreview(a).SetClass("rounded-xl p-1 sm:p-2 md:p-3 m-px border-2 sm:border-4 transition-colors");return c.onClick(()=>{i.setData(a.id)}),i.addCallbackAndRunD(d=>{d===a.id?c.SetClass("subtle-background border-attention"):(c.RemoveClass("subtle-background"),c.RemoveClass("border-attention"))}),c})).SetClass("flex flex-col")},[t.GetValue()]));return new K([new et(J.t.general.wikipedia.searchWikidata,3).SetClass("m-2"),new K([Ke.search_svg().SetStyle("width: 1.5rem"),t.SetClass("m-2 w-full")]).SetClass("flex"),r]).SetClass("flex flex-col border-2 border-black rounded-xl m-2 p-2").ConstructElement()}};let wi=Ts;w(wi,"docs",new K([new et("Helper arguments"),new Kn(["name","doc"],[["key","the value of this tag will initialize search (default: name)"],["options",new K(["A JSON-object of type `{ removePrefixes: string[], removePostfixes: string[] }`.",new Kn(["subarg","doc"],[["removePrefixes","remove these snippets of text from the start of the passed string to search. This is either a list OR a hash of languages to a list. The individual strings are interpreted as case ignoring regexes"],["removePostfixes","remove these snippets of text from the end of the passed string to search. This is either a list OR a hash of languages to a list. The individual strings are interpreted as case ignoring regexes."],["instanceOf","A list of Q-identifier which indicates that the search results _must_ be an entity of this type, e.g. [`Q5`](https://www.wikidata.org/wiki/Q5) for humans"],["notInstanceof","A list of Q-identifiers which indicates that the search results _must not_ be an entity of this type, e.g. [`Q79007`](https://www.wikidata.org/wiki/Q79007) to filter away all streets from the search results"]])])]]),new et("Example usage"),`The following is the 'freeform'-part of a layer config which will trigger a search for the wikidata item corresponding with the name of the selected feature. It will also remove '-street', '-square', ... if found at the end of the name

\`\`\`json
"freeform": {
    "key": "name:etymology:wikidata",
    "type": "wikidata",
    "helperArgs": [
        "name",
        {
            "removePostfixes": {"en": [
                "street",
                "boulevard",
                "path",
                "square",
                "plaza",
            ],
             "nl": ["straat","plein","pad","weg",laan"],
             "fr":["route (de|de la|de l'| de le)"]
             },

            "#": "Remove streets and parks from the search results:"
             "notInstanceOf": ["Q79007","Q22698"]
        }

    ]
}
\`\`\`

Another example is to search for species and trees:

\`\`\`json
 "freeform": {
        "key": "species:wikidata",
        "type": "wikidata",
        "helperArgs": [
          "species",
          {
          "instanceOf": [10884, 16521]
        }]
      }
\`\`\`
`])),w(wi,"_searchCache",new Map);class fg extends Je{constructor(){super("wikidata",new K(["A wikidata identifier, e.g. Q42.",wi.docs]))}isValid(e){return e===void 0||e.length<=2?!1:!e.split(";").some(t=>vt.ExtractKey(t)===void 0)}reformat(e){if(e===void 0)return;let t=e.split(";").map(i=>vt.ExtractKey(i)).join("; ");return e.endsWith(";")&&(t=t+";"),t}}class mg extends Rl{constructor(){super("pnat","A strict positive number");w(this,"isValid",t=>super.isValid(t)?Number(t)>0:!1)}getFeedback(t){const i=super.getFeedback(t);if(i!==void 0)return i;if(Number(t)===0)return J.t.validation.pnat.noZero}}class yg extends Je{constructor(t,i){super(t??"float",i??"A decimal number","decimal");w(this,"inputmode","decimal")}isValid(t){return!isNaN(Number(t))&&!t.endsWith(".")&&!t.endsWith(",")}reformat(t){return""+Number(t)}getFeedback(t){if(isNaN(Number(t)))return J.t.validation.nat.notANumber}}class bg extends Je{constructor(){super("pfloat","A positive decimal number or zero");w(this,"isValid",t=>!isNaN(Number(t))&&Number(t)>=0&&!t.endsWith(".")&&!t.endsWith(","))}getFeedback(t){const i=super.getFeedback(t);if(i!==void 0)return i;if(Number(t)<0)return J.t.validation.nat.mustBePositive}}var wg=/^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/,vg=function(n){if(!n||n.length>254)return!1;var e=wg.test(n);if(!e)return!1;var t=n.split("@");if(t[0].length>64)return!1;var i=t[1].split(".");return!i.some(function(s){return s.length>63})};class _g extends Je{constructor(){super("email","An email adress","email");w(this,"isValid",t=>t===void 0?!1:(t=t.trim(),t.startsWith("mailto:")&&(t=t.substring(7)),vg(t)));w(this,"reformat",t=>{if(t!==void 0)return t=t.trim(),t.startsWith("mailto:")&&(t=t.substring(7)),t})}getFeedback(t){return t.indexOf("@")<0?J.t.validation.email.noAt:super.getFeedback(t)}}class Yl extends Je{constructor(e,t){super(e??"url",t??"The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed","url")}reformat(e){try{let t;!e.startsWith("http://")&&!e.startsWith("https://")&&!e.startsWith("http:")?t=new URL("https://"+e):t=new URL(e);const i=["fbclid","gclid","cmpid","agid","utm","utm_source","utm_medium","campaignid","campaign","AdGroupId","AdGroup","TargetId","msclkid"];for(const o of i)t.searchParams.delete(o.toLowerCase());let s=t.toString();return s.endsWith("/")&&!e.endsWith("/")&&(s=s.substr(0,s.length-1)),s}catch(t){console.error(t);return}}isValid(e){try{!e.startsWith("http://")&&!e.startsWith("https://")&&!e.startsWith("http:")&&(e="https://"+e);const t=new URL(e);return t.host.indexOf(".")>0&&t.host[t.host.length-1]!=="."}catch{return!1}}}const Tg={version:4,country_calling_codes:{1:["US","AG","AI","AS","BB","BM","BS","CA","DM","DO","GD","GU","JM","KN","KY","LC","MP","MS","PR","SX","TC","TT","VC","VG","VI"],7:["RU","KZ"],20:["EG"],27:["ZA"],30:["GR"],31:["NL"],32:["BE"],33:["FR"],34:["ES"],36:["HU"],39:["IT","VA"],40:["RO"],41:["CH"],43:["AT"],44:["GB","GG","IM","JE"],45:["DK"],46:["SE"],47:["NO","SJ"],48:["PL"],49:["DE"],51:["PE"],52:["MX"],53:["CU"],54:["AR"],55:["BR"],56:["CL"],57:["CO"],58:["VE"],60:["MY"],61:["AU","CC","CX"],62:["ID"],63:["PH"],64:["NZ"],65:["SG"],66:["TH"],81:["JP"],82:["KR"],84:["VN"],86:["CN"],90:["TR"],91:["IN"],92:["PK"],93:["AF"],94:["LK"],95:["MM"],98:["IR"],211:["SS"],212:["MA","EH"],213:["DZ"],216:["TN"],218:["LY"],220:["GM"],221:["SN"],222:["MR"],223:["ML"],224:["GN"],225:["CI"],226:["BF"],227:["NE"],228:["TG"],229:["BJ"],230:["MU"],231:["LR"],232:["SL"],233:["GH"],234:["NG"],235:["TD"],236:["CF"],237:["CM"],238:["CV"],239:["ST"],240:["GQ"],241:["GA"],242:["CG"],243:["CD"],244:["AO"],245:["GW"],246:["IO"],247:["AC"],248:["SC"],249:["SD"],250:["RW"],251:["ET"],252:["SO"],253:["DJ"],254:["KE"],255:["TZ"],256:["UG"],257:["BI"],258:["MZ"],260:["ZM"],261:["MG"],262:["RE","YT"],263:["ZW"],264:["NA"],265:["MW"],266:["LS"],267:["BW"],268:["SZ"],269:["KM"],290:["SH","TA"],291:["ER"],297:["AW"],298:["FO"],299:["GL"],350:["GI"],351:["PT"],352:["LU"],353:["IE"],354:["IS"],355:["AL"],356:["MT"],357:["CY"],358:["FI","AX"],359:["BG"],370:["LT"],371:["LV"],372:["EE"],373:["MD"],374:["AM"],375:["BY"],376:["AD"],377:["MC"],378:["SM"],380:["UA"],381:["RS"],382:["ME"],383:["XK"],385:["HR"],386:["SI"],387:["BA"],389:["MK"],420:["CZ"],421:["SK"],423:["LI"],500:["FK"],501:["BZ"],502:["GT"],503:["SV"],504:["HN"],505:["NI"],506:["CR"],507:["PA"],508:["PM"],509:["HT"],590:["GP","BL","MF"],591:["BO"],592:["GY"],593:["EC"],594:["GF"],595:["PY"],596:["MQ"],597:["SR"],598:["UY"],599:["CW","BQ"],670:["TL"],672:["NF"],673:["BN"],674:["NR"],675:["PG"],676:["TO"],677:["SB"],678:["VU"],679:["FJ"],680:["PW"],681:["WF"],682:["CK"],683:["NU"],685:["WS"],686:["KI"],687:["NC"],688:["TV"],689:["PF"],690:["TK"],691:["FM"],692:["MH"],850:["KP"],852:["HK"],853:["MO"],855:["KH"],856:["LA"],880:["BD"],886:["TW"],960:["MV"],961:["LB"],962:["JO"],963:["SY"],964:["IQ"],965:["KW"],966:["SA"],967:["YE"],968:["OM"],970:["PS"],971:["AE"],972:["IL"],973:["BH"],974:["QA"],975:["BT"],976:["MN"],977:["NP"],992:["TJ"],993:["TM"],994:["AZ"],995:["GE"],996:["KG"],998:["UZ"]},countries:{AC:["247","00","(?:[01589]\\d|[46])\\d{4}",[5,6]],AD:["376","00","(?:1|6\\d)\\d{7}|[135-9]\\d{5}",[6,8,9],[["(\\d{3})(\\d{3})","$1 $2",["[135-9]"]],["(\\d{4})(\\d{4})","$1 $2",["1"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]]],AE:["971","00","(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",[5,6,7,8,9,10,11,12],[["(\\d{3})(\\d{2,9})","$1 $2",["60|8"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[236]|[479][2-8]"],"0$1"],["(\\d{3})(\\d)(\\d{5})","$1 $2 $3",["[479]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"]],"0"],AF:["93","00","[2-7]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"]],"0"],AG:["1","011","(?:268|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([457]\\d{6})$","268$1",0,"268"],AI:["1","011","(?:264|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2457]\\d{6})$","264$1",0,"264"],AL:["355","00","(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}",[6,7,8,9],[["(\\d{3})(\\d{3,4})","$1 $2",["80|9"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["4[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2358][2-5]|4"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["[23578]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["6"],"0$1"]],"0"],AM:["374","00","(?:[1-489]\\d|55|60|77)\\d{6}",[8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[89]0"],"0 $1"],["(\\d{3})(\\d{5})","$1 $2",["2|3[12]"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["1|47"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[3-9]"],"0$1"]],"0"],AO:["244","00","[29]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[29]"]]]],AR:["54","00","(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}",[10,11],[["(\\d{4})(\\d{2})(\\d{4})","$1 $2-$3",["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])","2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["1"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[68]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2-$3",["[23]"],"0$1",1],["(\\d)(\\d{4})(\\d{2})(\\d{4})","$2 15-$3-$4",["9(?:2[2-469]|3[3-578])","9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))","9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",0,"$1 $2 $3-$4"],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 15-$3-$4",["91"],"0$1",0,"$1 $2 $3-$4"],["(\\d{3})(\\d{3})(\\d{5})","$1-$2-$3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 15-$3-$4",["9"],"0$1",0,"$1 $2 $3-$4"]],"0",0,"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?","9$1"],AS:["1","011","(?:[58]\\d\\d|684|900)\\d{7}",[10],0,"1",0,"1|([267]\\d{6})$","684$1",0,"684"],AT:["43","00","1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}",[4,5,6,7,8,9,10,11,12,13],[["(\\d)(\\d{3,12})","$1 $2",["1(?:11|[2-9])"],"0$1"],["(\\d{3})(\\d{2})","$1 $2",["517"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["5[079]"],"0$1"],["(\\d{3})(\\d{3,10})","$1 $2",["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"],"0$1"],["(\\d{4})(\\d{3,9})","$1 $2",["[2-467]|5[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["5"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,7})","$1 $2 $3",["5"],"0$1"]],"0"],AU:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}",[5,6,7,8,9,10,12],[["(\\d{2})(\\d{3,4})","$1 $2",["16"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,4})","$1 $2 $3",["16"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["14|4"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[2378]"],"(0$1)"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:30|[89])"]]],"0",0,"0|(183[12])",0,0,0,[["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,["163\\d{2,6}",[5,6,7,8,9]],["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],AW:["297","00","(?:[25-79]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[25-9]"]]]],AX:["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}",[5,6,7,8,9,10,11,12],0,"0",0,0,0,0,"18",0,"00"],AZ:["994","00","365\\d{6}|(?:[124579]\\d|60|88)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[28]|2|365|46","1[28]|2|365[45]|46","1[28]|2|365(?:4|5[02])|46"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[13-9]"],"0$1"]],"0"],BA:["387","00","6\\d{8}|(?:[35689]\\d|49|70)\\d{6}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["6[1-3]|[7-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2-$3",["[3-5]|6[56]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["6"],"0$1"]],"0"],BB:["1","011","(?:246|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","246$1",0,"246"],BD:["880","00","[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{4,6})","$1-$2",["31[5-8]|[459]1"],"0$1"],["(\\d{3})(\\d{3,7})","$1-$2",["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"],"0$1"],["(\\d{4})(\\d{3,6})","$1-$2",["[13-9]|22"],"0$1"],["(\\d)(\\d{7,8})","$1-$2",["2"],"0$1"]],"0"],BE:["32","00","4\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:80|9)0"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[239]|4[23]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[15-8]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4"],"0$1"]],"0"],BF:["226","00","[025-7]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[025-7]"]]]],BG:["359","00","00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",[6,7,8,9,12],[["(\\d)(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["43[1-6]|70[1-9]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:70|8)0"],"0$1"],["(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3",["43[1-7]|7"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[48]|9[08]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"]],"0"],BH:["973","00","[136-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[13679]|8[047]"]]]],BI:["257","00","(?:[267]\\d|31)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2367]"]]]],BJ:["229","00","[24-689]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-689]"]]]],BL:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:2[7-9]|5[12]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],BM:["1","011","(?:441|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","441$1",0,"441"],BN:["673","00","[2-578]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-578]"]]]],BO:["591","00(?:1\\d)?","(?:[2-467]\\d\\d|8001)\\d{5}",[8,9],[["(\\d)(\\d{7})","$1 $2",["[23]|4[46]"]],["(\\d{8})","$1",["[67]"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["8"]]],"0",0,"0(1\\d)?"],BQ:["599","00","(?:[34]1|7\\d)\\d{5}",[7],0,0,0,0,0,0,"[347]"],BR:["55","00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)","(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",[8,9,10,11],[["(\\d{4})(\\d{4})","$1-$2",["300|4(?:0[02]|37)","4(?:02|37)0|[34]00"]],["(\\d{3})(\\d{2,3})(\\d{4})","$1 $2 $3",["(?:[358]|90)0"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"],"($1)"],["(\\d{2})(\\d{5})(\\d{4})","$1 $2-$3",["[16][1-9]|[2-57-9]"],"($1)"]],"0",0,"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?","$2"],BS:["1","011","(?:242|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([3-8]\\d{6})$","242$1",0,"242"],BT:["975","00","[17]\\d{7}|[2-8]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[2-68]|7[246]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[67]|7"]]]],BW:["267","00","(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}",[7,8,10],[["(\\d{2})(\\d{5})","$1 $2",["90"]],["(\\d{3})(\\d{4})","$1 $2",["[24-6]|3[15-79]"]],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37]"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["8"]]]],BY:["375","810","(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3})","$1 $2",["800"],"8 $1"],["(\\d{3})(\\d{2})(\\d{2,4})","$1 $2 $3",["800"],"8 $1"],["(\\d{4})(\\d{2})(\\d{3})","$1 $2-$3",["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])","1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"],"8 0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["1(?:[56]|7[467])|2[1-3]"],"8 0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-4]"],"8 0$1"],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["[89]"],"8 $1"]],"8",0,"0|80?",0,0,0,0,"8~10"],BZ:["501","00","(?:0800\\d|[2-8])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1-$2",["[2-8]"]],["(\\d)(\\d{3})(\\d{4})(\\d{3})","$1-$2-$3-$4",["0"]]]],CA:["1","011","(?:[2-8]\\d|90)\\d{8}|3\\d{6}",[7,10],0,"1",0,0,0,0,0,[["(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}",[10]],["",[10]],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",[10]],["900[2-9]\\d{6}",[10]],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\d{6}",[10]],0,["310\\d{4}",[7]],0,["600[2-9]\\d{6}",[10]]]],CC:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],CD:["243","00","[189]\\d{8}|[1-68]\\d{6}",[7,9],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[1-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]"],"0$1"]],"0"],CF:["236","00","(?:[27]\\d{3}|8776)\\d{4}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[278]"]]]],CG:["242","00","222\\d{6}|(?:0\\d|80)\\d{7}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[02]"]]]],CH:["41","00","8\\d{11}|[2-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8[047]|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-79]|81"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["8"],"0$1"]],"0"],CI:["225","00","[02]\\d{9}",[10],[["(\\d{2})(\\d{2})(\\d)(\\d{5})","$1 $2 $3 $4",["2"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3 $4",["0"]]]],CK:["682","00","[2-578]\\d{4}",[5],[["(\\d{2})(\\d{3})","$1 $2",["[2-578]"]]]],CL:["56","(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0","12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}",[9,10,11],[["(\\d{5})(\\d{4})","$1 $2",["219","2196"],"($1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["44"]],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2[1-36]"],"($1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["9[2-9]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"],"($1)"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["60|8"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{3})(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3 $4",["60"]]]],CM:["237","00","[26]\\d{8}|88\\d{6,7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["88"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[26]|88"]]]],CN:["86","00|1(?:[12]\\d|79)\\d\\d00","1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}",[7,8,9,10,11,12],[["(\\d{2})(\\d{5,6})","$1 $2",["(?:10|2[0-57-9])[19]","(?:10|2[0-57-9])(?:10|9[56])","10(?:10|9[56])|2[0-57-9](?:100|9[56])"],"0$1"],["(\\d{3})(\\d{5,6})","$1 $2",["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]","(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]","85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])","85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["(?:4|80)0"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|2(?:[02-57-9]|1[1-9])","10|2(?:[02-57-9]|1[1-9])","10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"],"0$1",1],["(\\d{3})(\\d{7,8})","$1 $2",["9"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["80"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[3-578]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["1[3-9]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["[12]"],"0$1",1]],"0",0,"0|(1(?:[12]\\d|79)\\d\\d)",0,0,0,0,"00"],CO:["57","00(?:4(?:[14]4|56)|[579])","(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}",[10,11],[["(\\d{3})(\\d{7})","$1 $2",["6"],"($1)"],["(\\d{3})(\\d{7})","$1 $2",["3[0-357]|91"]],["(\\d)(\\d{3})(\\d{7})","$1-$2-$3",["1"],"0$1",0,"$1 $2 $3"]],"0",0,"0(4(?:[14]4|56)|[579])?"],CR:["506","00","(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}",[8,10],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[3-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[89]"]]],0,0,"(19(?:0[0-2468]|1[09]|20|66|77|99))"],CU:["53","119","[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}",[6,7,8,10],[["(\\d{2})(\\d{4,6})","$1 $2",["2[1-4]|[34]"],"(0$1)"],["(\\d)(\\d{6,7})","$1 $2",["7"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["5"],"0$1"],["(\\d{3})(\\d{7})","$1 $2",["8"],"0$1"]],"0"],CV:["238","0","(?:[2-59]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2-589]"]]]],CW:["599","00","(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[3467]"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["9[4-8]"]]],0,0,0,0,0,"[69]"],CX:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],CY:["357","00","(?:[279]\\d|[58]0)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[257-9]"]]]],CZ:["420","00","(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]|9[015-7]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3 $4",["96"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]]],DE:["49","00","[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}",[4,5,6,7,8,9,10,11,12,13,14,15],[["(\\d{2})(\\d{3,13})","$1 $2",["3[02]|40|[68]9"],"0$1"],["(\\d{3})(\\d{3,12})","$1 $2",["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1","2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"],"0$1"],["(\\d{4})(\\d{2,11})","$1 $2",["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]","[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["138"],"0$1"],["(\\d{5})(\\d{2,10})","$1 $2",["3"],"0$1"],["(\\d{3})(\\d{5,11})","$1 $2",["181"],"0$1"],["(\\d{3})(\\d)(\\d{4,10})","$1 $2 $3",["1(?:3|80)|9"],"0$1"],["(\\d{3})(\\d{7,8})","$1 $2",["1[67]"],"0$1"],["(\\d{3})(\\d{7,12})","$1 $2",["8"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["185","1850","18500"],"0$1"],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["18[68]"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["15[0568]"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["15[1279]"],"0$1"],["(\\d{3})(\\d{8})","$1 $2",["18"],"0$1"],["(\\d{3})(\\d{2})(\\d{7,8})","$1 $2 $3",["1(?:6[023]|7)"],"0$1"],["(\\d{4})(\\d{2})(\\d{7})","$1 $2 $3",["15[279]"],"0$1"],["(\\d{3})(\\d{2})(\\d{8})","$1 $2 $3",["15"],"0$1"]],"0"],DJ:["253","00","(?:2\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[27]"]]]],DK:["45","00","[2-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-9]"]]]],DM:["1","011","(?:[58]\\d\\d|767|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","767$1",0,"767"],DO:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,0,0,0,"8001|8[024]9"],DZ:["213","00","(?:[1-4]|[5-79]\\d|80)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["9"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-8]"],"0$1"]],"0"],EC:["593","00","1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}",[8,9,10,11],[["(\\d)(\\d{3})(\\d{4})","$1 $2-$3",["[2-7]"],"(0$1)",0,"$1-$2-$3"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{3})(\\d{3,4})","$1 $2 $3",["1"]]],"0"],EE:["372","00","8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88","[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]],["(\\d{4})(\\d{3,4})","$1 $2",["[45]|8(?:00|[1-49])","[45]|8(?:00[1-9]|[1-49])"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],EG:["20","00","[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}",[8,9,10],[["(\\d)(\\d{7,8})","$1 $2",["[23]"],"0$1"],["(\\d{2})(\\d{6,7})","$1 $2",["1[35]|[4-6]|8[2468]|9[235-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[189]"],"0$1"]],"0"],EH:["212","00","[5-8]\\d{8}",[9],0,"0",0,0,0,0,"528[89]"],ER:["291","00","[178]\\d{6}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[178]"],"0$1"]],"0"],ES:["34","00","[5-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]00"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-9]"]]]],ET:["251","00","(?:11|[2-579]\\d)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-579]"],"0$1"]],"0"],FI:["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}",[5,6,7,8,9,10,11,12],[["(\\d)(\\d{4,9})","$1 $2",["[2568][1-8]|3(?:0[1-9]|[1-9])|9"],"0$1"],["(\\d{3})(\\d{3,7})","$1 $2",["[12]00|[368]|70[07-9]"],"0$1"],["(\\d{2})(\\d{4,8})","$1 $2",["[1245]|7[135]"],"0$1"],["(\\d{2})(\\d{6,10})","$1 $2",["7"],"0$1"]],"0",0,0,0,0,"1[03-79]|[2-9]",0,"00"],FJ:["679","0(?:0|52)","45\\d{5}|(?:0800\\d|[235-9])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1 $2",["[235-9]|45"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]]],0,0,0,0,0,0,0,"00"],FK:["500","00","[2-7]\\d{4}",[5]],FM:["691","00","(?:[39]\\d\\d|820)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[389]"]]]],FO:["298","00","[2-9]\\d{5}",[6],[["(\\d{6})","$1",["[2-9]"]]],0,0,"(10(?:01|[12]0|88))"],FR:["33","00","[1-9]\\d{8}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0 $1"],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[1-79]"],"0$1"]],"0"],GA:["241","00","(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}",[7,8],[["(\\d)(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-7]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["11|[67]"],"0$1"]],0,0,"0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})","$1"],GB:["44","00","[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",[7,9,10],[["(\\d{3})(\\d{4})","$1 $2",["800","8001","80011","800111","8001111"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["845","8454","84546","845464"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["800"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["1(?:38|5[23]|69|76|94)","1(?:(?:38|69)7|5(?:24|39)|768|946)","1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["1(?:[2-69][02-9]|[78])"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[25]|7(?:0|6[02-9])","[25]|7(?:0|6(?:[03-9]|2[356]))"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[1389]"],"0$1"]],"0",0,0,0,0,0,[["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:[02]\\d|1[0-246-9])))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}",[9,10]],["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]],0," x"],GD:["1","011","(?:473|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","473$1",0,"473"],GE:["995","00","(?:[3-57]\\d\\d|800)\\d{6}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["32"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[57]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[348]"],"0$1"]],"0"],GF:["594","00","(?:[56]94|80\\d|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],GG:["44","00","(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",[7,9,10],0,"0",0,"0|([25-9]\\d{5})$","1481$1",0,0,[["1481[25-9]\\d{5}",[10]],["7(?:(?:781|839)\\d|911[17])\\d{5}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]]],GH:["233","00","(?:[235]\\d{3}|800)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[235]"],"0$1"]],"0"],GI:["350","00","(?:[25]\\d\\d|606)\\d{5}",[8],[["(\\d{3})(\\d{5})","$1 $2",["2"]]]],GL:["299","00","(?:19|[2-689]\\d|70)\\d{4}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["19|[2-9]"]]]],GM:["220","00","[2-9]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],GN:["224","00","722\\d{6}|(?:3|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["3"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[67]"]]]],GP:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0",0,0,0,0,0,[["590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-389]|7[08]|8[0-689]|9\\d)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],GQ:["240","00","222\\d{6}|(?:3\\d|55|[89]0)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235]"]],["(\\d{3})(\\d{6})","$1 $2",["[89]"]]]],GR:["30","00","5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}",[10,11,12],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["21|7"]],["(\\d{4})(\\d{6})","$1 $2",["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2689]"]],["(\\d{3})(\\d{3,4})(\\d{5})","$1 $2 $3",["8"]]]],GT:["502","00","(?:1\\d{3}|[2-7])\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],GU:["1","011","(?:[58]\\d\\d|671|900)\\d{7}",[10],0,"1",0,"1|([3-9]\\d{6})$","671$1",0,"671"],GW:["245","00","[49]\\d{8}|4\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["40"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"]]]],GY:["592","001","9008\\d{3}|(?:[2-467]\\d\\d|862)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-46-9]"]]]],HK:["852","00(?:30|5[09]|[126-9]?)","8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}",[5,6,7,8,9,11],[["(\\d{3})(\\d{2,5})","$1 $2",["900","9003"]],["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{3})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]],0,0,0,0,0,0,0,"00"],HN:["504","00","8\\d{10}|[237-9]\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1-$2",["[237-9]"]]]],HR:["385","00","(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",[6,7,8,9],[["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["6[01]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{4})(\\d{3})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-5]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"]],"0"],HT:["509","00","(?:[2-489]\\d|55)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[2-589]"]]]],HU:["36","00","[235-7]\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"06 $1"]],"06"],ID:["62","00[89]","(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}",[7,8,9,10,11,12,13],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["15"]],["(\\d{2})(\\d{5,9})","$1 $2",["2[124]|[36]1"],"(0$1)"],["(\\d{3})(\\d{5,7})","$1 $2",["800"],"0$1"],["(\\d{3})(\\d{5,8})","$1 $2",["[2-79]"],"(0$1)"],["(\\d{3})(\\d{3,4})(\\d{3})","$1-$2-$3",["8[1-35-9]"],"0$1"],["(\\d{3})(\\d{6,8})","$1 $2",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["804"],"0$1"],["(\\d{3})(\\d)(\\d{3})(\\d{3})","$1 $2 $3 $4",["80"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1-$2-$3",["8"],"0$1"]],"0"],IE:["353","00","(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["2[24-9]|47|58|6[237-9]|9[35-9]"],"(0$1)"],["(\\d{3})(\\d{5})","$1 $2",["[45]0"],"(0$1)"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["1"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2569]|4[1-69]|7[14]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["81"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[78]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["4"],"(0$1)"],["(\\d{2})(\\d)(\\d{3})(\\d{4})","$1 $2 $3 $4",["8"],"0$1"]],"0"],IL:["972","0(?:0|1[2-9])","1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",[7,8,9,10,11,12],[["(\\d{4})(\\d{3})","$1-$2",["125"]],["(\\d{4})(\\d{2})(\\d{2})","$1-$2-$3",["121"]],["(\\d)(\\d{3})(\\d{4})","$1-$2-$3",["[2-489]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1-$2-$3",["12"]],["(\\d{4})(\\d{6})","$1-$2",["159"]],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3-$4",["1[7-9]"]],["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})","$1-$2 $3-$4",["15"]]],"0"],IM:["44","00","1624\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([25-8]\\d{5})$","1624$1",0,"74576|(?:16|7[56])24"],IN:["91","00","(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}",[8,9,10,11,12,13],[["(\\d{8})","$1",["5(?:0|2[23]|3[03]|[67]1|88)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],0,1],["(\\d{4})(\\d{4,5})","$1 $2",["180","1800"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["140"],0,1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["11|2[02]|33|4[04]|79[1-7]|80[2-46]","11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])","11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"],"0$1",1],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807","1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]","1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"],"0$1",1],["(\\d{5})(\\d{5})","$1 $2",["[6-9]"],"0$1",1],["(\\d{4})(\\d{2,4})(\\d{4})","$1 $2 $3",["1(?:6|8[06])","1(?:6|8[06]0)"],0,1],["(\\d{4})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["18"],0,1]],"0"],IO:["246","00","3\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["3"]]]],IQ:["964","00","(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-6]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],IR:["98","00","[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",[4,5,6,7,10],[["(\\d{4,5})","$1",["96"],"0$1"],["(\\d{2})(\\d{4,5})","$1 $2",["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[1-8]"],"0$1"]],"0"],IS:["354","00|1(?:0(?:01|[12]0)|100)","(?:38\\d|[4-9])\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["[4-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["3"]]],0,0,0,0,0,0,0,"00"],IT:["39","00","0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?",[6,7,8,9,10,11],[["(\\d{2})(\\d{4,6})","$1 $2",["0[26]"]],["(\\d{3})(\\d{3,6})","$1 $2",["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])","0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]],["(\\d{4})(\\d{2,6})","$1 $2",["0(?:[13-579][2-46-8]|8[236-8])"]],["(\\d{4})(\\d{4})","$1 $2",["894"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[26]|5"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["1(?:44|[679])|[378]"]],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[13-57-9][0159]|14"]],["(\\d{2})(\\d{4})(\\d{5})","$1 $2 $3",["0[26]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["3"]]],0,0,0,0,0,0,[["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"],["3[1-9]\\d{8}|3[2-9]\\d{7}",[9,10]],["80(?:0\\d{3}|3)\\d{3}",[6,9]],["(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}",[6,8,9,10]],["1(?:78\\d|99)\\d{6}",[9,10]],0,0,0,["55\\d{8}",[10]],["84(?:[08]\\d{3}|[17])\\d{3}",[6,9]]]],JE:["44","00","1534\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([0-24-8]\\d{5})$","1534$1",0,0,[["1534[0-24-8]\\d{5}"],["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"],["80(?:07(?:35|81)|8901)\\d{4}"],["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"],["701511\\d{4}"],0,["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}"],["56\\d{8}"]]],JM:["1","011","(?:[58]\\d\\d|658|900)\\d{7}",[10],0,"1",0,0,0,0,"658|876"],JO:["962","00","(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2356]|87"],"(0$1)"],["(\\d{3})(\\d{5,6})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["70"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],JP:["81","010","00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",[8,9,10,11,12,13,14,15,16,17],[["(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3",["(?:12|57|99)0"],"0$1"],["(\\d{4})(\\d)(\\d{4})","$1-$2-$3",["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2-$3",["[36]|4(?:2[09]|7[01])","[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"],"0$1"],["(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3",["[14]|[289][2-9]|5[3-9]|7[2-4679]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["800"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[257-9]"],"0$1"]],"0"],KE:["254","000","(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}",[7,8,9,10],[["(\\d{2})(\\d{5,7})","$1 $2",["[24-6]"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[17]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0"],KG:["996","00","8\\d{9}|(?:[235-8]\\d|99)\\d{7}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["3(?:1[346]|[24-79])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235-79]|88"],"0$1"],["(\\d{3})(\\d{3})(\\d)(\\d{2,3})","$1 $2 $3 $4",["8"],"0$1"]],"0"],KH:["855","00[14-9]","1\\d{9}|[1-9]\\d{7,8}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],KI:["686","00","(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",[5,8],0,"0"],KM:["269","00","[3478]\\d{6}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[3478]"]]]],KN:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","869$1",0,"869"],KP:["850","00|99","85\\d{6}|(?:19\\d|[2-7])\\d{7}",[8,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"]],"0"],KR:["82","00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))","00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}",[5,6,8,9,10,11,12,13,14],[["(\\d{2})(\\d{3,4})","$1-$2",["(?:3[1-3]|[46][1-4]|5[1-5])1"],"0$1"],["(\\d{4})(\\d{4})","$1-$2",["1"]],["(\\d)(\\d{3,4})(\\d{4})","$1-$2-$3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60|8"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1-$2-$3",["[1346]|5[1-5]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{2})(\\d{5})(\\d{4})","$1-$2-$3",["5"],"0$1"]],"0",0,"0(8(?:[1-46-8]|5\\d\\d))?"],KW:["965","00","18\\d{5}|(?:[2569]\\d|41)\\d{6}",[7,8],[["(\\d{4})(\\d{3,4})","$1 $2",["[169]|2(?:[235]|4[1-35-9])|52"]],["(\\d{3})(\\d{5})","$1 $2",["[245]"]]]],KY:["1","011","(?:345|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","345$1",0,"345"],KZ:["7","810","(?:33622|8\\d{8})\\d{5}|[78]\\d{9}",[10,14],0,"8",0,0,0,0,"33|7",0,"8~10"],LA:["856","00","[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2[13]|3[14]|[4-8]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["30[013-9]"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[23]"],"0$1"]],"0"],LB:["961","00","[27-9]\\d{7}|[13-9]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27-9]"]]],"0"],LC:["1","011","(?:[58]\\d\\d|758|900)\\d{7}",[10],0,"1",0,"1|([2-8]\\d{6})$","758$1",0,"758"],LI:["423","00","[68]\\d{8}|(?:[2378]\\d|90)\\d{5}",[7,9],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2379]|8(?:0[09]|7)","[2379]|8(?:0(?:02|9)|7)"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["69"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]],"0",0,"0|(1001)"],LK:["94","00","[1-9]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[1-689]"],"0$1"]],"0"],LR:["231","00","(?:[25]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[4-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23578]"],"0$1"]],"0"],LS:["266","00","(?:[256]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2568]"]]]],LT:["370","00","(?:[3469]\\d|52|[78]0)\\d{6}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["52[0-7]"],"(8-$1)",1],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[7-9]"],"8 $1",1],["(\\d{2})(\\d{6})","$1 $2",["37|4(?:[15]|6[1-8])"],"(8-$1)",1],["(\\d{3})(\\d{5})","$1 $2",["[3-6]"],"(8-$1)",1]],"8",0,"[08]"],LU:["352","00","35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}",[4,5,6,7,8,9,10,11],[["(\\d{2})(\\d{3})","$1 $2",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["20[2-689]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4",["2(?:[0367]|4[3-8])"]],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["80[01]|90[015]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["20"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4 $5",["2(?:[0367]|4[3-8])"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})","$1 $2 $3 $4",["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]],0,0,"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"],LV:["371","00","(?:[268]\\d|90)\\d{6}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[269]|8[01]"]]]],LY:["218","00","[2-9]\\d{8}",[9],[["(\\d{2})(\\d{7})","$1-$2",["[2-9]"],"0$1"]],"0"],MA:["212","00","[5-8]\\d{8}",[9],[["(\\d{5})(\\d{4})","$1-$2",["5(?:29|38)","5(?:29[1289]|389)","529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5[45]"],"0$1"],["(\\d{4})(\\d{5})","$1-$2",["5(?:2[2-489]|3[5-9]|9)|892","5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"],"0$1"],["(\\d{2})(\\d{7})","$1-$2",["8"],"0$1"],["(\\d{3})(\\d{6})","$1-$2",["[5-7]"],"0$1"]],"0",0,0,0,0,0,[["5293[01]\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"],["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[017]\\d|2[0-2]|6[0-8]|8[0-3]))\\d{6}"],["80\\d{7}"],["89\\d{7}"],0,0,0,0,["592(?:4[0-2]|93)\\d{4}"]]],MC:["377","00","(?:[3489]|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["4"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[389]"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["6"],"0$1"]],"0"],MD:["373","00","(?:[235-7]\\d|[89]0)\\d{6}",[8],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["22|3"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[25-7]"],"0$1"]],"0"],ME:["382","00","(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"0$1"]],"0"],MF:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],MG:["261","00","[23]\\d{8}",[9],[["(\\d{2})(\\d{2})(\\d{3})(\\d{2})","$1 $2 $3 $4",["[23]"],"0$1"]],"0",0,"0|([24-9]\\d{6})$","20$1"],MH:["692","011","329\\d{4}|(?:[256]\\d|45)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1-$2",["[2-6]"]]],"1"],MK:["389","00","[2-578]\\d{7}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2|34[47]|4(?:[37]7|5[47]|64)"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[347]"],"0$1"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["[58]"],"0$1"]],"0"],ML:["223","00","[24-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-9]"]]]],MM:["95","00","1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}",[6,7,8,9,10],[["(\\d)(\\d{2})(\\d{3})","$1 $2 $3",["16|2"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[4-7]|8[1-35]"],"0$1"],["(\\d)(\\d{3})(\\d{4,6})","$1 $2 $3",["9(?:2[0-4]|[35-9]|4[137-9])"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["92"],"0$1"],["(\\d)(\\d{5})(\\d{4})","$1 $2 $3",["9"],"0$1"]],"0"],MN:["976","001","[12]\\d{7,9}|[5-9]\\d{7}",[8,9,10],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[12]1"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[5-9]"]],["(\\d{3})(\\d{5,6})","$1 $2",["[12]2[1-3]"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["[12](?:27|3[2-8]|4[2-68]|5[1-4689])","[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["[12]"],"0$1"]],"0"],MO:["853","00","0800\\d{3}|(?:28|[68]\\d)\\d{6}",[7,8],[["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{4})(\\d{4})","$1 $2",["[268]"]]]],MP:["1","011","[58]\\d{9}|(?:67|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","670$1",0,"670"],MQ:["596","00","(?:69|80)\\d{7}|(?:59|97)6\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],MR:["222","00","(?:[2-4]\\d\\d|800)\\d{5}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-48]"]]]],MS:["1","011","(?:[58]\\d\\d|664|900)\\d{7}",[10],0,"1",0,"1|([34]\\d{6})$","664$1",0,"664"],MT:["356","00","3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2357-9]"]]]],MU:["230","0(?:0|[24-7]0|3[03])","(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[2-46]|8[013]"]],["(\\d{4})(\\d{4})","$1 $2",["[57]"]],["(\\d{5})(\\d{5})","$1 $2",["8"]]],0,0,0,0,0,0,0,"020"],MV:["960","0(?:0|19)","(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",[7,10],[["(\\d{3})(\\d{4})","$1-$2",["[3467]|9[1-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"]]],0,0,0,0,0,0,0,"00"],MW:["265","00","(?:[1289]\\d|31|77)\\d{7}|1\\d{6}",[7,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["1[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[137-9]"],"0$1"]],"0"],MX:["52","0[09]","1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[01]\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}",[10,11],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["33|5[56]|81"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2-9]"],0,1],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 $3 $4",["1(?:33|5[56]|81)"],0,1],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 $3 $4",["1"],0,1]],"01",0,"0(?:[12]|4[45])|1",0,0,0,0,"00"],MY:["60","00","1\\d{8,9}|(?:3\\d|[4-9])\\d{7}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1-$2 $3",["[4-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1-$2 $3",["1(?:[02469]|[378][1-9]|53)|8","1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2 $3",["3"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3-$4",["1(?:[367]|80)"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2 $3",["15"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2 $3",["1"],"0$1"]],"0"],MZ:["258","00","(?:2|8\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2|8[2-79]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],NA:["264","00","[68]\\d{7,8}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["87"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],NC:["687","00","(?:050|[2-57-9]\\d\\d)\\d{3}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1.$2.$3",["[02-57-9]"]]]],NE:["227","00","[027-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["08"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[089]|2[013]|7[04]"]]]],NF:["672","00","[13]\\d{5}",[6],[["(\\d{2})(\\d{4})","$1 $2",["1[0-3]"]],["(\\d)(\\d{5})","$1 $2",["[13]"]]],0,0,"([0-258]\\d{4})$","3$1"],NG:["234","009","(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}",[7,8,10,11,12,13,14],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["78"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]|9(?:0[3-9]|[1-9])"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[3-7]|8[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["[78]"],"0$1"],["(\\d{3})(\\d{5})(\\d{5,6})","$1 $2 $3",["[78]"],"0$1"]],"0"],NI:["505","00","(?:1800|[25-8]\\d{3})\\d{4}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[125-8]"]]]],NL:["31","00","(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}",[5,6,7,8,9,10,11],[["(\\d{3})(\\d{4,7})","$1 $2",["[89]0"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["66"],"0$1"],["(\\d)(\\d{8})","$1 $2",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-578]|91"],"0$1"],["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3",["9"],"0$1"]],"0"],NO:["47","00","(?:0|[2-9]\\d{3})\\d{4}",[5,8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[489]|59"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[235-7]"]]],0,0,0,0,0,"[02-689]|7[0-8]"],NP:["977","00","(?:1\\d|9)\\d{9}|[1-9]\\d{7}",[8,10,11],[["(\\d)(\\d{7})","$1-$2",["1[2-6]"],"0$1"],["(\\d{2})(\\d{6})","$1-$2",["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"],"0$1"],["(\\d{3})(\\d{7})","$1-$2",["9"]]],"0"],NR:["674","00","(?:444|(?:55|8\\d)\\d|666)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[4-68]"]]]],NU:["683","00","(?:[47]|888\\d)\\d{3}",[4,7],[["(\\d{3})(\\d{4})","$1 $2",["8"]]]],NZ:["64","0(?:0|161)","[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,8})","$1 $2",["8[1-579]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["50[036-8]|[89]0","50(?:[0367]|88)|[89]0"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["24|[346]|7[2-57-9]|9[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:10|74)|[59]|80"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["1|2[028]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,5})","$1 $2 $3",["2(?:[169]|7[0-35-9])|7|86"],"0$1"]],"0",0,0,0,0,0,0,"00"],OM:["968","00","(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}",[7,8,9],[["(\\d{3})(\\d{4,6})","$1 $2",["[58]"]],["(\\d{2})(\\d{6})","$1 $2",["2"]],["(\\d{4})(\\d{4})","$1 $2",["[179]"]]]],PA:["507","00","(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}",[7,8,10,11],[["(\\d{3})(\\d{4})","$1-$2",["[1-57-9]"]],["(\\d{4})(\\d{4})","$1-$2",["[68]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]]],PE:["51","00|19(?:1[124]|77|90)00","(?:[14-8]|9\\d)\\d{7}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["80"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["1"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[4-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"]]],"0",0,0,0,0,0,0,"00"," Anexo "],PF:["689","00","4\\d{5}(?:\\d{2})?|8\\d{7,8}",[6,8,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["44"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4|8[7-9]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],PG:["675","00|140[1-3]","(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["18|[2-69]|85"]],["(\\d{4})(\\d{4})","$1 $2",["[78]"]]],0,0,0,0,0,0,0,"00"],PH:["63","00","(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}",[6,8,9,10,11,12,13],[["(\\d)(\\d{5})","$1 $2",["2"],"(0$1)"],["(\\d{4})(\\d{4,6})","$1 $2",["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2","3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"],"(0$1)"],["(\\d{5})(\\d{4})","$1 $2",["346|4(?:27|9[35])|883","3469|4(?:279|9(?:30|56))|8834"],"(0$1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|8[2-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})","$1 $2 $3 $4",["1"]]],"0"],PK:["92","00","122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,7})","$1 $2 $3",["[89]0"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["1"]],["(\\d{3})(\\d{6,7})","$1 $2",["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])","9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"],"(0$1)"],["(\\d{2})(\\d{7,8})","$1 $2",["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"],"(0$1)"],["(\\d{5})(\\d{5})","$1 $2",["58"],"(0$1)"],["(\\d{3})(\\d{7})","$1 $2",["3"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[24-9]"],"(0$1)"]],"0"],PL:["48","00","(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}",[6,7,8,9,10],[["(\\d{5})","$1",["19"]],["(\\d{3})(\\d{3})","$1 $2",["11|20|64"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1","(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["64"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[2-8]|[2-7]|8[1-79]|9[145]"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["8"]]]],PM:["508","00","(?:[45]|80\\d\\d)\\d{5}",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[45]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],PR:["1","011","(?:[589]\\d\\d|787)\\d{7}",[10],0,"1",0,0,0,0,"787|939"],PS:["970","00","[2489]2\\d{6}|(?:1\\d|5)\\d{8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2489]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["5"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],PT:["351","00","1693\\d{5}|(?:[26-9]\\d|30)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["2[12]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["16|[236-9]"]]]],PW:["680","01[12]","(?:[24-8]\\d\\d|345|900)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],PY:["595","00","59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3,6})","$1 $2",["[2-9]0"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"],"(0$1)"],["(\\d{3})(\\d{4,5})","$1 $2",["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["87"]],["(\\d{3})(\\d{6})","$1 $2",["9(?:[5-79]|8[1-6])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["9"]]],"0"],QA:["974","00","800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}",[7,8,9,11],[["(\\d{3})(\\d{4})","$1 $2",["2[16]|8"]],["(\\d{4})(\\d{4})","$1 $2",["[3-7]"]]]],RE:["262","00","976\\d{6}|(?:26|[68]\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2689]"],"0$1"]],"0",0,0,0,0,"26[23]|69|[89]"],RO:["40","00","(?:[2378]\\d|90)\\d{7}|[23]\\d{5}",[6,9],[["(\\d{3})(\\d{3})","$1 $2",["2[3-6]","2[3-6]\\d9"],"0$1"],["(\\d{2})(\\d{4})","$1 $2",["219|31"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23]1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[237-9]"],"0$1"]],"0",0,0,0,0,0,0,0," int "],RS:["381","00","38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}",[6,7,8,9,10,11,12],[["(\\d{3})(\\d{3,9})","$1 $2",["(?:2[389]|39)0|[7-9]"],"0$1"],["(\\d{2})(\\d{5,10})","$1 $2",["[1-36]"],"0$1"]],"0"],RU:["7","810","8\\d{13}|[347-9]\\d{9}",[10,14],[["(\\d{4})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-8]|2[1-9])","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"],"8 ($1)",1],["(\\d{5})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-68]|2[1-9])","7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))","7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[349]|8(?:[02-7]|1[1-8])"],"8 ($1)",1],["(\\d{4})(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3 $4",["8"],"8 ($1)"]],"8",0,0,0,0,"3[04-689]|[489]",0,"8~10"],RW:["250","00","(?:06|[27]\\d\\d|[89]00)\\d{6}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"]]],"0"],SA:["966","00","92\\d{7}|(?:[15]|8\\d)\\d{8}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["9"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["81"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]],"0"],SB:["677","0[01]","(?:[1-6]|[7-9]\\d\\d)\\d{4}",[5,7],[["(\\d{2})(\\d{5})","$1 $2",["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]],SC:["248","010|0[0-2]","800\\d{4}|(?:[249]\\d|64)\\d{5}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[246]|9[57]"]]],0,0,0,0,0,0,0,"00"],SD:["249","00","[19]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[19]"],"0$1"]],"0"],SE:["46","00","(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{2,3})(\\d{2})","$1-$2 $3",["20"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{4})","$1-$2",["9(?:00|39|44|9)"],"0$1",0,"$1 $2"],["(\\d{2})(\\d{3})(\\d{2})","$1-$2 $3",["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3"],["(\\d)(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2,3})(\\d{2})","$1-$2 $3",["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{2,3})(\\d{3})","$1-$2 $3",["9(?:00|39|44)"],"0$1",0,"$1 $2 $3"],["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3 $4"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["10|7"],"0$1",0,"$1 $2 $3 $4"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1-$2 $3 $4",["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{3})","$1-$2 $3 $4",["9"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4 $5",["[26]"],"0$1",0,"$1 $2 $3 $4 $5"]],"0"],SG:["65","0[0-3]\\d","(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}",[8,10,11],[["(\\d{4})(\\d{4})","$1 $2",["[369]|8(?:0[1-6]|[1-9])"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]],["(\\d{4})(\\d{4})(\\d{3})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],SH:["290","00","(?:[256]\\d|8)\\d{3}",[4,5],0,0,0,0,0,0,"[256]"],SI:["386","00|10(?:22|66|88|99)","[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}",[5,6,7,8],[["(\\d{2})(\\d{3,6})","$1 $2",["8[09]|9"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["59|8"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37][01]|4[0139]|51|6"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-57]"],"(0$1)"]],"0",0,0,0,0,0,0,"00"],SJ:["47","00","0\\d{4}|(?:[489]\\d|[57]9)\\d{6}",[5,8],0,0,0,0,0,0,"79"],SK:["421","00","[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",[6,7,9],[["(\\d)(\\d{2})(\\d{3,4})","$1 $2 $3",["21"],"0$1"],["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["[3-5][1-8]1","[3-5][1-8]1[67]"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1/$2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[689]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1/$2 $3 $4",["[3-5]"],"0$1"]],"0"],SL:["232","00","(?:[237-9]\\d|66)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[236-9]"],"(0$1)"]],"0"],SM:["378","00","(?:0549|[5-7]\\d)\\d{6}",[8,10],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-7]"]],["(\\d{4})(\\d{6})","$1 $2",["0"]]],0,0,"([89]\\d{5})$","0549$1"],SN:["221","00","(?:[378]\\d|93)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[379]"]]]],SO:["252","00","[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}",[6,7,8,9],[["(\\d{2})(\\d{4})","$1 $2",["8[125]"]],["(\\d{6})","$1",["[134]"]],["(\\d)(\\d{6})","$1 $2",["[15]|2[0-79]|3[0-46-8]|4[0-7]"]],["(\\d)(\\d{7})","$1 $2",["(?:2|90)4|[67]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3478]|64|90"]],["(\\d{2})(\\d{5,7})","$1 $2",["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]],"0"],SR:["597","00","(?:[2-5]|68|[78]\\d)\\d{5}",[6,7],[["(\\d{2})(\\d{2})(\\d{2})","$1-$2-$3",["56"]],["(\\d{3})(\\d{3})","$1-$2",["[2-5]"]],["(\\d{3})(\\d{4})","$1-$2",["[6-8]"]]]],SS:["211","00","[19]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[19]"],"0$1"]],"0"],ST:["239","00","(?:22|9\\d)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[29]"]]]],SV:["503","00","[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?",[7,8,11],[["(\\d{3})(\\d{4})","$1 $2",["[89]"]],["(\\d{4})(\\d{4})","$1 $2",["[267]"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[89]"]]]],SX:["1","011","7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|(5\\d{6})$","721$1",0,"721"],SY:["963","00","[1-39]\\d{8}|[1-5]\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-5]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1",1]],"0"],SZ:["268","00","0800\\d{4}|(?:[237]\\d|900)\\d{6}",[8,9],[["(\\d{4})(\\d{4})","$1 $2",["[0237]"]],["(\\d{5})(\\d{4})","$1 $2",["9"]]]],TA:["290","00","8\\d{3}",[4],0,0,0,0,0,0,"8"],TC:["1","011","(?:[58]\\d\\d|649|900)\\d{7}",[10],0,"1",0,"1|([2-479]\\d{6})$","649$1",0,"649"],TD:["235","00|16","(?:22|[69]\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2679]"]]],0,0,0,0,0,0,0,"00"],TG:["228","00","[279]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[279]"]]]],TH:["66","00[1-9]","(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}",[8,9,10,13],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[13-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],TJ:["992","810","(?:00|[1-57-9]\\d)\\d{7}",[9],[["(\\d{6})(\\d)(\\d{2})","$1 $2 $3",["331","3317"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[34]7|91[78]"]],["(\\d{4})(\\d)(\\d{4})","$1 $2 $3",["3[1-5]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[0-57-9]"]]],0,0,0,0,0,0,0,"8~10"],TK:["690","00","[2-47]\\d{3,6}",[4,5,6,7]],TL:["670","00","7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[2-489]|70"]],["(\\d{4})(\\d{4})","$1 $2",["7"]]]],TM:["993","810","[1-6]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["12"],"(8 $1)"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-5]"],"(8 $1)"],["(\\d{2})(\\d{6})","$1 $2",["6"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],TN:["216","00","[2-57-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-57-9]"]]]],TO:["676","00","(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}",[5,7],[["(\\d{2})(\\d{3})","$1-$2",["[2-4]|50|6[09]|7[0-24-69]|8[05]"]],["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{3})(\\d{4})","$1 $2",["[5-9]"]]]],TR:["90","00","4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}",[7,10,12,13],[["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["512|8[01589]|90"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5(?:[0-59]|61)","5(?:[0-59]|616)","5(?:[0-59]|6161)"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24][1-8]|3[1-9]"],"(0$1)",1],["(\\d{3})(\\d{3})(\\d{6,7})","$1 $2 $3",["80"],"0$1",1]],"0"],TT:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-46-8]\\d{6})$","868$1",0,"868"],TV:["688","00","(?:2|7\\d\\d|90)\\d{4}",[5,6,7],[["(\\d{2})(\\d{3})","$1 $2",["2"]],["(\\d{2})(\\d{4})","$1 $2",["90"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],TW:["886","0(?:0[25-79]|19)","[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}",[7,8,9,10,11],[["(\\d{2})(\\d)(\\d{4})","$1 $2 $3",["202"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[258]0"],"0$1"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]","[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,5})","$1 $2 $3",["7"],"0$1"]],"0",0,0,0,0,0,0,0,"#"],TZ:["255","00[056]","(?:[25-8]\\d|41|90)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[24]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["5"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[67]"],"0$1"]],"0"],UA:["380","00","[89]\\d{9}|[3-9]\\d{8}",[9,10],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]","6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])","3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|89|9[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0",0,0,0,0,0,0,"0~0"],UG:["256","00[057]","800\\d{6}|(?:[29]0|[347]\\d)\\d{7}",[9],[["(\\d{4})(\\d{5})","$1 $2",["202","2024"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[27-9]|4(?:6[45]|[7-9])"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[34]"],"0$1"]],"0"],US:["1","011","[2-9]\\d{9}|3\\d{6}",[10],[["(\\d{3})(\\d{4})","$1-$2",["310"],0,1],["(\\d{3})(\\d{3})(\\d{4})","($1) $2-$3",["[2-9]"],0,1,"$1-$2-$3"]],"1",0,0,0,0,0,[["505(?:[2-57-9]\\d\\d|6(?:[0-35-9]\\d|4[46]))\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"],[""],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"],["900[2-9]\\d{6}"],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\d{6}"]]],UY:["598","0(?:0|1[3-9]\\d)","(?:0004|4)\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}",[7,8,10,13],[["(\\d{3})(\\d{4})","$1 $2",["405|8|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[124]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["4"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["0"]]],"0",0,0,0,0,0,0,"00"," int. "],UZ:["998","810","(?:33|[5-79]\\d|88)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[35-9]"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],VA:["39","00","0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",[6,7,8,9,10,11],0,0,0,0,0,0,"06698"],VC:["1","011","(?:[58]\\d\\d|784|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","784$1",0,"784"],VE:["58","00","[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}",[10],[["(\\d{3})(\\d{7})","$1-$2",["[24-689]"],"0$1"]],"0"],VG:["1","011","(?:284|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-578]\\d{6})$","284$1",0,"284"],VI:["1","011","[58]\\d{9}|(?:34|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","340$1",0,"340"],VN:["84","00","[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["80"],"0$1",1],["(\\d{4})(\\d{4,6})","$1 $2",["1"],0,1],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[69]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3578]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["2[48]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["2"],"0$1",1]],"0"],VU:["678","00","[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}",[5,7],[["(\\d{3})(\\d{4})","$1 $2",["[57-9]"]]]],WF:["681","00","(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[478]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],WS:["685","0","(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}",[5,6,7,10],[["(\\d{5})","$1",["[2-5]|6[1-9]"]],["(\\d{3})(\\d{3,7})","$1 $2",["[68]"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],XK:["383","00","[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[23]"],"0$1"]],"0"],YE:["967","00","(?:1|7\\d)\\d{7}|[1-7]\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-6]|7(?:[24-6]|8[0-7])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["7"],"0$1"]],"0"],YT:["262","00","80\\d{7}|(?:26|63)9\\d{6}",[9],0,"0",0,0,0,0,"269|63"],ZA:["27","00","[1-79]\\d{8}|8\\d{4,9}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,4})","$1 $2",["8[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["8[1-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["860"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],ZM:["260","00","800\\d{6}|(?:21|63|[79]\\d)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[28]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[79]"],"0$1"]],"0"],ZW:["263","00","2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",[5,6,7,8,9,10],[["(\\d{3})(\\d{3,5})","$1 $2",["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"],"0$1"],["(\\d)(\\d{3})(\\d{2,4})","$1 $2 $3",["[49]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["80"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2","2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)","2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["29[013-9]|39|54"],"0$1"],["(\\d{4})(\\d{3,5})","$1 $2",["(?:25|54)8","258|5483"],"0$1"]],"0"]},nonGeographic:{800:["800",0,"(?:00|[1-9]\\d)\\d{6}",[8],[["(\\d{4})(\\d{4})","$1 $2",["\\d"]]],0,0,0,0,0,0,[0,0,["(?:00|[1-9]\\d)\\d{6}"]]],808:["808",0,"[1-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[1-9]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,["[1-9]\\d{7}"]]],870:["870",0,"7\\d{11}|[35-7]\\d{8}",[9,12],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[35-7]"]]],0,0,0,0,0,0,[0,["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]],878:["878",0,"10\\d{10}",[12],[["(\\d{2})(\\d{5})(\\d{5})","$1 $2 $3",["1"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["10\\d{10}"]]],881:["881",0,"[0-36-9]\\d{8}",[9],[["(\\d)(\\d{3})(\\d{5})","$1 $2 $3",["[0-36-9]"]]],0,0,0,0,0,0,[0,["[0-36-9]\\d{8}"]]],882:["882",0,"[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?",[7,8,9,10,11,12],[["(\\d{2})(\\d{5})","$1 $2",["16|342"]],["(\\d{2})(\\d{6})","$1 $2",["49"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["1[36]|9"]],["(\\d{2})(\\d{4})(\\d{3})","$1 $2 $3",["3[23]"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["16"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|23|3(?:[15]|4[57])|4|51"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["34"]],["(\\d{2})(\\d{4,5})(\\d{5})","$1 $2 $3",["[1-35]"]]],0,0,0,0,0,0,[0,["342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}",[7,8,9,10,12]],0,0,0,0,0,0,["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}"]]],883:["883",0,"(?:[1-4]\\d|51)\\d{6,10}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,8})","$1 $2 $3",["[14]|2[24-689]|3[02-689]|51[24-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["510"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["21"]],["(\\d{4})(\\d{4})(\\d{4})","$1 $2 $3",["51[13]"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[235]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}"]]],888:["888",0,"\\d{11}",[11],[["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3"]],0,0,0,0,0,0,[0,0,0,0,0,0,["\\d{11}"]]],979:["979",0,"[1359]\\d{8}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[1359]"]]],0,0,0,0,0,0,[0,0,0,["[1359]\\d{8}"]]]}};function Cg(n,e){var t=Array.prototype.slice.call(e);return t.push(Tg),n.apply(this,t)}function No(n){return No=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},No(n)}function Ba(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function xg(n,e,t){return e&&Ba(n.prototype,e),t&&Ba(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}function Ag(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function kg(n,e){if(typeof e!="function"&&e!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&ki(n,e)}function qg(n){var e=Zl();return function(){var i=qi(n),s;if(e){var o=qi(this).constructor;s=Reflect.construct(i,arguments,o)}else s=i.apply(this,arguments);return $g(this,s)}}function $g(n,e){if(e&&(No(e)==="object"||typeof e=="function"))return e;if(e!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return Kl(n)}function Kl(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function Mo(n){var e=typeof Map=="function"?new Map:void 0;return Mo=function(i){if(i===null||!Sg(i))return i;if(typeof i!="function")throw new TypeError("Super expression must either be null or a function");if(typeof e<"u"){if(e.has(i))return e.get(i);e.set(i,s)}function s(){return ss(i,arguments,qi(this).constructor)}return s.prototype=Object.create(i.prototype,{constructor:{value:s,enumerable:!1,writable:!0,configurable:!0}}),ki(s,i)},Mo(n)}function ss(n,e,t){return Zl()?ss=Reflect.construct:ss=function(s,o,r){var u=[null];u.push.apply(u,o);var l=Function.bind.apply(s,u),a=new l;return r&&ki(a,r.prototype),a},ss.apply(null,arguments)}function Zl(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Sg(n){return Function.toString.call(n).indexOf("[native code]")!==-1}function ki(n,e){return ki=Object.setPrototypeOf||function(i,s){return i.__proto__=s,i},ki(n,e)}function qi(n){return qi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},qi(n)}var Kt=function(n){kg(t,n);var e=qg(t);function t(i){var s;return Ag(this,t),s=e.call(this,i),Object.setPrototypeOf(Kl(s),t.prototype),s.name=s.constructor.name,s}return xg(t)}(Mo(Error)),dr=2,Dg=17,Rg=3,sn="0-9０-９٠-٩۰-۹",Eg="-‐-―−ー－",Ig="／/",Fg="．.",jg="  ­​⁠　",Og="()（）［］\\[\\]",Bg="~⁓∼～",gs="".concat(Eg).concat(Ig).concat(Fg).concat(jg).concat(Og).concat(Bg),hr="+＋";function Na(n,e){n=n.split("-"),e=e.split("-");for(var t=n[0].split("."),i=e[0].split("."),s=0;s<3;s++){var o=Number(t[s]),r=Number(i[s]);if(o>r)return 1;if(r>o)return-1;if(!isNaN(o)&&isNaN(r))return 1;if(isNaN(o)&&!isNaN(r))return-1}return n[1]&&e[1]?n[1]>e[1]?1:n[1]<e[1]?-1:0:!n[1]&&e[1]?1:n[1]&&!e[1]?-1:0}function fs(n){return fs=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fs(n)}function Rs(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function Ma(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function Es(n,e,t){return e&&Ma(n.prototype,e),t&&Ma(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}var Ng="1.2.0",Mg="1.7.35",La=" ext. ",Lg=/^\d+$/,at=function(){function n(e){Rs(this,n),Vg(e),this.metadata=e,Ql.call(this,e)}return Es(n,[{key:"getCountries",value:function(){return Object.keys(this.metadata.countries).filter(function(t){return t!=="001"})}},{key:"getCountryMetadata",value:function(t){return this.metadata.countries[t]}},{key:"nonGeographic",value:function(){if(!(this.v1||this.v2||this.v3))return this.metadata.nonGeographic||this.metadata.nonGeographical}},{key:"hasCountry",value:function(t){return this.getCountryMetadata(t)!==void 0}},{key:"hasCallingCode",value:function(t){if(this.getCountryCodesForCallingCode(t))return!0;if(this.nonGeographic()){if(this.nonGeographic()[t])return!0}else{var i=this.countryCallingCodes()[t];if(i&&i.length===1&&i[0]==="001")return!0}}},{key:"isNonGeographicCallingCode",value:function(t){return this.nonGeographic()?!!this.nonGeographic()[t]:!this.getCountryCodesForCallingCode(t)}},{key:"country",value:function(t){return this.selectNumberingPlan(t)}},{key:"selectNumberingPlan",value:function(t,i){if(t&&Lg.test(t)&&(i=t,t=null),t&&t!=="001"){if(!this.hasCountry(t))throw new Error("Unknown country: ".concat(t));this.numberingPlan=new Pa(this.getCountryMetadata(t),this)}else if(i){if(!this.hasCallingCode(i))throw new Error("Unknown calling code: ".concat(i));this.numberingPlan=new Pa(this.getNumberingPlanMetadata(i),this)}else this.numberingPlan=void 0;return this}},{key:"getCountryCodesForCallingCode",value:function(t){var i=this.countryCallingCodes()[t];if(i)return i.length===1&&i[0].length===3?void 0:i}},{key:"getCountryCodeForCallingCode",value:function(t){var i=this.getCountryCodesForCallingCode(t);if(i)return i[0]}},{key:"getNumberingPlanMetadata",value:function(t){var i=this.getCountryCodeForCallingCode(t);if(i)return this.getCountryMetadata(i);if(this.nonGeographic()){var s=this.nonGeographic()[t];if(s)return s}else{var o=this.countryCallingCodes()[t];if(o&&o.length===1&&o[0]==="001")return this.metadata.countries["001"]}}},{key:"countryCallingCode",value:function(){return this.numberingPlan.callingCode()}},{key:"IDDPrefix",value:function(){return this.numberingPlan.IDDPrefix()}},{key:"defaultIDDPrefix",value:function(){return this.numberingPlan.defaultIDDPrefix()}},{key:"nationalNumberPattern",value:function(){return this.numberingPlan.nationalNumberPattern()}},{key:"possibleLengths",value:function(){return this.numberingPlan.possibleLengths()}},{key:"formats",value:function(){return this.numberingPlan.formats()}},{key:"nationalPrefixForParsing",value:function(){return this.numberingPlan.nationalPrefixForParsing()}},{key:"nationalPrefixTransformRule",value:function(){return this.numberingPlan.nationalPrefixTransformRule()}},{key:"leadingDigits",value:function(){return this.numberingPlan.leadingDigits()}},{key:"hasTypes",value:function(){return this.numberingPlan.hasTypes()}},{key:"type",value:function(t){return this.numberingPlan.type(t)}},{key:"ext",value:function(){return this.numberingPlan.ext()}},{key:"countryCallingCodes",value:function(){return this.v1?this.metadata.country_phone_code_to_countries:this.metadata.country_calling_codes}},{key:"chooseCountryByCountryCallingCode",value:function(t){return this.selectNumberingPlan(t)}},{key:"hasSelectedNumberingPlan",value:function(){return this.numberingPlan!==void 0}}]),n}(),Pa=function(){function n(e,t){Rs(this,n),this.globalMetadataObject=t,this.metadata=e,Ql.call(this,t.metadata)}return Es(n,[{key:"callingCode",value:function(){return this.metadata[0]}},{key:"getDefaultCountryMetadataForRegion",value:function(){return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())}},{key:"IDDPrefix",value:function(){if(!(this.v1||this.v2))return this.metadata[1]}},{key:"defaultIDDPrefix",value:function(){if(!(this.v1||this.v2))return this.metadata[12]}},{key:"nationalNumberPattern",value:function(){return this.v1||this.v2?this.metadata[1]:this.metadata[2]}},{key:"possibleLengths",value:function(){if(!this.v1)return this.metadata[this.v2?2:3]}},{key:"_getFormats",value:function(t){return t[this.v1?2:this.v2?3:4]}},{key:"formats",value:function(){var t=this,i=this._getFormats(this.metadata)||this._getFormats(this.getDefaultCountryMetadataForRegion())||[];return i.map(function(s){return new Pg(s,t)})}},{key:"nationalPrefix",value:function(){return this.metadata[this.v1?3:this.v2?4:5]}},{key:"_getNationalPrefixFormattingRule",value:function(t){return t[this.v1?4:this.v2?5:6]}},{key:"nationalPrefixFormattingRule",value:function(){return this._getNationalPrefixFormattingRule(this.metadata)||this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())}},{key:"_nationalPrefixForParsing",value:function(){return this.metadata[this.v1?5:this.v2?6:7]}},{key:"nationalPrefixForParsing",value:function(){return this._nationalPrefixForParsing()||this.nationalPrefix()}},{key:"nationalPrefixTransformRule",value:function(){return this.metadata[this.v1?6:this.v2?7:8]}},{key:"_getNationalPrefixIsOptionalWhenFormatting",value:function(){return!!this.metadata[this.v1?7:this.v2?8:9]}},{key:"nationalPrefixIsOptionalWhenFormattingInNationalFormat",value:function(){return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata)||this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())}},{key:"leadingDigits",value:function(){return this.metadata[this.v1?8:this.v2?9:10]}},{key:"types",value:function(){return this.metadata[this.v1?9:this.v2?10:11]}},{key:"hasTypes",value:function(){return this.types()&&this.types().length===0?!1:!!this.types()}},{key:"type",value:function(t){if(this.hasTypes()&&Wa(this.types(),t))return new Jg(Wa(this.types(),t),this)}},{key:"ext",value:function(){return this.v1||this.v2?La:this.metadata[13]||La}}]),n}(),Pg=function(){function n(e,t){Rs(this,n),this._format=e,this.metadata=t}return Es(n,[{key:"pattern",value:function(){return this._format[0]}},{key:"format",value:function(){return this._format[1]}},{key:"leadingDigitsPatterns",value:function(){return this._format[2]||[]}},{key:"nationalPrefixFormattingRule",value:function(){return this._format[3]||this.metadata.nationalPrefixFormattingRule()}},{key:"nationalPrefixIsOptionalWhenFormattingInNationalFormat",value:function(){return!!this._format[4]||this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:"nationalPrefixIsMandatoryWhenFormattingInNationalFormat",value:function(){return this.usesNationalPrefix()&&!this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:"usesNationalPrefix",value:function(){return!!(this.nationalPrefixFormattingRule()&&!Wg.test(this.nationalPrefixFormattingRule()))}},{key:"internationalFormat",value:function(){return this._format[5]||this.format()}}]),n}(),Wg=/^\(?\$1\)?$/,Jg=function(){function n(e,t){Rs(this,n),this.type=e,this.metadata=t}return Es(n,[{key:"pattern",value:function(){return this.metadata.v1?this.type:this.type[0]}},{key:"possibleLengths",value:function(){if(!this.metadata.v1)return this.type[1]||this.metadata.possibleLengths()}}]),n}();function Wa(n,e){switch(e){case"FIXED_LINE":return n[0];case"MOBILE":return n[1];case"TOLL_FREE":return n[2];case"PREMIUM_RATE":return n[3];case"PERSONAL_NUMBER":return n[4];case"VOICEMAIL":return n[5];case"UAN":return n[6];case"PAGER":return n[7];case"VOIP":return n[8];case"SHARED_COST":return n[9]}}function Vg(n){if(!n)throw new Error("[libphonenumber-js] `metadata` argument not passed. Check your arguments.");if(!Co(n)||!Co(n.countries))throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(Co(n)?"an object of shape: { "+Object.keys(n).join(", ")+" }":"a "+Hg(n)+": "+n,"."))}var Co=function(e){return fs(e)==="object"},Hg=function(e){return fs(e)};function cr(n,e){if(e=new at(e),e.hasCountry(n))return e.country(n).countryCallingCode();throw new Error("Unknown country: ".concat(n))}function Ug(n,e){return e.countries[n]!==void 0}function Ql(n){var e=n.version;typeof e=="number"?(this.v1=e===1,this.v2=e===2,this.v3=e===3,this.v4=e===4):e?Na(e,Ng)===-1?this.v2=!0:Na(e,Mg)===-1?this.v3=!0:this.v4=!0:this.v1=!0}var Gg=";ext=",Bn=function(e){return"([".concat(sn,"]{1,").concat(e,"})")};function Xl(n){var e="20",t="15",i="9",s="6",o="[  \\t,]*",r="[:\\.．]?[  \\t,-]*",u="#?",l="(?:e?xt(?:ensi(?:ó?|ó))?n?|ｅ?ｘｔｎ?|доб|anexo)",a="(?:[xｘ#＃~～]|int|ｉｎｔ)",c="[- ]+",d="[  \\t]*",m="(?:,{2}|;)",f=Gg+Bn(e),y=o+l+r+Bn(e)+u,g=o+a+r+Bn(i)+u,x=c+Bn(s)+"#",k=d+m+r+Bn(t)+u,A=d+"(?:,)+"+r+Bn(i)+u;return f+"|"+y+"|"+g+"|"+x+"|"+k+"|"+A}var zg="["+sn+"]{"+dr+"}",Yg="["+hr+"]{0,1}(?:["+gs+"]*["+sn+"]){3,}["+gs+sn+"]*",Kg=new RegExp("^["+hr+"]{0,1}(?:["+gs+"]*["+sn+"]){1,2}$","i"),Zg=Yg+"(?:"+Xl()+")?",Qg=new RegExp("^"+zg+"$|^"+Zg+"$","i");function eu(n){return n.length>=dr&&Qg.test(n)}function Xg(n){return Kg.test(n)}var Ja=new RegExp("(?:"+Xl()+")$","i");function ef(n){var e=n.search(Ja);if(e<0)return{};for(var t=n.slice(0,e),i=n.match(Ja),s=1;s<i.length;){if(i[s])return{number:t,ext:i[s]};s++}}var tf={0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9","０":"0","１":"1","２":"2","３":"3","４":"4","５":"5","６":"6","７":"7","８":"8","９":"9","٠":"0","١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","۰":"0","۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9"};function nf(n){return tf[n]}function sf(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=of(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function of(n,e){if(n){if(typeof n=="string")return Va(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Va(n,e)}}function Va(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function Ha(n){for(var e="",t=sf(n.split("")),i;!(i=t()).done;){var s=i.value;e+=rf(s,e)||""}return e}function rf(n,e){return n==="+"?e?void 0:"+":nf(n)}function af(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=lf(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function lf(n,e){if(n){if(typeof n=="string")return Ua(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Ua(n,e)}}function Ua(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function uf(n,e){for(var t=n.slice(),i=af(e),s;!(s=i()).done;){var o=s.value;n.indexOf(o)<0&&t.push(o)}return t.sort(function(r,u){return r-u})}function pr(n,e){return tu(n,void 0,e)}function tu(n,e,t){var i=t.type(e),s=i&&i.possibleLengths()||t.possibleLengths();if(!s)return"IS_POSSIBLE";if(e==="FIXED_LINE_OR_MOBILE"){if(!t.type("FIXED_LINE"))return tu(n,"MOBILE",t);var o=t.type("MOBILE");o&&(s=uf(s,o.possibleLengths()))}else if(e&&!i)return"INVALID_LENGTH";var r=n.length,u=s[0];return u===r?"IS_POSSIBLE":u>r?"TOO_SHORT":s[s.length-1]<r?"TOO_LONG":s.indexOf(r,1)>=0?"IS_POSSIBLE":"INVALID_LENGTH"}function df(n,e,t){if(e===void 0&&(e={}),t=new at(t),e.v2){if(!n.countryCallingCode)throw new Error("Invalid phone number object passed");t.selectNumberingPlan(n.countryCallingCode)}else{if(!n.phone)return!1;if(n.country){if(!t.hasCountry(n.country))throw new Error("Unknown country: ".concat(n.country));t.country(n.country)}else{if(!n.countryCallingCode)throw new Error("Invalid phone number object passed");t.selectNumberingPlan(n.countryCallingCode)}}if(t.possibleLengths())return nu(n.phone||n.nationalNumber,t);if(n.countryCallingCode&&t.isNonGeographicCallingCode(n.countryCallingCode))return!0;throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.')}function nu(n,e){switch(pr(n,e)){case"IS_POSSIBLE":return!0;default:return!1}}function hf(n,e){return gf(n)||pf(n,e)||iu(n,e)||cf()}function cf(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function pf(n,e){var t=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t!=null){var i=[],s=!0,o=!1,r,u;try{for(t=t.call(n);!(s=(r=t.next()).done)&&(i.push(r.value),!(e&&i.length===e));s=!0);}catch(l){o=!0,u=l}finally{try{!s&&t.return!=null&&t.return()}finally{if(o)throw u}}return i}}function gf(n){if(Array.isArray(n))return n}function ff(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=iu(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function iu(n,e){if(n){if(typeof n=="string")return Ga(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Ga(n,e)}}function Ga(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function mf(n){var e,t;n=n.replace(/^tel:/,"tel=");for(var i=ff(n.split(";")),s;!(s=i()).done;){var o=s.value,r=o.split("="),u=hf(r,2),l=u[0],a=u[1];switch(l){case"tel":e=a;break;case"ext":t=a;break;case"phone-context":a[0]==="+"&&(e=a+e);break}}if(!eu(e))return{};var c={number:e};return t&&(c.ext=t),c}function yf(n){var e=n.number,t=n.ext;if(!e)return"";if(e[0]!=="+")throw new Error('"formatRFC3966()" expects "number" to be in E.164 format.');return"tel:".concat(e).concat(t?";ext="+t:"")}function Wt(n,e){return n=n||"",new RegExp("^(?:"+e+")$").test(n)}function bf(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=wf(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function wf(n,e){if(n){if(typeof n=="string")return za(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return za(n,e)}}function za(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}var vf=["MOBILE","PREMIUM_RATE","TOLL_FREE","SHARED_COST","VOIP","PERSONAL_NUMBER","PAGER","UAN","VOICEMAIL"];function gr(n,e,t){if(e=e||{},!!n.country){t=new at(t),t.selectNumberingPlan(n.country,n.countryCallingCode);var i=e.v2?n.nationalNumber:n.phone;if(Wt(i,t.nationalNumberPattern())){if(xo(i,"FIXED_LINE",t))return t.type("MOBILE")&&t.type("MOBILE").pattern()===""||!t.type("MOBILE")||xo(i,"MOBILE",t)?"FIXED_LINE_OR_MOBILE":"FIXED_LINE";for(var s=bf(vf),o;!(o=s()).done;){var r=o.value;if(xo(i,r,t))return r}}}}function xo(n,e,t){return e=t.type(e),!e||!e.pattern()||e.possibleLengths()&&e.possibleLengths().indexOf(n.length)<0?!1:Wt(n,e.pattern())}function _f(n,e,t){if(e=e||{},t=new at(t),!n.country)return!1;if(t.selectNumberingPlan(n.country,n.countryCallingCode),t.hasTypes())return gr(n,e,t.metadata)!==void 0;var i=e.v2?n.nationalNumber:n.phone;return Wt(i,t.nationalNumberPattern())}function Tf(n,e,t){var i=new at(t),s=i.getCountryCodesForCallingCode(n);return s?s.filter(function(o){return Cf(e,o,t)}):[]}function Cf(n,e,t){var i=new at(t);return i.selectNumberingPlan(e),i.numberingPlan.possibleLengths().indexOf(n.length)>=0}function xf(n){return n.replace(new RegExp("[".concat(gs,"]+"),"g")," ").trim()}var Af=/(\$\d)/;function kf(n,e,t){var i=t.useInternationalFormat,s=t.withNationalPrefix;t.carrierCode,t.metadata;var o=n.replace(new RegExp(e.pattern()),i?e.internationalFormat():s&&e.nationalPrefixFormattingRule()?e.format().replace(Af,e.nationalPrefixFormattingRule()):e.format());return i?xf(o):o}var qf=/^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/;function $f(n,e,t){var i=new at(t);if(i.selectNumberingPlan(n,e),i.defaultIDDPrefix())return i.defaultIDDPrefix();if(qf.test(i.IDDPrefix()))return i.IDDPrefix()}function Sf(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=Df(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Df(n,e){if(n){if(typeof n=="string")return Ya(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return Ya(n,e)}}function Ya(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function Ka(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function Za(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?Ka(Object(t),!0).forEach(function(i){Rf(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):Ka(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function Rf(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var Qa={formatExtension:function(e,t,i){return"".concat(e).concat(i.ext()).concat(t)}};function Ef(n,e,t,i){if(t?t=Za(Za({},Qa),t):t=Qa,i=new at(i),n.country&&n.country!=="001"){if(!i.hasCountry(n.country))throw new Error("Unknown country: ".concat(n.country));i.country(n.country)}else if(n.countryCallingCode)i.selectNumberingPlan(n.countryCallingCode);else return n.phone||"";var s=i.countryCallingCode(),o=t.v2?n.nationalNumber:n.phone,r;switch(e){case"NATIONAL":return o?(r=ms(o,n.carrierCode,"NATIONAL",i,t),Ao(r,n.ext,i,t.formatExtension)):"";case"INTERNATIONAL":return o?(r=ms(o,null,"INTERNATIONAL",i,t),r="+".concat(s," ").concat(r),Ao(r,n.ext,i,t.formatExtension)):"+".concat(s);case"E.164":return"+".concat(s).concat(o);case"RFC3966":return yf({number:"+".concat(s).concat(o),ext:n.ext});case"IDD":if(!t.fromCountry)return;var u=Ff(o,n.carrierCode,s,t.fromCountry,i);return Ao(u,n.ext,i,t.formatExtension);default:throw new Error('Unknown "format" argument passed to "formatNumber()": "'.concat(e,'"'))}}function ms(n,e,t,i,s){var o=If(i.formats(),n);return o?kf(n,o,{useInternationalFormat:t==="INTERNATIONAL",withNationalPrefix:!(o.nationalPrefixIsOptionalWhenFormattingInNationalFormat()&&s&&s.nationalPrefix===!1),carrierCode:e,metadata:i}):n}function If(n,e){for(var t=Sf(n),i;!(i=t()).done;){var s=i.value;if(s.leadingDigitsPatterns().length>0){var o=s.leadingDigitsPatterns()[s.leadingDigitsPatterns().length-1];if(e.search(o)!==0)continue}if(Wt(e,s.pattern()))return s}}function Ao(n,e,t,i){return e?i(n,e,t):n}function Ff(n,e,t,i,s){var o=cr(i,s.metadata);if(o===t){var r=ms(n,e,"NATIONAL",s);return t==="1"?t+" "+r:r}var u=$f(i,void 0,s.metadata);if(u)return"".concat(u," ").concat(t," ").concat(ms(n,null,"INTERNATIONAL",s))}function Xa(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function el(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?Xa(Object(t),!0).forEach(function(i){jf(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):Xa(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function jf(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function Of(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}function tl(n,e){for(var t=0;t<e.length;t++){var i=e[t];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function Bf(n,e,t){return e&&tl(n.prototype,e),t&&tl(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}var Nf=function(){function n(e,t,i){if(Of(this,n),!e)throw new TypeError("`country` or `countryCallingCode` not passed");if(!t)throw new TypeError("`nationalNumber` not passed");if(!i)throw new TypeError("`metadata` not passed");var s=new at(i);Mf(e)&&(this.country=e,s.country(e),e=s.countryCallingCode()),this.countryCallingCode=e,this.nationalNumber=t,this.number="+"+this.countryCallingCode+this.nationalNumber,this.metadata=i}return Bf(n,[{key:"setExt",value:function(t){this.ext=t}},{key:"getPossibleCountries",value:function(){return this.country?[this.country]:Tf(this.countryCallingCode,this.nationalNumber,this.metadata)}},{key:"isPossible",value:function(){return df(this,{v2:!0},this.metadata)}},{key:"isValid",value:function(){return _f(this,{v2:!0},this.metadata)}},{key:"isNonGeographic",value:function(){var t=new at(this.metadata);return t.isNonGeographicCallingCode(this.countryCallingCode)}},{key:"isEqual",value:function(t){return this.number===t.number&&this.ext===t.ext}},{key:"getType",value:function(){return gr(this,{v2:!0},this.metadata)}},{key:"format",value:function(t,i){return Ef(this,t,i?el(el({},i),{},{v2:!0}):{v2:!0},this.metadata)}},{key:"formatNational",value:function(t){return this.format("NATIONAL",t)}},{key:"formatInternational",value:function(t){return this.format("INTERNATIONAL",t)}},{key:"getURI",value:function(t){return this.format("RFC3966",t)}}]),n}(),Mf=function(e){return/^[A-Z]{2}$/.test(e)},Lf=new RegExp("(["+sn+"])");function Pf(n,e,t,i){if(e){var s=new at(i);s.selectNumberingPlan(e,t);var o=new RegExp(s.IDDPrefix());if(n.search(o)===0){n=n.slice(n.match(o)[0].length);var r=n.match(Lf);if(!(r&&r[1]!=null&&r[1].length>0&&r[1]==="0"))return n}}}function Wf(n,e){if(n&&e.numberingPlan.nationalPrefixForParsing()){var t=new RegExp("^(?:"+e.numberingPlan.nationalPrefixForParsing()+")"),i=t.exec(n);if(i){var s,o,r=i.length-1,u=r>0&&i[r];if(e.nationalPrefixTransformRule()&&u)s=n.replace(t,e.nationalPrefixTransformRule()),r>1&&(o=i[1]);else{var l=i[0];s=n.slice(l.length),u&&(o=i[1])}var a;if(u){var c=n.indexOf(i[1]),d=n.slice(0,c);d===e.numberingPlan.nationalPrefix()&&(a=e.numberingPlan.nationalPrefix())}else a=i[0];return{nationalNumber:s,nationalPrefix:a,carrierCode:o}}}return{nationalNumber:n}}function Lo(n,e){var t=Wf(n,e),i=t.carrierCode,s=t.nationalNumber;if(s!==n){if(!Jf(n,s,e))return{nationalNumber:n};if(e.possibleLengths()&&!Vf(s,e))return{nationalNumber:n}}return{nationalNumber:s,carrierCode:i}}function Jf(n,e,t){return!(Wt(n,t.nationalNumberPattern())&&!Wt(e,t.nationalNumberPattern()))}function Vf(n,e){switch(pr(n,e)){case"TOO_SHORT":case"INVALID_LENGTH":return!1;default:return!0}}function Hf(n,e,t,i){var s=e?cr(e,i):t;if(n.indexOf(s)===0){i=new at(i),i.selectNumberingPlan(e,t);var o=n.slice(s.length),r=Lo(o,i),u=r.nationalNumber,l=Lo(n,i),a=l.nationalNumber;if(!Wt(a,i.nationalNumberPattern())&&Wt(u,i.nationalNumberPattern())||pr(a,i)==="TOO_LONG")return{countryCallingCode:s,number:o}}return{number:n}}function Uf(n,e,t,i){if(!n)return{};if(n[0]!=="+"){var s=Pf(n,e,t,i);if(s&&s!==n)n="+"+s;else{if(e||t){var o=Hf(n,e,t,i),r=o.countryCallingCode,u=o.number;if(r)return{countryCallingCode:r,number:u}}return{number:n}}}if(n[1]==="0")return{};i=new at(i);for(var l=2;l-1<=Rg&&l<=n.length;){var a=n.slice(1,l);if(i.hasCallingCode(a))return i.selectNumberingPlan(a),{countryCallingCode:a,number:n.slice(l)};l++}return{}}function Gf(n,e){var t=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t)return(t=t.call(n)).next.bind(t);if(Array.isArray(n)||(t=zf(n))||e&&n&&typeof n.length=="number"){t&&(n=t);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function zf(n,e){if(n){if(typeof n=="string")return nl(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return nl(n,e)}}function nl(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function Yf(n,e,t){t=new at(t);for(var i=Gf(n),s;!(s=i()).done;){var o=s.value;if(t.country(o),t.leadingDigits()){if(e&&e.search(t.leadingDigits())===0)return o}else if(gr({phone:e,country:o},void 0,t.metadata))return o}}var Kf=!1;function Zf(n,e,t){if(Kf&&t.isNonGeographicCallingCode(n))return"001";var i=t.getCountryCodesForCallingCode(n);if(i)return i.length===1?i[0]:Yf(i,e,t.metadata)}var Qf=250,Xf=new RegExp("["+hr+sn+"]"),em=new RegExp("[^"+sn+"#]+$");function tm(n,e,t){if(e=e||{},t=new at(t),e.defaultCountry&&!t.hasCountry(e.defaultCountry))throw e.v2?new Kt("INVALID_COUNTRY"):new Error("Unknown country: ".concat(e.defaultCountry));var i=im(n,e.v2,e.extract),s=i.number,o=i.ext,r=i.error;if(!s){if(e.v2)throw r==="TOO_SHORT"?new Kt("TOO_SHORT"):new Kt("NOT_A_NUMBER");return{}}var u=om(s,e.defaultCountry,e.defaultCallingCode,t),l=u.country,a=u.nationalNumber,c=u.countryCallingCode,d=u.carrierCode;if(!t.hasSelectedNumberingPlan()){if(e.v2)throw new Kt("INVALID_COUNTRY");return{}}if(!a||a.length<dr){if(e.v2)throw new Kt("TOO_SHORT");return{}}if(a.length>Dg){if(e.v2)throw new Kt("TOO_LONG");return{}}if(e.v2){var m=new Nf(c,a,t.metadata);return l&&(m.country=l),d&&(m.carrierCode=d),o&&(m.ext=o),m}var f=(e.extended?t.hasSelectedNumberingPlan():l)?Wt(a,t.nationalNumberPattern()):!1;return e.extended?{country:l,countryCallingCode:c,carrierCode:d,valid:f,possible:f?!0:!!(e.extended===!0&&t.possibleLengths()&&nu(a,t)),phone:a,ext:o}:f?sm(l,a,o):{}}function nm(n,e,t){if(n){if(n.length>Qf){if(t)throw new Kt("TOO_LONG");return}if(e===!1)return n;var i=n.search(Xf);if(!(i<0))return n.slice(i).replace(em,"")}}function im(n,e,t){if(n&&n.indexOf("tel:")===0)return mf(n);var i=nm(n,t,e);if(!i)return{};if(!eu(i))return Xg(i)?{error:"TOO_SHORT"}:{};var s=ef(i);return s.ext?s:{number:i}}function sm(n,e,t){var i={country:n,phone:e};return t&&(i.ext=t),i}function om(n,e,t,i){var s=Uf(Ha(n),e,t,i.metadata),o=s.countryCallingCode,r=s.number,u;if(o)i.selectNumberingPlan(o);else if(r&&(e||t))i.selectNumberingPlan(e,t),e&&(u=e),o=t||cr(e,i.metadata);else return{};if(!r)return{countryCallingCode:o};var l=Lo(Ha(r),i),a=l.nationalNumber,c=l.carrierCode,d=Zf(o,a,i);return d&&(u=d,d==="001"||i.country(u)),{country:u,countryCallingCode:o,nationalNumber:a,carrierCode:c}}function il(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function sl(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?il(Object(t),!0).forEach(function(i){rm(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):il(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function rm(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function am(n,e,t){return tm(n,sl(sl({},e),{},{v2:!0}),t)}function Po(n){return Po=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Po(n)}function ol(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function lm(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ol(Object(t),!0).forEach(function(i){um(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):ol(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function um(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function dm(n,e){return gm(n)||pm(n,e)||cm(n,e)||hm()}function hm(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function cm(n,e){if(n){if(typeof n=="string")return rl(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);if(t==="Object"&&n.constructor&&(t=n.constructor.name),t==="Map"||t==="Set")return Array.from(n);if(t==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return rl(n,e)}}function rl(n,e){(e==null||e>n.length)&&(e=n.length);for(var t=0,i=new Array(e);t<e;t++)i[t]=n[t];return i}function pm(n,e){var t=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(t!=null){var i=[],s=!0,o=!1,r,u;try{for(t=t.call(n);!(s=(r=t.next()).done)&&(i.push(r.value),!(e&&i.length===e));s=!0);}catch(l){o=!0,u=l}finally{try{!s&&t.return!=null&&t.return()}finally{if(o)throw u}}return i}}function gm(n){if(Array.isArray(n))return n}function fm(n){var e=Array.prototype.slice.call(n),t=dm(e,4),i=t[0],s=t[1],o=t[2],r=t[3],u,l,a;if(typeof i=="string")u=i;else throw new TypeError("A text for parsing must be a string.");if(!s||typeof s=="string")r?(l=o,a=r):(l=void 0,a=o),s&&(l=lm({defaultCountry:s},l));else if(mm(s))o?(l=s,a=o):a=s;else throw new Error("Invalid second argument: ".concat(s));return{text:u,options:l,metadata:a}}var mm=function(e){return Po(e)==="object"};function al(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function ll(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?al(Object(t),!0).forEach(function(i){ym(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):al(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function ym(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function bm(n,e,t){e&&e.defaultCountry&&!Ug(e.defaultCountry,t)&&(e=ll(ll({},e),{},{defaultCountry:void 0}));try{return am(n,e,t)}catch(i){if(!(i instanceof Kt))throw i}}function wm(){var n=fm(arguments),e=n.text,t=n.options,i=n.metadata;return bm(e,t,i)}function ul(){return Cg(wm,arguments)}class vm extends Je{constructor(){super("phone","A phone number","tel")}getFeedback(e,t){if(this.isValid(e,t))return;const i=J.t.validation.phone,s=i.feedback;if(t){const o=t();if(o)return i.feedbackCountry.Subs({country:o})}return s}isValid(e,t){var s,o;if(e===void 0)return!1;e.startsWith("tel:")&&(e=e.substring(4));let i;return t!==void 0&&(i=(s=t())==null?void 0:s.toUpperCase()),((o=ul(e,i))==null?void 0:o.isValid())??!1}reformat(e,t){var s;e.startsWith("tel:")&&(e=e.substring(4));let i;return t&&(i=t()),(s=ul(e,i==null?void 0:i.toUpperCase()))==null?void 0:s.formatInternational()}}class _m extends Je{constructor(){super("opening_hours",new K(["Has extra elements to easily input when a POI is opened.",new et("Helper arguments"),new Kn(["name","doc"],[["options",new K(["A JSON-object of type `{ prefix: string, postfix: string }`. ",new Kn(["subarg","doc"],[["prefix","Piece of text that will always be added to the front of the generated opening hours. If the OSM-data does not start with this, it will fail to parse."],["postfix","Piece of text that will always be added to the end of the generated opening hours"]])])]]),new et("Example usage"),`To add a conditional (based on time) access restriction:

\`\`\`

"freeform": {
    "key": "access:conditional",
    "type": "opening_hours",
    "helperArgs": [
        {
          "prefix":"no @ (",
          "postfix":")"
        }
    ]
}
\`\`\`

*Don't forget to pass the prefix and postfix in the rendering as well*: \`{opening_hours_table(opening_hours,yes @ &LPARENS, &RPARENS )\``]))}}class Tm extends Je{constructor(){super("color","Shows a color picker")}}class su extends Je{constructor(){super("key","Validates a key, mostly that no weird characters are used");w(this,"isMeta",!0)}getFeedback(t,i){if(t.length>255)return J.T("A `key` should be at most 255 characters");if(t.length==0)return J.T("A `key` should not be empty");const s=/[a-zA-Z0-9:_]+/;if(!t.match(s))return J.T("A `key` should only have the characters `a-zA-Z0-9`, `:`  or `_`")}isValid(t,i){return this.getFeedback(t,i)===void 0}}const Er=class extends Je{constructor(){super("simple_tag","A simple tag of the format `key=value` where `key` conforms to a normal key `");w(this,"isMeta",!0)}getFeedback(t,i){const s=t.split("=");if(s.length<2)return J.T("A tag should contain a = to separate the 'key' and 'value'");if(s.length>2)return J.T("A tag should contain precisely one `=` to separate the 'key' and 'value', but "+(s.length-1)+" equal signs were found");const[o,r]=s,u=Er.KeyValidator.getFeedback(o,i);if(u)return u;if(r.length>255)return J.T("A `value should be at most 255 characters");if(r.length==0)return J.T("A `value should not be empty")}isValid(t,i){return this.getFeedback(t,i)===void 0}};let os=Er;w(os,"KeyValidator",new su);const Un=class extends Yl{constructor(){super("image","Same as the URL-parameter, except that it checks that the URL ends with `.jpg`, `.png` or some other typical image format");w(this,"isMeta",!0)}static hasValidExternsion(t){return t=t.toLowerCase(),Un.allowedExtensions.some(i=>t.endsWith(i))}getFeedback(t,i){const s=super.getFeedback(t,i);if(s)return s;if(!Un.hasValidExternsion(t))return new en("This URL does not end with one of the allowed extensions. These are: "+Un.allowedExtensions.join(", "))}isValid(t){return super.isValid(t)?Un.hasValidExternsion(t):!1}};let rs=Un;w(rs,"allowedExtensions",["jpg","jpeg","svg","png"]);class Cm extends Je{constructor(){super("translation","Makes sure the the string is of format `Record<string, string>` ");w(this,"isMeta",!0)}isValid(t,i){try{return JSON.parse(t),!0}catch{return!1}}}const Cs=class extends Je{constructor(){super("fediverse","Validates fediverse addresses and normalizes them into `@username@server`-format")}reformat(e){if(e.startsWith("@")||(e="@"+e),e.match(Cs.usernameAtServer))return e;try{const t=new URL(e),i=t.pathname;if(i.match(/^\/\w+$/))return`@${i.substring(1)}@${t.hostname}`}catch{}}getFeedback(e){const t=e.match(Cs.usernameAtServer);if(console.log("Match:",t),t){const i=t[2];try{new URL("https://"+i);return}catch{return J.t.validation.fediverse.invalidHost.Subs({host:i})}}try{if(new URL(e).pathname.match(/^\/\w+$/))return}catch{}return J.t.validation.fediverse.feedback}isValid(e){return this.getFeedback(e)===void 0}};let as=Cs;w(as,"usernameAtServer",/^@?(\w+)@((\w|\.)+)$/);const xm=[{path:"./assets/layers/address/housenumber_blank.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/artwork/artwork.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Statue-14.svg"]},{path:"./assets/layers/atm/atm.svg",license:"CC0-1.0",authors:["Michael Glanznig","Andy Allan"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/atm.svg"]},{path:"./assets/layers/bank/bank.svg",license:"CC0-1.0",authors:["nebulon42"],sources:["https://github.com/gmgeo/osmic/blob/master/money/bank-14.svg"]},{path:"./assets/layers/barrier/barrier.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest%20icons/barrier.svg"]},{path:"./assets/layers/bench/bench.svg",license:"CC0-1.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/"]},{path:"./assets/layers/bench/two_sided.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:["https://commons.wikimedia.org/wiki/File:ISO_7010_P018.svg"]},{path:"./assets/layers/bicycle_library/bicycle_library.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bicycle_rental/rental.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/layers/bicycle_tube_vending_machine/pinIcon.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bicycle_tube_vending_machine/tube.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bike_cafe/bike_cafe.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_cleaning/bike_cleaning.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bike_cleaning/bike_cleaning_icon.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bike_parking/bollard.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/handlebar_holder.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/parking.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_parking/rack.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/shed.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/staple.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/two_tier.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_parking/wall_loops.svg",license:"CC-BY-SA-4.0",authors:["Gitte Vande Graveele"],sources:["https://osoc.be/editions/2020/walk-by-brussels"]},{path:"./assets/layers/bike_repair_station/bike_pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_repair_station/broken_pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_repair_station/pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_repair_station/pump_example.png",license:"ALL-RIGHTS-RESERVED",authors:["Turvec Solutions"],sources:["https://turvec.com/product/public-bike-pump/"]},{path:"./assets/layers/bike_repair_station/pump_example_manual.jpg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/bike_repair_station/pump_example_round.jpg",license:"ALL-RIGHTS-RESERVED",authors:["©Altinnova"],sources:["https://www.altinnova.com","https://www.teeken.de/produkte/stadtmobiliar/green-air1/12?lang=3"]},{path:"./assets/layers/bike_repair_station/repair_station.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_repair_station/repair_station_broken_pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_repair_station/repair_station_example.jpg",license:"CC-BY-SA-4.0",authors:["Polarbear24"],sources:["https://wiki.openstreetmap.org/wiki/File:Public_Bike_Repair_Station.jpg"]},{path:"./assets/layers/bike_repair_station/repair_station_example_2.jpg",license:"CC-BY-SA-4.0",authors:["MOs810"],sources:["https://wiki.openstreetmap.org/wiki/File:Bike_repair_station,_Poznan_Kaponiera.jpg"]},{path:"./assets/layers/bike_repair_station/repair_station_example_3.jpg",license:"CC-BY-SA-3.0",authors:["Thelmadatter"],sources:["https://wiki.openstreetmap.org/wiki/File:BikeRepairMonterrey.JPG"]},{path:"./assets/layers/bike_repair_station/repair_station_pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_shop/pump.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_shop/repair_shop.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_shop/shop.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_shop/tools.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/bike_themed_object/other_services.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/binocular/binoculars_example.jpg",license:"CC-BY-SA-4.0",authors:["Moheen Reeyad"],sources:["https://upload.wikimedia.org/wikipedia/commons/a/a0/Coin-operated_binocular_at_Cape_of_Good_Hope_%2801%29.jpg"]},{path:"./assets/layers/binocular/telescope.svg",license:"GPL-2.0-or-later",authors:["Kenny Sing/Elegant Themes"],sources:["https://upload.wikimedia.org/wikipedia/commons/b/b1/Line-style-icons-telescope.svg","https://www.elegantthemes.com/blog/freebie-of-the-week/free-line-style-icons"]},{path:"./assets/layers/birdhide/birdhide.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com"]},{path:"./assets/layers/birdhide/birdshelter.svg",license:"CC-BY-SA-4.0",authors:["Font Awesome Free 5.2.0 by @fontawesome"],sources:["https://fontawesome.com\r"]},{path:"./assets/layers/cafe_pub/cafe.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Cafe-16.svg"]},{path:"./assets/layers/cafe_pub/nightclub.svg",license:"CC0-1.0",authors:["Osm Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Nightclub-16.svg"]},{path:"./assets/layers/cafe_pub/pub.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Pub-16.svg"]},{path:"./assets/layers/car_rental/car_rental.svg",license:"CC0-1.0",authors:["American Institute of Graphic Arts"],sources:["https://thenounproject.com/icon/car-rental-71/"]},{path:"./assets/layers/charging_station/CEE7_4F.svg",license:"MIT",authors:["Gabor111a"],sources:["https://commons.wikimedia.org/wiki/File:CEE7_Type4.svg","https://github.com/openchargemap/ocm-app/issues/22"]},{path:"./assets/layers/charging_station/Chademo_type4.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://upload.wikimedia.org/wikipedia/commons/e/ec/Chademo_type4.svg"]},{path:"./assets/layers/charging_station/Tesla-hpwc-model-s.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://upload.wikimedia.org/wikipedia/commons/2/26/Tesla-hpwc-model-s.svg"]},{path:"./assets/layers/charging_station/Type1-ccs.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://upload.wikimedia.org/wikipedia/commons/0/05/Type1-ccs.svg"]},{path:"./assets/layers/charging_station/Type1_J1772.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://upload.wikimedia.org/wikipedia/commons/d/d0/Type1_J1772.svg"]},{path:"./assets/layers/charging_station/Type2_CCS.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://commons.wikimedia.org/wiki/File:Combo-ccs-eu.svg"]},{path:"./assets/layers/charging_station/Type2_socket.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok"],sources:["https://commons.wikimedia.org/wiki/File:Type_2_mennekes.svg"]},{path:"./assets/layers/charging_station/Type2_tethered.svg",license:"CC-BY-SA-4.0",authors:["GreatDrok","Open Charge Map"],sources:["https://raw.githubusercontent.com/openchargemap/ocm-app/master/src/assets/images/icons/connectors/Type2_tethered.svg"]},{path:"./assets/layers/charging_station/Type3c.svg",license:"CC-BY-SA-4.0",authors:["Pyrog"],sources:["https://commons.wikimedia.org/wiki/File:Type3c.svg"]},{path:"./assets/layers/charging_station/TypeE.svg",license:"MIT",authors:["pietervdvn"],sources:[]},{path:"./assets/layers/charging_station/bosch-3pin.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/charging_station/bosch-5pin.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/charging_station/under_construction.svg",license:"CC0-1.0",authors:["Sarang"],sources:["https://upload.wikimedia.org/wikipedia/commons/2/20/UnderCon_icon.svg"]},{path:"./assets/layers/charging_station/usb_port.svg",license:"CC-BY-4.0",authors:["Ryan Dardis"],sources:["https://thenounproject.com/term/usb-port/94768/"]},{path:"./assets/layers/clock/clock.svg",license:"CC0-1.0",authors:["SJJB Management"],sources:["https://wiki.openstreetmap.org/wiki/File:Amenity_clock_20x20.svg"]},{path:"./assets/layers/clock/clock_digital.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/crab_address/housenumber_blank.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/crossings/180px-Trairvoja_mapeto.jpg",license:"CC-BY-SA-4.0",authors:["Martin Constantino–Bodin"],sources:["https://commons.wikimedia.org/wiki/File:Trairvoja_mapeto.jpg"]},{path:"./assets/layers/crossings/Belgian_road_sign_B22.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_B22.svg"]},{path:"./assets/layers/crossings/Belgian_road_sign_B23.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_B23.svg"]},{path:"./assets/layers/crossings/Vibrating_button_illustration.jpg",license:"CC-BY-4.0",authors:["Tobias Zwick"],sources:["https://wiki.openstreetmap.org/wiki/File:Vibrating_button_illustration.jpg"]},{path:"./assets/layers/crossings/pedestrian_crossing.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest%20icons/pedestrian_crossing.svg"]},{path:"./assets/layers/crossings/traffic_lights.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest%20icons/traffic_lights.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_road_sign_D07.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_D07.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_road_sign_D09.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_D09.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_road_sign_D10.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_D10.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M13.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M13.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M14.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M14.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M15.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M15.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M16.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M16.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M6.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M6.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/be/Belgian_traffic_sign_M7.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_traffic_sign_M7.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/nl/Nederlands_verkeersbord_G11.svg",license:"CC0-1.0",authors:["Ministerie van Infrastructuur en Waterstaat"],sources:["https://commons.wikimedia.org/wiki/File:Nederlands_verkeersbord_G11.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/nl/Nederlands_verkeersbord_G12a.svg",license:"CC0-1.0",authors:["Ministerie van Infrastructuur en Waterstaat"],sources:["https://commons.wikimedia.org/wiki/File:Nederlands_verkeersbord_G12a.svg"]},{path:"./assets/layers/cycleways_and_roads/traffic_sign/nl/Nederlands_verkeersbord_G13.svg",license:"CC0-1.0",authors:["Ministerie van Infrastructuur en Waterstaat"],sources:["https://commons.wikimedia.org/wiki/File:Nederlands_verkeersbord_G13.svg"]},{path:"./assets/layers/defibrillator/defibrillator.svg",license:"CC0-1.0",authors:["MaxxL"],sources:["https://commons.wikimedia.org/wiki/File:ISO_7010_E010.svg","https://raw.githubusercontent.com/osmbe/play/master/mapcomplete/aed_checked.svg"]},{path:"./assets/layers/dentist/dentist.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Dentist-14.svg"]},{path:"./assets/layers/doctors/doctors.svg",license:"CC0-1.0",authors:["osmcarto"],sources:["https://wiki.openstreetmap.org/wiki/File:Doctors-14.svg"]},{path:"./assets/layers/dogpark/dog-park.svg",license:"CC0-1.0",authors:["Public Domain Symbols","Niels Elgaard Larsen"],sources:["https://openclipart.org/detail/260714/dogpark15"]},{path:"./assets/layers/drinking_water/drips.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/layers/elevator/elevator_wheelchair.svg",license:"CC-BY-SA-4.0",authors:["https://www.ctsteward.com/"],sources:["https://www.ctsteward.com/"]},{path:"./assets/layers/entrance/emergency_door.svg",license:"CC-BY-SA-4.0",authors:["PanierAvide"],sources:["https://commons.wikimedia.org/wiki/File:Emergency_door_icon.svg"]},{path:"./assets/layers/entrance/entrance.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/layers/etymology/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/fitness_centre/gym.svg",license:"CC-BY-4.0",authors:["Bernd Lakenbrink","Noun Project"],sources:["https://thenounproject.com/icon/gym-3583088/"]},{path:"./assets/layers/fitness_station/07-12-2016,_Fitness_trail,_Parque_da_Alfarrobeira,_Albufeira_2.jpg",license:"CC-BY-SA-4.0",authors:["Kolforn"],sources:["https://commons.wikimedia.org/wiki/File:07-12-2016,_Fitness_trail,_Parque_da_Alfarrobeira,_Albufeira_(2).JPG"]},{path:"./assets/layers/fitness_station/Annecy_-_rower.jpg",license:"CC-BY-SA-4.0",authors:["Tiia Monto"],sources:["https://commons.wikimedia.org/wiki/File:Annecy_-_rower.jpg"]},{path:"./assets/layers/fitness_station/Ansan_Park_beind_the_city_hall_022.jpg",license:"CC-BY-SA-4.0",authors:["Piotrus"],sources:["https://commons.wikimedia.org/wiki/File:Ansan_Park_(beind_the_city_hall)_022.JPG"]},{path:"./assets/layers/fitness_station/Battling_ropes.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Battling_ropes.jpg"]},{path:"./assets/layers/fitness_station/Captains_chair.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Captains_chair.jpg"]},{path:"./assets/layers/fitness_station/Exercise9159.jpg",license:"CC-BY-SA-4.0",authors:["יעקב"],sources:["https://commons.wikimedia.org/wiki/File:Exercise9159.jpg"]},{path:"./assets/layers/fitness_station/Exercise9170.jpg",license:"CC-BY-SA-4.0",authors:["יעקב"],sources:["https://commons.wikimedia.org/wiki/File:Exercise9170.JPG"]},{path:"./assets/layers/fitness_station/Exercise_Box.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Exercise_Box.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_beam_jump.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_beam_jump.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_hurdling.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_hurdling.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_leapfrog.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_leapfrog.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_slalom.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_slalom.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_stepping_stone.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_stepping_stone.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_stretch_bars.jpg",license:"CC-BY-SA-4.0",authors:["Axelos"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_stretch_bars.jpg"]},{path:"./assets/layers/fitness_station/Fitness_station_wall.jpg",license:"CC-BY-SA-4.0",authors:["Axelos","Al-Hun"],sources:["https://wiki.openstreetmap.org/wiki/File:Fitness_station_wall.jpg"]},{path:"./assets/layers/fitness_station/Horizontal_ladder.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Horizontal_ladder.jpg"]},{path:"./assets/layers/fitness_station/Inclined_sit-up_and_hyperextension_bench.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Inclined_sit-up_and_hyperextension_bench.jpg"]},{path:"./assets/layers/fitness_station/Inclined_sit-up_bench.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Inclined_sit-up_bench.jpg"]},{path:"./assets/layers/fitness_station/Log_lifting_exercise.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Log_lifting_exercise.jpg"]},{path:"./assets/layers/fitness_station/Outdoor_fitness_station_sign.jpg",license:"CC-BY-SA-4.0",authors:["kaitu"],sources:["https://commons.wikimedia.org/wiki/File:Outdoor_fitness_station_sign.jpg","https://www.mapillary.com/app/?pKey=iWBo8pm9COksv8Qc8E7cfw&lat=45.87432166666667&lng=9.487998999999999&focus=photo&z=17&x=0.4903320875161608&y=0.48257487392238285&zoom=0"]},{path:"./assets/layers/fitness_station/Outdoor_stationary_bicycle.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Outdoor_stationary_bicycle.jpg"]},{path:"./assets/layers/fitness_station/Push-up_bars.jpg",license:"CC-BY-SA-4.0",authors:["Tpikonen"],sources:["https://commons.wikimedia.org/wiki/File:Push-up_bars.jpg"]},{path:"./assets/layers/fitness_station/RIAN_archive_493268_Sports_at_a_kindergarten.jpg",license:"CC-BY-SA-4.0",authors:["Igor Utkin"],sources:["https://commons.wikimedia.org/wiki/File:RIAN_archive_493268_Sports_at_a_kindergarten.jpg"]},{path:"./assets/layers/fitness_station/Slacklineanlage_im_Dietenbachpark.jpg",license:"CC-BY-SA-4.0",authors:["Andreas Schwarzkopf"],sources:["https://commons.wikimedia.org/wiki/File:Slacklineanlage_im_Dietenbachpark.jpg"]},{path:"./assets/layers/fitness_station/Trimm-Dich-Pfad_Grünwalder_Forst_Klimmzüge.jpg",license:"CC-BY-SA-4.0",authors:["Zeitlupe"],sources:["https://commons.wikimedia.org/wiki/File:Trimm-Dich-Pfad_Grünwalder_Forst_Klimmzüge.jpg"]},{path:"./assets/layers/fitness_station/fitness.svg",license:"CC0-1.0",authors:["Kocio"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/leisure/fitness.svg"]},{path:"./assets/layers/food/Vegetarian-mark.svg",license:"LOGO",authors:["European Vegetarian Union"],sources:["https://commons.wikimedia.org/wiki/File:Vegetarian-mark.svg"]},{path:"./assets/layers/food/fastfood.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/w/images/1/1f/Fast-food-16.svg"]},{path:"./assets/layers/food/fries.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/french-fries_1144288"]},{path:"./assets/layers/food/organic.svg",license:"CC0-1.0",authors:["European Commission"],sources:["https://commons.wikimedia.org/wiki/File:Organic-Logo.svg"]},{path:"./assets/layers/food/restaurant.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/w/images/b/bb/Restaurant-14.svg"]},{path:"./assets/layers/ghost_bike/ghost_bike.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/governments/government.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Office-16.svg"]},{path:"./assets/layers/guidepost/guidepost.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Guidepost-14.svg"]},{path:"./assets/layers/guidepost/guidepost_example.jpg",license:"CC0-1.0",authors:["Mschaeuble"],sources:["https://wiki.openstreetmap.org/wiki/File:Signpost.jpg"]},{path:"./assets/layers/hospital/hospital.svg",license:"CC0-1.0",authors:["osmcarto"],sources:["https://wiki.openstreetmap.org/wiki/File:Hospital-14.svg"]},{path:"./assets/layers/hotel/hotel.svg",license:"CC0-1.0",authors:["Andy Allan","Michael Glanznig","Adamant36","Paul Dicker"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/tourism/hotel.svg"]},{path:"./assets/layers/hydrant/barcelona.jpg",license:"CC-BY-SA-4.0",authors:["CLIGNER"],sources:["https://commons.wikimedia.org/wiki/File:Gama_racores_UNE23400_ligatura.JPG"]},{path:"./assets/layers/hydrant/storz.jpg",license:"CC-BY-SA-4.0",authors:["Karl Gruber"],sources:["https://commons.wikimedia.org/wiki/File:Festkupplung.jpg"]},{path:"./assets/layers/ice_cream/ice_cream.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Ice-cream-14.svg"]},{path:"./assets/layers/icons/website.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/id_presets/ID.svg",license:"WTFPL",authors:["iD editor"],sources:["https://wiki.openstreetmap.org/wiki/File:ID.svg"]},{path:"./assets/layers/id_presets/fas-baby-carriage.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-bath.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-blender.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-book.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-bowl-rice.svg",license:"CC-BY 4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-camera-retro.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-cannabis.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-car-battery.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-carrot.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-cat.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-cheese.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-compact-disc.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-couch.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-crutch.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-dice.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-dolly.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-door-open.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-dragon.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-futbol.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-guitar.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-hat-cowboy-side.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-jar.svg",license:"CC-BY 4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-key.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-laptop.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-leaf.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-microchip.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-motorcycle.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-newspaper.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-paint-roller.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-paperclip.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-pills.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-plate-wheat.svg",license:"CC-BY 4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-plug.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-print.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-rocket.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-store.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-suitcase-rolling.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-suitcase.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-tape.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-tractor.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-trophy.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-vector-square.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/fas-wine-bottle.svg",license:"CC-BY-4.0",authors:["Font-Awesome icon set"],sources:["https://github.com/FortAwesome/Font-Awesome"]},{path:"./assets/layers/id_presets/maki-alcohol-shop.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-bakery.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-bicycle.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-car-repair.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-car.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-cemetery.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-clothing-store.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-confectionery.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-florist.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-gaming.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-garden-centre.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-gift.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-grocery.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-jewelry-store.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-lodging.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-optician.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-shoe.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-shop.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-teahouse.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-telephone.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-warehouse.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/maki-watch.svg",license:"CC0-1.0",authors:["Maki icon set"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/id_presets/temaki-balloon.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-beauty_salon.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-boat.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-bottles.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-bow_and_arrow.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-camper_trailer.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-cleaver.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-cloth.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-clothes_hanger.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-coffee.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-compass.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-curtains.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-dagger.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-desk_lamp.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-fashion_accessories.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-fireplace.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-fish_cleaning.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-furniture.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-hair_care.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-hammer_shoe.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-handbag.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-hearing_aid.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-ice_fishing.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-kitchen_sink.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-laundry.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-lipstick.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-meat.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-military.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-money_hand.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-motorcycle_repair.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-movie_rental.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-needle_and_spool.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-perfume.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-pet_grooming.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-pipe.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-power.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-propane_tank.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-psychic.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-rocket_firework.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-scuba_diving.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-spa.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-speaker.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-spice_bottle.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-storage_fermenter.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-storage_rental.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-tattoo_machine.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-tiling.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-tire.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-tools.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-vacuum.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-vase.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-water_bottle.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/id_presets/temaki-window.svg",license:"CC0-1.0",authors:["Temaki icon set"],sources:["https://github.com/ideditor/temaki"]},{path:"./assets/layers/indoors/room_administration.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_administration.svg"]},{path:"./assets/layers/indoors/room_auditorium.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_auditorium.svg"]},{path:"./assets/layers/indoors/room_bedroom.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_bedroom.svg"]},{path:"./assets/layers/indoors/room_chapel.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_chapel.svg"]},{path:"./assets/layers/indoors/room_class.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_class.svg"]},{path:"./assets/layers/indoors/room_computer.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_computer.svg"]},{path:"./assets/layers/indoors/room_conference.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_conference.svg"]},{path:"./assets/layers/indoors/room_crypt.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_crypt.svg"]},{path:"./assets/layers/indoors/room_kitchen.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_kitchen.svg"]},{path:"./assets/layers/indoors/room_laboratory.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_laboratory.svg"]},{path:"./assets/layers/indoors/room_library.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_library.svg"]},{path:"./assets/layers/indoors/room_locker.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_locker.svg"]},{path:"./assets/layers/indoors/room_nursery.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_nursery.svg"]},{path:"./assets/layers/indoors/room_office.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_office.svg"]},{path:"./assets/layers/indoors/room_prison_cell.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_prison_cell.svg"]},{path:"./assets/layers/indoors/room_restaurant.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_restaurant.svg"]},{path:"./assets/layers/indoors/room_security_check.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_security_check.svg"]},{path:"./assets/layers/indoors/room_sport.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_sport.svg"]},{path:"./assets/layers/indoors/room_storage.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_storage.svg"]},{path:"./assets/layers/indoors/room_technical.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_technical.svg"]},{path:"./assets/layers/indoors/room_toilets.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_toilets.svg"]},{path:"./assets/layers/indoors/room_waiting.svg",license:"AGPL-3.0-only",authors:["Adrien Pavie"],sources:["https://framagit.org/OpenLevelUp/OpenLevelUp/-/blob/master/src/img/features-vector/room_waiting.svg"]},{path:"./assets/layers/information_board/board.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Board-14.svg"]},{path:"./assets/layers/kerbs/KerbIcon.svg",license:"CC0-1.0",authors:["Treeem"],sources:["https://commons.wikimedia.org/wiki/File:KerbIcon.svg"]},{path:"./assets/layers/kerbs/flush.svg",license:"CC0-1.0",authors:["Jeroen Hoek"],sources:["https://wiki.openstreetmap.org/wiki/File:Icon_kerb%3Dflush.svg"]},{path:"./assets/layers/kerbs/lowered.svg",license:"CC0-1.0",authors:["Jeroen Hoek"],sources:["https://wiki.openstreetmap.org/wiki/File:Icon_kerb%3Dlowered.svg"]},{path:"./assets/layers/kerbs/no.svg",license:"CC0-1.0",authors:["Jeroen Hoek"],sources:["https://wiki.openstreetmap.org/wiki/File:Icon_kerb%3Dno.svg"]},{path:"./assets/layers/kerbs/raised.svg",license:"CC0-1.0",authors:["Jeroen Hoek"],sources:["https://wiki.openstreetmap.org/wiki/File:Icon_kerb%3Draised.svg"]},{path:"./assets/layers/kindergarten_childcare/childcare.svg",license:"CC-BY-4.0",authors:["Diego Naive"],sources:["https://thenounproject.com/icon/child-care-332981/"]},{path:"./assets/layers/kindergarten_childcare/kindergarten.svg",license:"CC-BY-4.0",authors:["Diego Naive","VideoPlasty","Pietervdvn"],sources:["https://thenounproject.com/icon/child-care-332981/","https://commons.wikimedia.org/wiki/File:Blackboard_Flat_Icon_Vector.svg"]},{path:"./assets/layers/map/map-stickered.svg",license:"CC-BY-SA-4.0",authors:["OpenStreetMap"," Pieter Vander Vennet"," M!dgard"],sources:["https://OpenStreetMap.org"," https://wiki.openstreetmap.org/wiki/Logos"]},{path:"./assets/layers/map/map.svg",license:"CC-BY-SA-4.0",authors:[],sources:["https://www.OpenStreetMap.org"]},{path:"./assets/layers/map/osm-logo-buggy-attr.svg",license:"CC-BY-SA-4.0",authors:[],sources:["https://www.OpenStreetMap.org"]},{path:"./assets/layers/map/osm-logo-white-bg.svg",license:"CC-BY-SA-4.0",authors:[],sources:["https://www.OpenStreetMap.org"]},{path:"./assets/layers/maproulette/logomark.svg",license:"MIT",authors:["MapRoulette"],sources:["https://github.com/maproulette/docs/blob/master/src/assets/svg/logo.svg"]},{path:"./assets/layers/maxspeed/living_street_be.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://nl.wikipedia.org/wiki/Bestand:Belgian_road_sign_F12a.svg"]},{path:"./assets/layers/memorial/plaque.svg",license:"CC0-1.0",authors:["OSM Carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Plaque.svg"]},{path:"./assets/layers/nature_reserve/ANB.jpg",license:"LOGO",authors:["Agentschap Natuur en Bos"],sources:["https://www.natuurenbos.be/"]},{path:"./assets/layers/nature_reserve/Natuurpunt.jpg",license:"LOGO",authors:["Natuurpunt"],sources:["https://www.natuurpunt.be/"]},{path:"./assets/layers/nature_reserve/groen_logo.svg",license:"LOGO",authors:["Groen"],sources:["https://www.groen.be/"]},{path:"./assets/layers/nature_reserve/nature_reserve.svg",license:"CC-BY-3.0",authors:["@ Эдуард Черных"],sources:["https://www.onlinewebfonts.com/icon/389579"]},{path:"./assets/layers/observation_tower/Tower_observation.svg",license:"CC0-1.0",authors:["Teslaton"],sources:["https://wiki.openstreetmap.org/w/images/b/b9/Tower_observation.svg"]},{path:"./assets/layers/osm_community_index/osm.svg",license:"ISC",authors:["osmlab"],sources:["https://github.com/osmlab/osm-community-index/blob/main/dist/img/osm.svg"]},{path:"./assets/layers/parcel_lockers/parcel_lockers.svg",license:"CC-BY-4.0",authors:["Emmanuel Darmon","Noun Project"],sources:["https://thenounproject.com/icon/parcel-locker-249755/"]},{path:"./assets/layers/parking/parking.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/placeholder_608690?term=parking&page=1&position=16&page=1&position=16&related_id=608690&origin=search"]},{path:"./assets/layers/parking_spaces/parking_space.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/parking_ticket_machine/parking_tickets.svg",license:"CC0-1.0",authors:["Jérémy Ragusa"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/parking_tickets.svg"]},{path:"./assets/layers/pharmacy/pharmacy.svg",license:"CC0-1.0",authors:["OSM-carto"],sources:["https://wiki.openstreetmap.org/wiki/File:Pharmacy-14.svg"]},{path:"./assets/layers/physiotherapist/doctors.svg",license:"CC0-1.0",authors:["osmcarto"],sources:["https://wiki.openstreetmap.org/wiki/File:Doctors-14.svg"]},{path:"./assets/layers/picnic_table/picnic_table.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/play_forest/icon.svg",license:"LOGO",authors:["Agentschap Natuur en Bos"],sources:["https://www.natuurenbos.be/spelen"]},{path:"./assets/layers/postboxes/postbox.svg",license:"CC-BY-4.0",authors:["Vincent Le Moign","https://twitter.com/webalys"],sources:["https://upload.wikimedia.org/wikipedia/commons/6/6d/726-postbox.svg","http://emoji.streamlineicons.com"]},{path:"./assets/layers/postoffices/post_office.svg",license:"CC-BY-SA-4.0",authors:["https://github.com/emojione/emojione/graphs/contributors"],sources:["https://commons.wikimedia.org/wiki/File:Emojione_BW_1F3E4.svg","https://github.com/emojione/emojione/blob/2.2.7/assets/svg_bw/1f3e4.svg"]},{path:"./assets/layers/questions/denominations/chf/1000chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/100chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/10chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/10rp-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/1fr-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/200chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/20chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/20rp-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/2fr-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/50chf.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/questions/denominations/chf/50rp-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/5fr-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/chf/5rp-2019-800px.png",license:"CC0-1.0",authors:["Swissmint"],sources:["https://www.swissmint.ch/swissmint/de/home/dokumentation/bildgalerie/umlaufmuenzen-bildgalerie.html"]},{path:"./assets/layers/questions/denominations/eur/100euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311346/worksheet-100-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/10cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311337/worksheet-10-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/10euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311343/worksheet-10-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/1cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311334/worksheet-1-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/1euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311340/worksheet-1-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/200euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311347/worksheet-200-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/20cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311338/worksheet-20-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/20euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311344/worksheet-20-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/2cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311335/worksheet-2-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/2euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311341/worksheet-2-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/500euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311348/worksheet-500-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/50cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311339/worksheet-50-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/50euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311345/worksheet-50-euro-coloured"]},{path:"./assets/layers/questions/denominations/eur/5cent.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311336/worksheet-5-cent-coloured"]},{path:"./assets/layers/questions/denominations/eur/5euro.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/311342/worksheet-5-euro-coloured"]},{path:"./assets/layers/questions/audio_induction_loop.svg",license:"CC-BY-4.0",authors:["Carl Holderness"],sources:["https://commons.wikimedia.org/wiki/File:Noun_telecoil_audio_induction_hearing_loop_symbol_2011213.svg"]},{path:"./assets/layers/questions/audio_induction_loop_missing.svg",license:"CC-BY-4.0",authors:["Carl Holderness"],sources:["https://commons.wikimedia.org/wiki/File:Noun_telecoil_audio_induction_hearing_loop_symbol_2011213.svg"]},{path:"./assets/layers/questions/cash.svg",license:"CC-BY-3.0",authors:["Online Web Fonts"],sources:["https://www.onlinewebfonts.com/icon/464494"]},{path:"./assets/layers/questions/coins.svg",license:"CC-BY-3.0",authors:["Online Web Fonts"],sources:["https://www.onlinewebfonts.com/icon/464488"]},{path:"./assets/layers/questions/dogs_allowed.svg",license:"PUBLIC-DOMAIN",authors:["OpenClipArt"],sources:["https://freesvg.org/no-dogs-round-sign-vector-graphics"]},{path:"./assets/layers/questions/dogs_leashed.svg",license:"PUBLIC-DOMAIN",authors:[" 	NPS Graphics, converted by User:ZyMOS"],sources:["https://commons.wikimedia.org/wiki/File:Pictograms-nps-pets_on_leash-2.svg"]},{path:"./assets/layers/questions/nfc_card.svg",license:"CC0-1.0",authors:["Stijn Wens"],sources:["https://wens.be/free-antwerpenize-bicycle-font"]},{path:"./assets/layers/questions/no_dogs.svg",license:"Public Domain",authors:["OpenClipArt"],sources:["https://freesvg.org/no-dogs-round-sign-vector-graphics"]},{path:"./assets/layers/questions/no_smoking.svg",license:"CC0-1.0",authors:["AIGA"],sources:["https://upload.wikimedia.org/wikipedia/commons/6/6b/No_Smoking.svg","https://www.aiga.org/content.cfm/symbol-signs"]},{path:"./assets/layers/questions/notes.svg",license:"CC-BY-3.0",authors:["Online Web Fonts"],sources:["https://www.onlinewebfonts.com/icon/464507"]},{path:"./assets/layers/questions/payment_card.svg",license:"CC0-1.0",authors:[" 	Maxi Koichi (maxixam)"],sources:["https://commons.wikimedia.org/wiki/File:Credit_Card_-_The_Noun_Project.svg"]},{path:"./assets/layers/questions/phone.svg",license:"CC-BY-3.0",authors:["@ tyskrat"],sources:["https://www.onlinewebfonts.com/icon/1059"]},{path:"./assets/layers/questions/phone.svg",license:"CC-BY-3.0",authors:["@ tyskrat"],sources:["https://www.onlinewebfonts.com/icon/1059"]},{path:"./assets/layers/questions/qrcode.svg",license:"MIT",authors:["Ionic Team"],sources:["https://commons.wikimedia.org/wiki/File:Ionicons_qr-code-outline.svg"]},{path:"./assets/layers/questions/send_email.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/layers/questions/send_email.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/layers/questions/smartphone.svg",license:"CC-BY-3.0",authors:["To Uyen"],sources:["https://commons.wikimedia.org/wiki/File:Smartphone_icon_-_Noun_Project_283536.svg"]},{path:"./assets/layers/questions/smoking.svg",license:"CC0-1.0",authors:["Wiki-User03","ZooFari"],sources:["https://commons.wikimedia.org/wiki/File:Smoking_pictogram_(black).svg"]},{path:"./assets/layers/reception_desk/reception_desk.svg",license:"CC-BY-SA-4.0",authors:["Robin Julien"],sources:["https://www.ctsteward.com/"]},{path:"./assets/layers/recycling/batteries.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/batteries.svg"]},{path:"./assets/layers/recycling/beverage_cartons.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/beverage_cartons.svg"]},{path:"./assets/layers/recycling/bicycles.svg",license:"CC0-1.0",authors:["Antwerpenize Bike Font"],sources:[]},{path:"./assets/layers/recycling/cans.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/cans.svg"]},{path:"./assets/layers/recycling/clothes.svg",license:"CC-BY-SA-4.0",authors:["Adrien Pavie","modified from EmojiOne 2: U+1F456, U+1F45"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/clothes.svg"]},{path:"./assets/layers/recycling/cooking_oil.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/cooking_oil.svg"]},{path:"./assets/layers/recycling/engine_oil.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/engine_oil.svg"]},{path:"./assets/layers/recycling/fluorescent_tubes.svg",license:"CC-BY-4.0",authors:["Noun Project","shashank singh"],sources:["https://thenounproject.com/icon/tube-fluorescent-light-3756518/"]},{path:"./assets/layers/recycling/garden_waste.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick","modified from Twemoji: U+1F33F"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/garden_waste.svg"]},{path:"./assets/layers/recycling/glass.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/glass.svg"]},{path:"./assets/layers/recycling/glass_bottles.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/glass_bottles.svg"]},{path:"./assets/layers/recycling/light_bulbs.svg",license:"CC0-1.0",authors:["OpenClipArt","fabiovaleggia"],sources:["https://openclipart.org/detail/175842/basic-light-bulb"]},{path:"./assets/layers/recycling/needles.svg",license:"CC0-1.0",authors:[],sources:["https://svgsilh.com/image/1294131.html"]},{path:"./assets/layers/recycling/newspaper.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick","modified from EmojiOne 2: U+1F4F0"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/newspaper.svg"]},{path:"./assets/layers/recycling/paper.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/paper.svg"]},{path:"./assets/layers/recycling/plastic.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/plastic.svg"]},{path:"./assets/layers/recycling/plastic_bottles.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/plastic_bottles.svg"]},{path:"./assets/layers/recycling/plastic_packaging.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/plastic_packaging.svg"]},{path:"./assets/layers/recycling/printer_cartridges.svg",license:"CC-BY-4.0",authors:["Noun Project","Zach Bogart"],sources:["https://thenounproject.com/icon/ink-4963274/"]},{path:"./assets/layers/recycling/recycling-14.svg",license:"CC0-1.0",authors:["Michael Glanznig"],sources:["https://github.com/gmgeo/osmic/blob/master/amenity/recycling-14.svg"]},{path:"./assets/layers/recycling/scrap_metal.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/scrap_metal.svg"]},{path:"./assets/layers/recycling/shoes.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick","modified from EmojiOne 2: U+1F45F"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/shoes.svg"]},{path:"./assets/layers/recycling/small_electrical_appliances.svg",license:"CC-BY-SA-4.0",authors:["EmojiOne 2: U+1F50C"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/recycling%20icons/small_electrical_appliances.svg"]},{path:"./assets/layers/route_marker/bicycle_route_marker.jpg",license:"CC0-1.0",authors:["Segubi"],sources:["https://wiki.openstreetmap.org/wiki/File:Route_marker_Germany_Zwischenwegweiser_Radverkehrsnetz_NRW.jpg"]},{path:"./assets/layers/route_marker/route_marker.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/route_marker/walking_route_marker.jpg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/school/college.svg",license:"CC0-1.0",authors:["Maki"],sources:["https://labs.mapbox.com/maki-icons/"]},{path:"./assets/layers/school/school.svg",license:"CC0-1.0",authors:["Temaki"],sources:["https://github.com/ideditor/temaki","https://ideditor.github.io/temaki/docs/"]},{path:"./assets/layers/shelter/shelter.svg",license:"MIT",authors:["Diemen Design"],sources:["https://icon-icons.com/icon/map-shelter/158301"]},{path:"./assets/layers/shops/shop-disused.svg",license:"CC0-1.0",authors:["Maki icon set","Pietervdvn"],sources:["https://github.com/mapbox/maki"]},{path:"./assets/layers/shower/shower.svg",license:"CC0-1.0",authors:["James"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/shower.svg"]},{path:"./assets/layers/slow_roads/slow_road.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/slow_roads/woonerf.svg",license:"CC0-1.0",authors:["Belgische Wetgever"],sources:["https://nl.wikipedia.org/wiki/Bestand:Belgian_road_sign_F12a.svg"]},{path:"./assets/layers/speed_camera/speed_camera.svg",license:"CC0-1.0",authors:["Earlyswerver","OpenClipArt"],sources:["https://en.wikipedia.org/wiki/File:Earlyswerver_UK_Speed_Camera_Sign.svg"]},{path:"./assets/layers/speed_display/speed_display.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:["https://www.keshikan.net/fonts-e.html"]},{path:"./assets/layers/sport_pitch/baseball.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/basketball.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/beachvolleyball.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/boules.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/equestrian.svg",license:"CC0-1.0",authors:["Hufkratzer"],sources:["https://github.com/pietervdvn/MapComplete/issues/920"," https://gist.githubusercontent.com/Hufkratzer/81abcfe749ce8f99257e38f58633dd72/raw/8fa614a983807724f7110793b57344cc70dc34bc/equestrian.svg"]},{path:"./assets/layers/sport_pitch/lock.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/skateboard.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/soccer.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/sport_pitch.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/table_tennis.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/tennis.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sport_pitch/volleyball.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/layers/sports_centre/sports_centre.svg",license:"CC-BY-4.0",authors:["Hello world","The Noun Project"],sources:["https://thenounproject.com/icon/rogers-centre-464379/"]},{path:"./assets/layers/stairs/Braille_stairs.jpg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/stairs/stairs.svg",license:"CC-BY SA 4.0",authors:[" 	Font Awesome"],sources:["https://commons.wikimedia.org/wiki/File:Stairs-solid.svg"]},{path:"./assets/layers/street_lamps/bent_pole_1.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/street_lamps/bent_pole_2.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/street_lamps/straight_pole.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/layers/street_lamps/street_lamp.svg",license:"CC0-1.0",authors:["Yohan Boniface"],sources:["https://github.com/hotosm/HDM-CartoCSS/blob/master/icons/poi/street_lamp.svg"]},{path:"./assets/layers/surveillance_camera/ALPR.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/layers/surveillance_camera/ALPR_Example.jpg",license:"CC-BY-NC 2.0",authors:["synx508"],sources:["https://www.flickr.com/photos/synx508/5742253934/"]},{path:"./assets/layers/surveillance_camera/ALPR_Example2.jpg",license:"CC-BY 4.0",authors:["https://commons.wikimedia.org/wiki/User:Mbrickn"],sources:["https://commons.wikimedia.org/wiki/File:ANPR_Camera_Front.jpg"]},{path:"./assets/layers/toilet/toilets.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Toilets-16.svg"]},{path:"./assets/layers/toilet/urinal.svg",license:"CC-BY-4.0",authors:["asianson.design","Pieter Vander Vennet"],sources:["https://thenounproject.com/term/urinal/1307984/"]},{path:"./assets/layers/toilet/wheelchair.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Wheelchair_symbol.svg"]},{path:"./assets/layers/trail/pushchair.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/stroller_1032915?term=pushchair&page=1&position=76&page=1&position=76&related_id=1032915&origin=search"]},{path:"./assets/layers/trail/trail.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/trail_3273172?term=trail&page=1&position=11&page=1&position=11&related_id=3273172&origin=search"]},{path:"./assets/layers/trail/wheelchair.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Wheelchair_symbol.svg"]},{path:"./assets/layers/transit_routes/relatify.png",license:"AGPLv3",authors:["Kamil Monicz"],sources:["https://github.com/Zaczero/osm-relatify/blob/main/web/static/img/icon.png"]},{path:"./assets/layers/transit_stops/bus_stop.svg",license:"CC0-1.0",authors:["Andy Allan","Michael Glanznig","Paul Norman","Paul Dicker"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/highway/bus_stop.svg"]},{path:"./assets/layers/tree_node/Onroerend_Erfgoed_logo_without_text.svg",license:"CC0-1.0",authors:["M!dgard"],sources:["https://commons.wikimedia.org/wiki/File:Onroerend_Erfgoed_logo_without_text.svg"]},{path:"./assets/layers/tree_node/broadleaved.svg",license:"CC-BY-SA-4.0",authors:["Midgard"],sources:["https://www.openstreetmap.org/user/M!dgard"]},{path:"./assets/layers/tree_node/leafless.svg",license:"CC-BY-SA-4.0",authors:["Midgard"],sources:["https://www.openstreetmap.org/user/M!dgard"]},{path:"./assets/layers/tree_node/needleleaved.svg",license:"CC-BY-SA-4.0",authors:["Midgard"],sources:["https://www.openstreetmap.org/user/M!dgard"]},{path:"./assets/layers/tree_node/unknown.svg",license:"CC-BY-SA-4.0",authors:["Midgard"],sources:["https://www.openstreetmap.org/user/M!dgard"]},{path:"./assets/layers/usersettings/translate_disabled.svg",license:"CC-BY-SA-3.0",authors:["MGalloway (WMF)"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_icon_language-ltr.svg"]},{path:"./assets/layers/usersettings/translate_mobile.svg",license:"CC-BY-SA-3.0",authors:["MGalloway (WMF)","@ tyskrat"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_icon_language-ltr.svg","https://www.onlinewebfonts.com/icon/1059"]},{path:"./assets/layers/vending_machine/condom.svg",license:"CC0-1.0",authors:[" 	Jesus Jezzini De Anda"],sources:["https://commons.wikimedia.org/wiki/File:Condom_-_The_Noun_Project.svg"]},{path:"./assets/layers/vending_machine/cow.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com/icons/cow?f=classic&s=solid"]},{path:"./assets/layers/vending_machine/egg.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com/icons/egg?f=classic&s=solid"]},{path:"./assets/layers/vending_machine/fruits.svg",license:"CC0-1.0",authors:["OpenClipart","frankes"],sources:["https://openclipart.org/detail/244990/fruits-coloured"]},{path:"./assets/layers/vending_machine/honey.svg",license:"CC-BY-4.0",authors:["Mushki Brichta"],sources:["https://commons.wikimedia.org/wiki/File:Honey_icon_black_01.svg"]},{path:"./assets/layers/vending_machine/mug-saucer.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com/icons/mug-saucer?f=regular&s=solid"]},{path:"./assets/layers/vending_machine/potato.svg",license:"CC-BY-3.0",authors:["Pavel Melnikov","The Noun Project"],sources:["https://thenounproject.com/icon/potatoes-663495/"]},{path:"./assets/layers/vending_machine/smoking.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com/icons/smoking?f=classic&s=solid"]},{path:"./assets/layers/vending_machine/strawberry.svg",license:"CC0-1.0",authors:["OpenClipart","baroquon"],sources:["https://openclipart.org/detail/23540/strawberry"]},{path:"./assets/layers/vending_machine/utensils.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com/icons/utensils?f=classic&s=solid"]},{path:"./assets/layers/vending_machine/vending_machine.svg",license:"CC-BY-4.0",authors:["Vectorportal.com"],sources:["https://vectorportal.com/vector/vending-machine/35308"]},{path:"./assets/layers/veterinary/vet.svg",license:"CC0-1.0",authors:["Niels Elgaard Larsen","Tim Hitchins"],sources:["https://openclipart.org/detail/216869/snake-pole-logo-for-healthse-no-background-white-snake"]},{path:"./assets/layers/viewpoint/viewpoint.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Viewpoint-16.svg"]},{path:"./assets/layers/visitor_information_centre/information.svg",license:"CC0-1.0",authors:["Bobarino"],sources:["https://commons.wikimedia.org/wiki/File:Information.svg"]},{path:"./assets/layers/walls_and_buildings/walls_and_buildings.png",license:"CC0-1.0",authors:["OSM"],sources:["https://wiki.openstreetmap.org/wiki/File:Barrier_fence_mapnik.png#file"]},{path:"./assets/layers/waste_disposal/waste_disposal.svg",license:"CC0-1.0",authors:["kocio-pl"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/waste_disposal.svg"]},{path:"./assets/svg/SocialImageForeground.svg",license:"CC-BY-SA-4.0",authors:["Pieter Vander Vennet"],sources:["https://mapcomplete.org"]},{path:"./assets/svg/SocialImageForeground.svg",license:"CC-BY-SA-4.0",authors:["Pieter Vander Vennet"],sources:["https://mapcomplete.org"]},{path:"./assets/svg/add.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/add.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/addSmall.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/addSmall.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/add_pin.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/back.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/back.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/blocked.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/brick_wall_raw.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/brick_wall_round.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/brick_wall_square.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/bug.svg",license:"MIT",authors:["Github"],sources:["https://commons.wikimedia.org/wiki/File:Octicons-bug.svg"," https://github.com/primer/octicons"]},{path:"./assets/svg/bug.svg",license:"MIT",authors:["Github"],sources:["https://commons.wikimedia.org/wiki/File:Octicons-bug.svg"," https://github.com/primer/octicons"]},{path:"./assets/svg/camera-plus.svg",license:"CC-BY-SA-3.0",authors:["Dave Gandy","Pieter Vander Vennet"],sources:["https://fontawesome.com/","https://commons.wikimedia.org/wiki/File:Camera_font_awesome.svg"]},{path:"./assets/svg/camera-plus.svg",license:"CC-BY-SA-3.0",authors:["Dave Gandy","Pieter Vander Vennet"],sources:["https://fontawesome.com/","https://commons.wikimedia.org/wiki/File:Camera_font_awesome.svg"]},{path:"./assets/svg/checkmark.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/checkmark.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/circle.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/circle.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/clock.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/clock.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/close.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/close.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/community.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/compass.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/compass.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/confirm.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/copyright.svg",license:"CC0-1.0",authors:["Hannah Declerck"],sources:[]},{path:"./assets/svg/cross.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/cross_bottom_right.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/cross_bottom_right.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/crosshair-locked.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/crosshair.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/crosshair.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/delete_icon.svg",license:"CC-BY-SA-4.0",authors:["Dave Gandy"],sources:["https://commons.wikimedia.org/wiki/File:Trash_font_awesome.svg\rT"]},{path:"./assets/svg/delete_icon.svg",license:"CC-BY-SA-4.0",authors:["Dave Gandy"],sources:["https://commons.wikimedia.org/wiki/File:Trash_font_awesome.svg\rT"]},{path:"./assets/svg/delete_not_allowed.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/direction_gradient.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/direction_gradient.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/direction_stroke.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/direction_stroke.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/download.svg",license:"CC0-1.0",authors:["Hannah Declerck"],sources:[]},{path:"./assets/svg/download.svg",license:"CC-BY-SA-4.0",authors:["Engr.eponce"],sources:["https://commons.wikimedia.org/wiki/File:Download-icon.svg"]},{path:"./assets/svg/duplicate.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/elevator.svg",license:"CC-BY-SA-4.0",authors:["Yveltal"],sources:["https://commons.wikimedia.org/wiki/File:HZM_elevator_icon.svg"]},{path:"./assets/svg/elevator_wheelchair.svg",license:"CC-BY-SA-4.0",authors:["Robin Julien"],sources:["https://www.ctsteward.com/"]},{path:"./assets/svg/envelope.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/envelope.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/eye.svg",license:"CC-BY-SA-3.0",authors:["Dave Gandy"],sources:["https://en.wikipedia.org/wiki/File:Eye_open_font_awesome.svg"]},{path:"./assets/svg/filter.svg",license:"CC0-1.0",authors:["Hannah Declerck"],sources:[]},{path:"./assets/svg/filter_disable.svg",license:"CC0-1.0",authors:["Hannah Declerck"],sources:[]},{path:"./assets/svg/floppy.svg",license:"CC0-1.0",authors:["The Tango Desktop Project"],sources:["https://commons.wikimedia.org/wiki/File:Media-floppy.svg"," http://tango.freedesktop.org/Tango_Desktop_Project"]},{path:"./assets/svg/floppy.svg",license:"CC0-1.0",authors:["The Tango Desktop Project"],sources:["https://commons.wikimedia.org/wiki/File:Media-floppy.svg","http://tango.freedesktop.org/Tango_Desktop_Project"]},{path:"./assets/svg/floppy.svg",license:"CC0-1.0",authors:["The Tango! Desktop Project"],sources:["https://commons.wikimedia.org/wiki/File:Media-floppy.svg"]},{path:"./assets/svg/gear.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/gear.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/gender_bi.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/gender_female.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/gender_inter.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/gender_male.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/gender_queer.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/gender_trans.svg",license:"CC0-1.0",authors:["Gender Icon Pack"],sources:["https://www.iconpacks.net/free-icon-pack/gender-107.html"]},{path:"./assets/svg/generic_map.svg",license:"CC0-1.0",authors:["Svg Repo"],sources:["https://www.svgrepo.com/svg/22182/map"]},{path:"./assets/svg/gps_arrow.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/hand.svg",license:"CC0-1.0",authors:["Anomie"],sources:["https://commons.wikimedia.org/wiki/File:Right-pointing_hand_in_green_octagon.svg"]},{path:"./assets/svg/help.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/help.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/home.svg",license:"CC-BY-SA-3.0",authors:["Timothy Miller"],sources:["https://commons.wikimedia.org/wiki/File:Home-icon.svg"]},{path:"./assets/svg/home.svg",license:"CC-BY-SA-3.0",authors:["Timothy Miller"],sources:["https://commons.wikimedia.org/wiki/File:Home-icon.svg"]},{path:"./assets/svg/invalid.svg",license:"CC-BY-4.0",authors:["Twemoji"],sources:["https://github.com/twitter/twemoji"]},{path:"./assets/svg/josm_logo.svg",license:"CC0-1.0",authors:["JOSM Team"],sources:["https://wiki.openstreetmap.org/wiki/File:JOSM_Logotype_2019.svg"," https://josm.openstreetmap.de/"]},{path:"./assets/svg/josm_logo.svg",license:"CC0-1.0",authors:["JOSM Team"],sources:["https://wiki.openstreetmap.org/wiki/File:JOSM_Logotype_2019.svg"," https://josm.openstreetmap.de/"]},{path:"./assets/svg/layers.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/layers.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/length-crosshair.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/liberapay.svg",license:"LOGO",authors:["LiberaPay"],sources:["https://liberapay.com/"]},{path:"./assets/svg/loading.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/location-refused.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/location.svg",license:"CC0-1.0",authors:["Hannah Declerck"],sources:[]},{path:"./assets/svg/location_empty.svg",license:"CC0-1.0",authors:["Pol Labaut"],sources:[]},{path:"./assets/svg/location_locked.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/location_unlocked.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/login.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/logo.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/logo.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/logout.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/logout.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/mangrove_logo.svg",license:"LOGO",authors:["Mangrove.reviews"],sources:["https://mangrove.reviews/"]},{path:"./assets/svg/mapcomplete_logo.svg",license:"LOGO AND CC-BY-SA-4.0",authors:["Pieter Vander Vennet"," OSM"],sources:["https://mapcomplete.org"]},{path:"./assets/svg/mapcomplete_logo.svg",license:"LOGO AND CC-BY-SA-4.0",authors:["Pieter Vander Vennet"," OSM"],sources:["https://mapcomplete.org"]},{path:"./assets/svg/mapillary.svg",license:"LOGO",authors:["Mapillary"],sources:["https://mapillary.com/"]},{path:"./assets/svg/mapillary.svg",license:"LOGO",authors:["Mapillary"],sources:["https://mapillary.com/"]},{path:"./assets/svg/mapillary_black.svg",license:"LOGO",authors:["Mapillary"],sources:["https://www.mapillary.com/"]},{path:"./assets/svg/mapillary_black.svg",license:"LOGO",authors:["Mapillary"],sources:["https://www.mapillary.com/"]},{path:"./assets/svg/mastodon.svg",license:"LOGO AND AGPL-3.0-or-later",authors:["Mastodon"],sources:["https://commons.wikimedia.org/wiki/File:Mastodon_Logotype_(Simple).svg"]},{path:"./assets/svg/min.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/min.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/move-arrows.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/move.svg",license:"CC-BY-SA-3.0",authors:["MGalloway (WMF)"],sources:["https://commons.wikimedia.org/wiki/File:Move_icon.svg"]},{path:"./assets/svg/move_confirm.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/move_not_allowed.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/no_checkmark.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/no_checkmark.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/none.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/not_found.svg",license:"CC-BY-4.0",authors:["Twemoji"],sources:["https://github.com/twitter/twemoji"]},{path:"./assets/svg/note.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/osm-logo-us.svg",license:"LOGO",authors:["OpenStreetMap U.S. Chapter"],sources:["https://www.openstreetmap.us/"]},{path:"./assets/svg/osm-logo-us.svg",license:"LOGO",authors:["OpenStreetMap U.S. Chapter"],sources:["https://www.openstreetmap.us/"]},{path:"./assets/svg/osm-logo.svg",license:"LOGO",authors:[],sources:["https://www.OpenStreetMap.org"]},{path:"./assets/svg/osm-logo.svg",license:"LOGO",authors:[],sources:["https://www.OpenStreetMap.org"]},{path:"./assets/svg/party.svg",license:"CC-BY-4.0",authors:["Twemoji"],sources:["https://github.com/twitter/twemoji"]},{path:"./assets/svg/pencil.svg",license:"MIT",authors:["GitHub Octicons"],sources:["https://github.com/primer/octicons"," https://commons.wikimedia.org/wiki/File:Octicons-pencil.svg"]},{path:"./assets/svg/pencil.svg",license:"MIT",authors:["GitHub Octicons"],sources:["https://github.com/primer/octicons"," https://commons.wikimedia.org/wiki/File:Octicons-pencil.svg"]},{path:"./assets/svg/person.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/pin.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/pin.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/plantnet_logo.svg",license:"LOGO",authors:["https://plantnet.org"],sources:["https://plantnet.org"]},{path:"./assets/svg/plus.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/plus.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/pop-out.svg",license:"CC-BY-3.0",authors:["@fatih"],sources:["https://www.onlinewebfonts.com/icon/2151"]},{path:"./assets/svg/pop-out.svg",license:"CC-BY-3.0",authors:["@fatih"],sources:["https://www.onlinewebfonts.com/icon/2151"]},{path:"./assets/svg/reload.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/reload.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/relocation.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/resolved.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/ring.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/ring.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/robot.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://commons.wikimedia.org/wiki/File:Font_Awesome_5_solid_robot.svg"]},{path:"./assets/svg/satellite.svg",license:"CC0-1.0",authors:["SVG Repo"],sources:["https://www.svgrepo.com/svg/80960/satellite"]},{path:"./assets/svg/scissors.svg",license:"CC-BY-3.0",authors:["The noun project - Icons8"],sources:["https://commons.wikimedia.org/wiki/File:Scissors_-_The_Noun_Project.svg"]},{path:"./assets/svg/search.svg",license:"MIT",authors:["OOjs UI Team and other contributors"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_indicator_search-rtl.svg","https://phabricator.wikimedia.org/diffusion/GOJU/browse/master/AUTHORS.txt"]},{path:"./assets/svg/search.svg",license:"MIT",authors:["OOjs UI Team and other contributors"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_indicator_search-rtl.svg","https://phabricator.wikimedia.org/diffusion/GOJU/browse/master/AUTHORS.txt"]},{path:"./assets/svg/search_disable.svg",license:"MIT",authors:["OOjs UI Team and other contributors","Pieter Vander Vennet"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_indicator_search-rtl.svg","https://phabricator.wikimedia.org/diffusion/GOJU/browse/master/AUTHORS.txt"]},{path:"./assets/svg/share.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/share.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/speech_bubble.svg",license:"CC-BY-4.0",authors:["Twemoji"],sources:["https://github.com/twitter/twemoji"]},{path:"./assets/svg/speech_bubble_black_outline.svg",license:"CC-BY-4.0",authors:["Twemoji"],sources:["https://github.com/twitter/twemoji"]},{path:"./assets/svg/square.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/square.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star_half.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star_half.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star_outline.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/star_outline.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/statistics.svg",license:"CC-BY-3.0",authors:["@felpgrc"],sources:["https://www.onlinewebfonts.com/icon/197818"]},{path:"./assets/svg/statistics.svg",license:"CC-BY-3.0",authors:["@felpgrc"],sources:["https://www.onlinewebfonts.com/icon/197818"]},{path:"./assets/svg/teardrop.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/teardrop_with_hole_green.svg",license:"CC-BY-NC-4.0",authors:[],sources:["https://pngimg.com/image/46283"]},{path:"./assets/svg/translate.svg",license:"CC-BY-SA-3.0",authors:["MGalloway (WMF)"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_icon_language-ltr.svg"]},{path:"./assets/svg/translate.svg",license:"CC-BY-SA-3.0",authors:["MGalloway (WMF)"],sources:["https://commons.wikimedia.org/wiki/File:OOjs_UI_icon_language-ltr.svg"]},{path:"./assets/svg/triangle.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/svg/up.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/up.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/svg/upload.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/svg/wikidata.svg",license:"LOGO",authors:["Wikidata"],sources:["https://www.wikidata.org"]},{path:"./assets/svg/wikidata.svg",license:"LOGO",authors:["Wikidata"],sources:["https://www.wikidata.org"]},{path:"./assets/svg/wikimedia-commons-white.svg",license:"LOGO",authors:["Wikimedia"],sources:["https://commons.wikimedia.org"]},{path:"./assets/svg/wikimedia-commons-white.svg",license:"LOGO",authors:["Wikimedia"],sources:["https://commons.wikimedia.org"]},{path:"./assets/svg/wikipedia.svg",license:"LOGO",authors:["Wikipedia"],sources:["https://www.wikipedia.org/"]},{path:"./assets/svg/wikipedia.svg",license:"LOGO",authors:["Wikipedia"],sources:["https://www.wikipedia.org/"]},{path:"./assets/themes/advertising/AdvertisingColumn_001.jpg",license:"CC-BY-SA-4.0",authors:["Segnargs"],sources:["https://wiki.openstreetmap.org/wiki/File:AdvertisingColumn_001.jpg"]},{path:"./assets/themes/advertising/AdvertisingColumn_003.jpg",license:"CC-BY-SA-4.0",authors:["Segnargsed"],sources:["https://wiki.openstreetmap.org/wiki/File:AdvertisingColumn_003.jpg#file"]},{path:"./assets/themes/advertising/AdvertisingTotem_003.jpg",license:"CC-BY-SA-4.0",authors:["Segnargsed"],sources:["https://commons.wikimedia.org/wiki/File:AdvertisingTotem_003.jpg"]},{path:"./assets/themes/advertising/AdvertisingTotem_004.jpg",license:"CC-BY-SA-4.0",authors:["Segnargsed"],sources:["https://commons.wikimedia.org/wiki/File:AdvertisingTotem_004.jpg"]},{path:"./assets/themes/advertising/Advertising_flag.jpg",license:"CC-BY-SA-2.0",authors:["Sandy B"],sources:["https://commons.wikimedia.org/wiki/File:Advertising_flags_-_geograph.org.uk_-_2433864.jpg"]},{path:"./assets/themes/advertising/Aircraft_Sculpture.jpg",license:"CC-BY-SA-2.0",authors:["Rod Waddington"],sources:["https://wiki.openstreetmap.org/wiki/File:Aircraft_Sculpture-Advertisment-Restaurant_Jimma_Ethiopia.jpg"]},{path:"./assets/themes/advertising/BS.JPG",license:"CC-BY-SA-4.0",authors:["TeWeBs"],sources:["https://commons.wikimedia.org/wiki/File:BS_Schraubenschluessel.JPG"]},{path:"./assets/themes/advertising/Capitol_wall.jpg",license:"CC-BY-SA-4.0",authors:["Artaxerxes"],sources:["https://commons.wikimedia.org/wiki/File:Advertising_mural_on_wall_of_Capitol_Stationers_65_Main_Street_downtown_Montpelier_VT_August_2017.jpg"]},{path:"./assets/themes/advertising/City-Light-Poster.jpg",license:"CC-BY-SA-4.0",authors:["Bärwinkel, Klaus"],sources:["https://commons.wikimedia.org/wiki/File:City-Light-Poster_Mittelstra%C3%9Fe.jpg"]},{path:"./assets/themes/advertising/FGV_Founding.jpg",license:"CC-BY-SA-4.0",authors:["Paunofu"],sources:["https://imgur.com/epyuPXs"]},{path:"./assets/themes/advertising/JR_Central.jpg",license:"CC-BY-SA-4.0",authors:["ジェーアール東海一口株主"],sources:["https://commons.wikimedia.org/wiki/File:JR_Central_corporate_flag_by_Nagoya_Station.jpg"]},{path:"./assets/themes/advertising/KFC_Billboard.jpg",license:"CC-BY-4.0",authors:["Paunofu"],sources:["https://imgur.com/2xJaUXd"]},{path:"./assets/themes/advertising/LIDL_Billboard.jpg",license:"CC-BY-SA-4.0",authors:["Paul Williams"],sources:["https://archive.org/details/northfleet-2021-05-30/PXL_20210530_175057096.jpg"]},{path:"./assets/themes/advertising/Lidl_totem.jpg",license:"CC-BY-SA-4.0",authors:["Donald Trung"],sources:["https://commons.wikimedia.org/wiki/File:Lidl_informational_sign,_Hesel_(2019)_01.jpg"]},{path:"./assets/themes/advertising/Mug.jpg",license:"CC0-1.0",authors:["Carol M. Highsmith"],sources:["https://commons.wikimedia.org/wiki/File:The_Frostop_mug_advertising_sign_outside_%22The_Drive_In%22_restaurant_in_Taylors_Falls,_Minnesota.jpg"]},{path:"./assets/themes/advertising/Mupi_Alcoi.jpg",license:"CC-BY-4.0",authors:["Paunofu"],sources:["https://imgur.com/4Q3glWH"]},{path:"./assets/themes/advertising/Mupi_spain.jpg",license:"CC0-1.0",authors:["Jusotil_1943"],sources:["https://commons.wikimedia.org/wiki/File:Mupi_(42556631491).jpg"]},{path:"./assets/themes/advertising/Repsol_Billboard.jpg",license:"CC-BY-4.0",authors:["Paunofu"],sources:["https://imgur.com/MwvK0jc"]},{path:"./assets/themes/advertising/Screen_poster_box.jpg",license:"CC-BY-SA-4.0",authors:["T. Segonds"],sources:["https://commons.wikimedia.org/wiki/File:Screen_poster_box.jpg"]},{path:"./assets/themes/advertising/Small_Board.jpg",license:"CC-BY-SA-4.0",authors:["Segnargsed"],sources:["https://wiki.openstreetmap.org/wiki/File:AdvertisingBoard_001.jpg"]},{path:"./assets/themes/advertising/Subway_screen.jpg",license:"CC-BY-2.0",authors:["Metropolitan Transportation Authority of the State of New York"],sources:["https://commons.wikimedia.org/wiki/File:Subway_Station_Digital_Advertising_Screens_(13251000543).jpg"]},{path:"./assets/themes/advertising/TV_media.jpg",license:"CC-BY-3.0",authors:["Roger Carvell"],sources:["https://commons.wikimedia.org/wiki/File:TV_media_advertising_at_London_Victoria_station._-_panoramio.jpg"]},{path:"./assets/themes/advertising/Times square.jpg",license:"CC-BY-SA-4.0",authors:["chensiyuan"],sources:["https://commons.wikimedia.org/wiki/File:1_times_square_night_2013.jpg"]},{path:"./assets/themes/advertising/Waitrose_sign.jpg",license:"CC-BY-SA-2.0",authors:["Geographer"],sources:["https://www.geograph.org.uk/photo/4343364"]},{path:"./assets/themes/advertising/billboard.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Billboard_trunk.svg"]},{path:"./assets/themes/advertising/board.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Board.svg"]},{path:"./assets/themes/advertising/clarke_wall.jpg",license:"CC-BY-SA-2.0",authors:["Albert Bridge"],sources:["https://www.geograph.org.uk/photo/2478313"]},{path:"./assets/themes/advertising/column.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Column.svg"]},{path:"./assets/themes/advertising/farma_sign.jpg",license:"CC-BY-SA-4.0",authors:["paunofu"],sources:["https://imgur.com/bGF0kdd"]},{path:"./assets/themes/advertising/flag.svg",license:"CC-BY-SA-3.0",authors:["Barnes38","Ash Crow","Happy-melon","Aris Katsaris","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Column.svg","https://commons.wikimedia.org/wiki/File:Flag_icon_darkblue.svg"]},{path:"./assets/themes/advertising/icon.svg",license:"CC-BY-SA-4.0",authors:["Panier Avide"],sources:["https://commons.wikimedia.org/wiki/File:Advertising_icon.svg"]},{path:"./assets/themes/advertising/local_Board.jpg",license:"CC-BY-SA-4.0",authors:["Segnargsed"],sources:["https://wiki.openstreetmap.org/wiki/File:ReservedAdvertisingUnit_008.jpg"]},{path:"./assets/themes/advertising/newspaper_kiosk.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Newspaper_kiosk_3.svg"]},{path:"./assets/themes/advertising/poster_box.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Poster_box.svg"]},{path:"./assets/themes/advertising/poster_box_no_support.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Poster_box.svg"]},{path:"./assets/themes/advertising/screen alcoi.jpg",license:"CC-BY-4.0",authors:["paunofu"],sources:["https://imgur.com/HKsRycm"]},{path:"./assets/themes/advertising/screen.svg",license:"CC-BY-SA-4.0",authors:["Barnes38","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Poster_box.svg"]},{path:"./assets/themes/advertising/screen_no_support.svg",license:"CC-BY-SA-4.0",authors:["Barnes38","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Poster_box.svg"]},{path:"./assets/themes/advertising/sculpture.svg",license:"CC-BY-3.0",authors:["Nathaniel Smith","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Column.svg","https://commons.wikimedia.org/wiki/File:Sculpture_(NP100738).svg"]},{path:"./assets/themes/advertising/sign.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Totem.svg"]},{path:"./assets/themes/advertising/sign_EOI.jpg",license:"CC-BY-SA-4.0",authors:["paunofu"],sources:["https://imgur.com/8D0BKNq"]},{path:"./assets/themes/advertising/tarp.svg",license:"CC-BY-SA-3.0",authors:["Barnes38","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Billboard_trunk.svg"]},{path:"./assets/themes/advertising/tarp_feder.jpg",license:"CC-BY-SA-4.0",authors:["paunofu"],sources:["https://imgur.com/Gc3Tk41"]},{path:"./assets/themes/advertising/tarp_madrid.jpg",license:"CC-BY-2.0",authors:["Rogotan"],sources:["https://commons.wikimedia.org/wiki/File:Lona_(3741637137).jpg"]},{path:"./assets/themes/advertising/totem.svg",license:"CC-BY-SA-3.0",authors:["Barnes38"],sources:["https://wiki.openstreetmap.org/wiki/File:Totem.svg"]},{path:"./assets/themes/advertising/trivision.svg",license:"CC-BY-SA-3.0",authors:["pietervdvn","Louis Dawson (via the Noun Project)"],sources:["https://thenounproject.com/icon/rotating-arrow-184486/"]},{path:"./assets/themes/advertising/wall_painting.svg",license:"CC-BY-SA-3.0",authors:["Barnes38","Pietervdvn"],sources:["https://wiki.openstreetmap.org/wiki/File:Billboard_trunk.svg"]},{path:"./assets/themes/aed/aed.svg",license:"CC0-1.0",authors:["MaxxL"],sources:["https://commons.wikimedia.org/wiki/File:ISO_7010_E010.svg"]},{path:"./assets/themes/artwork/artwork.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Statue-14.svg"]},{path:"./assets/themes/atm/logo.svg",license:"CC0-1.0",authors:["Michael Glanznig","Andy Allan"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/atm.svg"]},{path:"./assets/themes/bag/logo.svg",license:"CC0-1.0",authors:["Wouter van der Wal"],sources:[]},{path:"./assets/themes/benches/bench_poi.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/v25.0-beta1/res/graphics/authors.txt","https://github.com/streetcomplete/StreetComplete/tree/v25.0-beta1/res/graphics/quest%20icons"]},{path:"./assets/themes/benches/bench_public_transport.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/v25.0-beta1/res/graphics/authors.txt","https://github.com/streetcomplete/StreetComplete/tree/v25.0-beta1/res/graphics/quest%20icons"]},{path:"./assets/themes/bicycle_rental/logo.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/bicycle_rental/rental.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/bicyclelib/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/blind_osm/Blindicon.svg",license:"CC0-1.0",authors:["Abu badali","AIGA"],sources:["https://commons.wikimedia.org/wiki/File:Blindicon.svg"]},{path:"./assets/themes/bookcases/bookcase.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Public_bookcase-14.svg"]},{path:"./assets/themes/buurtnatuur/ANB.jpg",license:"LOGO",authors:["Agentschap Natuur en Bos"],sources:["https://www.natuurenbos.be/"]},{path:"./assets/themes/buurtnatuur/Natuurpunt.jpg",license:"LOGO",authors:["Natuurpunt"],sources:["https://www.natuurpunt.be/"]},{path:"./assets/themes/buurtnatuur/forest.svg",license:"CC-BY-3.0",authors:["@ Federico Sibella"],sources:["https://www.onlinewebfonts.com/icon/498112"]},{path:"./assets/themes/buurtnatuur/groen_logo.svg",license:"LOGO",authors:["Groen"],sources:["https://www.groen.be/"]},{path:"./assets/themes/buurtnatuur/logo.svg",license:"LOGO",authors:["Groen"],sources:["https://www.groen.be/"]},{path:"./assets/themes/buurtnatuur/nature_reserve.svg",license:"CC-BY-3.0",authors:["@ Эдуард Черных"],sources:["https://www.onlinewebfonts.com/icon/389579"]},{path:"./assets/themes/buurtnatuur/park.svg",license:"CC-BY-3.0",authors:["@sterankofrank"],sources:["http://www.onlinewebfonts.com/icon/425974"]},{path:"./assets/themes/buurtnatuur/social_image.jpg",license:"ALL-RIGHTS-RESERVED",authors:["Groen"],sources:[]},{path:"./assets/themes/campersite/caravan.svg",license:"CC0-1.0",authors:["OsmAnd"],sources:["https://github.com/osmandapp/Osmand/blob/master/LICENSE","https://github.com/osmandapp/OsmAnd-resources/blob/36d8b90a8933e0a28f9ee19f28abbd520f9da3c7/icons/svg/accommodation/caravan.svg"]},{path:"./assets/themes/campersite/caravan_green.svg",license:"CC0-1.0",authors:["OsmAnd"],sources:["https://github.com/osmandapp/Osmand/blob/master/LICENSE","https://github.com/osmandapp/OsmAnd-resources/blob/36d8b90a8933e0a28f9ee19f28abbd520f9da3c7/icons/svg/accommodation/caravan.svg"]},{path:"./assets/themes/campersite/sanitary_dump_station.svg",license:"CC0-1.0",authors:["OsmAnd"],sources:["https://github.com/osmandapp/Osmand/blob/master/LICENSE","https://github.com/osmandapp/OsmAnd-resources/blob/16892d8b2fc00dd422abfb2fef967d5ccd05eeac/icons/svg/poi/sanitary_dump_station.svg"]},{path:"./assets/themes/campersite/social_image.jpg",license:"CC-BY-SA-3.0",authors:["ES01"],sources:["https://commons.wikimedia.org/wiki/File:Bar%C3%9Fel_Wohnmobilstellplatz.jpg"]},{path:"./assets/themes/charging_stations/bicycle.svg",license:"CC0-1.0",authors:["Stijn Wens"],sources:["https://wens.be/free-antwerpenize-bicycle-font"," https://antwerpenize.be/post/634396003556081664/antwerpenize-lettertype"]},{path:"./assets/themes/charging_stations/car.svg",license:"CC0-1.0",authors:["Simon Child","The Noun Project"],sources:["https://thenounproject.com/icon/electric-car-55511/"]},{path:"./assets/themes/charging_stations/logo.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/themes/charging_stations/plug.svg",license:"TRIVIAL",authors:[],sources:[]},{path:"./assets/themes/climbing/carabiner.svg",license:"CC-BY-SA-4.0",authors:["Matthew Dera"],sources:["https://thenounproject.com/term/carabiner/30076/"]},{path:"./assets/themes/climbing/climbing_gym.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/climbing_icon.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/climbing_no_rope.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/climbing_rope.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/climbing_route.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/climbing_unknown.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/club.svg",license:"CC0-1.0",authors:["Polarbear w","Christian Neumann"],sources:["https://wiki.openstreetmap.org/wiki/File:Climbing_icon_no_rope.svg","https://utopicode.de/","https://github.com/chrneumann/MapComplete"]},{path:"./assets/themes/climbing/height.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_highways/fietssnelwegen-logo.svg",license:"LOGO",authors:["De Vlaamse Provincies"],sources:["https://fietssnelwegen.be/"]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double_length.png",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double_length.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double_overlap.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double_template.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_double_width.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/cycle_infra/Cycle_barrier_single.png",license:"CC-BY-SA-4.0",authors:["Supaplex030"],sources:["https://wiki.openstreetmap.org/wiki/File:Cycle_barrier_single.png"]},{path:"./assets/themes/cycle_infra/Cycle_barrier_squeeze.png",license:"CC-BY-SA-4.0",authors:["Supaplex030"],sources:["https://wiki.openstreetmap.org/wiki/File:Cycle_barrier_squeeze.png"]},{path:"./assets/themes/cycle_infra/Cycle_barrier_triple.png",license:"CC-BY-SA-4.0",authors:["Supaplex030"],sources:["https://wiki.openstreetmap.org/wiki/File:Cycle_barrier_triple.png"]},{path:"./assets/themes/cycle_infra/bicycleway.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest%20icons/bicycleway.svg"]},{path:"./assets/themes/cycle_infra/cycle-infra.svg",license:"CC-BY-4.0",authors:["Dávid Gladiš","Hannah Declerck"],sources:["https://thenounproject.com/davidgladis/collection/bicycles/?i=808040"]},{path:"./assets/themes/cycle_infra/street.svg",license:"CC-BY-SA-4.0",authors:["Tobias Zwick"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest%20icons/street.svg"]},{path:"./assets/themes/cyclenodes/logo.svg",license:"GPL-3.0-only",authors:["sebkur"],sources:["https://github.com/mobanisto/MapComplete/commit/1aeb1fdb5b09908d67907f3c816152bfebfdcc79"]},{path:"./assets/themes/cyclenodes/route_marker.svg",license:"CC0-1.0",authors:["Robin van der Linde","MarianSigler"],sources:["https://commons.wikimedia.org/wiki/File:Sinnbild_Radfahrer,_StVO_1992.svg"]},{path:"./assets/themes/cyclestreets/F111.svg",license:"CC0-1.0",authors:["The RedBurn"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_F111_nl.svg"]},{path:"./assets/themes/cyclestreets/F113.svg",license:"CC0-1.0",authors:["The RedBurn"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_F113_nl.svg"]},{path:"./assets/themes/cyclestreets/Finland_road_sign_E28.svg",license:"CC0-1.0",authors:["Suomen tasavalta"],sources:["https://commons.wikimedia.org/wiki/File:Finland_road_sign_E28.svg"]},{path:"./assets/themes/cyclestreets/Finland_road_sign_E29.svg",license:"CC0-1.0",authors:["Suomen tasavalta"],sources:["https://commons.wikimedia.org/wiki/File:Finland_road_sign_E29.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://commons.wikimedia.org/wiki/File:Zeichen_244_-_Beginn_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244_1020-30.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://commons.wikimedia.org/wiki/File:Zusatzzeichen_1020-30_-_Anlieger_frei_(600x330),_StVO_1992.svg","https://commons.wikimedia.org/wiki/File:Zeichen_244_-_Beginn_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244_1022-12.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://commons.wikimedia.org/wiki/File:Zusatzzeichen_1022-12_-_Krafträder_auch_mit_Beiwagen,_Kleinkrafträder_und_Mofas_frei_(600x450),_StVO_1992.svg","https://commons.wikimedia.org/wiki/File:Zeichen_244_-_Beginn_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244_1024-10.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://commons.wikimedia.org/wiki/File:Zusatzzeichen_1024-10_-_Personenkraftwagen_frei,_StVO_1992.svg","https://commons.wikimedia.org/wiki/File:Zeichen_244_-_Beginn_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244_KFZ_frei.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://wiki.openstreetmap.org/wiki/File:Zusatzzeichen_KFZ_frei.svg","https://commons.wikimedia.org/wiki/File:Zeichen_244_-_Beginn_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/Zeichen_244a.svg",license:"CC0-1.0",authors:["Bundesministerium für Verkehr, Bau- und Wohnungswesen"],sources:["https://commons.wikimedia.org/wiki/File:Zeichen_244a_-_Ende_der_Fahrradstraße,_StVO_1997.svg"]},{path:"./assets/themes/cyclestreets/logo.svg",license:"CC0-1.0",authors:["The RedBurn"],sources:["https://commons.wikimedia.org/wiki/File:Belgian_road_sign_F111_nl.svg"]},{path:"./assets/themes/cyclofix/SocialImage.jpeg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/themes/cyclofix/fietsambassade_gent_logo.svg",license:"LOGO",authors:["De Fietsambassade"],sources:["https://fietsambassade.gent.be"]},{path:"./assets/themes/cyclofix/fietsambassade_gent_logo_small.svg",license:"LOGO",authors:["De Fietsambassade"],sources:["https://fietsambassade.gent.be"]},{path:"./assets/themes/cyclofix/key.svg",license:"CC-BY-SA-4.0",authors:["Stijn Wens"],sources:["https://wens.be/free-antwerpenize-bicycle-font"]},{path:"./assets/themes/cyclofix/logo.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/themes/drinking_water/logo.svg",license:"CC-BY-SA-4.0",authors:["Pieter Fiers","Thibault Declercq","Pierre Barban","Joost Schouppe","Pieter Vander Vennet"],sources:["https://osoc.be/editions/2020/cyclofix"]},{path:"./assets/themes/elongated_coin/penny.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/themes/facadegardens/bloei.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/bodembedekker.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/eetbaar.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/gevelton.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/geveltuin.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/halfzon.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/klimplant.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/schaduw.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/struik.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/facadegardens/zon.svg",license:"CC0-1.0",authors:["Klimaan VZW"],sources:["https://klimaan.be/"]},{path:"./assets/themes/fritures/fries.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/french-fries_1144288"]},{path:"./assets/themes/fritures/logo.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/french-fries_1144288"]},{path:"./assets/themes/ghostbikes/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/grb/housenumber_blank.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/grb/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/grb/warning.svg",license:"CC0-1.0",authors:["penubag"],sources:["https://commons.wikimedia.org/wiki/File:Ambox_warning_pn.svg"]},{path:"./assets/themes/hackerspaces/glider.svg",license:"CC0-1.0",authors:["Bryan.burgers"],sources:["https://upload.wikimedia.org/wikipedia/commons/0/02/Game_of_life_glider.svg"]},{path:"./assets/themes/hackerspaces/led.png",license:"CC0-1.0",authors:["Tommaso.sansone91"],sources:["https://upload.wikimedia.org/wikipedia/commons/2/2a/Led_light_bulb_-_led_lamp_2.png"]},{path:"./assets/themes/hailhydrant/Twemoji12_1f692.svg",license:"CC-BY-4.0",authors:["Twemoji Project"],sources:["https://upload.wikimedia.org/wikipedia/commons/1/19/Twemoji12_1f692.svg","https://twemoji.twitter.com/"]},{path:"./assets/themes/hailhydrant/Twemoji12_1f9ef.svg",license:"CC-BY-4.0",authors:["Twemoji Project"],sources:["https://upload.wikimedia.org/wikipedia/commons/9/9b/Twemoji12_1f9ef.svg","https://twemoji.twitter.com/"]},{path:"./assets/themes/hailhydrant/Twemoji12_26d1.svg",license:"CC-BY-4.0",authors:["Twemoji Project"],sources:["https://upload.wikimedia.org/wikipedia/commons/e/eb/Twemoji12_26d1.svg","https://twemoji.twitter.com/"]},{path:"./assets/themes/hailhydrant/Twemoji_1f691.svg",license:"CC-BY-4.0",authors:["Twemoji Project"],sources:["https://upload.wikimedia.org/wikipedia/commons/9/95/Twemoji_1f691.svg","https://twemoji.twitter.com/"]},{path:"./assets/themes/hailhydrant/hydrant.svg",license:"GPL-2.0-or-later",authors:["http://jaanos.deviantart.com/"],sources:["https://commons.wikimedia.org/wiki/File:Hydrant.svg"]},{path:"./assets/themes/hailhydrant/hydrant.svg",license:"CC-BY-SA-4.0",authors:["GOwin"],sources:["https://raw.githubusercontent.com/mapamore/MapComplete/master/assets/themes/hailhydrant/hydrant.svg"]},{path:"./assets/themes/hailhydrant/hydrant_pillar.svg",license:"CC-BY-SA-4.0",authors:["M!dgard"],sources:["https://www.openstreetmap.org/user/M!dgard","https://mapcomplete.braindeaddev.com/assets/layers/fire_hydrants/hydrant_pillar.svg"]},{path:"./assets/themes/hailhydrant/hydrant_underground.svg",license:"CC-BY-SA-4.0",authors:["M!dgard"],sources:["https://www.openstreetmap.org/user/M!dgard","https://mapcomplete.braindeaddev.com/assets/layers/fire_hydrants/hydrant_underground.svg"]},{path:"./assets/themes/hailhydrant/hydrant_unknown.svg",license:"CC-BY-SA-4.0",authors:["M!dgard"],sources:["https://www.openstreetmap.org/user/M!dgard","https://mapcomplete.braindeaddev.com/assets/layers/fire_hydrants/hydrant_unknown.svg"]},{path:"./assets/themes/hailhydrant/logo.svg",license:"CC-BY-SA-4.0",authors:["Erwin Olario"],sources:["https://wiki.openstreetmap.org/wiki/File:Hailhydrant-logo.svg"]},{path:"./assets/themes/maps/logo.svg",license:"CC0-1.0",authors:["CC0"],sources:["https://wiki.openstreetmap.org/wiki/File:Board-14.svg"]},{path:"./assets/themes/maxspeed/maxspeed_10 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_100 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_110 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_120 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_130 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_140 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_20 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_30 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_40 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_50 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_60 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_70 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_80 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_90 mph.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/maxspeed/maxspeed_logo.svg",license:"CC-BY-4.0",authors:["yopaseopor"],sources:["https://raw.githubusercontent.com/yopaseopor/beta_preset_josm/master/ES/traffic_signs/ES/ES_R301-30 mph.svg"]},{path:"./assets/themes/nature/logo.svg",license:"CC-BY-4.0",authors:["Font Awesome"],sources:["https://fontawesome.com"]},{path:"./assets/themes/notes/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/onwheels/bicycle_pump.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/cafe.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/cone.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/crest.svg",license:"CC0-1.0",authors:["Free Wheelies"],sources:[]},{path:"./assets/themes/onwheels/doctor.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/elevator.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/entrance.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/government.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/hospital.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/hotel.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/parking.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/pharmacy.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/repair.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/restaurant.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/shop.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/onwheels/toilet.svg",license:"CC-BY-SA-4.0",authors:["CT Steward"],sources:["https://www.ctsteward.com/"]},{path:"./assets/themes/openwindpowermap/logo.svg",license:"CC0-1.0",authors:["Iconathon"],sources:["https://commons.wikimedia.org/wiki/File:Wind_Turbine_(2076)_-_The_Noun_Project.svg"]},{path:"./assets/themes/openwindpowermap/wind_turbine.svg",license:"CC0-1.0",authors:["Iconathon"],sources:["https://commons.wikimedia.org/wiki/File:Wind_Turbine_(2076)_-_The_Noun_Project.svg"]},{path:"./assets/themes/osm_community_index/osm.svg",license:"ISC",authors:["osmlab"],sources:["https://github.com/osmlab/osm-community-index/blob/main/dist/img/osm.svg"]},{path:"./assets/themes/parkings/parkings.svg",license:"CC-BY-4.0",authors:["Freepik"],sources:["https://www.flaticon.com/free-icon/placeholder_608690?term=parking&page=1&position=16&page=1&position=16&related_id=608690&origin=search"]},{path:"./assets/themes/pets/dog-food.svg",license:"CC0-1.0",authors:["Public Domain Symbols","Jean Victor Balin ","Niels Elgaard Larsen"],sources:["https://openclipart.org/detail/260714/dogpark15","https://openclipart.org/detail/25719/aiga-restaurant"]},{path:"./assets/themes/pets/dogshop.svg",license:"CC0-1.0",authors:["Public Domain Symbols","Niels Elgaard Larsen"],sources:["https://openclipart.org/detail/260714/dogpark15"]},{path:"./assets/themes/pets/petshop.svg",license:"CC0-1.0",authors:["Niels Elgaard Larsen","Public Domain Symbols"],sources:["https://openclipart.org/detail/260857/veterinary15"]},{path:"./assets/themes/playgrounds/playground.svg",license:"CC-BY-3.0",authors:["Scott de Jonge"],sources:["https://commons.wikimedia.org/wiki/File:Map_icons_by_Scott_de_Jonge_-_playground.svg"," https://github.com/scottdejonge/map-icons/blob/b74a0e00afdd6b734883671da7a9e5f30497353e/src/icons/playground.svg"]},{path:"./assets/themes/postal_codes/townhall.svg",license:"CC0-1.0",authors:["Nebulon42"],sources:["https://wiki.openstreetmap.org/wiki/File:Town-hall-16.svg"]},{path:"./assets/themes/rainbow_crossings/crossing.svg",license:"CC0-1.0",authors:["bxl-forever"],sources:[]},{path:"./assets/themes/rainbow_crossings/logo.svg",license:"CC0-1.0",authors:["bxl-forever"],sources:[]},{path:"./assets/themes/shops/shop.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Convenience-14.svg"]},{path:"./assets/themes/speelplekken/Departement_Omgeving_Vlaanderen.png",license:"LOGO",authors:["Departement Omgeving, Vlaamse Overheid"],sources:["https://omgeving.vlaanderen.be/"]},{path:"./assets/themes/speelplekken/logo.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/themes/speelplekken/provincie_antwerpen.jpg",license:"LOGO",authors:["Provincie Antwerpen"],sources:["https://www.antwerpen.be/"]},{path:"./assets/themes/speelplekken/social_image.jpg",license:"LOGO",authors:["Createlli"],sources:["https://createlli.com/"]},{path:"./assets/themes/speelplekken/speelbos.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/themes/speelplekken/speeltuin.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/themes/speelplekken/speelweide.svg",license:"CC-BY-SA-4.0",authors:["Gitte Loos (Createlli) in opdracht van Provincie Antwerpen "],sources:["https://createlli.com/","https://www.provincieantwerpen.be/"]},{path:"./assets/themes/speelplekken/youtube.svg",license:"LOGO",authors:["Youtube"],sources:["https://www.youtube.com/"]},{path:"./assets/themes/sports/sport.svg",license:"CC-BY-4.0",authors:["Tobias Zwick","modified from EmojiOne 2: U+26BD"],sources:["https://github.com/streetcomplete/StreetComplete/blob/master/res/graphics/quest/sport.svg"]},{path:"./assets/themes/stations/bench.svg",license:"CC0-1.0",authors:["Matthijs Melissen"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/bench.svg"]},{path:"./assets/themes/stations/bicycle_parking.svg",license:"CC0-1.0",authors:["Matthijs Melissen"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/bicycle_parking.svg"]},{path:"./assets/themes/stations/departures_board.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/themes/stations/drinking_water.svg",license:"CC0-1.0",authors:["Andy Allan","Michael Glanznig"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/drinking_water.svg"]},{path:"./assets/themes/stations/public_transport_tickets.svg",license:"CC0-1.0",authors:["Jérémy Ragusa"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/public_transport_tickets.svg"]},{path:"./assets/themes/stations/rail-light.svg",license:"CC0-1.0",authors:["Maki"],sources:["https://labs.mapbox.com/maki-icons/"]},{path:"./assets/themes/stations/rental_bicycle.svg",license:"CC0-1.0",authors:["Michael Glanznig","Andy Allan"],sources:["https://github.com/gravitystorm/openstreetmap-carto/blob/master/symbols/amenity/rental_bicycle.svg"]},{path:"./assets/themes/surveillance/cam_left.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/surveillance/cam_right.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/surveillance/dome.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/surveillance/logo.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/bench.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/bicycle_rental.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/charging_station_ebike.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/cycle_pump.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/cycle_repair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/cycle_repair_and_pump.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/observation_platform.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/observation_tower.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/picnic_table.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/playground.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/toilets.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/toilets_wheelchair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/NEGATIEF/toilets_wheelchair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/FlandersArtSans-Light.woff",license:"ALL-RIGHTS-RESERVED",authors:["Jo De Baerdemaeker "],sources:["https://www.studiotype.be/fonts/flandersart"]},{path:"./assets/themes/toerisme_vlaanderen/FlandersArtSerif-Medium.woff",license:"ALL-RIGHTS-RESERVED",authors:["Jo De Baerdemaeker "],sources:["https://www.studiotype.be/fonts/flandersart"]},{path:"./assets/themes/toerisme_vlaanderen/avatar.png",license:"LOGO",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/"]},{path:"./assets/themes/toerisme_vlaanderen/bench.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/bicycle_rental.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/charging_station_ebike.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/cycle_pump.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/cycle_repair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/cycle_repair_and_pump.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/logo.png",license:"LOGO",authors:["Toerisme Vlaanderen"],sources:["https://www.toerismevlaanderen.be/"]},{path:"./assets/themes/toerisme_vlaanderen/logo.svg",license:"CC-BY-NC-4.0",authors:[],sources:["https://pngimg.com/image/46283"]},{path:"./assets/themes/toerisme_vlaanderen/observation_platform.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/observation_tower.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/picnic_table.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt1.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt2.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt3.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt4.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt5.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/pin je punt6.jpg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderenn"]},{path:"./assets/themes/toerisme_vlaanderen/playground.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/toilets.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/toilets_wheelchair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toerisme_vlaanderen/toilets_wheelchair.svg",license:"CC0-1.0",authors:["Toerisme Vlaanderen"],sources:["https://toerismevlaanderen.be/pinjepunt","https://mapcomplete.org/toerisme_vlaanderen"]},{path:"./assets/themes/toilets/toilets.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Toilets-16.svg"]},{path:"./assets/themes/trees/logo.svg",license:"CC-BY-SA-4.0",authors:["Midgard"],sources:["https://www.openstreetmap.org/user/M!dgard"]},{path:"./assets/themes/uk_addresses/housenumber_add.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/uk_addresses/housenumber_ok.svg",license:"CC0-1.0",authors:["Tobias Zwick (westnordost)"],sources:["https://github.com/streetcomplete/StreetComplete/tree/master/res/graphics","https://f-droid.org/packages/de.westnordost.streetcomplete/"]},{path:"./assets/themes/uk_addresses/housenumber_text.svg",license:"CC0-1.0",authors:["Tobias Zwick (westnordost)"],sources:["https://github.com/streetcomplete/StreetComplete/tree/master/res/graphics","https://f-droid.org/packages/de.westnordost.streetcomplete/"]},{path:"./assets/themes/uk_addresses/housenumber_unknown.svg",license:"CC0-1.0",authors:["Tobias Zwick (westnordost)"],sources:["https://github.com/streetcomplete/StreetComplete/tree/master/res/graphics","https://f-droid.org/packages/de.westnordost.streetcomplete/"]},{path:"./assets/themes/uk_addresses/housenumber_unknown_small.svg",license:"CC0-1.0",authors:["Pieter Vander Vennet"],sources:[]},{path:"./assets/themes/uk_addresses/stamp-outline.png",license:"CC0-1.0",authors:["Rob Nickerson"],sources:[]},{path:"./assets/themes/walkingnodes/logo.svg",license:"GPL-3.0-only",authors:["sebkur"],sources:["https://github.com/mobanisto/MapComplete/commit/1aeb1fdb5b09908d67907f3c816152bfebfdcc79"]},{path:"./assets/themes/walkingnodes/route_marker.svg",license:"CC0-1.0",authors:["Robin van der Linde"],sources:[]},{path:"./assets/themes/waste_basket/waste_basket.svg",license:"CC0-1.0",authors:[],sources:["https://wiki.openstreetmap.org/wiki/File:Waste-basket-12.svg"]},{path:"./assets/themes/width/icon.svg",license:"TRIVIAL",authors:["Pieter Vander Vennet"],sources:[]}],xi=class extends Je{constructor(){super("icon","Makes sure that a valid .svg-path is added")}reformat(e,t){return e.trim()}getFeedback(e,t,i){if(e=this.reformat(e),!e.startsWith("http")&&!xi.allLicenses.has(e)){const s=i?[]:P.sortedByLevenshteinDistance(e.substring(e.lastIndexOf("/")),xi.allLicensesArr,o=>o.substring(o.lastIndexOf("/"))).slice(0,5);return new en([`Unkown builtin icon ${e}, perhaps you meant one of: <ul>`,...s.map(o=>`<li><span class="flex justify-start"> <img src='${o}' class="w-6 h-6"/>${o}</span></li>`),"</ul>"].join(""))}if(!e.endsWith(".svg"))return new en("An icon should end with `.svg`")}isValid(e,t){return this.getFeedback(e,t,!0)===void 0}};let Mn=xi;w(Mn,"allLicenses",new Set(xm.map(e=>e.path))),w(Mn,"allLicensesArr",Array.from(xi.allLicenses)),w(Mn,"isMeta",!0);class Am extends Je{constructor(){super("tag","A simple tag of the format `key=value` OR a tagExpression");w(this,"isMeta",!0)}getFeedback(t,i){}isValid(t,i){return this.getFeedback(t,i)===void 0}}class km extends Je{constructor(){super("id","Checks for valid identifiers for layers, will automatically replace spaces and uppercase")}isValid(e,t){return this.getFeedback(e,t)===void 0}reformat(e,t){return e.replaceAll(" ","_").toLowerCase()}getFeedback(e,t){if(e.length<3)return J.t.validation.id.shouldBeLonger;if(!e.match(/^[a-zA-Z0-9_ ]+$/))return J.t.validation.id.invalidCharacter}}const Gn=class{static HelpText(){const e=Gn.AllValidators.map(t=>new K([new et(t.name,3),t.explanation]).SetClass("flex flex-col"));return new K([new et("Available types for text fields",1),"The listed types here trigger a special input element. Use them in `tagrendering.freeform.type` of your tagrendering to activate them",...e]).SetClass("flex flex-col")}static _byTypeConstructor(){const e=new Map;for(const t of Gn.AllValidators)e.set(t.name,t);return e}static get(e){return Gn._byType.get(e)}};let Qt=Gn;w(Qt,"availableTypes",["string","text","date","nat","int","distance","direction","wikidata","pnat","float","pfloat","email","url","phone","opening_hours","color","image","simple_tag","key","translation","icon","fediverse","tag","fediverse","id"]),w(Qt,"AllValidators",[new dc,new hc,new cc,new Rl,new Zo,new pc,new gc,new fg,new mg,new yg,new bg,new _g,new Yl,new vm,new _m,new Tm,new rs,new os,new Am,new su,new Cm,new Mn,new as,new km]),w(Qt,"_byType",Gn._byTypeConstructor());class tn{constructor(e,t){w(this,"id");w(this,"render");w(this,"renderIcon");w(this,"renderIconClass");w(this,"question");w(this,"questionhint");w(this,"condition");w(this,"invalidValues");w(this,"metacondition");w(this,"description");w(this,"configuration_warnings",[]);w(this,"freeform");w(this,"multiAnswer");w(this,"mappings");w(this,"labels");w(this,"classes");var o,r,u,l;let i=e;if(i===void 0)throw"Initing a TagRenderingConfig with undefined in "+t;typeof i=="number"&&(i=""+i);let s=t;if(i.id!==void 0){const a=(t??"").split(".")[0];if(i.source){let c=i.source+":";i.source==="shared-questions"&&(c+="shared_questions."),s=`${c}${i.id??""}`}else s=`layers:${a}.tagRenderings.${i.id??""}`}if(typeof i=="string"){this.render=J.T(i,s+".render"),this.multiAnswer=!1;return}if(this.id=i.id??"",this.id.match(/^[a-zA-Z0-9 ()?\/=:;,_-]*$/)===null)throw"Invalid ID in "+t+": an id can only contain [a-zA-Z0-0_-] as characters. The offending id is: "+this.id;if(this.labels=i.labels??[],typeof i.classes=="string"?this.classes=i.classes.split(" "):this.classes=i.classes??[],this.classes=[].concat(...this.classes.map(a=>a.split(" "))),this.render=J.T(i.render,s+".render"),this.question=J.T(i.question,s+".question"),this.questionhint=J.T(i.questionHint,s+".questionHint"),this.description=J.T(i.description,s+".description"),this.condition=de.Tag(i.condition??{and:[]},`${t}.condition`),this.invalidValues=i.invalidValues?de.Tag(i.invalidValues,`${t}.invalidValues`):void 0,typeof i.icon=="string"?(this.renderIcon=i.icon,this.renderIconClass="small"):typeof i.icon=="object"&&(this.renderIcon=i.icon.path,this.renderIconClass=i.icon.class),this.metacondition=de.Tag(i.metacondition??{and:[]},`${t}.metacondition`),i.freeform){if(i.freeform.addExtraTags!==void 0&&i.freeform.addExtraTags.map===void 0)throw`Freeform.addExtraTags should be a list of strings - not a single string (at ${t})`;if(i.freeform.type&&Qt.availableTypes.indexOf(i.freeform.type)<0)throw`At ${t}: invalid type ${i.freeform.type}, perhaps you meant ${P.sortedByLevenshteinDistance(i.freeform.key,Qt.availableTypes,d=>d)}`;const a=i.freeform.type??"string";let c=J.T(i.freeform.placeholder);if(c===void 0){const d=(o=J.t.validation[a])==null?void 0:o.description,m=i.freeform.key;d!==void 0?c=d.OnEveryLanguage(f=>m+" ("+f+")"):c=J.T(m+" ("+a+")")}if(this.freeform={key:i.freeform.key,type:a,placeholder:c,addExtraTags:((r=i.freeform.addExtraTags)==null?void 0:r.map((d,m)=>de.ParseUploadableTag(d,`${t}.extratag[${m}]`)))??[],inline:i.freeform.inline??!1,default:i.freeform.default,helperArgs:i.freeform.helperArgs},i.freeform.extraTags!==void 0)throw`Freeform.extraTags is defined. This should probably be 'freeform.addExtraTag' (at ${t})`;if(this.freeform.key===void 0||this.freeform.key==="")throw`Freeform.key is undefined or the empty string - this is not allowed; either fill out something or remove the freeform block alltogether. Error in ${t}`;if(i.freeform.args!==void 0)throw`Freeform.args is defined. This should probably be 'freeform.helperArgs' (at ${t})`;if(i.freeform.key==="questions"&&this.id!=="questions")throw`If you use a freeform key 'questions', the ID must be 'questions' too to trigger the special behaviour. The current id is '${this.id}' (at ${t})`;if(this.freeform.addExtraTags&&new we(this.freeform.addExtraTags).usedKeys().indexOf(this.freeform.key)>=0)throw`The freeform key ${this.freeform.key} will be overwritten by one of the extra tags, as they use the same key too. This is in ${t}`}if(this.multiAnswer=i.multiAnswer??!1,i.mappings){if(!Array.isArray(i.mappings))throw"Tagrendering has a 'mappings'-object, but expected a list ("+t+")";const a=P.NoNull(i.mappings.map(c=>c.icon!==void 0?c.icon.class:void 0))[0]??"small";this.mappings=i.mappings.map((c,d)=>tn.ExtractMapping(c,d,s,t,this.multiAnswer,this.question!==void 0,a))}if(!i.multiAnswer&&this.mappings!==void 0&&this.question!==void 0){let a=[];for(let c=0;c<this.mappings.length;c++){const d=this.mappings[c];if(d.if===void 0)throw`${t}.mappings[${c}].if is undefined`;a.push(...d.if.usedKeys())}a=P.Dedup(a);for(let c=0;c<this.mappings.length;c++){const d=this.mappings[c];if(d.hideInAnswer)continue;const m=d.if.usedKeys();for(const f of a)if(m.indexOf(f)<0){const y=`${t}.mappings[${c}]: This mapping only defines values for ${m.join(", ")}, but it should also give a value for ${f}`;this.configuration_warnings.push(y)}}}if(this.question!==void 0&&i.multiAnswer){if((((u=this.mappings)==null?void 0:u.length)??0)===0)throw`${t} MultiAnswer is set, but no mappings are defined`;let a=[],c=!0;for(const d of this.mappings)d.hideInAnswer||(d.ifnot===void 0&&(c=!1),a=a.concat(d.if.usedKeys()));if(a=P.Dedup(a),a.length>1&&!c)throw`${t}: A multi-answer is defined, which generates values over multiple keys. Please define ifnot-tags too on every mapping`;if(a.length>1&&((l=this.freeform)==null?void 0:l.key)!==void 0)throw`${t}: A multi-answer is defined, which generates values over multiple keys. This is incompatible with having a freeform key`}}static ExtractMapping(e,t,i,s,o,r,u="small"){var g;const l=`${i}.mappings.${t}`;if(e.if===void 0)throw'Invalid mapping: "if" is not defined';if(e.then===void 0)throw e.render!==void 0?`${l}: Invalid mapping: no 'then'-clause found. You might have typed 'render' instead of 'then', change it in ${JSON.stringify(e)}`:`${l}: Invalid mapping: no 'then'-clause found in ${JSON.stringify(e)}`;if(e.ifnot!==void 0&&!o)throw`${l}: Invalid mapping: 'ifnot' is defined, but the tagrendering is not a multianswer. Either remove ifnot or set 'multiAnswer:true' to enable checkboxes instead of radiobuttons`;if(e.render!==void 0)throw`${l}: Invalid mapping: a 'render'-key is present, this is probably a bug: ${JSON.stringify(e)}`;if(typeof e.if!="string"&&e.if.length!==void 0)throw`${l}: Invalid mapping: "if" is defined as an array. Use {"and": <your conditions>} or {"or": <your conditions>} instead`;if(e.addExtraTags!==void 0&&o)throw`${l}: Invalid mapping: got a multi-Answer with addExtraTags; this is not allowed`;let a=!1;typeof e.hideInAnswer=="boolean"?a=e.hideInAnswer:e.hideInAnswer!==void 0&&(a=de.Tag(e.hideInAnswer,`${s}.mapping[${t}].hideInAnswer`));const c=(e.addExtraTags??[]).map((x,k)=>de.SimpleTag(x,`${l}.addExtraTags[${k}]`));if(a===!0&&c.length>0)throw`${l}: Invalid mapping: 'hideInAnswer' is set to 'true', but 'addExtraTags' is enabled as well. This means that extra tags will be applied if this mapping is chosen as answer, but it cannot be chosen as answer. This either indicates a thought error or obsolete code that must be removed.`;let d,m=u;if(e.icon!==void 0)if(typeof e.icon=="string"&&e.icon!==""){let x=e.icon;x.endsWith(".svg")&&(x=x.substring(0,x.length-4)),Ke.All[x+".svg"]!==void 0?(d="./assets/svg/"+e.icon,d.endsWith(".svg")||(d+=".svg")):d=e.icon}else d=e.icon.path,m=e.icon.class??m;const f=e.priorityIf!==void 0?de.Tag(e.priorityIf):void 0,y={if:de.Tag(e.if,`${l}.if`),ifnot:e.ifnot!==void 0?de.Tag(e.ifnot,`${l}.ifnot`):void 0,then:J.T(e.then,`${l}.then`),hideInAnswer:a,icon:d,iconClass:m,addExtraTags:c,searchTerms:e.searchTerms,priorityIf:f};if(r){if(a!==!0&&y.if!==void 0&&!y.if.isUsableAsAnswer())throw`${s}.mapping[${t}].if: This value cannot be used to answer a question, probably because it contains a regex or an OR. Either change it or set 'hideInAnswer'`;if(a!==!0&&!(((g=y.ifnot)==null?void 0:g.isUsableAsAnswer())??!0))throw`${s}.mapping[${t}].ifnot: This value cannot be used to answer a question, probably because it contains a regex or an OR. If a contributor were to pick this as an option, MapComplete wouldn't be able to determine which tags to add.
    Either change it or set 'hideInAnswer'`}return y}IsKnown(e){var t;if(this.condition&&!this.condition.matchesProperties(e))return!0;if(this.invalidValues&&this.invalidValues.matchesProperties(e))return!1;if(this.multiAnswer){for(const s of this.mappings??[])if(de.MatchesMultiAnswer(s.if,e))return!0;const i=(t=this.freeform)==null?void 0:t.key;if(i!==void 0){const s=e[i];return typeof s=="object"?Object.keys(s).length>0:s!==void 0&&s!==""}return!1}return this.GetRenderValue(e)!==void 0}GetRenderValues(e){var o,r;if(!this.multiAnswer)return[this.GetRenderValueWithImage(e)];let t=((o=this.freeform)==null?void 0:o.key)!==void 0,i=new Set;const s=P.NoNull((r=this.mappings??[])==null?void 0:r.map(u=>{if(u.if===void 0)return u;if(de.MatchesMultiAnswer(u.if,e)){if(t&&u.if.isUsableAsAnswer()){const l=u.if.asChange({}).find(a=>a.k===this.freeform.key).v;i.add(l)}return u}}));if(t&&e[this.freeform.key]!==void 0){const l=e[this.freeform.key].split(";").filter(a=>!i.has(a));for(const a of l)s.push({then:new Ph(this.render.replace("{"+this.freeform.key+"}",a).translations)})}return s}GetRenderValue(e){var t;return(t=this.GetRenderValueWithImage(e))==null?void 0:t.then}GetRenderValueWithImage(e){var t;if(!(this.condition!==void 0&&!this.condition.matchesProperties(e))){if(this.mappings!==void 0&&!this.multiAnswer){for(const i of this.mappings)if(i.if===void 0||i.if.matchesProperties(e))return i}if(((t=this.freeform)==null?void 0:t.key)===void 0||e[this.freeform.key]!==void 0)return{then:this.render,icon:this.renderIcon,iconClass:this.renderIconClass}}}EnumerateTranslations(){const e=[];for(const t in this){if(!this.hasOwnProperty(t))continue;const i=this[t];i instanceof en&&e.push(i)}return e}FreeformValues(){var e,t;try{const i=(e=this.freeform)==null?void 0:e.key,s=(t=this.mappings)==null?void 0:t.filter(r=>r.hideInAnswer!==!0);if(i===void 0){let r=P.NoNull((s==null?void 0:s.map(c=>c.if.asChange({})))??[]);if(r.length===0)return;const u=r.map(c=>c.map(d=>d.k));let l=u[0];for(const c of u)l=l.filter(d=>c.indexOf(d)>=0);const a=l[0];return a===void 0?void 0:{key:a,values:P.NoNull(r.map(c=>{var d;return(d=c.filter(m=>m.k===a)[0])==null?void 0:d.v}))}}let o=P.NoNull((s==null?void 0:s.map(r=>{var u;return(u=r.if.asChange({}).filter(l=>l.k===i)[0])==null?void 0:u.v}))??[]);return o.length===void 0&&(o=void 0),{key:i,type:this.freeform.type,values:o}}catch{console.error("Could not create FreeformValues for tagrendering",this.id);return}}constructChangeSpecification(e,t,i,s){var l;typeof e=="string"&&(e=e==null?void 0:e.trim());const o=Qt.get((l=this.freeform)==null?void 0:l.type);if(o&&e&&(e=o.reformat(e,()=>s._country)),e===""&&(e=void 0),e===void 0&&t===void 0&&i===void 0||this.mappings===void 0&&e===void 0)return;if(this.freeform!==void 0&&(this.mappings===void 0||this.mappings.length==0||t===this.mappings.length&&!this.multiAnswer))return new we([new st(this.freeform.key,e),...this.freeform.addExtraTags??[]]);if(this.multiAnswer){let a=this.mappings.filter((m,f)=>i[f]).map(m=>new we([m.if,...m.addExtraTags??[]])),c=this.mappings.filter((m,f)=>!i[f]).map(m=>m.ifnot);i.at(-1)&&this.freeform&&a.push(new we([new st(this.freeform.key,e),...this.freeform.addExtraTags??[]]));const d=de.FlattenMultiAnswer([...a,...c]);return d.and.length===0?void 0:d}const r=this.mappings.some(a=>typeof a.hideInAnswer=="boolean"?!a.hideInAnswer:!a.hideInAnswer.matchesProperties(s)),u=e!==void 0&&(t===this.mappings.length||!r||t===void 0);if(u)return new we([new st(this.freeform.key,e),...this.freeform.addExtraTags??[]]);if(t!==void 0)return new we([this.mappings[t].if,...this.mappings[t].addExtraTags??[]]);console.error("TagRenderingConfig.ConstructSpecification has a weird fallback for",{freeformValue:e,singleSelectedMapping:t,multiSelectedMapping:i,currentProperties:s,useFreeform:u})}GenerateDocumentation(){var o,r,u;let e=[];((o=this.freeform)==null?void 0:o.key)!==void 0&&(e=["This rendering asks information about the property ",qt.OsmWiki(this.freeform.key),new uc(new K(["This is rendered with ",new Xe(this.render.txt).SetClass("code font-bold")]))]);let t;this.mappings!==void 0&&(t=new Fo([].concat(...this.mappings.map(l=>{const a=[new K([new Xe(l.then.txt).SetClass("font-bold")," corresponds with ",l.if.asHumanString(!0,!1,{})])];return l.hideInAnswer===!0&&a.push("_This option cannot be chosen as answer_"),l.ifnot!==void 0&&a.push("Unselecting this answer will add "+l.ifnot.asHumanString(!0,!1,{})),a}))));let i;this.condition!==void 0&&!((r=this.condition)!=null&&r.matchesProperties({}))&&(i=new K(["This tagrendering is only visible in the popup if the following condition is met:",new Xe(this.condition.optimize().asHumanString(!0,!1,{})).SetClass("code")]));let s;return((u=this.labels)==null?void 0:u.length)>0&&(s=new K(["This tagrendering has labels ",...this.labels.map(l=>new Xe(l).SetClass("code"))]).SetClass("flex")),new K([new et(this.id,3),this.description,this.question!==void 0?new K(["The question is ",new Xe(this.question.txt).SetClass("font-bold bold")]):new Xe("This tagrendering has no question and is thus read-only").SetClass("italic"),new K(e),t,i,s]).SetClass("flex flex-col")}}class ys{constructor(e,t){w(this,"id");w(this,"options");w(this,"defaultSelection");if(e.options===void 0)throw`A filter without options was given at ${t}`;if(e.id===void 0)throw`A filter without id was found at ${t}`;if(e.id.match(/^[a-zA-Z0-9_-]*$/)===null)throw`A filter with invalid id was found at ${t}. Ids should only contain letters, numbers or - _`;if(e.options.map===void 0)throw`A filter was given where the options aren't a list at ${t}`;this.id=e.id;let i;if(this.options=e.options.map((s,o)=>{var c;const r=`${t}.options.${o}`,u=J.T(s.question,`${r}.question`);let l;if((((c=s.fields)==null?void 0:c.length)??0)==0&&s.osmTags!==void 0&&(l=de.Tag(s.osmTags,`${r}.osmTags`),ys.validateSearch(l,r)),u===void 0)throw`Invalid filter: no question given at ${r}`;const a=(s.fields??[]).map((d,m)=>{const f=d.type??"string";if(d.name===void 0||d.name===""||d.name.match(/[a-z0-9_-]+/)==null)throw`Invalid filter: a variable name should match [a-z0-9_-]+ at ${r}.fields[${m}]`;return{name:d.name,type:f}});for(const d of a)for(let m in u.translations){const f=u.translations[m];if(!m.startsWith("_")&&f.indexOf("{"+d.name+"}")<0)throw"Error in filter with fields at "+t+".question."+m+": The question text should contain every field, but it doesn't contain `{"+d+"}`: "+f}if(s.default)if(i===void 0)i=o;else throw`Invalid filter: multiple filters are set as default, namely ${o} and ${i} at ${t}`;return s.osmTags!==void 0&&ys.validateSearch(de.Tag(s.osmTags),r),{question:u,osmTags:l,fields:a,originalTagsSpec:s.osmTags}}),this.defaultSelection=i,this.options.some(s=>s.fields.length>0)&&this.options.length>1)throw`Invalid filter at ${t}: a filter with textfields should only offer a single option.`;if(this.options.length>1&&this.options[0].osmTags!==void 0)throw"Error in "+t+"."+this.id+": the first option of a multi-filter should always be the 'reset' option and not have any filters"}static validateSearch(e,t){e.visit(i=>{if(i instanceof Te&&typeof i.value!="string"&&!(i.value.source=="^..*$"||i.value.source==".+"||i.value.source=="^[\\s\\S][\\s\\S]*$")&&!i.value.ignoreCase)throw`At ${t}: The filter for key '${i.key}' uses a regex '${i.value}', but you should use a case invariant regex with ~i~ instead, as search should be case insensitive`})}initState(e){var o;let t="";this.options.length>1?t=""+(this.defaultSelection??0):((o=this.options[0].fields)==null?void 0:o.length)>0?t="{}":this.defaultSelection===0?t="true":t="false";const i=Wh.GetQueryParameter(`filter-${e}-${this.id}`,t,"State of filter "+this.id);return this.options.length>1?i.sync(r=>{const u=Number(r);if(!isNaN(u))return u},[],r=>""+r):this.options[0].fields.length>0?i:i.sync(r=>{if(r==="true")return 0},[],r=>r===void 0?"false":"true")}GenerateDocs(){const e=this.options.some(t=>{var i;return((i=t.fields)==null?void 0:i.length)>0});return new Kn(P.NoNull(["id","question","osmTags",e?"fields":void 0]),this.options.map((t,i)=>{var o,r;const s=this.options.length>1&&(this.defaultSelection??0)==i;return P.NoNull([this.id+"."+i,s?new K([t.question.SetClass("font-bold"),"(default)"]):t.question,((o=t.osmTags)==null?void 0:o.asHumanString(!1,!1,{}))??"",((r=t.fields)==null?void 0:r.length)>0?new K(t.fields.map(u=>u.name+" ("+u.type+")")):void 0])}))}}class qm{constructor(e,t,i){w(this,"canonical");w(this,"_canonicalSingular");w(this,"useAsDefaultInput");w(this,"useIfNoUnitGiven");w(this,"prefix");w(this,"alternativeDenominations");w(this,"_human");w(this,"_humanSingular");var s,o,r;if(i=`${i}.unit(${e.canonicalDenomination})`,this.canonical=e.canonicalDenomination.trim(),this.canonical===void 0)throw`${i}: this unit has no decent canonical value defined`;if(this._canonicalSingular=(s=e.canonicalDenominationSingular)==null?void 0:s.trim(),(o=e.alternativeDenomination)==null||o.forEach((u,l)=>{if(((u==null?void 0:u.trim())??"")==="")throw`${i}.alternativeDenomination.${l}: invalid alternative denomination: undefined, null or only whitespace`}),this.alternativeDenominations=((r=e.alternativeDenomination)==null?void 0:r.map(u=>u.trim()))??[],e.default!==void 0)throw`${i} uses the old 'default'-key. Use "useIfNoUnitGiven" or "useAsDefaultInput" instead`;this.useIfNoUnitGiven=e.useIfNoUnitGiven,this.useAsDefaultInput=t??e.useIfNoUnitGiven,this._human=J.T(e.human,i+"human"),this._humanSingular=J.T(e.humanSingular,i+"humanSingular"),this.prefix=e.prefix??!1}get human(){return this._human.Clone()}get humanSingular(){return(this._humanSingular??this._human).Clone()}canonicalValue(e,t){if(e===void 0)return;const i=this.StrippedValue(e,t);return i===null?null:i==="1"&&this._canonicalSingular!==void 0?("1 "+this._canonicalSingular).trim():(i+" "+this.canonical).trim()}StrippedValue(e,t){if(e===void 0)return;e=e.toLowerCase();const i=this;function s(u){return i.prefix?e.startsWith(u):e.endsWith(u)}function o(u){return i.prefix?e.substr(u.length).trim():e.substring(0,e.length-u.length).trim()}if(this.canonical!==""&&s(this.canonical.toLowerCase()))return o(this.canonical);if(this._canonicalSingular!==void 0&&this._canonicalSingular!==""&&s(this._canonicalSingular))return o(this._canonicalSingular);for(const u of this.alternativeDenominations)if(s(u))return o(u);if(!t)return null;const r=Number(e.trim());return isNaN(r)?null:e.trim()}isDefaultDenomination(e){return this.useIfNoUnitGiven===!0?!0:this.useIfNoUnitGiven===!1?!1:this.useIfNoUnitGiven.indexOf(e())>=0}}class fr{constructor(e,t,i){w(this,"appliesToKeys");w(this,"denominations");w(this,"denominationsSorted");w(this,"eraseInvalid");this.appliesToKeys=new Set(e),this.denominations=t,this.eraseInvalid=i;const s=new Set;for(const u of this.denominations){if(s.has(u.canonical))throw"This canonical unit is already defined in another denomination: "+u.canonical;const l=u.alternativeDenominations.filter(a=>s.has(a));if(l.length>0)throw"A denomination is used multiple times: "+l.join(", ");s.add(u.canonical),u.alternativeDenominations.forEach(a=>s.add(a))}this.denominationsSorted=[...this.denominations],this.denominationsSorted.sort((u,l)=>l.canonical.length-u.canonical.length);const o=new Set;function r(u){if(u!==void 0){u=u.toLowerCase();for(let l=0;l<u.length+1;l++){const a=u.substring(0,l);o.add(a)}}}for(const u of this.denominations)r(u.canonical),r(u._canonicalSingular),u.alternativeDenominations.forEach(r)}static fromJson(e,t){const i=e.appliesToKey;for(let o=0;o<i.length;o++){let r=i[o];if(r.trim()!==r)throw`${t}.appliesToKey[${o}] is invalid: it starts or ends with whitespace`}if((e.applicableUnits??[]).length===0)throw`${t}: define at least one applicable unit`;const s=e.applicableUnits.map((o,r)=>new qm(o,o.canonicalDenomination===void 0?void 0:o.canonicalDenomination.trim()===e.defaultInput,`${t}.units[${r}]`));if(e.defaultInput&&!s.some(o=>o.canonical.trim()===e.defaultInput))throw`${t}: no denomination has the specified default denomination. The default denomination is '${e.defaultInput}', but the available denominations are ${s.map(o=>o.canonical).join(", ")}`;return new fr(i,s,e.eraseInvalidValues??!1)}isApplicableToKey(e){return e===void 0?!1:this.appliesToKeys.has(e)}findDenomination(e,t){if(e===void 0)return;const i=this.getDefaultDenomination(t);for(const s of this.denominationsSorted){const o=s.StrippedValue(e,i===s);if(o!==null)return[o,s]}return[void 0,void 0]}asHumanLongValue(e,t){if(e===void 0)return;const[i,s]=this.findDenomination(e,t),o=i==="1"?s==null?void 0:s.humanSingular:s==null?void 0:s.human;if(o===void 0)return new Xe(i??e);const r=s.prefix?[o,i]:[i,o];return new K(r)}getDefaultInput(e){console.log("Searching the default denomination for input",e);for(const t of this.denominations){if(t.useAsDefaultInput===!0)return t;if(t.useAsDefaultInput===void 0||t.useAsDefaultInput===!1)continue;let i=e();typeof i=="string"&&(i=i.split(","));const s=t.useAsDefaultInput;if(i.some(o=>s.indexOf(o)>=0))return t}return this.denominations[0]}getDefaultDenomination(e){for(const t of this.denominations){if(t.useIfNoUnitGiven===!0||t.canonical==="")return t;if(t.useIfNoUnitGiven===void 0||t.useIfNoUnitGiven===!1)continue;let i=e()??[];typeof i=="string"&&(i=i.split(","));const s=t.useIfNoUnitGiven;if(i.some(o=>s.indexOf(o)>=0))return t}return this.denominations[0]}}const xs=class{constructor(e,t){w(this,"deleteReasons");w(this,"nonDeleteMappings");w(this,"softDeletionTags");w(this,"neededChangesets");if(this.deleteReasons=(e.extraDeleteReasons??[]).map((i,s)=>{const o=`${t}.extraDeleteReasons[${s}]`;if((i.changesetMessage??"").length<=5)throw`${o}.explanation is too short, needs at least 4 characters`;return{explanation:J.T(i.explanation,o+".explanation"),changesetMessage:i.changesetMessage}}),!e.omitDefaultDeleteReasons)for(const i of xs.defaultDeleteReasons)this.deleteReasons.push({changesetMessage:i.changesetMessage,explanation:i.explanation.Clone()});if(this.nonDeleteMappings=(e.nonDeleteMappings??[]).map((i,s)=>{const o=`${t}.extraDeleteReasons[${s}]`;return de.Tag(i.if,o+".if"),{if:i.if,then:J.T(i.then,o+".then")}}),this.nonDeleteMappings.length+this.deleteReasons.length==0)throw"At "+t+": a deleteconfig should have some reasons to delete: either the default delete reasons or a nonDeleteMapping or extraDeletereason should be given";if(this.softDeletionTags=void 0,e.softDeletionTags!==void 0&&(this.softDeletionTags=de.Tag(e.softDeletionTags,`${t}.softDeletionTags`)),e.hardDeletionTags!==void 0)throw`You probably meant 'softDeletionTags' instead of 'hardDeletionTags' (at ${t})`;this.neededChangesets=e.neededChangesets}constructTagRendering(){const e=J.t.delete,t=[];for(const s of this.nonDeleteMappings)t.push({if:s.if,then:s.then.translations});for(const s of this.deleteReasons)t.push({if:xs.deleteReasonKey+"="+s.changesetMessage,then:s.explanation.translations});const i={question:e.whyDelete.translations,mappings:t,id:"why-delete"};return new tn(i)}};let vi=xs;w(vi,"deleteReasonKey","_delete_reason"),w(vi,"defaultDeleteReasons",[{changesetMessage:"testing point",explanation:J.t.delete.reasons.test},{changesetMessage:"disused",explanation:J.t.delete.reasons.disused},{changesetMessage:"not found",explanation:J.t.delete.reasons.notFound},{changesetMessage:"duplicate",explanation:J.t.delete.reasons.duplicate}]);class dl{constructor(e,t){w(this,"enableImproveAccuracy");w(this,"enableRelocation");if(this.enableImproveAccuracy=e.enableImproveAccuracy??!0,this.enableRelocation=e.enableRelocation??!0,!(this.enableRelocation||this.enableImproveAccuracy))throw"At least one default move reason should be allowed (at "+t+")"}}class Is{constructor(e,t){w(this,"_context");w(this,"_json");this._json=e,this._context=t}tr(e,t,i){let s=this._json[e];if(s==null)return t===void 0?void 0:new tn(t,`${i??this._context}.${e}.default value`);if(Object.keys(s).length===1&&typeof s.render=="string")throw`At ${i??"<unknown>"}: use the content directly instead of {${e}: ${JSON.stringify(s)}}`;return new tn(s,`${i??this._context}.${e}`)}ParseTagRenderings(e,t){if(e===void 0)return[];const i=this._context;t=t??{},t.prepConfig===void 0&&(t.prepConfig=o=>o);const s=[];for(let o=0;o<e.length;o++){const r=e[o],u=new tn(r,`${i}.tagrendering[${o}]`);if(t.readOnlyMode&&u.question!==void 0)throw`A question is defined for ${i}.tagrendering[${o}], but this is not allowed at this position - probably because this rendering is an icon, badge or label`;if(t.requiresId&&u.id==="")throw`${i}.tagrendering[${o}] has an invalid ID - make sure it is defined and not empty`;s.push(u)}return s}}function $m(n){let e,t,i,s,o,r=[n[1],{width:"314px"},{height:"374px"},{viewBox:"0 0 314 374"},{version:"1.1"},{id:"svg7"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("defs"),i=B("path"),D(t,"id","defs11"),D(i,"id","path2"),D(i,"class","selectable"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),v(i,"fill-rule","nonzero"),v(i,"stroke","none"),D(i,"d","M 157 0 C 70.296875 1.8947806e-14 0.01171875 70.121098 0.01171875 156.62109 C 0.01171875 231.01726 52.025471 293.25325 121.74219 309.22266 L 147.24609 364.68359 C 152.95703 377.10547 170.65234 377.10547 176.36719 364.68359 L 203.19922 306.33398 C 267.35183 286.6535 313.98828 227.07489 313.98828 156.62109 C 313.98828 70.121098 243.70312 0 157 0 z "),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(e,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"fill",l[0]),ie(e,u=Le(r,[a&2&&l[1],{width:"314px"},{height:"374px"},{viewBox:"0 0 314 374"},{version:"1.1"},{id:"svg7"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function Sm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Dm extends Re{constructor(e){super(),Ee(this,e,Sm,$m,Ie,{color:0})}}function Rm(n){let e,t,i,s,o,r=[n[1],{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"},{id:"svg5"},{"sodipodi:docname":"square.svg"},{"inkscape:version":"1.1.2 (0a00cf5339, 2022-02-04)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),D(i,"class","selectable"),D(i,"id","rect2"),v(i,"fill",n[0]),D(i,"d","M 0,0 H 375 V 375 H 0 Z"),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"fill",l[0]),ie(e,u=Le(r,[a&2&&l[1],{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"},{id:"svg5"},{"sodipodi:docname":"square.svg"},{"inkscape:version":"1.1.2 (0a00cf5339, 2022-02-04)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function Em(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Im extends Re{constructor(e){super(),Ee(this,e,Em,Rm,Ie,{color:0})}}function Fm(n){let e,t,i,s,o,r=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),v(i,"fill",n[0]),D(i,"class","selectable"),D(i,"d","M 375 187.5 C 375 291.054688 291.054688 375 187.5 375 C 83.945312 375 0 291.054688 0 187.5 C 0 83.945312 83.945312 0 187.5 0 C 291.054688 0 375 83.945312 375 187.5 Z M 375 187.5 "),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"fill",l[0]),ie(e,u=Le(r,[a&2&&l[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function jm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Om extends Re{constructor(e){super(),Ee(this,e,jm,Fm,Ie,{color:0})}}function Bm(n){let e,t,i,s,o,r=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"374px"},{height:"259px"},{viewBox:"0 0 374 259"},{version:"1.1"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),v(i,"fill","none",1),v(i,"stroke-width","4"),v(i,"stroke-linecap","butt"),v(i,"stroke-linejoin","round"),v(i,"stroke",n[0]),v(i,"stroke-opacity","1"),v(i,"stroke-miterlimit","4"),D(i,"d","M 2.999896 7.285624 L 10.826182 14.99991 L 23.000104 3.00009 "),D(i,"transform","matrix(14.384615,0,0,14.388889,0,0)"),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"stroke",l[0]),ie(e,u=Le(r,[a&2&&l[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"374px"},{height:"259px"},{viewBox:"0 0 374 259"},{version:"1.1"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function Nm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Mm extends Re{constructor(e){super(),Ee(this,e,Nm,Bm,Ie,{color:0})}}function Lm(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"fill","none",1),v(i,"stroke-width","9"),v(i,"stroke-linecap","round"),v(i,"stroke-linejoin","miter"),v(i,"stroke",n[0]),v(i,"stroke-opacity","1"),v(i,"stroke-miterlimit","4"),D(i,"d","M 46 55.932292 L 66.551042 55.932292 "),D(i,"transform","matrix(3.75,0,0,3.75,0,0)"),v(s,"fill","none",1),v(s,"stroke-width","9"),v(s,"stroke-linecap","round"),v(s,"stroke-linejoin","miter"),v(s,"stroke",n[0]),v(s,"stroke-opacity","1"),v(s,"stroke-miterlimit","4"),D(s,"d","M 46 55.534375 L 46 27.729167 "),D(s,"transform","matrix(3.75,0,0,3.75,0,0)"),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"stroke",a[0]),c&1&&v(s,"stroke",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function Pm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Wm extends Re{constructor(e){super(),Ee(this,e,Pm,Lm,Ie,{color:0})}}function Jm(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"fill","none",1),v(i,"stroke-width","6.012842"),v(i,"stroke-linecap","round"),v(i,"stroke-linejoin","miter"),v(i,"stroke",n[0]),v(i,"stroke-opacity","1"),v(i,"stroke-miterlimit","4"),D(i,"d","M 23.165924 293.603402 L 3.541282 273.978759 "),D(i,"transform","matrix(14.173228,0,0,14.173228,0.0000135166,-3834.448583)"),v(s,"fill","none",1),v(s,"stroke-width","6.012921"),v(s,"stroke-linecap","round"),v(s,"stroke-linejoin","miter"),v(s,"stroke",n[0]),v(s,"stroke-opacity","1"),v(s,"stroke-miterlimit","4"),D(s,"d","M 23.195414 273.884226 L 3.571047 293.508593 "),D(s,"transform","matrix(14.173228,0,0,14.173228,0.0000135166,-3834.448583)"),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"stroke",a[0]),c&1&&v(s,"stroke",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function Vm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Hm extends Re{constructor(e){super(),Ee(this,e,Vm,Jm,Ie,{color:0})}}function Um(n){let e,t,i,s,o=[n[1],{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"},{id:"svg15"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],r={};for(let u=0;u<o.length;u+=1)r=V(r,o[u]);return{c(){e=B("svg"),t=B("path"),D(t,"id","path2"),v(t,"color",n[0]),v(t,"fill",n[0]),v(t,"fill-opacity","0.988235"),v(t,"stroke-linecap","round"),v(t,"stroke-linejoin","round"),v(t,"-inkscape-stroke","none"),D(t,"d","M 187.5 0.17578125 A 15 15 0 0 0 172.5 15.175781 L 172.5 43.708984 C 104.37541 50.343145 49.843699 104.61884 42.837891 172.63672 L 14.765625 172.63672 A 14.86235 14.86235 0 0 0 -0.09765625 187.5 A 14.86235 14.86235 0 0 0 14.765625 202.36133 L 42.837891 202.36133 C 49.842792 270.37794 104.37427 324.65648 172.5 331.29102 L 172.5 360.10156 A 15 15 0 0 0 187.5 375.10156 A 15 15 0 0 0 202.5 360.10156 L 202.5 331.08594 C 269.70108 323.65092 323.26953 269.82518 330.26953 202.5 L 360.08203 202.5 A 15 15 0 0 0 375.08203 187.5 A 15 15 0 0 0 360.08203 172.5 L 330.26953 172.5 C 323.26946 105.17266 269.70061 51.348735 202.5 43.914062 L 202.5 15.175781 A 15 15 0 0 0 187.5 0.17578125 z M 186.5625 80.511719 C 245.87515 80.511719 293.55078 128.18741 293.55078 187.5 C 293.55078 246.80822 245.87443 294.48828 186.5625 294.48828 C 127.25056 294.48828 79.574219 246.80822 79.574219 187.5 C 79.574219 128.1874 127.24984 80.511719 186.5625 80.511719 z M 187.5 139.21094 C 160.83203 139.21094 139.21094 160.83203 139.21094 187.5 C 139.21094 214.16797 160.83203 235.78906 187.5 235.78906 C 214.16797 235.78906 235.78906 214.16797 235.78906 187.5 C 235.78906 160.83203 214.16797 139.21094 187.5 139.21094 z "),ie(e,r)},m(u,l){xe(u,e,l),H(e,t),i||(s=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],i=!0)},p(u,[l]){l&1&&v(t,"color",u[0]),l&1&&v(t,"fill",u[0]),ie(e,r=Le(o,[l&2&&u[1],{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"},{id:"svg15"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(u){u&&Ae(e),i=!1,Pe(s)}}}function Gm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class zm extends Re{constructor(e){super(),Ee(this,e,Gm,Um,Ie,{color:0})}}function Ym(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 225.160156 268.851562 L 160.957031 268.851562 L 160.957031 260.476562 C 160.957031 246.230469 162.574219 234.664062 165.804688 225.777344 C 169.035156 216.890625 174.679688 208.773438 181.066406 201.429688 C 187.457031 194.085938 196.832031 191.542969 219.160156 173.035156 C 231.054688 163.339844 239.914062 144.070312 239.914062 135.992188 C 240.742188 114.621094 234.679688 106.203125 226.9375 98.460938 C 218.425781 91.074219 204.160156 87.171875 192.773438 87.171875 C 182.34375 87.171875 167.070312 90.207031 159.824219 96.695312 C 150.085938 103.183594 135.332031 124.367188 138.40625 145.707031 L 65.378906 146.347656 C 65.378906 87.324219 76.414062 71.75 102.546875 47.597656 C 127.851562 27.183594 150.050781 20.089844 194.09375 20.089844 C 227.777344 20.089844 254.875 26.773438 274.558594 40.140625 C 301.292969 58.207031 320.476562 81.882812 320.476562 126.53125 C 320.476562 143.171875 313.285156 160.613281 304.304688 174.710938 C 297.398438 186.316406 281.636719 199.660156 259.921875 213.910156 C 243.839844 223.585938 234.894531 233.855469 231 240.980469 C 227.109375 248.101562 225.160156 257.394531 225.160156 268.851562 Z M 225.160156 268.851562 "),v(s,"stroke","none"),v(s,"fill-rule","nonzero"),v(s,"fill",n[0]),v(s,"fill-opacity","1"),D(s,"d","M 228.535156 323.679688 C 228.539062 338.824219 212.730469 351.101562 193.226562 351.101562 C 173.722656 351.101562 157.914062 338.824219 157.921875 323.679688 C 157.914062 308.539062 173.722656 296.261719 193.226562 296.261719 C 212.730469 296.261719 228.539062 308.539062 228.535156 323.679688 Z M 228.535156 323.679688 "),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"fill",a[0]),c&1&&v(s,"fill",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function Km(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class Zm extends Re{constructor(e){super(),Ee(this,e,Km,Ym,Ie,{color:0})}}function Qm(n){let e,t,i,s,o,r=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 362.109375 164.0625 L 328.125 130.101562 L 328.125 46.875 C 328.125 33.984375 317.578125 23.4375 304.6875 23.4375 L 281.25 23.4375 C 268.359375 23.4375 257.8125 33.984375 257.8125 46.875 L 257.8125 59.835938 L 210.9375 13.007812 C 204.539062 6.960938 198.679688 0 187.5 0 C 176.320312 0 170.460938 6.960938 164.0625 13.007812 L 12.890625 164.0625 C 5.578125 171.679688 0 177.234375 0 187.5 C 0 200.695312 10.125 210.9375 23.4375 210.9375 L 46.875 210.9375 L 46.875 351.5625 C 46.875 364.453125 57.421875 375 70.3125 375 L 140.625 375 L 140.625 257.8125 C 140.625 244.921875 151.171875 234.375 164.0625 234.375 L 210.9375 234.375 C 223.828125 234.375 234.375 244.921875 234.375 257.8125 L 234.375 375 L 304.6875 375 C 317.578125 375 328.125 364.453125 328.125 351.5625 L 328.125 210.9375 L 351.5625 210.9375 C 364.875 210.9375 375 200.695312 375 187.5 C 375 177.234375 369.421875 171.679688 362.109375 164.0625 Z M 362.109375 164.0625 "),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"fill",l[0]),ie(e,u=Le(r,[a&2&&l[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function Xm(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class e0 extends Re{constructor(e){super(),Ee(this,e,Xm,Qm,Ie,{color:0})}}function t0(n){let e,t,i,s,o=[n[0],{xmlns:"http://www.w3.org/2000/svg"},{viewBox:"0 0 36 36"}],r={};for(let u=0;u<o.length;u+=1)r=V(r,o[u]);return{c(){e=B("svg"),t=B("path"),D(t,"fill","#DD2E44"),D(t,"d","M18 0C8.059 0 0 8.059 0 18s8.059 18 18 18 18-8.059 18-18S27.941 0 18 0zm13 18c0 2.565-.753 4.95-2.035 6.965L11.036 7.036C13.05 5.753 15.435 5 18 5c7.18 0 13 5.821 13 13zM5 18c0-2.565.753-4.95 2.036-6.964l17.929 17.929C22.95 30.247 20.565 31 18 31c-7.179 0-13-5.82-13-13z"),ie(e,r)},m(u,l){xe(u,e,l),H(e,t),i||(s=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],i=!0)},p(u,[l]){ie(e,r=Le(o,[l&1&&u[0],{xmlns:"http://www.w3.org/2000/svg"},{viewBox:"0 0 36 36"}]))},i:X,o:X,d(u){u&&Ae(e),i=!1,Pe(s)}}}function n0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(0,s=se(e,i)),"color"in d&&t(1,o=d.color)},[s,o,r,u,l,a,c]}class i0 extends Re{constructor(e){super(),Ee(this,e,n0,t0,Ie,{color:1})}}function s0(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 370.789062 174.078125 L 310.925781 174.078125 C 308.027344 144.964844 295.136719 117.75 274.449219 97.058594 C 253.757812 76.371094 226.542969 63.480469 197.425781 60.582031 L 197.425781 0 L 173.484375 0 L 173.484375 61.179688 C 144.359375 64.054688 117.128906 76.9375 96.4375 97.632812 C 75.742188 118.328125 62.859375 145.554688 59.984375 174.679688 L 0.121094 174.679688 L 0.121094 199.34375 L 59.984375 199.34375 C 62.84375 228.460938 75.722656 255.6875 96.421875 276.367188 C 117.121094 297.042969 144.359375 309.890625 173.484375 312.71875 L 173.484375 372.460938 L 197.425781 372.460938 L 197.425781 312.601562 C 226.539062 309.75 253.765625 296.894531 274.460938 276.21875 C 295.160156 255.542969 308.046875 228.335938 310.925781 199.222656 L 370.789062 199.222656 Z M 185.335938 288.175781 C 165.210938 288.152344 145.550781 282.164062 128.828125 270.96875 C 112.109375 259.773438 99.085938 243.867188 91.402344 225.273438 C 83.71875 206.675781 81.71875 186.21875 85.660156 166.484375 C 89.597656 146.753906 99.300781 128.628906 113.539062 114.410156 C 127.773438 100.191406 145.90625 90.507812 165.644531 86.59375 C 185.382812 82.675781 205.835938 84.699219 224.425781 92.402344 C 243.015625 100.109375 258.898438 113.15625 270.078125 129.886719 C 281.253906 146.621094 287.21875 166.289062 287.21875 186.410156 C 287.265625 199.820312 284.667969 213.109375 279.566406 225.511719 C 274.46875 237.914062 266.96875 249.1875 257.503906 258.6875 C 248.039062 268.1875 236.792969 275.722656 224.40625 280.867188 C 212.023438 286.007812 198.746094 288.65625 185.335938 288.65625 Z M 185.335938 288.175781 "),v(s,"stroke","none"),v(s,"fill-rule","nonzero"),v(s,"fill",n[0]),v(s,"fill-opacity","1"),D(s,"d","M 185.332031 128.542969 C 196.777344 128.542969 207.964844 131.933594 217.484375 138.292969 C 227 144.652344 234.417969 153.691406 238.796875 164.265625 C 243.179688 174.839844 244.324219 186.476562 242.089844 197.699219 C 239.859375 208.925781 234.34375 219.238281 226.253906 227.332031 C 218.160156 235.425781 207.847656 240.9375 196.621094 243.171875 C 185.398438 245.402344 173.757812 244.257812 163.1875 239.875 C 152.609375 235.496094 143.574219 228.078125 137.214844 218.5625 C 130.855469 209.046875 127.460938 197.855469 127.460938 186.410156 C 127.488281 171.070312 133.59375 156.367188 144.441406 145.519531 C 155.289062 134.671875 169.992188 128.566406 185.332031 128.542969 Z M 185.332031 128.542969 "),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"fill",a[0]),c&1&&v(s,"fill",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function o0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class r0 extends Re{constructor(e){super(),Ee(this,e,o0,s0,Ie,{color:0})}}function a0(n){let e,t,i,s,o,r=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 372.8125 175.78125 L 312.5 175.78125 C 306.570312 115.964844 259.332031 68.597656 199.53125 62.5 L 199.53125 1.71875 L 175.46875 1.71875 L 175.46875 62.5 C 115.511719 68.765625 68.269531 116.398438 62.5 176.40625 L 2.1875 176.40625 L 2.1875 201.09375 L 62.5 201.09375 C 68.292969 261.152344 115.871094 308.664062 175.9375 314.375 L 175.9375 375 L 200 375 L 200 314.21875 C 259.703125 308.089844 306.78125 260.679688 312.5 200.9375 L 372.34375 200.9375 L 372.34375 175.78125 Z M 187.5 289.84375 C 167.40625 289.867188 147.761719 283.878906 131.09375 272.65625 C 96.832031 249.789062 79.742188 208.519531 87.8125 168.125 C 91.808594 148.441406 101.476562 130.351562 115.625 116.09375 C 144.636719 86.929688 188.359375 78.113281 226.40625 93.75 C 264.28125 109.484375 288.949219 146.488281 288.90625 187.5 C 288.988281 214.550781 278.304688 240.519531 259.21875 259.6875 C 249.785156 269.242188 238.519531 276.789062 226.09375 281.875 C 213.71875 287.035156 200.441406 289.691406 187.03125 289.6875 Z M 187.5 289.84375 "),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"fill",l[0]),ie(e,u=Le(r,[a&2&&l[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function l0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class u0 extends Re{constructor(e){super(),Ee(this,e,l0,a0,Ie,{color:0})}}function d0(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 370.789062 174.078125 L 310.925781 174.078125 C 308.027344 144.964844 295.136719 117.75 274.449219 97.058594 C 253.757812 76.371094 226.542969 63.480469 197.425781 60.582031 L 197.425781 0 L 173.484375 0 L 173.484375 61.179688 C 144.359375 64.054688 117.128906 76.9375 96.4375 97.632812 C 75.742188 118.328125 62.859375 145.554688 59.984375 174.679688 L 0.121094 174.679688 L 0.121094 199.34375 L 59.984375 199.34375 C 62.84375 228.460938 75.722656 255.6875 96.421875 276.367188 C 117.121094 297.042969 144.359375 309.890625 173.484375 312.71875 L 173.484375 372.460938 L 197.425781 372.460938 L 197.425781 312.601562 C 226.539062 309.75 253.765625 296.894531 274.460938 276.21875 C 295.160156 255.542969 308.046875 228.335938 310.925781 199.222656 L 370.789062 199.222656 Z M 185.335938 288.175781 C 165.210938 288.152344 145.550781 282.164062 128.828125 270.96875 C 112.109375 259.773438 99.085938 243.867188 91.402344 225.273438 C 83.71875 206.675781 81.71875 186.21875 85.660156 166.484375 C 89.597656 146.753906 99.300781 128.628906 113.539062 114.410156 C 127.773438 100.191406 145.90625 90.507812 165.644531 86.59375 C 185.382812 82.675781 205.835938 84.699219 224.425781 92.402344 C 243.015625 100.109375 258.898438 113.15625 270.078125 129.886719 C 281.253906 146.621094 287.21875 166.289062 287.21875 186.410156 C 287.265625 199.820312 284.667969 213.109375 279.566406 225.511719 C 274.46875 237.914062 266.96875 249.1875 257.503906 258.6875 C 248.039062 268.1875 236.792969 275.722656 224.40625 280.867188 C 212.023438 286.007812 198.746094 288.65625 185.335938 288.65625 Z M 185.335938 288.175781 "),v(s,"stroke","none"),v(s,"fill-rule","nonzero"),v(s,"fill",n[0]),v(s,"fill-opacity","0.988235"),D(s,"d","M 233.257812 166.777344 L 224.351562 166.777344 L 224.351562 137.683594 C 224.351562 137.683594 224.351562 95.8125 182.734375 95.8125 C 141.113281 95.8125 141.113281 137.683594 141.113281 137.683594 L 141.113281 166.777344 L 132.207031 166.777344 C 123.335938 166.777344 116.144531 174.015625 116.144531 182.941406 L 116.144531 247.21875 C 116.191406 256.113281 123.367188 263.300781 132.207031 263.300781 L 233.257812 263.300781 C 242.128906 263.300781 249.320312 256.0625 249.320312 247.136719 L 249.320312 182.941406 C 249.320312 174.015625 242.128906 166.777344 233.257812 166.777344 Z M 182.734375 229.800781 C 167.902344 229.800781 160.476562 211.761719 170.960938 201.210938 C 181.449219 190.660156 199.378906 198.128906 199.378906 213.054688 C 199.378906 222.304688 191.925781 229.800781 182.734375 229.800781 Z M 207.703125 166.777344 L 157.761719 166.777344 L 157.761719 141.871094 C 157.761719 129.308594 157.761719 112.558594 182.734375 112.558594 C 207.703125 112.558594 207.703125 129.308594 207.703125 141.871094 Z M 207.703125 166.777344 "),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"fill",a[0]),c&1&&v(s,"fill",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function h0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class c0 extends Re{constructor(e){super(),Ee(this,e,h0,d0,Ie,{color:0})}}function p0(n){let e,t,i,s,o,r,u=[n[1],{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"},{id:"svg7"},{"sodipodi:docname":"note.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("defs"),i=B("path"),s=B("path"),D(t,"id","defs11"),D(i,"id","path2"),D(i,"class","selectable"),v(i,"fill","#c60000"),v(i,"fill-opacity","1"),v(i,"fill-rule","nonzero"),v(i,"stroke","#950000"),v(i,"stroke-width","5"),v(i,"stroke-miterlimit","4"),v(i,"stroke-dasharray","none"),v(i,"stroke-opacity","1"),D(i,"d","M 135.55664,1.9765625 C 74.593645,2.1922681 20.084472,43.910648 7.2773438,104.37109 4.936895,115.41704 4.1435422,126.42334 4.7265625,137.18555 2.5821353,205.89923 56.815085,269.30423 107.08203,335.96094 c 12.32031,15.26562 30.35156,34.07422 30.35156,34.07422 l 27.64453,-32.61328 C 227.98632,255.40992 319.84389,135.74148 238.04492,49.080078 219.42005,26.853995 193.07863,10.556457 161.97656,4.4921875 153.10693,2.7626953 144.26564,1.9457474 135.55664,1.9765625 Z"),D(s,"id","path5936"),v(s,"color",n[0]),v(s,"fill","#fffffd"),v(s,"stroke",n[0]),v(s,"stroke-width","5"),v(s,"stroke-linecap","round"),v(s,"stroke-opacity","1"),v(s,"fill-opacity","1"),v(s,"stroke-miterlimit","4"),v(s,"stroke-dasharray","none"),D(s,"d","m 202.54602,49.933374 a 19.846225,19.846225 0 0 0 -14.03347,5.812789 L 137.36365,106.89506 86.838795,56.370195 a 19.845967,19.845967 0 0 0 -14.033473,-5.812787 19.845967,19.845967 0 0 0 -14.033471,5.812787 19.845967,19.845967 0 0 0 0,28.066944 l 50.524859,50.524871 -50.328371,50.32837 a 19.846225,19.846225 0 0 0 0,28.06695 19.846225,19.846225 0 0 0 28.066944,0 l 50.328367,-50.32838 50.95423,50.95424 a 19.845967,19.845967 0 0 0 28.06694,0 19.845967,19.845967 0 0 0 0,-28.06695 L 165.4306,134.96201 216.57949,83.813106 a 19.846225,19.846225 0 0 0 0,-28.066943 19.846225,19.846225 0 0 0 -14.03347,-5.812789 z"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(e,i),H(e,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(s,"color",a[0]),c&1&&v(s,"stroke",a[0]),ie(e,l=Le(u,[c&2&&a[1],{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"},{id:"svg7"},{"sodipodi:docname":"note.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function g0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class f0 extends Re{constructor(e){super(),Ee(this,e,g0,p0,Ie,{color:0})}}function m0(n){let e,t,i,s,o,r,u=[n[1],{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"},{id:"svg7"},{"sodipodi:docname":"resolved.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("defs"),i=B("path"),s=B("path"),D(t,"id","defs11"),D(i,"id","path2"),D(i,"class","selectable"),v(i,"fill","#00c82e"),v(i,"fill-opacity","1"),v(i,"fill-rule","nonzero"),v(i,"stroke","#40ff00"),v(i,"stroke-width","5"),v(i,"stroke-miterlimit","4"),v(i,"stroke-dasharray","none"),v(i,"stroke-opacity","1"),D(i,"d","M 135.55664,1.9765625 C 74.593645,2.1922681 20.084472,43.910648 7.2773438,104.37109 4.936895,115.41704 4.1435422,126.42334 4.7265625,137.18555 2.5821353,205.89923 56.815085,269.30423 107.08203,335.96094 c 12.32031,15.26562 30.35156,34.07422 30.35156,34.07422 l 27.64453,-32.61328 C 227.98632,255.40992 319.84389,135.74148 238.04492,49.080078 219.42005,26.853995 193.07863,10.556457 161.97656,4.4921875 153.10693,2.7626953 144.26564,1.9457474 135.55664,1.9765625 Z"),D(i,"sodipodi:nodetypes","scccccccs"),v(s,"color",n[0]),v(s,"fill","#ffffff"),v(s,"fill-opacity","1"),v(s,"stroke",n[0]),v(s,"stroke-width","3.52437"),v(s,"stroke-linecap","round"),v(s,"stroke-linejoin","round"),v(s,"stroke-miterlimit","4"),v(s,"stroke-dasharray","none"),v(s,"stroke-opacity","1"),D(s,"d","m 216.35763,81.457377 c -6.31364,-1.014444 -12.65279,1.657101 -16.62944,7.00824 L 117.3564,199.32492 69.393978,152.33285 c -7.532586,-9.1813 -20.4662,-9.07329 -27.311559,-1.91781 -7.087039,7.56459 -8.507731,17.24412 -0.648456,25.76692 l 61.942427,65.80658 c 7.15464,9.62634 20.80539,9.62634 27.96003,0 l 96.3518,-129.67383 c 6.14683,-8.27231 4.87072,-20.317183 -2.85026,-26.902908 -2.45389,-2.092661 -5.37864,-3.456485 -8.48033,-3.954425 z"),D(s,"id","path3639"),D(s,"sodipodi:nodetypes","ccccccccccc"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(e,i),H(e,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(s,"color",a[0]),c&1&&v(s,"stroke",a[0]),ie(e,l=Le(u,[c&2&&a[1],{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"},{id:"svg7"},{"sodipodi:docname":"resolved.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function y0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class b0 extends Re{constructor(e){super(),Ee(this,e,y0,m0,Ie,{color:0})}}function w0(n){let e,t,i,s,o,r=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],u={};for(let l=0;l<r.length;l+=1)u=V(u,r[l]);return{c(){e=B("svg"),t=B("g"),i=B("path"),v(i,"fill","none",1),v(i,"stroke-width","10"),v(i,"stroke-linecap","butt"),v(i,"stroke-linejoin","miter"),v(i,"stroke",n[0]),v(i,"stroke-opacity","1"),v(i,"stroke-miterlimit","4"),D(i,"d","M 95 50 C 95 74.853125 74.853125 95 50 95 C 25.146875 95 5 74.853125 5 50 C 5 25.146875 25.146875 5 50 5 C 74.853125 5 95 25.146875 95 50 Z M 95 50 "),D(i,"transform","matrix(3.75,0,0,3.75,0,0)"),D(t,"id","surface1"),ie(e,u)},m(l,a){xe(l,e,a),H(e,t),H(t,i),s||(o=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],s=!0)},p(l,[a]){a&1&&v(i,"stroke",l[0]),ie(e,u=Le(r,[a&2&&l[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(l){l&&Ae(e),s=!1,Pe(o)}}}function v0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class _0 extends Re{constructor(e){super(),Ee(this,e,v0,w0,Ie,{color:0})}}function T0(n){let e,t,i,s,o,r,u,l,a,c=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}],d={};for(let m=0;m<c.length;m+=1)d=V(d,c[m]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),o=B("path"),r=B("path"),u=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","1"),D(i,"d","M 101.5625 46.875 C 71.875 46.875 46.875 71.875 46.875 101.5625 C 46.875 131.25 71.875 156.25 101.5625 156.25 C 131.25 156.25 156.25 131.25 156.25 101.5625 C 156.25 71.875 131.25 46.875 101.5625 46.875 Z M 101.5625 125 C 89.0625 125 78.125 114.0625 78.125 101.5625 C 78.125 89.0625 89.0625 78.125 101.5625 78.125 C 114.0625 78.125 125 89.0625 125 101.5625 C 125 114.0625 114.0625 125 101.5625 125 Z M 101.5625 125 "),v(s,"stroke","none"),v(s,"fill-rule","nonzero"),v(s,"fill",n[0]),v(s,"fill-opacity","1"),D(s,"d","M 101.5625 218.75 C 71.875 218.75 46.875 243.75 46.875 273.4375 C 46.875 303.125 71.875 328.125 101.5625 328.125 C 131.25 328.125 156.25 303.125 156.25 273.4375 C 156.25 243.75 131.25 218.75 101.5625 218.75 Z M 101.5625 296.875 C 89.0625 296.875 78.125 285.9375 78.125 273.4375 C 78.125 260.9375 89.0625 250 101.5625 250 C 114.0625 250 125 260.9375 125 273.4375 C 125 285.9375 114.0625 296.875 101.5625 296.875 Z M 101.5625 296.875 "),v(o,"stroke","none"),v(o,"fill-rule","nonzero"),v(o,"fill",n[0]),v(o,"fill-opacity","1"),D(o,"d","M 210.9375 148.4375 L 242.1875 179.6875 L 343.75 78.125 L 281.25 78.125 Z M 210.9375 148.4375 "),v(r,"stroke","none"),v(r,"fill-rule","nonzero"),v(r,"fill",n[0]),v(r,"fill-opacity","1"),D(r,"d","M 168.75 190.625 L 200 221.875 L 151.5625 270.3125 L 125 234.375 Z M 168.75 190.625 "),v(u,"stroke","none"),v(u,"fill-rule","nonzero"),v(u,"fill",n[0]),v(u,"fill-opacity","1"),D(u,"d","M 142.1875 110.9375 L 109.375 140.625 L 281.25 312.5 L 343.75 312.5 Z M 195.3125 203.125 C 190.625 203.125 187.5 200 187.5 195.3125 C 187.5 190.625 190.625 187.5 195.3125 187.5 C 200 187.5 203.125 190.625 203.125 195.3125 C 203.125 200 200 203.125 195.3125 203.125 Z M 195.3125 203.125 "),D(t,"id","surface1"),ie(e,d)},m(m,f){xe(m,e,f),H(e,t),H(t,i),H(t,s),H(t,o),H(t,r),H(t,u),l||(a=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],l=!0)},p(m,[f]){f&1&&v(i,"fill",m[0]),f&1&&v(s,"fill",m[0]),f&1&&v(o,"fill",m[0]),f&1&&v(r,"fill",m[0]),f&1&&v(u,"fill",m[0]),ie(e,d=Le(c,[f&2&&m[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"375px"},{height:"375px"},{viewBox:"0 0 375 375"},{version:"1.1"}]))},i:X,o:X,d(m){m&&Ae(e),l=!1,Pe(a)}}}function C0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class x0 extends Re{constructor(e){super(),Ee(this,e,C0,T0,Ie,{color:0})}}function A0(n){let e,t,i,s,o,r,u=[n[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"}],l={};for(let a=0;a<u.length;a+=1)l=V(l,u[a]);return{c(){e=B("svg"),t=B("g"),i=B("path"),s=B("path"),v(i,"stroke","none"),v(i,"fill-rule","nonzero"),v(i,"fill",n[0]),v(i,"fill-opacity","0.988235"),D(i,"class","selectable"),D(i,"d","M 137.433594 370.035156 C 136.605469 368.027344 119.402344 351.226562 107.082031 335.960938 C 34.097656 239.179688 -47.273438 149.257812 47.746094 39.980469 C 89.816406 -0.617188 141.691406 -2.933594 195.023438 15.992188 C 345.191406 102.777344 236.46875 244.351562 165.078125 337.421875 Z M 182.605469 221.6875 C 282.765625 150.148438 205.328125 12.386719 95.28125 58.183594 C 63.148438 75.296875 47.203125 105.070312 46.644531 140.195312 C 45.109375 174.359375 63.277344 202.929688 92.066406 220.429688 C 112.707031 231.652344 121.78125 233.675781 145.152344 232.285156 C 160.300781 231.386719 169.027344 228.914062 182.605469 221.6875 Z M 182.605469 221.6875 "),v(s,"stroke","none"),v(s,"fill-rule","nonzero"),v(s,"fill",n[0]),v(s,"fill-opacity","0.988235"),D(s,"d","M 108.722656 255.84375 C 37.953125 241.132812 -7.363281 173.46875 7.277344 104.371094 C 21.914062 35.273438 91.019531 -9.34375 161.976562 4.492188 C 232.9375 18.328125 279.128906 85.421875 265.390625 154.699219 C 251.65625 223.972656 183.136719 269.4375 112.003906 256.484375 "),D(t,"id","surface1"),ie(e,l)},m(a,c){xe(a,e,c),H(e,t),H(t,i),H(t,s),o||(r=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],o=!0)},p(a,[c]){c&1&&v(i,"fill",a[0]),c&1&&v(s,"fill",a[0]),ie(e,l=Le(u,[c&2&&a[1],{xmlns:"http://www.w3.org/2000/svg"},{width:"275px"},{height:"374px"},{viewBox:"0 0 275 374"},{version:"1.1"}]))},i:X,o:X,d(a){a&&Ae(e),o=!1,Pe(r)}}}function k0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class q0 extends Re{constructor(e){super(),Ee(this,e,k0,A0,Ie,{color:0})}}function $0(n){let e,t,i,s,o,r,u,l,a,c,d,m=[n[0],{width:"400"},{height:"400"},{viewBox:"0 0 400 400"},{version:"1.1"},{id:"svg11"},{"sodipodi:docname":"teardrop_with_hole_green.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}],f={};for(let y=0;y<m.length;y+=1)f=V(f,m[y]);return{c(){e=B("svg"),t=B("defs"),i=B("sodipodi:namedview"),s=B("sodipodi:guide"),o=B("g"),r=B("path"),u=B("path"),l=B("path"),a=B("path"),D(t,"id","defs15"),D(s,"position","199.99891,418.65297"),D(s,"orientation","1,0"),D(s,"id","guide832"),D(i,"id","namedview13"),D(i,"pagecolor","#505050"),D(i,"bordercolor","#eeeeee"),D(i,"borderopacity","1"),D(i,"inkscape:pageshadow","0"),D(i,"inkscape:pageopacity","0"),D(i,"inkscape:pagecheckerboard","0"),D(i,"showgrid","false"),D(i,"width","400px"),D(i,"showguides","true"),D(i,"inkscape:guide-bbox","true"),D(i,"inkscape:zoom","1.8002433"),D(i,"inkscape:cx","161.08934"),D(i,"inkscape:cy","210.5271"),D(i,"inkscape:current-layer","svg11"),v(r,"fill","#007f00"),v(r,"fill-opacity","0.988235"),v(r,"fill-rule","nonzero"),v(r,"stroke","none"),D(r,"d","m 137.43359,370.03516 c -0.82812,-2.00782 -18.03125,-18.8086 -30.35156,-34.07422 C 34.097656,239.17969 -47.273438,149.25781 47.746094,39.980469 89.816406,-0.617188 141.69141,-2.933594 195.02344,15.992188 345.19141,102.77734 236.46875,244.35156 165.07812,337.42187 Z M 182.60547,221.6875 C 282.76562,150.14844 205.32812,12.386719 95.28125,58.183594 63.148438,75.296875 47.203125,105.07031 46.644531,140.19531 c -1.535156,34.16406 16.632813,62.73438 45.421875,80.23438 20.640624,11.22265 29.714844,13.24609 53.085934,11.85547 15.14844,-0.89844 23.875,-3.3711 37.45313,-10.59766 z m 0,0"),D(r,"id","path2"),v(u,"fill","#007f00"),v(u,"fill-opacity","0.988235"),v(u,"fill-rule","nonzero"),v(u,"stroke","none"),D(u,"d","M 108.72266,255.84375 C 37.953125,241.13281 -7.363281,173.46875 7.277344,104.37109 21.914062,35.273438 91.019531,-9.34375 161.97656,4.492188 232.9375,18.328125 279.12891,85.421875 265.39062,154.69922 251.65625,223.97266 183.13672,269.4375 112.00391,256.48437"),D(u,"id","path4"),v(l,"fill","#009400"),v(l,"fill-opacity","1"),v(l,"fill-rule","nonzero"),v(l,"stroke","none"),D(l,"d","M 117.33203,237.78516 C 64.75,226.24609 31.078125,173.16797 41.957031,118.96875 52.835938,64.765625 104.17969,29.769531 156.89844,40.621094 c 52.72265,10.851562 87.04297,63.484376 76.83593,117.824216 -10.20703,54.33985 -61.11328,90.00391 -113.96484,79.84375"),D(l,"id","path6"),v(a,"fill","#ffffff"),v(a,"fill-opacity","1"),v(a,"fill-rule","nonzero"),v(a,"stroke","none"),D(a,"d","M 122.92188,202.85156 C 88.144531,195.28125 65.878906,160.48437 73.074219,124.94531 80.265625,89.40625 114.22266,66.457031 149.08594,73.574219 c 34.86718,7.117187 57.5664,41.625001 50.8164,77.253901 -6.75,35.62891 -40.41797,59.01563 -75.37109,52.35157"),D(a,"id","path8"),D(o,"id","surface1"),D(o,"transform","matrix(1.0785793,0,0,1.0785793,51.765885,-0.40531133)"),ie(e,f)},m(y,g){xe(y,e,g),H(e,t),H(e,i),H(i,s),H(e,o),H(o,r),H(o,u),H(o,l),H(o,a),c||(d=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],c=!0)},p(y,[g]){ie(e,f=Le(m,[g&1&&y[0],{width:"400"},{height:"400"},{viewBox:"0 0 400 400"},{version:"1.1"},{id:"svg11"},{"sodipodi:docname":"teardrop_with_hole_green.svg"},{"inkscape:version":"1.1.1 (1:1.1+202109281949+c3084ef5ed)"},{"xmlns:inkscape":"http://www.inkscape.org/namespaces/inkscape"},{"xmlns:sodipodi":"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"},{xmlns:"http://www.w3.org/2000/svg"},{"xmlns:svg":"http://www.w3.org/2000/svg"}]))},i:X,o:X,d(y){y&&Ae(e),c=!1,Pe(d)}}}function S0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(0,s=se(e,i)),"color"in d&&t(1,o=d.color)},[s,o,r,u,l,a,c]}class D0 extends Re{constructor(e){super(),Ee(this,e,S0,$0,Ie,{color:1})}}function R0(n){let e,t,i,s,o=[n[1],{style:"fill:none"},{version:"1.1"},{viewBox:"0 0 100 100"},{height:"100"},{width:"100"}],r={};for(let u=0;u<o.length;u+=1)r=V(r,o[u]);return{c(){e=B("svg"),t=B("polygon"),v(t,"fill",n[0]),v(t,"fill-opacity","1"),D(t,"points","50,0 0,100 100,100"),ie(e,r)},m(u,l){xe(u,e,l),H(e,t),i||(s=[R(e,"click",n[2]),R(e,"mouseover",n[3]),R(e,"mouseenter",n[4]),R(e,"mouseleave",n[5]),R(e,"keydown",n[6])],i=!0)},p(u,[l]){l&1&&v(t,"fill",u[0]),ie(e,r=Le(o,[l&2&&u[1],{style:"fill:none"},{version:"1.1"},{viewBox:"0 0 100 100"},{height:"100"},{width:"100"}]))},i:X,o:X,d(u){u&&Ae(e),i=!1,Pe(s)}}}function E0(n,e,t){const i=["color"];let s=se(e,i),{color:o="#000000"}=e;function r(d){E.call(this,n,d)}function u(d){E.call(this,n,d)}function l(d){E.call(this,n,d)}function a(d){E.call(this,n,d)}function c(d){E.call(this,n,d)}return n.$$set=d=>{e=V(V({},e),We(d)),t(1,s=se(e,i)),"color"in d&&t(0,o=d.color)},[o,s,r,u,l,a,c]}class I0 extends Re{constructor(e){super(),Ee(this,e,E0,R0,Ie,{color:0})}}function hl(n){let e,t,i,s;const o=[ey,X0,Q0,Z0,K0,Y0,z0,G0,U0,H0,V0,J0,W0,P0,L0,M0,N0,B0,O0,j0,F0],r=[];function u(l,a){return l[0]==="pin"?0:l[0]==="square"?1:l[0]==="circle"?2:l[0]==="checkmark"?3:l[0]==="clock"?4:l[0]==="close"?5:l[0]==="crosshair"?6:l[0]==="help"?7:l[0]==="home"?8:l[0]==="invalid"?9:l[0]==="location"?10:l[0]==="location_empty"?11:l[0]==="location_locked"?12:l[0]==="note"?13:l[0]==="resolved"?14:l[0]==="ring"?15:l[0]==="scissors"?16:l[0]==="teardrop"?17:l[0]==="teardrop_with_hole_green"?18:l[0]==="triangle"?19:20}return t=u(n),i=r[t]=o[t](n),{c(){e=Ko("div"),i.c(),D(e,"class","absolute top-0 left-0 h-full w-full")},m(l,a){xe(l,e,a),r[t].m(e,null),s=!0},p(l,a){let c=t;t=u(l),t===c?r[t].p(l,a):(As(),ye(r[c],1,1,()=>{r[c]=null}),ks(),i=r[t],i?i.p(l,a):(i=r[t]=o[t](l),i.c()),pe(i,1),i.m(e,null))},i(l){s||(pe(i),s=!0)},o(l){ye(i),s=!1},d(l){l&&Ae(e),r[t].d()}}}function F0(n){let e,t;return{c(){e=Ko("img"),D(e,"class","h-full w-full"),pa(e.src,t=n[0])||D(e,"src",t)},m(i,s){xe(i,e,s)},p(i,s){s&1&&!pa(e.src,t=i[0])&&D(e,"src",t)},i:X,o:X,d(i){i&&Ae(e)}}}function j0(n){let e,t;return e=new I0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function O0(n){let e,t;return e=new D0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function B0(n){let e,t;return e=new q0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function N0(n){let e,t;return e=new x0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function M0(n){let e,t;return e=new _0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function L0(n){let e,t;return e=new b0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function P0(n){let e,t;return e=new f0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function W0(n){let e,t;return e=new c0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function J0(n){let e,t;return e=new u0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function V0(n){let e,t;return e=new r0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function H0(n){let e,t;return e=new i0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function U0(n){let e,t;return e=new e0({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function G0(n){let e,t;return e=new Zm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function z0(n){let e,t;return e=new zm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function Y0(n){let e,t;return e=new Hm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function K0(n){let e,t;return e=new Wm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function Z0(n){let e,t;return e=new Mm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function Q0(n){let e,t;return e=new Om({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function X0(n){let e,t;return e=new Im({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function ey(n){let e,t;return e=new Dm({props:{color:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.color=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function ty(n){let e,t,i=n[0]&&hl(n);return{c(){i&&i.c(),e=Sl()},m(s,o){i&&i.m(s,o),xe(s,e,o),t=!0},p(s,[o]){s[0]?i?(i.p(s,o),o&1&&pe(i,1)):(i=hl(s),i.c(),pe(i,1),i.m(e.parentNode,e)):i&&(As(),ye(i,1,1,()=>{i=null}),ks())},i(s){t||(pe(i),t=!0)},o(s){ye(i),t=!1},d(s){i&&i.d(s),s&&Ae(e)}}}function ny(n,e,t){let{icon:i}=e,{color:s}=e;return n.$$set=o=>{"icon"in o&&t(0,i=o.icon),"color"in o&&t(1,s=o.color)},[i,s]}class iy extends Re{constructor(e){super(),Ee(this,e,ny,ty,Ie,{icon:0,color:1})}}function sy(n){let e,t;return e=new iy({props:{icon:n[1],color:n[2]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,[s]){const o={};s&2&&(o.icon=i[1]),s&4&&(o.color=i[2]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function oy(n,e,t){var c,d,m,f,y;let i,s=X,o=()=>(s(),s=Jh(u,g=>t(4,i=g)),u);n.$$.on_destroy.push(()=>s());let{icon:r}=e,{tags:u}=e;o();let l=(m=(d=(c=r.icon)==null?void 0:c.GetRenderValue(i))==null?void 0:d.Subs(i))==null?void 0:m.txt,a=((y=(f=r.color)==null?void 0:f.GetRenderValue(u))==null?void 0:y.txt)??"#000000";return n.$$set=g=>{"icon"in g&&t(3,r=g.icon),"tags"in g&&o(t(0,u=g.tags))},n.$$.update=()=>{var g,x,k,A,_;n.$$.dirty&24&&t(1,l=(k=(x=(g=r.icon)==null?void 0:g.GetRenderValue(i))==null?void 0:x.Subs(i))==null?void 0:k.txt),n.$$.dirty&24&&t(2,a=((_=(A=r.color)==null?void 0:A.GetRenderValue(i))==null?void 0:_.txt)??"#000000")},[u,l,a,r,i]}class ry extends Re{constructor(e){super(),Ee(this,e,oy,sy,Ie,{icon:3,tags:0})}}function cl(n,e,t){const i=n.slice();return i[5]=e[t],i}function pl(n){let e,t,i,s=n[3],o=[];for(let u=0;u<s.length;u+=1)o[u]=gl(cl(n,s,u));const r=u=>ye(o[u],1,1,()=>{o[u]=null});return{c(){e=Ko("div");for(let u=0;u<o.length;u+=1)o[u].c();D(e,"class","relative h-full w-full"),D(e,"style",t=`transform: rotate(${n[2]})`)},m(u,l){xe(u,e,l);for(let a=0;a<o.length;a+=1)o[a]&&o[a].m(e,null);i=!0},p(u,l){if(l&10){s=u[3];let a;for(a=0;a<s.length;a+=1){const c=cl(u,s,a);o[a]?(o[a].p(c,l),pe(o[a],1)):(o[a]=gl(c),o[a].c(),pe(o[a],1),o[a].m(e,null))}for(As(),a=s.length;a<o.length;a+=1)r(a);ks()}(!i||l&4&&t!==(t=`transform: rotate(${u[2]})`))&&D(e,"style",t)},i(u){if(!i){for(let l=0;l<s.length;l+=1)pe(o[l]);i=!0}},o(u){o=o.filter(Boolean);for(let l=0;l<o.length;l+=1)ye(o[l]);i=!1},d(u){u&&Ae(e),Hh(o,u)}}}function gl(n){let e,t;return e=new ry({props:{icon:n[5],tags:n[1]}}),{c(){Fe(e.$$.fragment)},m(i,s){je(e,i,s),t=!0},p(i,s){const o={};s&2&&(o.tags=i[1]),e.$set(o)},i(i){t||(pe(e.$$.fragment,i),t=!0)},o(i){ye(e.$$.fragment,i),t=!1},d(i){Oe(e,i)}}}function ay(n){let e,t,i=n[0]!==void 0&&pl(n);return{c(){i&&i.c(),e=Sl()},m(s,o){i&&i.m(s,o),xe(s,e,o),t=!0},p(s,[o]){s[0]!==void 0?i?(i.p(s,o),o&1&&pe(i,1)):(i=pl(s),i.c(),pe(i,1),i.m(e.parentNode,e)):i&&(As(),ye(i,1,1,()=>{i=null}),ks())},i(s){t||(pe(i),t=!0)},o(s){ye(i),t=!1},d(s){i&&i.d(s),s&&Ae(e)}}}function ly(n,e,t){let i,{config:s}=e,o=s.marker,{tags:r}=e,u=r.map(l=>s.rotation.GetRenderValue(l).Subs(l).txt);return Vh(n,u,l=>t(2,i=l)),n.$$set=l=>{"config"in l&&t(0,s=l.config),"tags"in l&&t(1,r=l.tags)},[s,r,i,o,u]}class fl extends Re{constructor(e){super(),Ee(this,e,ly,ay,Ie,{config:0,tags:1})}}const Ir=class extends Is{constructor(t,i){super(t,i);w(this,"icon");w(this,"color");this.icon=this.tr("icon"),this.color=this.tr("color")}};let ls=Ir;w(ls,"defaultIcon",new Ir({icon:"pin",color:"#ff9939"}));const Ai=class extends Is{constructor(t,i){super(t,i);w(this,"location");w(this,"marker");w(this,"iconBadges");w(this,"iconSize");w(this,"anchor");w(this,"label");w(this,"labelCss");w(this,"labelCssClasses");w(this,"rotation");w(this,"cssDef");w(this,"cssClasses");w(this,"pitchAlignment");w(this,"rotationAlignment");if(t==null)throw`At ${i}: Invalid PointRenderingConfig: undefined or null`;if(typeof t.location=="string"&&(t.location=[t.location]),this.location=new Set(t.location),this.location.forEach(s=>{const o=Ai.allowed_location_codes;if(!o.has(s))throw`A point rendering has an invalid location: '${s}' is not one of ${Array.from(o).join(", ")} (at ${i}.location)`}),t.marker===void 0&&t.label===void 0)throw`At ${i}: A point rendering should define at least an marker or a label`;if(t.markers)throw`At ${i}.markers: detected a field 'markerS' in pointRendering. It is written as a singular case`;if(t.marker&&!Array.isArray(t.marker))throw`At ${i}.marker: the marker in a pointRendering should be an array`;if(this.location.size==0)throw"A pointRendering should have at least one 'location' to defined where it should be rendered. (At "+i+".location)";if(this.marker=(t.marker??[]).map(s=>new ls(s)),t.css!==void 0&&(this.cssDef=this.tr("css",void 0)),this.cssClasses=this.tr("cssClasses",void 0),this.labelCss=this.tr("labelCss",void 0),this.labelCssClasses=this.tr("labelCssClasses",void 0),this.iconBadges=(t.iconBadges??[]).map((s,o)=>({if:de.Tag(s.if),then:new tn(s.then,`iconBadges.${o}`)})),typeof t.iconSize=="string"){const s=t.iconSize;if(["bottom","top","center"].some(o=>s.endsWith(o)))throw"At "+i+" in : iconSize uses legacy ,bottom, center or top postfix. Use the field `anchor` instead."}this.iconSize=this.tr("iconSize","40,40",i+".iconsize"),this.anchor=this.tr("anchor","center",i+".anchor"),this.label=this.tr("label",void 0,i+".label"),this.rotation=this.tr("rotation","0",i+".rotation"),this.pitchAlignment=this.tr("pitchAlignment","canvas",i+".pitchAlignment"),this.rotationAlignment=this.tr("rotationAlignment",t.pitchAlignment==="map"?"map":"canvas",i+".rotationAlignment")}static FromHtmlSpec(t,i,s=!1){if(t===void 0)return;const o=t.match(/([a-zA-Z0-9_]*):([^;]*)/);if(o!==null&&Ke.All[o[1]+".svg"]!==void 0){const r=Ke.All[o[1]+".svg"],u=o[2],l=new Eo(r.replace(/(rgb\(0%,0%,0%\)|#000000|#000)/g,u),!0).SetStyle(i);return s&&l.SetClass("badge"),l}else if(Ke.All[t+".svg"]!==void 0){const r=Ke.All[t+".svg"],u=new Eo(r,!0).SetStyle(i);return s&&u.SetClass("badge"),u}else return new Xe(`<img src="${t}" style="${i}" />`)}static FromHtmlMulti(t,i,s,o=void 0,r){var c;if(t===void 0)return o;const u=`width:100%;height:100%;transform: rotate( ${i} );display:block;position: absolute; top: 0; left: 0`,l=((c=t.trim())==null?void 0:c.split(";"))??[],a=P.NoEmpty(l).map(d=>Ai.FromHtmlSpec(d,u,s));if(a.length===0)return o;{const d=new K(a).SetClass("relative block");return r!=null&&r.noFullWidth||d.SetClass("w-full h-full"),d}}GetBaseIcon(t){return new ga(fl,{config:this,tags:new qs(t)})}RenderIcon(t,i){var S,T,q,I,$;function s(N,G=40){const U=Number(N);return isNaN(U)?G:U}function o(N,G){var z;if(t===void 0)return G;const U=((z=N==null?void 0:N.GetRenderValue(t.data))==null?void 0:z.txt)??G;return P.SubstituteKeys(U,t.data).replace(/{.*}/g,"")}let r=0,u=0;const l=o(this.anchor,"center"),a=((S=l==null?void 0:l.trim())==null?void 0:S.toLowerCase())??"center",c=this.iconSize.GetRenderValue(t.data).Subs(t).txt??"[40,40]",[d,m]=c.split(",").map(N=>s(N));a==="left"&&(r=-d/2),a==="right"&&(r=d/2),a==="top"&&(u=m/2),a==="bottom"&&(u=-m/2);const f=new ga(fl,{config:this,tags:t}).SetClass("w-full h-full");let y;((i==null?void 0:i.includeBadges)??!0)&&(y=this.GetBadges(t,i==null?void 0:i.metatags));const g=new K([f,y]).SetClass("block relative");i!=null&&i.noSize&&g.SetClass("w-full h-full"),t.map(N=>this.iconSize.GetRenderValue(N).Subs(N).txt??"[40,40]").map(N=>{const[G,U]=N.split(",").map(z=>s(z));console.log("Setting size to",G,U),g.SetStyle(`width: ${G}px; height: ${U}px`)});const x=(q=(T=this.cssDef)==null?void 0:T.GetRenderValue(t.data))==null?void 0:q.txt,k=($=(I=this.cssClasses)==null?void 0:I.GetRenderValue(t.data))==null?void 0:$.txt;let A=this.GetLabel(t),_;return f===void 0&&A===void 0?_=void 0:f===void 0?_=new K([A]):A===void 0?_=new K([g]):_=new K([g,A]).SetStyle("flex flex-col"),x!==void 0&&(_==null||_.SetStyle(x)),k!==void 0&&(_==null||_.SetClass(k)),{html:_,iconAnchor:[r,u]}}GetBadges(t,i){if(this.iconBadges.length!==0)return new hs(t.map(s=>{const o=this.iconBadges.map(r=>{var c,d;if(!r.if.matchesProperties(s))return;const u=r.then.metacondition;if(u&&i&&!u.matchesProperties(i.data))return;const l=P.SubstituteKeys((c=r.then.GetRenderValue(s))==null?void 0:c.txt,s);if(l.startsWith("<")&&l.endsWith(">"))return new Xe(P.SubstituteKeys(l,s)).SetStyle("width: 1.5rem").SetClass("block");const a=(d=Ai.FromHtmlMulti(l,"0",!0))==null?void 0:d.SetClass("block relative");if(a!==void 0)return new K([a]).SetStyle("width: 1.5rem").SetClass("block")});return new K(o).SetClass("inline-flex h-full")},[i])).SetClass("absolute bottom-0 right-1/3 h-1/2 w-0")}GetLabel(t){var r,u,l,a;if(this.label===void 0)return;const i=(u=(r=this.labelCss)==null?void 0:r.GetRenderValue(t.data))==null?void 0:u.txt,s=(a=(l=this.labelCssClasses)==null?void 0:l.GetRenderValue(t.data))==null?void 0:a.txt,o=this;return new hs(t.map(c=>{var m,f,y,g;const d=(g=(y=(f=(m=o.label)==null?void 0:m.GetRenderValue(c))==null?void 0:f.Subs(c))==null?void 0:y.SetClass("block center absolute text-center "))==null?void 0:g.SetClass(s);return i&&d.SetStyle(i),new K([d]).SetClass("flex flex-col items-center")}))}};let us=Ai;w(us,"allowed_location_codes",new Set(["point","centroid","start","end","projected_centerpoint"]));class uy extends Is{constructor(t,i){super(t,i);w(this,"color");w(this,"width");w(this,"dashArray");w(this,"lineCap");w(this,"offset");w(this,"fill");w(this,"fillColor");w(this,"leftRightSensitive");this.color=this.tr("color","#0000ff"),this.width=this.tr("width","7"),this.dashArray=this.tr("dashArray",""),this.lineCap=this.tr("lineCap","round"),this.fill=this.tr("fill",void 0),this.fillColor=this.tr("fillColor",void 0),typeof t.offset=="string"&&(t.offset=parseFloat(t.offset)),this.leftRightSensitive=t.offset!==void 0&&t.offset!==0,this.offset=this.tr("offset","0")}GenerateLeafletStyle(t){function i(c,d){const m=Number(s(c,""+d)),f=Number(m);return isNaN(f)?d:f}function s(c,d){var f,y;if(t===void 0||c===void 0)return d;const m=((f=c==null?void 0:c.GetRenderValue(t))==null?void 0:f.txt)??d;return m===""?d:(y=P.SubstituteKeys(m,t))==null?void 0:y.replace(/{.*}/g,"")}const o=s(this.dashArray);let r=s(this.color,"#00f");r.startsWith("--")&&(r=getComputedStyle(document.body).getPropertyValue("--catch-detail-color"));const u={color:r,dashArray:o,weight:i(this.width,5),lineCap:s(this.lineCap),offset:i(this.offset,0)},l=s(this.fill,void 0);l!==void 0&&l!==""&&(u.fill=l==="yes"||l==="true");const a=s(this.fillColor,void 0);return a!==void 0&&(u.fillColor=a),u}}class mr{constructor(e,t,i,s,o=!0){w(this,"_filter");w(this,"_interpreterUrl");w(this,"_timeout");w(this,"_extraScripts");w(this,"_includeMeta");this._timeout=s??new qs(90),this._interpreterUrl=i;const r=e.optimize();if(r===!0||r===!1)throw"Invalid filter: optimizes to true of false";this._filter=r,this._extraScripts=t,this._includeMeta=o}async queryGeoJson(e){const t="[bbox:"+e.getSouth()+","+e.getWest()+","+e.getNorth()+","+e.getEast()+"]",i=this.buildScript(t);return await this.ExecuteQuery(i)}buildUrl(e){return`${this._interpreterUrl}?data=${encodeURIComponent(e)}`}async ExecuteQuery(e){const t=await P.downloadJson(this.buildUrl(e));if(t.elements.length===0&&t.remark!==void 0)throw console.warn("Timeout or other runtime error while querying overpass",t.remark),`Runtime error (timeout or similar)${t.remark}`;t.elements.length===0&&console.warn("No features for",t);const i=ec(t),s=new Date(t.osm3s.timestamp_osm_base);return[i,s]}buildScript(e,t="",i=!1){const s=this._filter.asOverpass();let o="";for(const r of s)i&&(o+="    "),o+="nwr"+r+t+";",i&&(o+=`
`);for(const r of this._extraScripts)o+="("+r+");";return`[out:json][timeout:${this._timeout.data}]${e};(${o});out body;${this._includeMeta?"out meta;":""}>;out skel qt;`}buildScriptInArea(e,t=!1){const i=this._filter.asOverpass();let s="";for(const r of i)t&&(s+="    "),s+="nwr"+r+"(area.searchArea);",t&&(s+=`
`);for(const r of this._extraScripts)s+="("+r+");";let o=e.osm_id;return e.osm_type==="relation"&&(o+=36e8),`[out:json][timeout:${this._timeout.data}];
        area(id:${o})->.searchArea;
        (${s});
        out body;${this._includeMeta?"out meta;":""}>;out skel qt;`}buildQuery(e){return this.buildUrl(this.buildScript(e))}static AsOverpassTurboLink(e){const i=new mr(e,[],"",void 0,!1).buildScript("","({{bbox}})",!0);return"http://overpass-turbo.eu/?Q="+encodeURIComponent(i)}}class dy extends Is{constructor(t,i,s=!0){var u,l,a,c,d,m;i=i+"."+t.id;const o="layers:"+t.id;super(t,i);w(this,"id");w(this,"name");w(this,"description");w(this,"source");w(this,"calculatedTags");w(this,"doNotDownload");w(this,"passAllFeatures");w(this,"isShown");w(this,"minzoom");w(this,"minzoomVisible");w(this,"maxzoom");w(this,"title");w(this,"titleIcons");w(this,"mapRendering");w(this,"lineRendering");w(this,"units");w(this,"deletion");w(this,"allowMove");w(this,"allowSplit");w(this,"shownByDefault");w(this,"maxAgeOfCache");w(this,"presets");w(this,"tagRenderings");w(this,"filters");w(this,"filterIsSameAs");w(this,"forceLoad");w(this,"syncSelection");w(this,"_needsFullNodeDatabase");w(this,"popupInFloatover");if(this.id=t.id,(t.source==="special"||t.source==="special:library")&&(this.source=null),this.syncSelection=t.syncSelection??"no",typeof t.source!="string"&&(this.maxAgeOfCache=t.source.maxCacheAge??24*60*60*30,this.source=new lc({osmTags:de.Tag(t.source.osmTags,i+"source.osmTags"),geojsonSource:t.source.geoJson,geojsonSourceLevel:t.source.geoJsonZoomLevel,overpassScript:t.source.overpassScript,isOsmCache:t.source.isOsmCache,mercatorCrs:t.source.mercatorCrs,idKey:t.source.idKey},t.id)),this.allowSplit=t.allowSplit??!1,this.name=J.T(t.name,o+".name"),t.units!==void 0&&!Array.isArray(t.units))throw"At "+i+".units: the 'units'-section should be a list; you probably have an object there";if(this.units=(t.units??[]).map((f,y)=>fr.fromJson(f,`${i}.unit[${y}]`)),t.description!==void 0&&Object.keys(t.description).length===0&&(t.description=void 0),this.description=J.T(t.description,o+".description"),this.calculatedTags=void 0,t.calculatedTags!==void 0){s||console.warn(`Unofficial theme ${this.id} with custom javascript! This is a security risk`),this.calculatedTags=[];for(const f of t.calculatedTags){const y=f.indexOf("=");let g=f.substring(0,y).trim();const x="[a-z_][a-z0-9:]*";if(g.match(x)===null)throw"At "+i+" invalid key for calculated tag: "+g+"; it should match "+x;const k=g.endsWith(":");k&&(g=g.substr(0,g.length-1));const A=f.substring(y+1);this.calculatedTags.push([g,A,k])}}if(this.doNotDownload=t.doNotDownload??!1,this.passAllFeatures=t.passAllFeatures??!1,this.minzoom=t.minzoom??0,this._needsFullNodeDatabase=t.fullNodeDatabase??!1,t.minZoom!==void 0)throw"At "+i+": minzoom is written all lowercase";if(this.minzoomVisible=t.minzoomVisible??this.minzoom,this.shownByDefault=t.shownByDefault??!0,this.forceLoad=t.forceLoad??!1,t.presets===null&&(t.presets=void 0),t.presets!==void 0&&((u=t.presets)==null?void 0:u.map)===void 0)throw"Presets should be a list of items (at "+i+")";if(this.presets=(t.presets??[]).map((f,y)=>{let g={preferredBackground:["photo"],snapToLayers:void 0,maxSnapDistance:void 0};if(f.preciseInput!==void 0)throw"Layer "+this.id+" still uses the old 'preciseInput'-field. For snapping to layers, use 'snapToLayer' instead";if(f.snapToLayer!==void 0)g={snapToLayers:f.snapToLayer,maxSnapDistance:f.maxSnapDistance??10};else if(f.maxSnapDistance!==void 0)throw"Layer "+this.id+" defines a maxSnapDistance, but does not include a `snapToLayer` (at "+i+")";return{title:J.T(f.title,`${o}.presets.${y}.title`),tags:f.tags.map(k=>de.SimpleTag(k)),description:J.T(f.description,`${o}.presets.${y}.description`),preciseInput:g,exampleImages:f.exampleImages}}),t.pointRendering===void 0&&t.lineRendering===void 0)throw"Both pointRendering and lineRendering are undefined in "+i;t.lineRendering?this.lineRendering=P.NoNull(t.lineRendering).map((f,y)=>new uy(f,`${i}[${y}]`)):this.lineRendering=[],t.pointRendering?this.mapRendering=P.NoNull(t.pointRendering).map((f,y)=>new us(f,`${i}[${y}](${this.id})`)):this.mapRendering=[];{const f=this.mapRendering.some(y=>y.location.has("centroid")||y.location.has("projected_centerpoint")||y.location.has("start")||y.location.has("end"));if(t.pointRendering!==null&&t.lineRendering!==null&&this.lineRendering.length===0&&this.mapRendering.length===0)throw"The layer "+this.id+` does not have any maprenderings defined and will thus not show up on the map at all:
	 ${(l=this.lineRendering)==null?void 0:l.length} linerenderings and ${(a=this.mapRendering)==null?void 0:a.length} pointRenderings.
	 If this is intentional, set \`pointRendering\` and \`lineRendering\` to 'null' instead of '[]'`;if(!f&&this.lineRendering.length===0&&zh.priviliged_layers.indexOf(this.id)<0&&this.source!==null&&!((d=(c=this.source)==null?void 0:c.geojsonSource)!=null&&d.startsWith("https://api.openstreetmap.org/api/0.6/notes.json")))throw"The layer "+this.id+" might not render ways. This might result in dropped information (at "+i+")"}const r=((m=P.NoNull(t.tagRenderings))==null?void 0:m.filter(f=>typeof f!="string"&&f.builtin===void 0&&f.id===void 0&&f.rewrite===void 0))??[];if((r==null?void 0:r.length)>0&&s)throw console.error("Some tagRenderings of",this.id,"are missing an id:",r),"Missing ids in tagrenderings";this.tagRenderings=(P.NoNull(t.tagRenderings)??[]).map((f,y)=>new tn(f,this.id+".tagRenderings["+y+"]")),t.filter!==void 0&&t.filter!==null&&t.filter.sameAs!==void 0?(this.filterIsSameAs=t.filter.sameAs,this.filters=[]):this.filters=(t.filter??[]).map((f,y)=>new ys(f,`layers:${this.id}.filter.${y}`));{const f=P.Duplicates(this.filters.map(y=>y.id));if(f.length>0)throw`Some filters have a duplicate id: ${f} (at ${i}.filters)`}if(t.filters!==void 0)throw"Error in "+i+": use 'filter' instead of 'filters'";if(this.titleIcons=this.ParseTagRenderings(t.titleIcons??[],{readOnlyMode:!0}),this.title=this.tr("title",void 0,o),this.isShown=de.TagD(t.isShown,i+".isShown"),this.deletion=null,t.deletion===!0&&(t.deletion={}),t.deletion!==void 0&&t.deletion!==!1&&(this.deletion=new vi(t.deletion,`${i}.deletion`)),this.allowMove=null,t.allowMove===!1?this.allowMove=null:t.allowMove===!0?this.allowMove=new dl({},i+".allowMove"):t.allowMove!==void 0&&(this.allowMove=new dl(t.allowMove,i+".allowMove")),t.showIf!==void 0)throw"Invalid key on layerconfig "+this.id+": showIf. Did you mean 'isShown' instead?";this.popupInFloatover=t.popupInFloatover??!1}defaultIcon(){if(this.mapRendering===void 0||this.mapRendering===null)return;const t=this.mapRendering.filter(i=>i.location.has("point"))[0];if(t!==void 0)return t.GetBaseIcon(this.GetBaseTags())}GetBaseTags(){var t,i;return de.changeAsProperties(((i=(t=this.source)==null?void 0:t.osmTags)==null?void 0:i.asChange({id:"node/-1"}))??[{k:"id",v:"node/-1"}])}GenerateDocumentation(t,i,s=[],o=!1,r=!0){var g;const u=[];u.push("This layer is shown at zoomlevel **"+this.minzoom+"** and higher"),r?(o&&u.push("**This layer is included automatically in every theme. This layer might contain no points**"),this.shownByDefault===!1&&u.push("This layer is not visible by default and must be enabled in the filter by the user. "),this.title===void 0&&u.push("Elements don't have a title set and cannot be toggled nor will they show up in the dashboard. If you import this layer in your theme, override `title` to make this toggleable."),this.name===void 0&&this.shownByDefault===!1&&u.push("This layer is not visible by default and the visibility cannot be toggled, effectively resulting in a fully hidden layer. This can be useful, e.g. to calculate some metatags. If you want to render this layer (e.g. for debugging), enable it by setting the URL-parameter layer-<id>=true"),this.name===void 0&&u.push("Not visible in the layer selection by default. If you want to make this layer toggable, override `name`"),this.mapRendering.length===0&&u.push("Not rendered on the map by default. If you want to rendering this on the map, override `mapRenderings`"),((g=this.source)==null?void 0:g.geojsonSource)!==void 0&&u.push(new K([P.runningFromConsole?"<img src='../warning.svg' height='1rem'/>":void 0,"This layer is loaded from an external source, namely ",new Xe(this.source.geojsonSource).SetClass("code")]))):u.push("This layer can **not** be included in a theme. It is solely used by [special renderings](SpecialRenderings.md) showing a minimap with custom data.");let l=[];(t==null?void 0:t.length)>0&&!o&&(l=[new et("Themes using this layer",4),new Fo((t??[]).map(x=>new qt(x,"https://mapcomplete.org/"+x)))]);for(const x of s)u.push(new K(["This layer will automatically load ",new qt(x.neededLayer,"./"+x.neededLayer+".md")," into the layout as it depends on it: ",x.reason,"("+x.context+")"]));for(const x of P.Dedup((i==null?void 0:i.get(this.id))??[]))u.push(new K(["This layer is needed as dependency for layer",new qt(x,"#"+x)]));const a=P.NoNull(this.tagRenderings.map(x=>x.FreeformValues()).map(x=>{var A;if(x==null)return;const k=((A=x.values)==null?void 0:A.map(_=>qt.OsmWiki(x.key,_,!0).SetClass("mr-2")))??["_no preset options defined, or no values in them_"];return[new K([new qt(P.runningFromConsole?"<img src='https://mapcomplete.org/assets/svg/statistics.svg' height='18px'>":Ke.statistics_svg().SetClass("w-4 h-4 mr-2"),"https://taginfo.openstreetmap.org/keys/"+x.key+"#values",!0),qt.OsmWiki(x.key)]).SetClass("flex"),x.type===void 0?"Multiple choice":new qt(x.type,"../SpecialInputElements.md#"+x.type),new K(k).SetClass("flex")]}));let c;a.length>0&&(c=new K([new Xe("Warning: ").SetClass("bold"),"this quick overview is incomplete",new Kn(["attribute","type","values which are supported by this layer"],a).SetClass("zebra-table")]).SetClass("flex-col flex"));let d=new Xe("");P.runningFromConsole||(d=this.mapRendering.filter(x=>x.location.has("point")).map(x=>x.RenderIcon(new qs({id:"node/-1"}),{includeBadges:!1}).html).find(x=>x!==void 0));let m;if(this.source!==void 0)try{m=new qt("Execute on overpass",mr.AsOverpassTurboLink(this.source.osmTags.optimize()).replaceAll("(","%28").replaceAll(")","%29"))}catch{console.error("Could not generate overpasslink for "+this.id)}const f=[];this.filters.length>0&&(f.push(new et("Filters",4)),f.push(...this.filters.map(x=>x.GenerateDocs())));const y=[];if(this.source!==null){y.push(new et("Basic tags for this layer",2));const x=this.source.osmTags.optimize();if(x.and){const k=x.and;y.push("Elements must match **all** of the following expressions:",k.map((A,_)=>_+". "+A.asHumanString(!0,!1,{})).join(`
`))}else if(x.or){const k=x.or;y.push("Elements must match **any** of the following expressions:",k.map(A=>" - "+A.asHumanString(!0,!1,{})).join(`
`))}else y.push("Elements must match the expression **"+x.asHumanString(!0,!1,{})+"**");y.push(m)}else y.push("This is a special layer - data is not sourced from OpenStreetMap");return new K([new K([new et(this.id,1),d,this.description,`
`]).SetClass("flex flex-col"),new Fo(u),...l,...y,new et("Supported attributes",2),c,...this.tagRenderings.map(x=>x.GenerateDocumentation()),...f]).SetClass("flex-col").SetClass("link-underline")}CustomCodeSnippets(){return this.calculatedTags===void 0?[]:this.calculatedTags.map(t=>t[1])}AllTagRenderings(){return P.NoNull([...this.tagRenderings,...this.titleIcons,this.title])}isLeftRightSensitive(){return this.lineRendering.some(t=>t.leftRightSensitive)}}w(dy,"syncSelectionAllowed",["no","local","theme-only","global"]);const gt=class{constructor(e,t,i){w(this,"path");w(this,"operation");w(this,"messages");w(this,"_hasErrors",!1);if(this.path=t,this.operation=i??[],this.messages=e,this.path.some(s=>typeof s=="object"||s==="[object Object]"))throw"ConversionMessage: got an object as path entry:"+JSON.stringify(t);this.path.some(s=>typeof s=="number"&&s<0)&&(gt.reported||(gt.reported=!0,console.trace("ConversionContext: got a path containing a negative number")))}static construct(e,t){return new gt([],[...e],[...t])}static test(e){return new gt([],e?[e]:[],["test"])}static print(e){const t=e.context.path.filter(i=>typeof i!="string"&&typeof i!="number");t.length>0&&console.warn("Non-string value in path:",...t),e.level==="error"?console.error(gt.red("ERR "),e.context.path.join("."),gt.red(e.message),e.context.operation.join(".")):e.level==="warning"?console.warn(gt.red("<!> "),e.context.path.join("."),gt.yellow(e.message),e.context.operation.join(".")):console.log("    ",e.context.path.join("."),e.message)}static yellow(e){return"\x1B[33m"+e+"\x1B[0m"}static red(e){return"\x1B[31m"+e+"\x1B[0m"}enter(e){if(!Array.isArray(e)){if(typeof e=="number"&&e<0)throw console.trace("Invalid key"),"Invalid key: <0";return new gt(this.messages,[...this.path,e],this.operation)}return new gt(this.messages,[...this.path,...e],this.operation)}enters(...e){return this.enter(e)}inOperation(e){return new gt(this.messages,this.path,[...this.operation,e])}warn(e){this.messages.push({context:this,level:"warning",message:e})}err(e){this._hasErrors=!0,this.messages.push({context:this,level:"error",message:e})}info(e){this.messages.push({context:this,level:"information",message:e})}getAll(e){return this.messages.filter(t=>t.level===e)}hasErrors(){var t;if(this._hasErrors)return!0;const e=((t=this.messages)==null?void 0:t.find(i=>i.level==="error"))!==void 0;return this._hasErrors=e,e}debug(e){this.messages.push({context:this,level:"debug",message:e})}};let Ti=gt;w(Ti,"reported",!1);class on{constructor(e,t=[],i){w(this,"modifiedAttributes");w(this,"name");w(this,"doc");this.modifiedAttributes=t,this.doc=e+`

Modified attributes are
`+t.join(", "),this.name=i}convertStrict(e,t){t??(t=Ti.construct([],[])),t=t.inOperation(this.name);const i=this.convert(e,t);for(const s of t.messages)s.level!=="debug"&&Ti.print(s);if(t.hasErrors())throw"Detected one or more errors, stopping now";return i}andThenF(e){return new hy(this,new cy(e))}}class Fs extends on{}class hy extends on{constructor(t,i){super("Merges two steps with different types",[],`Pipe(${t.name}, ${i.name})`);w(this,"_step0");w(this,"_step1");this._step0=t,this._step1=i}convert(t,i){const s=this._step0.convert(t,i.inOperation(this._step0.name));return this._step1.convert(s,i.inOperation(this._step1.name))}}class cy extends on{constructor(t){super("Wrapper around a pure function",[],"Pure");w(this,"_f");this._f=t}convert(t,i){return this._f(t)}}class py extends on{constructor(t,i){super("Applies the given step on every element of the list",[],"OnEach("+t.name+")");w(this,"_step");w(this,"_msg");this._step=t,this._msg=i}convert(t,i){var u,l;if(t==null)return t;const s=this._step,o=[],r=i.inOperation("each");for(let a=0;a<t.length;a++){this._msg&&console.log(this._msg,`: ${a+1}/${t.length}`,((u=t[a])==null?void 0:u.id)!==void 0?(l=t[a])==null?void 0:l.id:"");const c=s.convert(t[a],r.enter(a));o.push(c)}return o}}class B2 extends Fs{constructor(t,i){super("Applies "+i.name+" onto property `"+t+"`",[t],`On(${t}, ${i.name})`);w(this,"key");w(this,"step");typeof i=="function"?this.step=i:this.step=s=>i,this.key=t}convert(t,i){const s=this.key,o=t[s];if(o==null)return t;t={...t};const r=this.step(t);return t[s]=r.convert(o,i.enter(s).inOperation("on["+s+"]")),t}}class N2 extends on{constructor(e){super(e??"Does nothing, often to swap out steps in testing",[],"Pass")}convert(e,t){return e}}class M2 extends on{constructor(t){super("Executes the given step, flattens the resulting list",[],"Concat("+t.name+")");w(this,"_step");this._step=t}convert(t,i){if(t==null)return t;const s=new py(this._step).convert(t,i.inOperation("concat"));return[].concat(...s)}}class L2 extends on{constructor(t){super("Picks the first result of the conversion step",[],"FirstOf("+t.name+")");w(this,"_conversion");this._conversion=t}convert(t,i){const s=this._conversion.convert(t,i.inOperation("firstOf"));if(s.length!==0)return s[0]}}class P2 extends Fs{constructor(t,...i){super((t??"")+"This fused pipeline of the following steps: "+i.map(s=>s.name).join(", "),P.Dedup([].concat(...i.map(s=>s.modifiedAttributes))),"Fuse("+i.map(s=>s.name).join(", ")+")");w(this,"steps");w(this,"debug",!1);this.steps=P.NoNull(i)}enableDebugging(){return this.debug=!0,this}convert(t,i){const s=[];for(let o=0;o<this.steps.length;o++){const r=new Date,u=this.steps[o];try{const l=u.convert(t,i.inOperation(u.name));if(l==null)break;t=l}catch(l){throw console.error("Step "+u.name+" failed due to ",l,l.stack),l}if(this.debug){const a=new Date().getTime()-r.getTime();s.push(a)}}return this.debug&&console.log("Time needed,",s.join(", ")),t}}class W2 extends Fs{constructor(t,i,s=!1){super("Sets "+t+" to a default value if undefined",[],"SetDefault of "+t);w(this,"value");w(this,"key");w(this,"_overrideEmptyString");this.key=t,this.value=i,this._overrideEmptyString=s}convert(t,i){if(t!==void 0)return(t[this.key]===void 0||t[this.key]===""&&this._overrideEmptyString)&&(t={...t},t[this.key]=this.value),t}}const ou=[{path:[],required:!1,hints:{},type:"object",description:`Defines the entire theme.
A theme is the collection of the layers that are shown; the intro text, the icon, ...
It more or less defines the entire experience.
Most of the fields defined here are metadata about the theme, such as its name, description, supported languages, default starting location, ...
The main chunk of the json will however be the 'layers'-array, where the details of your layers are.
General remark: a type (string | any) indicates either a fixed or a translatable string.`},{path:["id"],required:!0,hints:{typehint:"id",group:"basic",question:"What is the id of this layout?"},type:"string",description:`The id is a unique string to identify the theme
It should be
- in english
- describe the theme in a single word (or a few words)
- all lowercase and with only [a-z] or underscores (_)
This is used as hashtag in the changeset message, which will read something like "Adding data with #mapcomplete for theme #<the theme id>"
On official themes, it'll become the name of the page, e.g.
'cyclestreets' which become 'cyclestreets.html'`},{path:["title"],required:!0,hints:{group:"basic",question:"What is the title of this theme?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The human-readable title, as shown in the welcome message and the index page"},{path:["mustHaveLanguage"],required:!1,hints:{},type:"array",description:`Only used in 'generateLayerOverview': if present, every translation will be checked to make sure it is fully translated.
This must be a list of two-letter, lowercase codes which identifies the language, e.g. "en", "nl", ...`},{path:["description"],required:!0,hints:{group:"basic",question:"How would you describe this theme?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The description, as shown in the welcome message and the more-screen"},{path:["shortDescription"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A short description, showed as social description and in the 'more theme'-buttons.
Note that if this one is not defined, the first sentence of 'description' is used`},{path:["descriptionTail"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A part of the description, shown under the login-button."},{path:["icon"],required:!0,hints:{typehint:"icon",group:"basic",question:"What icon should be used to represent this theme?"},type:"string",description:`Used as logo in the more-screen and (for official themes) as favicon, webmanifest logo, ...
Either a URL or a base64 encoded value (which should include 'data:image/svg+xml;base64)`},{path:["socialImage"],required:!1,hints:{typehint:"image",group:"basic",question:"What image should be used as social image preview?",ifunset:"use the default social image of mapcomplete (or generate one based on the icon)"},type:"string",description:`This is included as og:image-tag on official themes.
See https://www.h3xed.com/web-and-internet/how-to-use-og-image-meta-tag-facebook-reddit for more information`},{path:["extraLink"],required:!1,hints:{group:"advanced",question:"should an extra help button be shown in certain circumstances?",ifunset:"show a link to open MapComplete full screen if used in an iframe"},type:"object",description:`Adds an additional button on the top-left of the application.
This can link to an arbitrary location.
For example {icon: "./assets/svg/pop-out.svg", href: 'https://mapcomplete.org/{theme}.html?lat={lat}&lon={lon}&z={zoom}, requirements: ["iframe","no-welcome-message]},`},{path:["extraLink","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown in the link button?",ifunset:"do not show an icon"},type:"string",description:""},{path:["extraLink","text"],required:!1,hints:{question:"What text should be shown in the link icon?",ifunset:"do not show a text"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Note that {lat},{lon},{zoom}, {language} and {theme} will be replaced"},{path:["extraLink","href"],required:!0,hints:{typehint:"url",question:"if clicked, what webpage should open?"},type:"string",description:"Note that {lat},{lon},{zoom}, {language} and {theme} will be replaced"},{path:["extraLink","newTab"],required:!1,hints:{question:"Should the link open in a new tab?",iftrue:"Open in a new tab",iffalse:"do not open in a new tab",ifunset:"do not open in a new tab"},type:"boolean",description:""},{path:["extraLink","requirements"],required:!1,hints:{question:"When should the extra button be shown?",suggestions:[{if:"value=iframe",then:"When shown in an iframe"},{if:"value=no-iframe",then:"When shown as stand-alone webpage"},{if:"value=welcome-message",then:"When the welcome messages are enabled"},{if:"value=iframe",then:"When the welcome messages are disabled"}]},type:"array",description:""},{path:["startZoom"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what zoomlevel should this theme open?",ifunset:"Use the default startzoom (0)"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["startLat"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what start latitude should this theme open?",ifunset:"Use 0 as start latitude"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["startLon"],required:!1,hints:{typehint:"float",group:"start_location",question:"At what start longitude should this theme open?",ifunset:"Use 0 as start longitude"},type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["defaultBackgroundId"],required:!1,hints:{},type:"string",description:"The id of the default background. BY default: vanilla OSM"},{path:["credits"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"Who helped to create this theme and should be attributed?"},{path:["hideFromOverview"],required:!1,hints:{},type:"boolean",description:"If set to true, this layout will not be shown in the overview with more themes"},{path:["layers"],required:!0,hints:{typehint:"layer[]",types:"hidden | layer | hidden",group:"layers",question:"What layers should this map show?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:[{description:"Configuration for a single layer",type:"object",properties:{id:{description:`question: What is the identifier of this layer?

This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash

type: id
group: Basic`,type:"string"},name:{description:`Used in the layer control panel to toggle a layer on and of.

ifunset: This will hide the layer in the layer control, making it not filterable and not toggleable

group: Basic
question: What is the name of this layer?`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},description:{description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.

group: Basic
question: How would you describe the features that are shown on this layer?`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},source:{description:`Question: Where should the data be fetched from?
title: Data Source

This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.

If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.

Every source _must_ define which tags _must_ be present in order to be picked up.

Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer

types: Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;
typesdefault: 0
group: Basic`,anyOf:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}]},calculatedTags:{description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
Not found...    *  "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]

The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.

If a tag has to be evaluated strictly, use ':=' instead:

[
"_some_key:=some_javascript_expression"
]

See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]

group: expert
question: What extra attributes should be calculated with javascript?`,type:"array",items:{type:"string"}},isShown:{description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.

question: What other tags should features match for being shown?
group: advanced
ifunset: all features which match the 'source'-specification are shown.`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},minzoom:{description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.

Default: 0
group: Basic
type: nat
question: At what zoom level should features of the layer be shown?
ifunset: Always load this layer, even if the entire world is in view.`,type:"number"},shownByDefault:{description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)

question: Should this layer be enabled when opening the map for the first time?
iftrue: the layer is enabled when opening the map
iffalse: the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)
default: true
group: advanced`,type:"boolean"},minzoomVisible:{description:`The zoom level at which point the data is hidden again
Default: 100 (thus: always visible

group: expert`,type:"number"},title:{description:`question: Edit the popup title
The title shown in a popup for elements of this layer.

group: title
types: use a fixed translation ; Use a dynamic tagRendering ; hidden
typesdefault: 1
type: translation
inline: {translated{value}}`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}]},popupInFloatover:{description:`Question: Should the information for this layer be shown in the sidebar or in a splash screen?

If set, open the selectedElementView in a floatOver instead of on the right.

iftrue: show the infobox in the splashscreen floating over the entire UI
iffalse: show the infobox in a sidebar on the right
group: advanced
default: sidebar`,type:"boolean"},titleIcons:{description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)

Type: icon[]
group: infobox`,anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}]},pointRendering:{description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered

group: pointrendering`,type:"array",items:{$ref:"#/definitions/default_4"}},lineRendering:{description:`Creates lines and areas to render on the map
group: linerendering`,type:"array",items:{$ref:"#/definitions/default_5"}},passAllFeatures:{description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras
iftrue: Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers
iffalse: normal behaviour: don't pass features allong
question: should this layer pass features to the next layers?
group: expert`,type:"boolean"},doNotDownload:{description:`If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.
Works well together with 'passAllFeatures', to add decoration
The opposite of \`forceLoad\`

iftrue: Do not attempt to query the data for this layer from overpass/the OSM API
iffalse: download the data as usual
group: expert
question: Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?
default: false`,type:"boolean"},forceLoad:{description:`Advanced option - might be set by the theme compiler

If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`

question: Should this layer be forcibly loaded?
ifftrue: always download this layer, even if it is disabled
iffalse: only download data for this layer when needed (default)
default: false
group: expert`,type:"boolean"},presets:{description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.

The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.

Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.

Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all

group: presets`,type:"array",items:{type:"object",properties:{title:{description:`The title - shown on the 'add-new'-button.

This should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.
This text will be inserted into \`Add {category} here\`, becoming \`Add a hydrant here\`.

Do _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!

question: What is the word to describe this object?
inline: Add {translated(value)::font-bold} here`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},tags:{description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.

question: What tag should be added to the new object?
type: simple_tag
typeHelper: uploadableOnly`,type:"array",items:{type:"string"}},description:{description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.

The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.

(The first sentence is until the first '.'-character in the description)

question: How would you describe this feature?
ifunset: No extra description is given. This can be used to further explain the preset`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},exampleImages:{description:`The URL of an example image which shows a real-life example of what such a feature might look like.

Type: image
question: What is the URL of an image showing such a feature?`,type:"array",items:{type:"string"}},snapToLayer:{description:`question: Should the created point be snapped to a line layer?

If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.
For example, this can be used to snap against \`walls_and_buildings\` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)
or to snap an obstacle (such as a bollard) to the \`cycleways_and_roads\`.

suggestions: return Array.from(layers.keys()).map(key => ({if: "value="+key, then: key+" - "+layers.get(key).description}))`,type:"array",items:{type:"string"}},maxSnapDistance:{description:`question: What is the maximum distance in the location-input that a point can be moved to be snapped to a way?

inline: a point is snapped if the location input is at most <b>{value}m</b> away from an object

If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter

ifunset: Do not snap to a layer`,type:"number"}},required:["tags","title"]}},tagRenderings:{description:`question: Edit this attribute showing piece/question

A tag rendering is a block that either shows the known value or asks a question.

Refer to the class \`TagRenderingConfigJson\` to see the possibilities.

Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override

A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.

At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together

type: tagrendering[]
group: tagrenderings`,type:"array",items:{anyOf:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}]}},filter:{description:`All the extra questions for filtering.
If a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as \`layername.filterid\` and us that one

group: filters`,anyOf:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}]},deletion:{description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.

To configure, the following values are possible:

- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)

### The delete dialog



#### Hard deletion if enough experience

A feature can only be deleted from OpenStreetMap by mapcomplete if:

- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)

In all other cases, a 'soft deletion' is used.

#### Soft deletion

A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.

Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme

##### No-delete options

In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)

The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.

group: editing
types: Use an advanced delete configuration ; boolean
iftrue: Allow deletion
iffalse: Do not allow deletion
ifunset: Do not allow deletion`,anyOf:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}]},allowMove:{description:`Indicates if a point can be moved and why.

A feature can be moved by MapComplete if:

- It is a point
- The point is _not_ part of a way or a a relation.

types: use an advanced move configuration ; boolean
group: editing
question: Is deleting a point allowed?
iftrue: Allow contributors to move a point (for accuracy or a relocation)
iffalse: Don't allow contributors to move points
ifunset: Don't allow contributors to move points (default)`,anyOf:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}]},allowSplit:{description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.

If the way is part of a relation, MapComplete will attempt to update this relation as well
question: Should the contributor be able to split ways using this layer?
iftrue: enable the 'split-roads'-component
iffalse: don't enable the split-roads componenet
ifunset: don't enable the split-roads component
group: editing`,type:"boolean"},units:{type:"array",items:{$ref:"#/definitions/default_2"}},syncSelection:{description:`If set, synchronizes whether or not this layer is enabled.

group: advanced
question: Should enabling/disabling the layer be saved (locally or in the cloud)?
suggestions: return [{if: "value=no", then: "Don't save, always revert to the default"}, {if: "value=local", then: "Save selection in local storage"}, {if: "value=theme-only", then: "Save the state in the OSM-usersettings, but apply on this theme only (default)"}, {if: "value=global", then: "Save in OSM-usersettings and toggle on _all_ themes using this layer"}]`,enum:["global","local","no","theme-only"],type:"string"},"#":{description:`Used for comments and/or to disable some checks

no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering

group: hidden`,type:"string"},fullNodeDatabase:{description:`_Set automatically by MapComplete, please ignore_

group: hidden`,type:"boolean"}},required:["id","pointRendering","source"],additionalProperties:!1},{type:"object",properties:{builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<LayerConfigJson>"},hideTagRenderingsWithLabels:{description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`,type:"array",items:{type:"string"}}},required:["builtin","override"]},{type:"string"}],description:`Every layer contains a description of which feature to display - the overpassTags which are queried.
Instead of running one query for every layer, the query is fused.
Afterwards, every layer is given the list of features.
Every layer takes away the features that match with them*, and give the leftovers to the next layers.
This implies that the _order_ of the layers is important in the case of features with the same tags;
as the later layers might never receive their feature.
*layers can also remove 'leftover'-features if the leftovers overlap with a feature in the layer itself
Note that builtin layers can be reused. Either put in the name of the layer to reuse, or use {builtin: "layername", override: ...}
The 'override'-object will be copied over the original values of the layer, which allows to change certain aspects of the layer
For example: If you would like to use layer nature reserves, but only from a specific operator (eg. Natuurpunt) you would use the following in your theme:
\`\`\`
"layer": {
 "builtin": "nature_reserve",
 "override": {"source":
 {"osmTags": {
 "+and":["operator=Natuurpunt"]
   }
  }
 }
}
\`\`\`
It's also possible to load multiple layers at once, for example, if you would like for both drinking water and benches to start at the zoomlevel at 12, you would use the following:
\`\`\`
"layer": {
 "builtin": ["benches", "drinking_water"],
 "override": {"minzoom": 12}
}
\`\`\``},{path:["layers","id"],required:!0,hints:{typehint:"id",group:"Basic",question:"What is the identifier of this layer?"},type:"string",description:`This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash`},{path:["layers","name"],required:!1,hints:{group:"Basic",question:"What is the name of this layer?",ifunset:"This will hide the layer in the layer control, making it not filterable and not toggleable"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Used in the layer control panel to toggle a layer on and of."},{path:["layers","description"],required:!1,hints:{group:"Basic",question:"How would you describe the features that are shown on this layer?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.`},{path:["layers","source"],required:!0,hints:{types:"Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;",typesdefault:"0",group:"Basic",question:"Where should the data be fetched from?",title:"Data Source"},type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.
If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.
Every source _must_ define which tags _must_ be present in order to be picked up.
Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","source","osmTags"],required:!0,hints:{typehint:"tag",question:"Which tags must be present on the feature to show it in this layer?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"Every source must set which tags have to be present in order to load the given layer."},{path:["layers","source","maxCacheAge"],required:!1,hints:{typehint:"nat",group:"expert",default:"30 days",question:"How long (in seconds) is the data allowed to remain cached until it must be refreshed?"},type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","source","geoJson"],required:!0,hints:{typehint:"url",question:"What is the URL of the geojson?"},type:"string",description:`The actual source of the data to load, if loaded via geojson.
# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source
# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer
Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","source","geoJsonZoomLevel"],required:!1,hints:{question:"If using a tiled geojson, what is the zoomlevel of the tiles?",ifunset:"This is not a tiled geojson"},type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","source","isOsmCache"],required:!1,hints:{group:"expert",question:"Is this geojson a cache of OpenStreetMap data?",iftrue:"this is based on OpenStreetMap and can thus be edited",ifunset:"This is not an OpenStreetMap cache"},type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible`},{path:["layers","source","mercatorCrs"],required:!1,hints:{question:"Does this geojson use  EPSG:900913 instead of WGS84 as projection?",iftrue:"This geojson uses EPSG:900913 instead of WGS84",ifunset:"This geojson uses WGS84 just like most geojson (default)"},type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","source","idKey"],required:!1,hints:{question:"What is the name of the attribute containing the ID of the object?",ifunset:"An id with key `id` will be assigned automatically if no attribute `id` is set",inline:"This geojson uses <b>{value}</b> as attribute to set the id"},type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","calculatedTags"],required:!1,hints:{group:"expert",question:"What extra attributes should be calculated with javascript?"},type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
Not found...    *  "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]
The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.
If a tag has to be evaluated strictly, use ':=' instead:
[
"_some_key:=some_javascript_expression"
]
See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]`},{path:["layers","isShown"],required:!1,hints:{group:"advanced",question:"What other tags should features match for being shown?",ifunset:"all features which match the 'source'-specification are shown."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.`},{path:["layers","isShown","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","isShown","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","minzoom"],required:!1,hints:{typehint:"nat",group:"Basic",default:"0",question:"At what zoom level should features of the layer be shown?",ifunset:"Always load this layer, even if the entire world is in view."},type:"number",description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.`},{path:["layers","shownByDefault"],required:!1,hints:{group:"advanced",default:"true",question:"Should this layer be enabled when opening the map for the first time?",iftrue:"the layer is enabled when opening the map",iffalse:"the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)"},type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)`},{path:["layers","minzoomVisible"],required:!1,hints:{group:"expert",default:"100 (thus: always visible"},type:"number",description:"The zoom level at which point the data is hidden again"},{path:["layers","title"],required:!1,hints:{typehint:"translation",types:"use a fixed translation ; Use a dynamic tagRendering ; hidden",typesdefault:"1",group:"title",question:"Edit the popup title",inline:"{translated{value}}"},type:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","title","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","title","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","title","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","title","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","title","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","title","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","title","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","title","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","title","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","title","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","title","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","title","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","title","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","title","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","title","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","title","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","popupInFloatover"],required:!1,hints:{group:"advanced",default:"sidebar",question:"Should the information for this layer be shown in the sidebar or in a splash screen?",iftrue:"show the infobox in the splashscreen floating over the entire UI",iffalse:"show the infobox in a sidebar on the right"},type:"boolean",description:"If set, open the selectedElementView in a floatOver instead of on the right."},{path:["layers","titleIcons"],required:!1,hints:{typehint:"icon[]",group:"infobox"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)`},{path:["layers","titleIcons","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","titleIcons","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","titleIcons","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","titleIcons","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","titleIcons","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","titleIcons","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","titleIcons","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","titleIcons","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","titleIcons","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","titleIcons","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","titleIcons","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","titleIcons","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","titleIcons","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","titleIcons","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","titleIcons","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","titleIcons","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering"],required:!0,hints:{group:"pointrendering"},type:"array",description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered`},{path:["layers","pointRendering"],required:!1,hints:{},type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.
This can be used if:
- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","pointRendering","location"],required:!0,hints:{question:"At what location should this icon be shown?",suggestions:[{if:"value=point",then:"Show an icon for point (node) objects"},{if:"value=centroid",then:"Show an icon for line or polygon (way) objects at their centroid location"},{if:"value=start",then:"Show an icon for line (way) objects at the start"},{if:"value=end",then:"Show an icon for line (way) object at the end"},{if:"value=projected_centerpoint",then:"Show an icon for line (way) object near the centroid location, but moved onto the line"}],multianswer:"true"},type:"array",description:""},{path:["layers","pointRendering","marker"],required:!1,hints:{},type:"array",description:"The marker for an element.\nNote that this also defines the icon for this layer (rendered with the overpass-tags) <i>and</i> the icon in the presets.\nThe result of the icon is rendered as follows:\n- The first icon is rendered on the map\n- The second entry is overlayed on top of it\n- ...\nAs a result, on could use a generic icon (`pin`, `circle`, `square`) with a color, then overlay it with a specific icon."},{path:["layers","pointRendering","marker","icon"],required:!0,hints:{typehint:"icon",question:"What icon should be used?",suggestions:[{if:"value=pin",then:"pin",icon:"pin"},{if:"value=square",then:"square",icon:"square"},{if:"value=circle",then:"circle",icon:"circle"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=clock",then:"clock",icon:"clock"},{if:"value=close",then:"close",icon:"close"},{if:"value=crosshair",then:"crosshair",icon:"crosshair"},{if:"value=help",then:"help",icon:"help"},{if:"value=home",then:"home",icon:"home"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=location",then:"location",icon:"location"},{if:"value=location_empty",then:"location_empty",icon:"location_empty"},{if:"value=location_locked",then:"location_locked",icon:"location_locked"},{if:"value=note",then:"note",icon:"note"},{if:"value=resolved",then:"resolved",icon:"resolved"},{if:"value=ring",then:"ring",icon:"ring"},{if:"value=scissors",then:"scissors",icon:"scissors"},{if:"value=teardrop",then:"teardrop",icon:"teardrop"},{if:"value=teardrop_with_hole_green",then:"teardrop_with_hole_green",icon:"teardrop_with_hole_green"},{if:"value=triangle",then:"triangle",icon:"triangle"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:""},{path:["layers","pointRendering","marker","icon","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","marker","icon","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","marker","icon","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","marker","icon","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","marker","color"],required:!1,hints:{typehint:"color",question:"What colour should the icon be?"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:"This will only work for the default icons such as `pin`,`circle`,..."},{path:["layers","pointRendering","marker","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","marker","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","marker","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","marker","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconBadges"],required:!1,hints:{group:"hidden"},type:"array",description:"A list of extra badges to show next to the icon as small badge\nThey will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.\nNote: strings are interpreted as icons, so layering and substituting is supported. You can use `circle:white;./my_icon.svg` to add a background circle"},{path:["layers","pointRendering","iconBadges","if"],required:!0,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconBadges","then"],required:!0,hints:{typehint:"icon"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:"Badge to show"},{path:["layers","pointRendering","iconBadges","then","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","pointRendering","iconBadges","then","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","iconBadges","then","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","iconBadges","then","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconSize"],required:!1,hints:{question:"What size should the marker be on the map?",ifunset:"Use the default size (<b>40,40</b> px)"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'A string containing "<width>,<height>" in pixels'},{path:["layers","pointRendering","iconSize","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","iconSize","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","iconSize","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","iconSize","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","iconSize","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","iconSize","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","iconSize","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","iconSize","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","iconSize","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","iconSize","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","iconSize","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","iconSize","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","iconSize","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","iconSize","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","iconSize","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","iconSize","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","iconSize","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","anchor"],required:!1,hints:{question:"What is the anchorpoint of the icon?",ifunset:"Use MapComplete-default (<b>center</b>)",suggestions:[{if:"value=center",then:"Place the <b>center</b> of the icon on the geographical location"},{if:"value=top",then:"Place the <b>top</b> of the icon on the geographical location"},{if:"value=bottom",then:"Place the <b>bottom</b> of the icon on the geographical location"},{if:"value=left",then:"Place the <b>left</b> of the icon on the geographical location"},{if:"value=right",then:"Place the <b>right</b> of the icon on the geographical location"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This matches the geographical point with a location on the icon."},{path:["layers","pointRendering","anchor","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","anchor","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","anchor","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","anchor","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","anchor","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","anchor","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","anchor","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","anchor","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","anchor","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","anchor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","anchor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","anchor","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","anchor","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","anchor","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","anchor","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","anchor","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","anchor","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","rotation"],required:!1,hints:{question:"What rotation should be applied on the icon?",ifunset:"Do not rotate"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This is mostly useful for items that face a specific direction, such as surveillance cameras\nThis is interpreted as css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","pointRendering","rotation","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","rotation","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","rotation","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotation","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotation","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","rotation","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","rotation","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotation","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","rotation","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","rotation","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","rotation","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","rotation","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","rotation","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","rotation","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotation","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotation","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","rotation","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","label"],required:!1,hints:{types:"Dynamic value based on the attributes ; string",question:"What label should be shown beneath the marker?",ifunset:"Do not show a label beneath the marker",inline:"Always show label <b>{value}</b> beneath the marker"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'For example: `&LT;div style="background: white">{name}&LT;/div>`\nIf the icon is undefined, then the label is shown in the center of the feature.'},{path:["layers","pointRendering","label","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","label","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","label","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","label","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","label","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","label","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","label","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","label","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","label","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","label","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","label","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","label","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","label","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","label","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","label","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","label","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","label","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","labelCss"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the label?",ifunset:"Do not apply extra CSS-labels to the label",inline:"Apply CSS-style <b>{value}</b> to the label"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `"},{path:["layers","pointRendering","labelCss","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","labelCss","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","labelCss","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCss","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCss","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","labelCss","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","labelCss","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCss","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","labelCss","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","labelCss","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","labelCss","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","labelCss","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","labelCss","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","labelCss","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCss","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCss","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","labelCss","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","labelCssClasses"],required:!1,hints:{types:"Dynamic value ; string",question:"Which CSS-classes should be applied to the label?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the label",suggestions:[{if:"value=bg-white rounded px-2",then:"Draw on a white background"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","pointRendering","labelCssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","labelCssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","labelCssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","labelCssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","labelCssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","labelCssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","labelCssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","labelCssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","labelCssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","labelCssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","labelCssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","labelCssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","labelCssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","labelCssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","labelCssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","css"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the entire marker?",ifunset:"Do not apply extra CSS element to the entire marker",inline:"Apply CSS-style <b>{value}</b> to the _entire marker_"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `\nThis will be applied to the _container_ containing both the marker and the label"},{path:["layers","pointRendering","css","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","css","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","css","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","css","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","css","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","css","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","css","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","css","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","css","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","css","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","css","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","css","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","css","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","css","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","css","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","css","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","css","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","cssClasses"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"Which CSS-classes should be applied to the entire marker?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the entire container"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This will be applied to the _container_ containing both the marker and the label\nThe classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","pointRendering","cssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","cssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","cssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","cssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","cssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","cssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","cssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","cssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","cssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","cssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","cssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","cssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","cssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","cssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","cssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","cssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","cssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","pitchAlignment"],required:!1,hints:{group:"expert",question:"If the map is pitched, should the icon stay parallel to the screen or to the groundplane?",suggestions:[{if:"value=canvas",then:"The icon will stay upward and not be transformed as if it sticks to the screen"},{if:"value=map",then:"The icon will be transformed as if it were painted onto the ground. (Automatically sets rotationAlignment)"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","pointRendering","pitchAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","pitchAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","pitchAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","pitchAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","pitchAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","pitchAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","pitchAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","pitchAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","pitchAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","pitchAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","pitchAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","pitchAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","pitchAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","pitchAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","pitchAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","pitchAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","pitchAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","pointRendering","rotationAlignment"],required:!1,hints:{group:"expert",question:"Should the icon be rotated if the map is rotated?",ifunset:"Do not rotate or tilt icons. Always keep the icons straight",suggestions:[{if:"value=canvas",then:"Never rotate the icon"},{if:"value=map",then:"If the map is rotated, rotate the icon as well. This gives the impression of an icon that floats perpendicular above the ground."}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","pointRendering","rotationAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","pointRendering","rotationAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","pointRendering","rotationAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotationAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotationAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","pointRendering","rotationAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","pointRendering","rotationAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","pointRendering","rotationAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","pointRendering","rotationAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","pointRendering","rotationAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","pointRendering","rotationAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","pointRendering","rotationAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","pointRendering","rotationAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","pointRendering","rotationAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","pointRendering","rotationAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","pointRendering","rotationAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","pointRendering","rotationAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","lineRendering"],required:!1,hints:{group:"linerendering"},type:"array",description:"Creates lines and areas to render on the map"},{path:["layers","lineRendering"],required:!1,hints:{},type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.
This can be used if:
- The feature is a line
- The feature is an area`},{path:["layers","lineRendering","color"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What color should lines be drawn in?",inline:"The line colour always is <b>{value}</b>",title:"Line Colour"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:`For an area, this will be the colour of the outside line.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","lineRendering","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","width"],required:!1,hints:{typehint:"pnat",types:"dynamic value ; string",question:"How wide should the line be?",ifunset:"Use the default-linewidth of 7 pixels",inline:"The line width is <b>{value} pixels</b>",title:"Line width"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","lineRendering","width","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","width","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","width","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","width","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","dashArray"],required:!1,hints:{question:"Should a dasharray be used to render the lines?",ifunset:"Ways are rendered with a full line"},type:"string",description:"The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap, ...'. For example, `5 6` will be 5 pixels of line followed by a 6 pixel gap.\nCannot be a dynamic property due to a mapbox limitation"},{path:["layers","lineRendering","lineCap"],required:!1,hints:{types:"dynamic value ; string",question:"What form should the line-ending have?",ifunset:"Use the default value (round ending)",suggestions:[{if:"value=round",then:"Round endings"},{if:"value=square",then:"square endings"},{if:"value=butt",then:"no ending (square ending at the end, without padding)"}],title:"Line Cap"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","lineRendering","lineCap","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","lineCap","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","lineCap","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","lineCap","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","fillColor"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What colour should be used as fill colour for polygons?",ifunset:"The polygon fill colour will be a more transparent version of the stroke colour",inline:"The fill colour is <b>{value}</b>",suggestions:[{if:"value=#00000000",then:"Use a transparent fill (only render the outline)"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","lineRendering","fillColor","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","fillColor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","fillColor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","fillColor","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","lineRendering","offset"],required:!1,hints:{typehint:"int",types:"dynamic value ; number",question:"Should the lines be moved (offsetted) with a number of pixels against the geographical lines?",ifunset:"don't offset lines on the map",inline:"Pixel offset by <b>{value}</b> pixels"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive number to move to the right in the drawing direction or a negative to move to the left (left/right as defined by the drawing direction of the line).
IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","lineRendering","offset","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","lineRendering","offset","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","lineRendering","offset","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","lineRendering","offset","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","passAllFeatures"],required:!1,hints:{group:"expert",question:"should this layer pass features to the next layers?",iftrue:"Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers",iffalse:"normal behaviour: don't pass features allong"},type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras`},{path:["layers","doNotDownload"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?",iftrue:"Do not attempt to query the data for this layer from overpass/the OSM API",iffalse:"download the data as usual"},type:"boolean",description:"If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.\nWorks well together with 'passAllFeatures', to add decoration\nThe opposite of `forceLoad`"},{path:["layers","forceLoad"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be forcibly loaded?",iffalse:"only download data for this layer when needed (default)"},type:"boolean",description:`Advanced option - might be set by the theme compiler
If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`
ifftrue: always download this layer, even if it is disabled`},{path:["layers","presets"],required:!1,hints:{group:"presets"},type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.
The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.
Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.
Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","presets","title"],required:!0,hints:{question:"What is the word to describe this object?",inline:"Add {translated(value)::font-bold} here"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The title - shown on the 'add-new'-button.\nThis should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.\nThis text will be inserted into `Add {category} here`, becoming `Add a hydrant here`.\nDo _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!"},{path:["layers","presets","tags"],required:!0,hints:{typehint:"simple_tag",typehelper:"uploadableOnly",question:"What tag should be added to the new object?"},type:"array",description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.`},{path:["layers","presets","description"],required:!1,hints:{question:"How would you describe this feature?",ifunset:"No extra description is given. This can be used to further explain the preset"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.
The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.
(The first sentence is until the first '.'-character in the description)`},{path:["layers","presets","exampleImages"],required:!1,hints:{typehint:"image",question:"What is the URL of an image showing such a feature?"},type:"array",description:"The URL of an example image which shows a real-life example of what such a feature might look like."},{path:["layers","presets","snapToLayer"],required:!1,hints:{question:"Should the created point be snapped to a line layer?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:"array",description:"If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.\nFor example, this can be used to snap against `walls_and_buildings` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)\nor to snap an obstacle (such as a bollard) to the `cycleways_and_roads`."},{path:["layers","presets","maxSnapDistance"],required:!1,hints:{question:"What is the maximum distance in the location-input that a point can be moved to be snapped to a way?",ifunset:"Do not snap to a layer",inline:"a point is snapped if the location input is at most <b>{value}m</b> away from an object"},type:"number",description:`If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter`},{path:["layers","tagRenderings"],required:!1,hints:{typehint:"tagrendering[]",group:"tagrenderings",question:"Edit this attribute showing piece/question"},type:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`A tag rendering is a block that either shows the known value or asks a question.
Refer to the class \`TagRenderingConfigJson\` to see the possibilities.
Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override
A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.
At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","tagRenderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings"],required:!1,hints:{},type:"object",description:`Rewrites and multiplies the given renderings of type T.
This can be used for introducing many similar questions automatically,
which also makes translations easier.
(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)
For example:
\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:
[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }
]`},{path:["layers","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","filter"],required:!1,hints:{group:"filters"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","filter","id"],required:!0,hints:{},type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","filter","options"],required:!0,hints:{},type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.
An example which searches by name:
\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","filter","options","osmTags"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","fields","name"],required:!0,hints:{},type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","filter","#"],required:!1,hints:{},type:"string",description:'Used for comments or to disable a check\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","deletion"],required:!1,hints:{types:"Use an advanced delete configuration ; boolean",group:"editing",iftrue:"Allow deletion",iffalse:"Do not allow deletion",ifunset:"Do not allow deletion"},type:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.
To configure, the following values are possible:
- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)
### The delete dialog
#### Hard deletion if enough experience
A feature can only be deleted from OpenStreetMap by mapcomplete if:
- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)
In all other cases, a 'soft deletion' is used.
#### Soft deletion
A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.
Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme
##### No-delete options
In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)
The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","deletion","neededChangesets"],required:!1,hints:{typehint:"nat",question:"How many changesets must a contributor have before being allowed to delete a point?"},type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","deletion","extraDeleteReasons"],required:!1,hints:{},type:"array",description:`*
By default, three reasons to delete a point are shown:
- The point does not exist anymore
- The point was a testing point
- THe point could not be found
However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:
- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...
These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","deletion","extraDeleteReasons","explanation"],required:!0,hints:{question:"For what extra reason might this feature be removed in real-life?"},description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default`},{path:["layers","deletion","extraDeleteReasons","changesetMessage"],required:!0,hints:{question:"What should be added to the changeset as delete reason?"},type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","deletion","nonDeleteMappings"],required:!1,hints:{},type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).
By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","deletion","nonDeleteMappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be applied to the object?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore`},{path:["layers","deletion","nonDeleteMappings","then"],required:!0,hints:{question:"What text should be shown to the contributor for this reason?"},description:"The human explanation for the options"},{path:["layers","deletion","softDeletionTags"],required:!1,hints:{typehint:"tag",question:"If a hard delete is not possible, what tags should be applied to mark this feature as deleted?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!
Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`
or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","deletion","softDeletionTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","softDeletionTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","omitDefaultDeleteReasons"],required:!1,hints:{question:"Should the default delete reasons be hidden?",iftrue:"Hide the default delete reasons",iffalse:"Show the default delete reasons",ifunset:"Show the default delete reasons (default behaviour)"},type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","allowMove"],required:!1,hints:{types:"use an advanced move configuration ; boolean",group:"editing",question:"Is deleting a point allowed?",iftrue:"Allow contributors to move a point (for accuracy or a relocation)",iffalse:"Don't allow contributors to move points",ifunset:"Don't allow contributors to move points (default)"},type:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`Indicates if a point can be moved and why.
A feature can be moved by MapComplete if:
- It is a point
- The point is _not_ part of a way or a a relation.`},{path:["layers","allowMove","enableImproveAccuracy"],required:!1,hints:{question:"Should moving this type of point to improve the accuracy be allowed?",iftrue:"This point can be moved to improve the accuracy",iffalse:"This point cannot be moved to improve the accuracy",ifunset:"(default) This point can be moved to improve the accuracy"},type:"boolean",description:""},{path:["layers","allowMove","enableRelocation"],required:!1,hints:{question:"Should moving this type of point due to a relocation be allowed?",iftrue:"This type of point can be moved due to a relocation (and will remove address information when this is done)",iffalse:"This type of point cannot be moved due to a relocation",ifunset:"(default) This type of point can be moved due to a relocation (and will remove address information when this is done)"},type:"boolean",description:"This will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`"},{path:["layers","allowSplit"],required:!1,hints:{group:"editing",question:"Should the contributor be able to split ways using this layer?",iftrue:"enable the 'split-roads'-component",iffalse:"don't enable the split-roads componenet",ifunset:"don't enable the split-roads component"},type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.
If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","units"],required:!1,hints:{default:"ult: true,"},type:"object",description:`In some cases, a value is represented in a certain unit (such as meters for heigt/distance/..., km/h for speed, ...)
Sometimes, multiple denominations are possible (e.g. km/h vs mile/h; megawatt vs kilowatt vs gigawatt for power generators, ...)
This brings in some troubles, as there are multiple ways to write it (no denomitation, 'm' vs 'meter' 'metre', ...)
Not only do we want to write consistent data to OSM, we also want to present this consistently to the user.
This is handled by defining units.
# Rendering
To render a value with long (human) denomination, use {canonical(key)}
# Usage
First of all, you define which keys have units applied, for example:
\`\`\`
units: [
 appliesTo: ["maxspeed", "maxspeed:hgv", "maxspeed:bus"]
 applicableUnits: [
     ...
 ]
]
\`\`\`
ApplicableUnits defines which is the canonical extension, how it is presented to the user, ...:
\`\`\`
applicableUnits: [
{
    canonicalDenomination: "km/h",
    alternativeDenomination: ["km/u", "kmh", "kph"]
    human: {
        en: "kilometer/hour",
        nl: "kilometer/uur"
    },
    humanShort: {
        en: "km/h",
        nl: "km/u"
    }
},
{
    canoncialDenomination: "mph",
    ... similar for miles an hour ...
}
]
\`\`\`
If this is defined, then every key which the denominations apply to (\`maxspeed\`, \`maxspeed:hgv\` and \`maxspeed:bus\`) will be rewritten at the metatagging stage:
every value will be parsed and the canonical extension will be added add presented to the other parts of the code.
Also, if a freeform text field is used, an extra dropdown with applicable denominations will be given`},{path:["layers","units","appliesToKey"],required:!0,hints:{},type:"array",description:"Every key from this list will be normalized.\nTo render the value properly (with a human readable denomination), use `{canonical(<key>)}`"},{path:["layers","units","eraseInvalidValues"],required:!1,hints:{},type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","units","applicableUnits"],required:!0,hints:{},type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","units","applicableUnits","useIfNoUnitGiven"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation
E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.
If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","units","applicableUnits","canonicalDenomination"],required:!0,hints:{},type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.
Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","units","applicableUnits","canonicalDenominationSingular"],required:!1,hints:{},type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","units","applicableUnits","alternativeDenomination"],required:!1,hints:{},type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","units","applicableUnits","human"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","units","applicableUnits","humanSingular"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","units","applicableUnits","prefix"],required:!1,hints:{},type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","units","defaultInput"],required:!1,hints:{},type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.
When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","syncSelection"],required:!1,hints:{group:"advanced",question:"Should enabling/disabling the layer be saved (locally or in the cloud)?",suggestions:[{if:"value=no",then:"Don't save, always revert to the default"},{if:"value=local",then:"Save selection in local storage"},{if:"value=theme-only",then:"Save the state in the OSM-usersettings, but apply on this theme only (default)"},{if:"value=global",then:"Save in OSM-usersettings and toggle on _all_ themes using this layer"}]},type:"string",description:"If set, synchronizes whether or not this layer is enabled."},{path:["layers","#"],required:!1,hints:{group:"hidden"},type:"string",description:`Used for comments and/or to disable some checks
no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","fullNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:"_Set automatically by MapComplete, please ignore_"},{path:["layers","override","id"],required:!1,hints:{typehint:"id",group:"Basic",question:"What is the identifier of this layer?"},type:"string",description:`This should be a simple, lowercase, human readable string that is used to identify the layer.
 A good ID is:
 - a noun
 - written in singular
 - describes the object
 - in english
 - only has lowercase letters, numbers or underscores. Do not use a space or a dash`},{path:["layers","override","name"],required:!1,hints:{group:"Basic",question:"What is the name of this layer?",ifunset:"This will hide the layer in the layer control, making it not filterable and not toggleable"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Used in the layer control panel to toggle a layer on and of."},{path:["layers","override","description"],required:!1,hints:{group:"Basic",question:"How would you describe the features that are shown on this layer?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for the features shown in this layer.
This often resembles the introduction of the wiki.osm.org-page for this feature.`},{path:["layers","override","source"],required:!1,hints:{types:"Load data with specific tags from OpenStreetMap ; Load data from an external geojson source ;",typesdefault:"0",group:"Basic",question:"Where should the data be fetched from?",title:"Data Source"},type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:`question: Which tags must be present on the feature to show it in this layer?
Every source must set which tags have to be present in order to load the given layer.`},maxCacheAge:{description:`question: How long (in seconds) is the data allowed to remain cached until it must be refreshed?
The maximum amount of seconds that a tile is allowed to linger in the cache

type: nat
default: 30 days
group: expert`,type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}

question: What is the URL of the geojson?
type: url`,type:"string"},geoJsonZoomLevel:{description:`To load a tiled geojson layer, set the zoomlevel of the tiles

question: If using a tiled geojson, what is the zoomlevel of the tiles?
ifunset: This is not a tiled geojson`,type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible

question: Is this geojson a cache of OpenStreetMap data?
ifunset: This is not an OpenStreetMap cache
iftrue: this is based on OpenStreetMap and can thus be edited
group: expert`,type:"boolean"},mercatorCrs:{description:`Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag \`mercatorCrs: true\`  in the source for this

question: Does this geojson use  EPSG:900913 instead of WGS84 as projection?
iftrue: This geojson uses EPSG:900913 instead of WGS84
ifunset: This geojson uses WGS84 just like most geojson (default)`,type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'

ifunset: An id with key \`id\` will be assigned automatically if no attribute \`id\` is set
inline: This geojson uses <b>{value}</b> as attribute to set the id
question: What is the name of the attribute containing the ID of the object?`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.
If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.
Every source _must_ define which tags _must_ be present in order to be picked up.
Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","override","source","osmTags"],required:!0,hints:{typehint:"tag",question:"Which tags must be present on the feature to show it in this layer?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"Every source must set which tags have to be present in order to load the given layer."},{path:["layers","override","source","maxCacheAge"],required:!1,hints:{typehint:"nat",group:"expert",default:"30 days",question:"How long (in seconds) is the data allowed to remain cached until it must be refreshed?"},type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","override","source","geoJson"],required:!0,hints:{typehint:"url",question:"What is the URL of the geojson?"},type:"string",description:`The actual source of the data to load, if loaded via geojson.
# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source
# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer
Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","override","source","geoJsonZoomLevel"],required:!1,hints:{question:"If using a tiled geojson, what is the zoomlevel of the tiles?",ifunset:"This is not a tiled geojson"},type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","override","source","isOsmCache"],required:!1,hints:{group:"expert",question:"Is this geojson a cache of OpenStreetMap data?",iftrue:"this is based on OpenStreetMap and can thus be edited",ifunset:"This is not an OpenStreetMap cache"},type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache.
This also indicates that making changes on this data is possible`},{path:["layers","override","source","mercatorCrs"],required:!1,hints:{question:"Does this geojson use  EPSG:900913 instead of WGS84 as projection?",iftrue:"This geojson uses EPSG:900913 instead of WGS84",ifunset:"This geojson uses WGS84 just like most geojson (default)"},type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","override","source","idKey"],required:!1,hints:{question:"What is the name of the attribute containing the ID of the object?",ifunset:"An id with key `id` will be assigned automatically if no attribute `id` is set",inline:"This geojson uses <b>{value}</b> as attribute to set the id"},type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","override","calculatedTags"],required:!1,hints:{group:"expert",question:"What extra attributes should be calculated with javascript?"},type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
Not found...    *  "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]
The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.
If a tag has to be evaluated strictly, use ':=' instead:
[
"_some_key:=some_javascript_expression"
]
See the full documentation on [https://github.com/pietervdvn/MapComplete/blob/master/Docs/CalculatedTags.md]`},{path:["layers","override","isShown"],required:!1,hints:{group:"advanced",question:"What other tags should features match for being shown?",ifunset:"all features which match the 'source'-specification are shown."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view based on a calculated tag or if the features are provided by a different layer.`},{path:["layers","override","isShown","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","isShown","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","minzoom"],required:!1,hints:{typehint:"nat",group:"Basic",default:"0",question:"At what zoom level should features of the layer be shown?",ifunset:"Always load this layer, even if the entire world is in view."},type:"number",description:`The minimum needed zoomlevel required to start loading and displaying the data.
This can be used to only show common features (e.g. a bicycle parking) only when the map is zoomed in very much (17).
This prevents cluttering the map with thousands of parkings if one is looking to an entire city.`},{path:["layers","override","shownByDefault"],required:!1,hints:{group:"advanced",default:"true",question:"Should this layer be enabled when opening the map for the first time?",iftrue:"the layer is enabled when opening the map",iffalse:"the layer is hidden until the contributor enables it. (If the filter-popup is disabled, this might never get enabled nor loaded)"},type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it when appropriate (e.g. for advanced users)`},{path:["layers","override","minzoomVisible"],required:!1,hints:{group:"expert",default:"100 (thus: always visible"},type:"number",description:"The zoom level at which point the data is hidden again"},{path:["layers","override","title"],required:!1,hints:{typehint:"translation",types:"use a fixed translation ; Use a dynamic tagRendering ; hidden",typesdefault:"1",group:"title",question:"Edit the popup title",inline:"{translated{value}}"},type:[{$ref:"#/definitions/Record<string,string>"},{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","override","title","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","title","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","title","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","title","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","title","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","title","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","title","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","title","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","title","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","title","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","title","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","title","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","title","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","title","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","title","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","title","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","popupInFloatover"],required:!1,hints:{group:"advanced",default:"sidebar",question:"Should the information for this layer be shown in the sidebar or in a splash screen?",iftrue:"show the infobox in the splashscreen floating over the entire UI",iffalse:"show the infobox in a sidebar on the right"},type:"boolean",description:"If set, open the selectedElementView in a floatOver instead of on the right."},{path:["layers","override","titleIcons"],required:!1,hints:{typehint:"icon[]",group:"infobox"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)`},{path:["layers","override","titleIcons","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","titleIcons","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","titleIcons","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","titleIcons","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","titleIcons","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","titleIcons","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","titleIcons","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","titleIcons","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","titleIcons","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","titleIcons","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","titleIcons","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","titleIcons","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","titleIcons","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","titleIcons","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","titleIcons","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","titleIcons","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering"],required:!1,hints:{group:"pointrendering"},type:"array",description:`Creates points to render on the map.
This can render points for point-objects, lineobjects or areaobjects; use 'location' to indicate where it should be rendered`},{path:["layers","override","pointRendering"],required:!1,hints:{},type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.
This can be used if:
- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","override","pointRendering","location"],required:!0,hints:{question:"At what location should this icon be shown?",suggestions:[{if:"value=point",then:"Show an icon for point (node) objects"},{if:"value=centroid",then:"Show an icon for line or polygon (way) objects at their centroid location"},{if:"value=start",then:"Show an icon for line (way) objects at the start"},{if:"value=end",then:"Show an icon for line (way) object at the end"},{if:"value=projected_centerpoint",then:"Show an icon for line (way) object near the centroid location, but moved onto the line"}],multianswer:"true"},type:"array",description:""},{path:["layers","override","pointRendering","marker"],required:!1,hints:{},type:"array",description:"The marker for an element.\nNote that this also defines the icon for this layer (rendered with the overpass-tags) <i>and</i> the icon in the presets.\nThe result of the icon is rendered as follows:\n- The first icon is rendered on the map\n- The second entry is overlayed on top of it\n- ...\nAs a result, on could use a generic icon (`pin`, `circle`, `square`) with a color, then overlay it with a specific icon."},{path:["layers","override","pointRendering","marker","icon"],required:!0,hints:{typehint:"icon",question:"What icon should be used?",suggestions:[{if:"value=pin",then:"pin",icon:"pin"},{if:"value=square",then:"square",icon:"square"},{if:"value=circle",then:"circle",icon:"circle"},{if:"value=checkmark",then:"checkmark",icon:"checkmark"},{if:"value=clock",then:"clock",icon:"clock"},{if:"value=close",then:"close",icon:"close"},{if:"value=crosshair",then:"crosshair",icon:"crosshair"},{if:"value=help",then:"help",icon:"help"},{if:"value=home",then:"home",icon:"home"},{if:"value=invalid",then:"invalid",icon:"invalid"},{if:"value=location",then:"location",icon:"location"},{if:"value=location_empty",then:"location_empty",icon:"location_empty"},{if:"value=location_locked",then:"location_locked",icon:"location_locked"},{if:"value=note",then:"note",icon:"note"},{if:"value=resolved",then:"resolved",icon:"resolved"},{if:"value=ring",then:"ring",icon:"ring"},{if:"value=scissors",then:"scissors",icon:"scissors"},{if:"value=teardrop",then:"teardrop",icon:"teardrop"},{if:"value=teardrop_with_hole_green",then:"teardrop_with_hole_green",icon:"teardrop_with_hole_green"},{if:"value=triangle",then:"triangle",icon:"triangle"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:""},{path:["layers","override","pointRendering","marker","icon","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","marker","icon","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","marker","icon","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","marker","icon","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","marker","color"],required:!1,hints:{typehint:"color",question:"What colour should the icon be?"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"object",properties:{builtin:{type:"string"},override:{}},required:["builtin","override"]},{type:"string"}],description:"This will only work for the default icons such as `pin`,`circle`,..."},{path:["layers","override","pointRendering","marker","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","marker","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","marker","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","marker","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconBadges"],required:!1,hints:{group:"hidden"},type:"array",description:"A list of extra badges to show next to the icon as small badge\nThey will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.\nNote: strings are interpreted as icons, so layering and substituting is supported. You can use `circle:white;./my_icon.svg` to add a background circle"},{path:["layers","override","pointRendering","iconBadges","if"],required:!0,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconBadges","then"],required:!0,hints:{typehint:"icon"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:"Badge to show"},{path:["layers","override","pointRendering","iconBadges","then","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","pointRendering","iconBadges","then","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","iconBadges","then","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","iconBadges","then","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconSize"],required:!1,hints:{question:"What size should the marker be on the map?",ifunset:"Use the default size (<b>40,40</b> px)"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'A string containing "<width>,<height>" in pixels'},{path:["layers","override","pointRendering","iconSize","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","iconSize","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","iconSize","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","iconSize","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","iconSize","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","iconSize","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","iconSize","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","iconSize","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","iconSize","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","iconSize","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","iconSize","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","iconSize","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","iconSize","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","iconSize","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","iconSize","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","iconSize","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","iconSize","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","anchor"],required:!1,hints:{question:"What is the anchorpoint of the icon?",ifunset:"Use MapComplete-default (<b>center</b>)",suggestions:[{if:"value=center",then:"Place the <b>center</b> of the icon on the geographical location"},{if:"value=top",then:"Place the <b>top</b> of the icon on the geographical location"},{if:"value=bottom",then:"Place the <b>bottom</b> of the icon on the geographical location"},{if:"value=left",then:"Place the <b>left</b> of the icon on the geographical location"},{if:"value=right",then:"Place the <b>right</b> of the icon on the geographical location"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This matches the geographical point with a location on the icon."},{path:["layers","override","pointRendering","anchor","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","anchor","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","anchor","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","anchor","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","anchor","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","anchor","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","anchor","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","anchor","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","anchor","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","anchor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","anchor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","anchor","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","anchor","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","anchor","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","anchor","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","anchor","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","anchor","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","rotation"],required:!1,hints:{question:"What rotation should be applied on the icon?",ifunset:"Do not rotate"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This is mostly useful for items that face a specific direction, such as surveillance cameras\nThis is interpreted as css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","override","pointRendering","rotation","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","rotation","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","rotation","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotation","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotation","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","rotation","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","rotation","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotation","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","rotation","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","rotation","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","rotation","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","rotation","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","rotation","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","rotation","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotation","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotation","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","rotation","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","label"],required:!1,hints:{types:"Dynamic value based on the attributes ; string",question:"What label should be shown beneath the marker?",ifunset:"Do not show a label beneath the marker",inline:"Always show label <b>{value}</b> beneath the marker"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:'For example: `&LT;div style="background: white">{name}&LT;/div>`\nIf the icon is undefined, then the label is shown in the center of the feature.'},{path:["layers","override","pointRendering","label","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","label","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","label","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","label","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","label","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","label","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","label","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","label","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","label","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","label","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","label","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","label","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","label","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","label","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","label","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","label","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","label","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","labelCss"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the label?",ifunset:"Do not apply extra CSS-labels to the label",inline:"Apply CSS-style <b>{value}</b> to the label"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `"},{path:["layers","override","pointRendering","labelCss","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","labelCss","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","labelCss","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCss","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCss","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","labelCss","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","labelCss","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCss","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","labelCss","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","labelCss","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","labelCss","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","labelCss","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","labelCss","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","labelCss","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCss","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCss","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","labelCss","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","labelCssClasses"],required:!1,hints:{types:"Dynamic value ; string",question:"Which CSS-classes should be applied to the label?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the label",suggestions:[{if:"value=bg-white rounded px-2",then:"Draw on a white background"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"The classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","override","pointRendering","labelCssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","labelCssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","labelCssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","labelCssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","labelCssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","labelCssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","labelCssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","labelCssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","labelCssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","labelCssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","labelCssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","labelCssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","labelCssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","css"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"What CSS should be applied to the entire marker?",ifunset:"Do not apply extra CSS element to the entire marker",inline:"Apply CSS-style <b>{value}</b> to the _entire marker_"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"You can set the css-properties here, e.g. `background: red; font-size: 12px; `\nThis will be applied to the _container_ containing both the marker and the label"},{path:["layers","override","pointRendering","css","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","css","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","css","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","css","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","css","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","css","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","css","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","css","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","css","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","css","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","css","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","css","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","css","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","css","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","css","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","css","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","css","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","cssClasses"],required:!1,hints:{types:"Dynamic value ; string",group:"expert",question:"Which CSS-classes should be applied to the entire marker?",ifunset:"Do not apply extra CSS-classes to the label",inline:"Apply CSS-classes <b>{value}</b> to the entire container"},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{type:"string"}],description:"This will be applied to the _container_ containing both the marker and the label\nThe classes should be separated by a space (` `)\nYou can use most Tailwind-css classes, see https://tailwindcss.com/ for more information\nFor example: `center bg-gray-500 mx-2 my-1 rounded-full`"},{path:["layers","override","pointRendering","cssClasses","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","cssClasses","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","cssClasses","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","cssClasses","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","cssClasses","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","cssClasses","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","cssClasses","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","cssClasses","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","cssClasses","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","cssClasses","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","cssClasses","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","cssClasses","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","cssClasses","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","cssClasses","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","cssClasses","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","cssClasses","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","cssClasses","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","pitchAlignment"],required:!1,hints:{group:"expert",question:"If the map is pitched, should the icon stay parallel to the screen or to the groundplane?",suggestions:[{if:"value=canvas",then:"The icon will stay upward and not be transformed as if it sticks to the screen"},{if:"value=map",then:"The icon will be transformed as if it were painted onto the ground. (Automatically sets rotationAlignment)"}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","override","pointRendering","pitchAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","pitchAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","pitchAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","pitchAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","pitchAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","pitchAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","pitchAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","pitchAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","pitchAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","pitchAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","pitchAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","pitchAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","pitchAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","pitchAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","pitchAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","pointRendering","rotationAlignment"],required:!1,hints:{group:"expert",question:"Should the icon be rotated if the map is rotated?",ifunset:"Do not rotate or tilt icons. Always keep the icons straight",suggestions:[{if:"value=canvas",then:"Never rotate the icon"},{if:"value=map",then:"If the map is rotated, rotate the icon as well. This gives the impression of an icon that floats perpendicular above the ground."}]},type:[{description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`,type:"object",properties:{render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},freeform:{description:`question: Should a freeform text field be shown?
Allow freeform text input from the user
ifunset: Do not add a freeform text field`,type:"object",properties:{key:{description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`,type:"string"}}},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered",anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},icon:{description:`question: What icon should be added to this mapping?
ifunset: Do not show an extra icon next to the render value

An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number
inline: <img src='{icon}' class="w-8 h-8" /> {icon}
Type: icon`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]}},required:["if","then"]}},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},additionalProperties:!1},{enum:["canvas","map"],type:"string"}],description:""},{path:["layers","override","pointRendering","rotationAlignment","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","pointRendering","rotationAlignment","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","pointRendering","rotationAlignment","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotationAlignment","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotationAlignment","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","pointRendering","rotationAlignment","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","pointRendering","rotationAlignment","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","pointRendering","rotationAlignment","freeform"],required:!1,hints:{question:"Should a freeform text field be shown?",ifunset:"Do not add a freeform text field"},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","pointRendering","rotationAlignment","freeform","key"],required:!1,hints:{},type:"string",description:`What attribute should be filled out
If this key is present in the feature, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","pointRendering","rotationAlignment","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","pointRendering","rotationAlignment","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","pointRendering","rotationAlignment","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be added to this mapping?",ifunset:"Do not show an extra icon next to the render value",inline:`<img src='{icon}' class="w-8 h-8" /> {icon}`},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small.
This can be used to show a 'phone'-icon next to the phone number`},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","pointRendering","rotationAlignment","mappings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","pointRendering","rotationAlignment","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","pointRendering","rotationAlignment","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","lineRendering"],required:!1,hints:{group:"linerendering"},type:"array",description:"Creates lines and areas to render on the map"},{path:["layers","override","lineRendering"],required:!1,hints:{},type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.
This can be used if:
- The feature is a line
- The feature is an area`},{path:["layers","override","lineRendering","color"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What color should lines be drawn in?",inline:"The line colour always is <b>{value}</b>",title:"Line Colour"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:`For an area, this will be the colour of the outside line.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","override","lineRendering","color","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","color","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","color","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","color","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","width"],required:!1,hints:{typehint:"pnat",types:"dynamic value ; string",question:"How wide should the line be?",ifunset:"Use the default-linewidth of 7 pixels",inline:"The line width is <b>{value} pixels</b>",title:"Line width"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","override","lineRendering","width","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","width","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","width","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","width","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","dashArray"],required:!1,hints:{question:"Should a dasharray be used to render the lines?",ifunset:"Ways are rendered with a full line"},type:"string",description:"The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap, ...'. For example, `5 6` will be 5 pixels of line followed by a 6 pixel gap.\nCannot be a dynamic property due to a mapbox limitation"},{path:["layers","override","lineRendering","lineCap"],required:!1,hints:{types:"dynamic value ; string",question:"What form should the line-ending have?",ifunset:"Use the default value (round ending)",suggestions:[{if:"value=round",then:"Round endings"},{if:"value=square",then:"square endings"},{if:"value=butt",then:"no ending (square ending at the end, without padding)"}],title:"Line Cap"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","override","lineRendering","lineCap","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","lineCap","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","lineCap","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","lineCap","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","fillColor"],required:!1,hints:{typehint:"color",types:"dynamic value ; string",question:"What colour should be used as fill colour for polygons?",ifunset:"The polygon fill colour will be a more transparent version of the stroke colour",inline:"The fill colour is <b>{value}</b>",suggestions:[{if:"value=#00000000",then:"Use a transparent fill (only render the outline)"}]},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"string"}],description:""},{path:["layers","override","lineRendering","fillColor","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","fillColor","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","fillColor","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","fillColor","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","lineRendering","offset"],required:!1,hints:{typehint:"int",types:"dynamic value ; number",question:"Should the lines be moved (offsetted) with a number of pixels against the geographical lines?",ifunset:"don't offset lines on the map",inline:"Pixel offset by <b>{value}</b> pixels"},type:[{description:"Mostly used for lineRendering and pointRendering",type:"object",properties:{render:{description:`question: What value should be shown (if no predifined option matches)?

This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.

This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``,type:"string"},mappings:{description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes",type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`question: When should this single mapping match?

If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.

For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}

This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},then:{description:"question: What text should be shown?\n\nIf the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option",type:"string"}},required:["if","then"]}}},additionalProperties:!1},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive number to move to the right in the drawing direction or a negative to move to the left (left/right as defined by the drawing direction of the line).
IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","override","lineRendering","offset","render"],required:!1,hints:{question:"What value should be shown (if no predifined option matches)?"},type:"string",description:`This piece of text will be shown in the infobox.
Note that "&LBRACEkey&RBRACE"-parts are substituted by the corresponding values of the element.
This value will be used if there is no mapping which matches (or there are no matches)
Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\``},{path:["layers","override","lineRendering","offset","mappings"],required:!1,hints:{},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","lineRendering","offset","mappings","if"],required:!0,hints:{typehint:"tag",question:"When should this single mapping match?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`If this condition is met, then the text under \`then\` will be shown.
If no value matches, and the user selects this mapping as an option, then these tags will be uploaded to OSM.
For example: {'if': 'diet:vegetarion=yes', 'then':'A vegetarian option is offered here'}
This can be an substituting-tag as well, e.g. {'if': 'addr:street:={_calculated_nearby_streetname}', 'then': '{_calculated_nearby_streetname}'}`},{path:["layers","override","lineRendering","offset","mappings","then"],required:!0,hints:{question:"What text should be shown?"},type:"string",description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option"},{path:["layers","override","passAllFeatures"],required:!1,hints:{group:"expert",question:"should this layer pass features to the next layers?",iftrue:"Make the features from this layer also available to the other layer; might result in this object being rendered by multiple layers",iffalse:"normal behaviour: don't pass features allong"},type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directions on cameras`},{path:["layers","override","doNotDownload"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be downloaded or is the data provided by a different layer (which has 'passAllFeatures'-set)?",iftrue:"Do not attempt to query the data for this layer from overpass/the OSM API",iffalse:"download the data as usual"},type:"boolean",description:"If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.\nWorks well together with 'passAllFeatures', to add decoration\nThe opposite of `forceLoad`"},{path:["layers","override","forceLoad"],required:!1,hints:{group:"expert",default:"false",question:"Should this layer be forcibly loaded?",iffalse:"only download data for this layer when needed (default)"},type:"boolean",description:`Advanced option - might be set by the theme compiler
If true, this data will _always_ be loaded, even if the theme is disabled by a filter or hidden.
The opposite of \`doNotDownload\`
ifftrue: always download this layer, even if it is disabled`},{path:["layers","override","presets"],required:!1,hints:{group:"presets"},type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.
The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.
Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.
Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","override","presets","title"],required:!0,hints:{question:"What is the word to describe this object?",inline:"Add {translated(value)::font-bold} here"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The title - shown on the 'add-new'-button.\nThis should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.\nThis text will be inserted into `Add {category} here`, becoming `Add a hydrant here`.\nDo _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!"},{path:["layers","override","presets","tags"],required:!0,hints:{typehint:"simple_tag",typehelper:"uploadableOnly",question:"What tag should be added to the new object?"},type:"array",description:`A single tag (encoded as <code>key=value</code>) out of all the tags to add onto the newly created point.
Note that the icon in the UI will be chosen automatically based on the tags provided here.`},{path:["layers","override","presets","description"],required:!1,hints:{question:"How would you describe this feature?",ifunset:"No extra description is given. This can be used to further explain the preset"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`An extra explanation of what the feature is, if it is not immediately clear from the title alone.
The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.
(The first sentence is until the first '.'-character in the description)`},{path:["layers","override","presets","exampleImages"],required:!1,hints:{typehint:"image",question:"What is the URL of an image showing such a feature?"},type:"array",description:"The URL of an example image which shows a real-life example of what such a feature might look like."},{path:["layers","override","presets","snapToLayer"],required:!1,hints:{question:"Should the created point be snapped to a line layer?",suggestions:[{if:"value=address",then:"address - Addresses"},{if:"value=advertising",then:"advertising - We will complete data from advertising features with reference, operator and lit"},{if:"value=ambulancestation",then:"ambulancestation - An ambulance station is an area for storage of ambulance vehicles, medical equipment, personal protective equipment, and other medical supplies."},{if:"value=animal_shelter",then:"animal_shelter - An animal shelter is a facility where animals in trouble are brought and facility's staff (volunteers or not) feeds them and cares of them, rehabilitating and healing them if necessary. This definition includes kennels for abandoned dogs, catteries for abandoned cats, shelters for other abandoned pets and wildlife recovery centres. "},{if:"value=artwork",then:"artwork - An open map of statues, busts, graffitis and other artwork all over the world"},{if:"value=atm",then:"atm - ATMs to withdraw money"},{if:"value=bank",then:"bank - A financial institution to deposit money"},{if:"value=barrier",then:"barrier - Obstacles while cycling, such as bollards and cycle barriers"},{if:"value=bench",then:"bench - A bench is a wooden, metal, stone, … surface where a human can sit. This layers visualises them and asks a few questions about them."},{if:"value=bench_at_pt",then:"bench_at_pt - A layer showing all public-transport-stops which do have a bench"},{if:"value=bicycle_library",then:"bicycle_library - A facility where bicycles can be lent for longer period of times"},{if:"value=bicycle_rental",then:"bicycle_rental - Bicycle rental stations"},{if:"value=bicycle_tube_vending_machine",then:"bicycle_tube_vending_machine - A layer showing vending machines for bicycle tubes (either purpose-built bicycle tube vending machines or classical vending machines with bicycle tubes and optionally additional bicycle related objects such as lights, gloves, locks, …)"},{if:"value=bike_cafe",then:"bike_cafe - A bike café is a café geared towards cyclists, for example with services such as a pump, with lots of bicycle-related decoration, …"},{if:"value=bike_cleaning",then:"bike_cleaning - A layer showing facilities where one can clean their bike"},{if:"value=bike_parking",then:"bike_parking - A layer showing where you can park your bike"},{if:"value=bike_repair_station",then:"bike_repair_station - A layer showing bicycle pumps and bicycle repair tool stands"},{if:"value=bike_shop",then:"bike_shop - A shop specifically selling bicycles or related items"},{if:"value=bike_themed_object",then:"bike_themed_object - A layer with bike-themed objects but who don't match any other layer"},{if:"value=binocular",then:"binocular - Binoculars"},{if:"value=birdhide",then:"birdhide - A birdhide"},{if:"value=cafe_pub",then:"cafe_pub - A layer showing cafés and pubs where one can gather around a drink. The layer asks for some relevant questions"},{if:"value=car_rental",then:"car_rental - Places where you can rent a car"},{if:"value=charging_station",then:"charging_station - A charging station"},{if:"value=climbing",then:"climbing - A dummy layer which contains tagrenderings, shared among the climbing layers"},{if:"value=climbing_area",then:"climbing_area - An area where climbing is possible, e.g. a crag, site, boulder, … Contains aggregation of routes"},{if:"value=climbing_club",then:"climbing_club - A climbing club or organisation"},{if:"value=climbing_gym",then:"climbing_gym - A climbing gym"},{if:"value=climbing_opportunity",then:"climbing_opportunity - Fallback layer with items on which climbing _might_ be possible. It is loaded when zoomed in a lot, to prevent duplicate items to be added"},{if:"value=climbing_route",then:"climbing_route - A single climbing route and its properties. Some properties are derived from the containing features"},{if:"value=clock",then:"clock - Layer with public clocks"},{if:"value=conflation",then:"conflation - If the import-button moves OSM points, the imported way points or conflates, a preview is shown. This layer defines how this preview is rendered. This layer cannot be included in a theme."},{if:"value=crab_address",then:"crab_address - Address data for Flanders by the governement, suited for import into OpenStreetMap. Datadump from 2021-10-26. This layer contains only visualisation logic. Import buttons should be added via an override. Note that HNRLABEL contains the original value, whereas _HNRLABEL contains a slightly cleaned version"},{if:"value=crossings",then:"crossings - Crossings for pedestrians and cyclists"},{if:"value=current_view",then:`current_view - A meta-layer which contains one single feature, namely the bounding box of the current map view. This can be used to trigger special actions. If a popup is defined for this layer, this popup will be accessible via an extra button on screen.

The icon on the button is the default icon of the layer, but can be customized by detecting 'button=yes'.`},{if:"value=cycleways_and_roads",then:"cycleways_and_roads - All infrastructure that someone can cycle over, accompanied with questions about this infrastructure"},{if:"value=defibrillator",then:"defibrillator - A layer showing defibrillators which can be used in case of emergency. This contains public defibrillators, but also defibrillators which might need staff to fetch the actual device"},{if:"value=dentist",then:"dentist - This layer shows dentist offices"},{if:"value=direction",then:"direction - This layer visualizes directions"},{if:"value=doctors",then:"doctors - This layer shows doctor offices"},{if:"value=dogpark",then:"dogpark - A layer showing dogparks, which are areas where dog are allowed to run without a leash"},{if:"value=drinking_water",then:"drinking_water - A layer showing drinking water fountains"},{if:"value=elevator",then:"elevator - This layer show elevators and asks for operational status and elevator dimensions. Useful for wheelchair accessibility information"},{if:"value=elongated_coin",then:"elongated_coin - Layer showing penny presses."},{if:"value=entrance",then:"entrance - A layer showing entrances and offering capabilities to survey some advanced data which is important for e.g. wheelchair users (but also bicycle users, people who want to deliver, …)"},{if:"value=etymology",then:"etymology - All objects which have an etymology known"},{if:"value=extinguisher",then:"extinguisher - Map layer to show fire extinguishers."},{if:"value=filters",then:"filters - This layer acts as library for common filters"},{if:"value=fire_station",then:"fire_station - Map layer to show fire stations."},{if:"value=fitness_centre",then:"fitness_centre - Layer showing fitness centres"},{if:"value=fitness_station",then:"fitness_station - Find a fitness station near you, and add missing ones."},{if:"value=fixme",then:"fixme - OSM objects that likely need to be fixed, based on a FIXME tag."},{if:"value=food",then:"food - A layer showing restaurants and fast-food amenities (with a special rendering for friteries)"},{if:"value=ghost_bike",then:"ghost_bike - A layer showing memorials for cyclists, killed in road accidents"},{if:"value=governments",then:"governments - This layer show governmental buildings. It was setup as commissioned layer for the client of OSOC '22"},{if:"value=gps_location",then:"gps_location - Meta layer showing the current location of the user. Add this to your theme and override the icon to change the appearance of the current location. The object will always have `id=gps` and will have _all_ the properties included in the [`Coordinates`-object](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationCoordinates) (except latitude and longitude) returned by the browser, such as `speed`, `altitude`, `heading`, ...."},{if:"value=gps_location_history",then:"gps_location_history - Meta layer which contains the previous locations of the user as single points. This is mainly for technical reasons, e.g. to keep match the distance to the modified object"},{if:"value=gps_track",then:"gps_track - Meta layer showing the previous locations of the user as single line with controls, e.g. to erase, upload or download this track. Add this to your theme and override the maprendering to change the appearance of the travelled track."},{if:"value=guidepost",then:"guidepost - Guideposts (also known as fingerposts or finger posts) are often found along official hiking/cycling/riding/skiing routes to indicate the directions to different destinations"},{if:"value=hackerspace",then:"hackerspace - Hackerspace"},{if:"value=home_location",then:"home_location - Meta layer showing the home location of the user. The home location can be set in the [profile settings](https://www.openstreetmap.org/profile/edit) of OpenStreetMap."},{if:"value=hospital",then:"hospital - A layer showing hospital grounds"},{if:"value=hotel",then:"hotel - Layer showing all hotels"},{if:"value=hydrant",then:"hydrant - Map layer to show fire hydrants."},{if:"value=ice_cream",then:"ice_cream - A place where ice cream is sold over the counter"},{if:"value=icons",then:"icons - A layer acting as library for icon-tagrenderings, especially to show as badge next to a POI"},{if:"value=id_presets",then:"id_presets - Layer containing various presets and questions generated by ID. These are meant to be reused in other layers by importing the tagRenderings with `id_preset.<tagrendering>"},{if:"value=import_candidate",then:"import_candidate - Layer used as template in the importHelper"},{if:"value=indoors",then:"indoors - Basic indoor mapping: shows room outlines"},{if:"value=information_board",then:"information_board - A layer showing touristical, road side information boards (e.g. giving information about the landscape, a building, a feature, a map, …)"},{if:"value=kerbs",then:"kerbs - A layer showing kerbs."},{if:"value=kindergarten_childcare",then:"kindergarten_childcare - Shows kindergartens and preschools. Both are grouped in one layer, as they are regularly confused with each other"},{if:"value=last_click",then:"last_click - This layer defines how to render the 'last click'-location. By default, it will show a marker with the possibility to add a new point (if there are some presets) and/or to add a new note (if the 'note' layer attribute is set). If none are possible, this layer won't show up"},{if:"value=map",then:"map - A map, meant for tourists which is permanently installed in the public space"},{if:"value=maproulette",then:"maproulette - Layer showing all tasks in MapRoulette"},{if:"value=maproulette_challenge",then:"maproulette_challenge - Layer showing tasks of a single MapRoulette challenge. This layer is intended to be reused and extended in themes; refer to [the documentation](https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Integrating_Maproulette.md) on how to do this."},{if:"value=maxspeed",then:"maxspeed - Shows the allowed speed for every road"},{if:"value=memorial",then:"memorial - Layer showing memorial plaques, based upon a unofficial theme. Can be expanded to have multiple types of memorials later on"},{if:"value=named_streets",then:"named_streets - Hidden layer with all streets which have a name. Useful to detect addresses"},{if:"value=nature_reserve",then:"nature_reserve - A nature reserve is an area where nature can take its course"},{if:"value=note",then:"note - This layer shows notes on OpenStreetMap. Having this layer in your theme will trigger the 'add new note' functionality in the 'addNewPoint'-popup (or if your theme has no presets, it'll enable adding notes)"},{if:"value=observation_tower",then:"observation_tower - Towers with a panoramic view"},{if:"value=osm_community_index",then:"osm_community_index - A layer showing the OpenStreetMap Communities"},{if:"value=parcel_lockers",then:"parcel_lockers - Layer showing parcel lockers for collecting and sending parcels."},{if:"value=parking",then:"parking - A layer showing car parkings"},{if:"value=parking_spaces",then:"parking_spaces - Layer showing individual parking spaces."},{if:"value=parking_ticket_machine",then:"parking_ticket_machine - Layer with parking ticket machines to pay for parking."},{if:"value=pedestrian_path",then:"pedestrian_path - Pedestrian footpaths, especially used for indoor navigation and snapping entrances to this layer"},{if:"value=pharmacy",then:"pharmacy - A layer showing pharmacies, which (probably) dispense prescription drugs"},{if:"value=physiotherapist",then:"physiotherapist - This layer shows physiotherapists"},{if:"value=picnic_table",then:"picnic_table - The layer showing picnic tables"},{if:"value=play_forest",then:"play_forest - Een speelbos is een vrij toegankelijke zone in een bos"},{if:"value=playground",then:"playground - Playgrounds"},{if:"value=postboxes",then:"postboxes - The layer showing postboxes."},{if:"value=postoffices",then:"postoffices - A layer showing post offices."},{if:"value=public_bookcase",then:"public_bookcase - A streetside cabinet with books, accessible to anyone"},{if:"value=questions",then:"questions - Special library layer which does not need a '.questions'-prefix before being imported"},{if:"value=railway_platforms",then:"railway_platforms - Find every platform in the station, and the train routes that use them."},{if:"value=rainbow_crossings",then:"rainbow_crossings - A layer showing pedestrian crossings with rainbow paintings"},{if:"value=range",then:"range - Meta-layer, simply showing a bbox in red"},{if:"value=reception_desk",then:"reception_desk - A layer showing where the reception desks are and which asks some accessibility information"},{if:"value=recycling",then:"recycling - A layer with recycling containers and centres"},{if:"value=route_marker",then:"route_marker - Route markers are small markers often found along official hiking/cycling/riding/skiing routes to indicate the direction of the route."},{if:"value=school",then:"school - Schools giving primary and secondary education and post-secondary, non-tertiary education. Note that this level of education does not imply an age of the pupiles"},{if:"value=selected_element",then:"selected_element - Highlights the currently selected element. Override this layer to have different colors"},{if:"value=shelter",then:"shelter - Layer showing shelter structures"},{if:"value=shops",then:"shops - A shop"},{if:"value=shower",then:"shower - A layer showing (public) showers"},{if:"value=slow_roads",then:"slow_roads - All carfree roads"},{if:"value=speed_camera",then:"speed_camera - Layer showing speed cameras"},{if:"value=speed_display",then:"speed_display - Layer showing speed displays that alert drivers of their speed."},{if:"value=split_point",then:"split_point - Layer rendering the little scissors for the minimap in the 'splitRoadWizard'"},{if:"value=split_road",then:"split_road - Layer rendering the way to split in the 'splitRoadWizard'. This one is used instead of the variable rendering by the themes themselves, as they might not always be very visible"},{if:"value=sport_pitch",then:"sport_pitch - A sport pitch"},{if:"value=sports_centre",then:"sports_centre - Indoor and outdoor sports centres can be found on this layer"},{if:"value=stairs",then:"stairs - Layer showing stairs and escalators"},{if:"value=street_lamps",then:"street_lamps - A layer showing street lights"},{if:"value=surveillance_camera",then:"surveillance_camera - This layer shows surveillance cameras and allows a contributor to update information and add new cameras"},{if:"value=tertiary_education",then:"tertiary_education - Layer with all tertiary education institutes (ISCED:2011 levels 6,7 and 8)"},{if:"value=ticket_machine",then:"ticket_machine - Find ticket machines for public transport tickets"},{if:"value=ticket_validator",then:"ticket_validator - Find ticket validators to validate public transport tickets"},{if:"value=toilet",then:"toilet - A layer showing (public) toilets"},{if:"value=toilet_at_amenity",then:"toilet_at_amenity - A layer showing (public) toilets located at different places."},{if:"value=trail",then:"trail - Waymarked trails"},{if:"value=transit_routes",then:"transit_routes - Layer showing bus lines"},{if:"value=transit_stops",then:"transit_stops - Layer showing different types of transit stops."},{if:"value=tree_node",then:"tree_node - A layer showing trees"},{if:"value=usersettings",then:"usersettings - A special layer which is not meant to be shown on a map, but which is used to set user settings"},{if:"value=vending_machine",then:"vending_machine - Layer showing vending machines"},{if:"value=veterinary",then:"veterinary - A layer showing veterinarians"},{if:"value=viewpoint",then:"viewpoint - A nice viewpoint or nice view. Ideal to add an image if no other category fits"},{if:"value=village_green",then:"village_green - A layer showing village-green (which are communal green areas, but not quite parks)"},{if:"value=visitor_information_centre",then:"visitor_information_centre - A visitor center offers information about a specific attraction or place of interest where it is located."},{if:"value=walls_and_buildings",then:"walls_and_buildings - Special builtin layer providing all walls and buildings. This layer is useful in presets for objects which can be placed against walls (e.g. AEDs, postboxes, entrances, addresses, surveillance cameras, …). This layer is invisible by default and not toggleable by the user."},{if:"value=waste_basket",then:"waste_basket - This is a public waste basket, thrash can, where you can throw away your thrash."},{if:"value=waste_disposal",then:"waste_disposal - Waste Disposal Bin, medium to large bin for disposal of (household) waste"},{if:"value=windturbine",then:"windturbine - Modern windmills generating electricity"}]},type:"array",description:"If specified, these layers will be shown in the precise location picker  and the new point will be snapped towards it.\nFor example, this can be used to snap against `walls_and_buildings` (e.g. to attach a defibrillator, an entrance, an artwork, ... to the wall)\nor to snap an obstacle (such as a bollard) to the `cycleways_and_roads`."},{path:["layers","override","presets","maxSnapDistance"],required:!1,hints:{question:"What is the maximum distance in the location-input that a point can be moved to be snapped to a way?",ifunset:"Do not snap to a layer",inline:"a point is snapped if the location input is at most <b>{value}m</b> away from an object"},type:"number",description:`If specified, a new point will only be snapped if it is within this range.
If further away, it'll be placed in the center of the location input
Distance in meter`},{path:["layers","override","tagRenderings"],required:!1,hints:{typehint:"tagrendering[]",group:"tagrenderings",question:"Edit this attribute showing piece/question"},type:[{description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`,type:"object",properties:{id:{type:"string"},mappings:{description:`Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes

question: What are common options?`,type:"array",items:{$ref:"#/definitions/MappingConfigJson"}},multiAnswer:{description:`If true, use checkboxes instead of radio buttons when asking the question

question: Should a contributor be allowed to select multiple mappings?

iftrue: allow to select multiple mappings
iffalse: only allow to select a single mapping
ifunset: only allow to select a single mapping`,type:"boolean"},freeform:{description:"Allow freeform text input from the user",type:"object",properties:{key:{description:`question: What is the name of the attribute that should be written to?
This is the OpenStreetMap-key that that value will be written to
ifunset: do not offer a freeform textfield as answer option`,type:"string"},type:{description:`question: What is the input type?
The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values
ifunset: use an unconstrained <b>string</b> as input (default)
suggestions: return validators.AllValidators.filter(type => !type.isMeta).map((type) => ({if: "value="+type.name, then: "<b>"+type.name+"</b> "+type.explanation.split("\\n")[0]}))`,type:"string"},placeholder:{description:`question: What placeholder text should be shown in the input-element if there is no input?
A (translated) text that is shown (as gray text) within the textfield
type: translation
group: expert`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},helperArgs:{description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'
group: expert`,type:"array",items:{}},addExtraTags:{description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'
group: expert`,type:"array",items:{type:"string"}},inline:{description:`question: Show the freeform as box within the question?
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
ifunset: show the freeform input field full-width
iftrue: show the freeform input field as a small field within the question
group: expert`,type:"boolean"},default:{description:`question: What value should be entered in the text field if no value is set?
This can help people to quickly enter the most common option
ifunset: do not prefill the textfield
group: expert`,type:"string"},invalidValues:{description:`question: What values of the freeform key should be interpreted as 'unknown'?
For example, if a feature has \`shop=yes\`, the question 'what type of shop is this?' should still asked
ifunset: The question will be considered answered if any value is set for the key
group: expert`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]}}},question:{description:`question: What question should be shown to the contributor?

A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well.

ifunset: This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},questionHint:{description:`question: Should some extra information be shown to the contributor, alongside the question?
This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like
ifunset: No extra hint is given`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},labels:{description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer",type:"array",items:{type:"string"}},render:{description:`question: What text should be rendered?

This piece of text will be shown in the infobox.
In this text, values within braces (such as {braced(key)}) are replaced by the corresponding \`value\` in the object.
For example, if the object contains tags \`amenity=school; name=Windy Hill School\`, the render string \`This school is named {name}\` will be shown to the user as \`This school is named Windy Hill School\`

This text will be shown if:
- there is no mapping which matches (or there are no matches)
- no question, no mappings and no 'freeform' is set

Note that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as \`This is of type A &lt;br>&lt;img src='typeA-icon.svg' />\`
type: rendered
ifunset: No text is shown if no predefined options match.`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}]},icon:{description:`question: what icon should be shown next to the 'render' value?
An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value
Type: icon
ifunset: No additional icon is shown next to the always shown text`,anyOf:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}]},condition:{description:`question: When should this item be shown?
type: tag
ifunset: No specific condition set; always show this tagRendering or ask the question if unkown

Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},metacondition:{description:`question: When should this item be shown (including special conditions)?
type: tag

If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},description:{description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`,anyOf:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}]},classes:{description:`question: What css-classes should be applied to showing this attribute?

A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.

Values are split on \` \`  (space)`,type:"string"}},required:["id"],additionalProperties:!1},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`A tag rendering is a block that either shows the known value or asks a question.
Refer to the class \`TagRenderingConfigJson\` to see the possibilities.
Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override
A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.
At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","override","tagRenderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings"],required:!1,hints:{},type:"object",description:`Rewrites and multiplies the given renderings of type T.
This can be used for introducing many similar questions automatically,
which also makes translations easier.
(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)
For example:
\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:
[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }
]`},{path:["layers","override","tagRenderings","renderings","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","tagRenderings","renderings","override","mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["layers","override","tagRenderings","renderings","override","mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","override","multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","override","freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","override","freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["layers","override","tagRenderings","renderings","override","freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","override","freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","override","freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","override","freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","override","freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["layers","override","tagRenderings","renderings","override","freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["layers","override","tagRenderings","renderings","override","questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","override","labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["layers","override","tagRenderings","renderings","override","render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["layers","override","tagRenderings","renderings","override","icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["layers","override","tagRenderings","renderings","override","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["layers","override","tagRenderings","renderings","override","icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","tagRenderings","renderings","override","condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","override","metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["layers","override","tagRenderings","renderings","override","classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`},{path:["layers","override","filter"],required:!1,hints:{group:"filters"},type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","override","filter","id"],required:!0,hints:{},type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","override","filter","options"],required:!0,hints:{},type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.
An example which searches by name:
\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","override","filter","options","osmTags"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","fields","name"],required:!0,hints:{},type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","override","filter","#"],required:!1,hints:{},type:"string",description:'Used for comments or to disable a check\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","override","deletion"],required:!1,hints:{types:"Use an advanced delete configuration ; boolean",group:"editing",iftrue:"Allow deletion",iffalse:"Do not allow deletion",ifunset:"Do not allow deletion"},type:[{type:"object",properties:{neededChangesets:{description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.

type: nat
question: How many changesets must a contributor have before being allowed to delete a point?`,type:"number"},extraDeleteReasons:{description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`,type:"array",items:{type:"object",properties:{explanation:{description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default

question: For what extra reason might this feature be removed in real-life?`},changesetMessage:{description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english

question: What should be added to the changeset as delete reason?`,type:"string"}},required:["changesetMessage","explanation"]}},nonDeleteMappings:{description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`,type:"array",items:{type:"object",properties:{if:{$ref:"#/definitions/TagConfigJson",description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore

question: What tags should be applied to the object?`},then:{description:`The human explanation for the options

question: What text should be shown to the contributor for this reason?`}},required:["if","then"]}},softDeletionTags:{description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):

\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):

\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\`

question: If a hard delete is not possible, what tags should be applied to mark this feature as deleted?
type: tag`,anyOf:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}]},omitDefaultDeleteReasons:{description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping

question: Should the default delete reasons be hidden?
iftrue: Hide the default delete reasons
iffalse: Show the default delete reasons
ifunset: Show the default delete reasons (default behaviour)`,type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.
To configure, the following values are possible:
- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)
### The delete dialog
#### Hard deletion if enough experience
A feature can only be deleted from OpenStreetMap by mapcomplete if:
- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)
In all other cases, a 'soft deletion' is used.
#### Soft deletion
A 'soft deletion' is when the point isn't deleted fromOSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.
Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme
##### No-delete options
In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)
The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","override","deletion","neededChangesets"],required:!1,hints:{typehint:"nat",question:"How many changesets must a contributor have before being allowed to delete a point?"},type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","override","deletion","extraDeleteReasons"],required:!1,hints:{},type:"array",description:`*
By default, three reasons to delete a point are shown:
- The point does not exist anymore
- The point was a testing point
- THe point could not be found
However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:
- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...
These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","override","deletion","extraDeleteReasons","explanation"],required:!0,hints:{question:"For what extra reason might this feature be removed in real-life?"},description:`The text that will be shown to the user as option for why this point does not exist anymore.
Note that the most common reasons (test point, does not exist anymore, cannot be found) are already offered by default`},{path:["layers","override","deletion","extraDeleteReasons","changesetMessage"],required:!0,hints:{question:"What should be added to the changeset as delete reason?"},type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","override","deletion","nonDeleteMappings"],required:!1,hints:{},type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).
By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","override","deletion","nonDeleteMappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be applied to the object?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The tags that will be given to the object.
This must remove tags so that the 'source/osmTags' won't match anymore`},{path:["layers","override","deletion","nonDeleteMappings","then"],required:!0,hints:{question:"What text should be shown to the contributor for this reason?"},description:"The human explanation for the options"},{path:["layers","override","deletion","softDeletionTags"],required:!1,hints:{typehint:"tag",question:"If a hard delete is not possible, what tags should be applied to mark this feature as deleted?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!
Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`
or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","override","deletion","softDeletionTags","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","softDeletionTags","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","omitDefaultDeleteReasons"],required:!1,hints:{question:"Should the default delete reasons be hidden?",iftrue:"Hide the default delete reasons",iffalse:"Show the default delete reasons",ifunset:"Show the default delete reasons (default behaviour)"},type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","override","allowMove"],required:!1,hints:{types:"use an advanced move configuration ; boolean",group:"editing",question:"Is deleting a point allowed?",iftrue:"Allow contributors to move a point (for accuracy or a relocation)",iffalse:"Don't allow contributors to move points",ifunset:"Don't allow contributors to move points (default)"},type:[{type:"object",properties:{enableImproveAccuracy:{description:`question: Should moving this type of point to improve the accuracy be allowed?
iftrue: This point can be moved to improve the accuracy
ifunset: (default) This point can be moved to improve the accuracy
iffalse: This point cannot be moved to improve the accuracy`,type:"boolean"},enableRelocation:{description:"question: Should moving this type of point due to a relocation be allowed?\n\nThis will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`\n\niftrue: This type of point can be moved due to a relocation (and will remove address information when this is done)\nifunset: (default) This type of point can be moved due to a relocation (and will remove address information when this is done)\niffalse: This type of point cannot be moved due to a relocation",type:"boolean"}},additionalProperties:!1},{type:"boolean"}],description:`Indicates if a point can be moved and why.
A feature can be moved by MapComplete if:
- It is a point
- The point is _not_ part of a way or a a relation.`},{path:["layers","override","allowMove","enableImproveAccuracy"],required:!1,hints:{question:"Should moving this type of point to improve the accuracy be allowed?",iftrue:"This point can be moved to improve the accuracy",iffalse:"This point cannot be moved to improve the accuracy",ifunset:"(default) This point can be moved to improve the accuracy"},type:"boolean",description:""},{path:["layers","override","allowMove","enableRelocation"],required:!1,hints:{question:"Should moving this type of point due to a relocation be allowed?",iftrue:"This type of point can be moved due to a relocation (and will remove address information when this is done)",iffalse:"This type of point cannot be moved due to a relocation",ifunset:"(default) This type of point can be moved due to a relocation (and will remove address information when this is done)"},type:"boolean",description:"This will erase the attributes `addr:street`, `addr:housenumber`, `addr:city` and `addr:postcode`"},{path:["layers","override","allowSplit"],required:!1,hints:{group:"editing",question:"Should the contributor be able to split ways using this layer?",iftrue:"enable the 'split-roads'-component",iffalse:"don't enable the split-roads componenet",ifunset:"don't enable the split-roads component"},type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.
If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","override","units"],required:!1,hints:{default:"ult: true,"},type:"object",description:`In some cases, a value is represented in a certain unit (such as meters for heigt/distance/..., km/h for speed, ...)
Sometimes, multiple denominations are possible (e.g. km/h vs mile/h; megawatt vs kilowatt vs gigawatt for power generators, ...)
This brings in some troubles, as there are multiple ways to write it (no denomitation, 'm' vs 'meter' 'metre', ...)
Not only do we want to write consistent data to OSM, we also want to present this consistently to the user.
This is handled by defining units.
# Rendering
To render a value with long (human) denomination, use {canonical(key)}
# Usage
First of all, you define which keys have units applied, for example:
\`\`\`
units: [
 appliesTo: ["maxspeed", "maxspeed:hgv", "maxspeed:bus"]
 applicableUnits: [
     ...
 ]
]
\`\`\`
ApplicableUnits defines which is the canonical extension, how it is presented to the user, ...:
\`\`\`
applicableUnits: [
{
    canonicalDenomination: "km/h",
    alternativeDenomination: ["km/u", "kmh", "kph"]
    human: {
        en: "kilometer/hour",
        nl: "kilometer/uur"
    },
    humanShort: {
        en: "km/h",
        nl: "km/u"
    }
},
{
    canoncialDenomination: "mph",
    ... similar for miles an hour ...
}
]
\`\`\`
If this is defined, then every key which the denominations apply to (\`maxspeed\`, \`maxspeed:hgv\` and \`maxspeed:bus\`) will be rewritten at the metatagging stage:
every value will be parsed and the canonical extension will be added add presented to the other parts of the code.
Also, if a freeform text field is used, an extra dropdown with applicable denominations will be given`},{path:["layers","override","units","appliesToKey"],required:!0,hints:{},type:"array",description:"Every key from this list will be normalized.\nTo render the value properly (with a human readable denomination), use `{canonical(<key>)}`"},{path:["layers","override","units","eraseInvalidValues"],required:!1,hints:{},type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","override","units","applicableUnits"],required:!0,hints:{},type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","override","units","applicableUnits","useIfNoUnitGiven"],required:!1,hints:{},type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation
E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.
If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","override","units","applicableUnits","canonicalDenomination"],required:!0,hints:{},type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.
Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","override","units","applicableUnits","canonicalDenominationSingular"],required:!1,hints:{},type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","override","units","applicableUnits","alternativeDenomination"],required:!1,hints:{},type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","override","units","applicableUnits","human"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","override","units","applicableUnits","humanSingular"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","override","units","applicableUnits","prefix"],required:!1,hints:{},type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","override","units","defaultInput"],required:!1,hints:{},type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.
When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","override","syncSelection"],required:!1,hints:{group:"advanced",question:"Should enabling/disabling the layer be saved (locally or in the cloud)?",suggestions:[{if:"value=no",then:"Don't save, always revert to the default"},{if:"value=local",then:"Save selection in local storage"},{if:"value=theme-only",then:"Save the state in the OSM-usersettings, but apply on this theme only (default)"},{if:"value=global",then:"Save in OSM-usersettings and toggle on _all_ themes using this layer"}]},type:"string",description:"If set, synchronizes whether or not this layer is enabled."},{path:["layers","override","#"],required:!1,hints:{group:"hidden"},type:"string",description:`Used for comments and/or to disable some checks
no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","override","fullNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:"_Set automatically by MapComplete, please ignore_"},{path:["layers","hideTagRenderingsWithLabels"],required:!1,hints:{},type:"array",description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`},{path:["overrideAll"],required:!1,hints:{},type:"object",description:`An override applied on all layers of the theme.
E.g.: if there are two layers defined:
\`\`\`
"layers":[
 {"title": ..., "tagRenderings": [...], "osmSource":{"tags": ...}},
 {"title", ..., "tagRenderings", [...], "osmSource":{"tags" ...}}
]
\`\`\`
and overrideAll is specified:
\`\`\`
"overrideAll": {
    "osmSource":{"geoJsonSource":"xyz"}
}
then the result will be that all the layers will have these properties applied and result in:
"layers":[
 {"title": ..., "tagRenderings": [...], "osmSource":{"tags": ..., "geoJsonSource":"xyz"}},
 {"title", ..., "tagRenderings", [...], "osmSource":{"tags" ..., "geoJsonSource":"xyz"}}
]
\`\`\`
If the overrideAll contains a list where the keys starts with a plus, the values will be appended (instead of discarding the old list), for example
"overrideAll": {
  "+tagRenderings": [ { ... some tagrendering ... }]
}
In the above scenario, \`sometagrendering\` will be added at the beginning of the tagrenderings of every layer`},{path:["tileLayerSources"],required:!1,hints:{},type:"array",description:"Define some (overlay) slippy map tilesources"},{path:["tileLayerSources","name"],required:!0,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The name of the imagery source"},{path:["customCss"],required:!1,hints:{group:"advanced"},type:"string",description:"The URL of a custom CSS stylesheet to modify the layout"},{path:["lockLocation"],required:!1,hints:{},type:[{type:"array",items:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2},{type:"array",items:{type:"array",items:{type:"number"}}}],description:`If set to true, the basemap will not scroll outside of the area visible on initial zoom.
If set to [[lon, lat], [lon, lat]], the map will not scroll outside of those bounds.
Off by default, which will enable panning to the entire world`},{path:["enableUserBadge"],required:!1,hints:{group:"feature_switches",question:"Should a user be able to login with OpenStreetMap?",iftrue:"Enable the possiblity to login with OpenStreetMap",iffalse:"Do not enable to login with OpenStreetMap, have a read-only view of MapComplete.",ifunset:"Enable the possiblity to login with OpenStreetMap (default)"},type:"boolean",description:`If not logged in, will not show the login buttons and hide all the editable elements.
As such, MapComplete will become read-only and a purely visualisation tool.`},{path:["enableShareScreen"],required:!1,hints:{group:"feature_switches",question:"Should the tab with options to share the current screen be enabled?",iftrue:"Enable the share screen",iffalse:"Do not enable the share screen",ifunset:"Enable the sharescreen (default)"},type:"boolean",description:"On can get the iFrame embed code here"},{path:["enableMoreQuests"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to switch to different themes?",iftrue:"enable to go back to the index page showing all themes",iffalse:"do not enable to go back to the index page showing all themes; hide the 'more themes' buttons",ifunset:"mapcomplete default: enable to go back to the index page showing all themes"},type:"boolean",description:"Typically enabled in iframes and/or on commisioned themes"},{path:["enableLayers"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to enable/disable layers and to filter the layers?",iftrue:"enable the filters/layers pane",iffalse:"do not enable to filter or to disable layers; hide the 'filter' tab from the overview and the button at the bottom-left",ifunset:"mapcomplete default: enable to filter or to enable/disable layers"},type:"boolean",description:"The corresponding URL-parameter is 'fs-filters' instead of 'fs-layers'"},{path:["enableSearch"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to search for locations?",iftrue:"Allow to search",iffalse:"Do not allow to search; hide the search-bar",ifunset:"MapComplete default: allow to search"},type:"boolean",description:""},{path:["enableAddNewPoints"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to add new points?",iftrue:"Allow to create new points",iffalse:"Do not allow to create new points, even if the layers in this theme support creating new points",ifunset:"MapComplete default: allow to create new points"},type:"boolean",description:`Adding new points is only possible if the loaded layers have presets set.
Some layers do not have presets. If the theme only has layers without presets, then adding new points will not be possible.`},{path:["enableGeolocation"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to use their GPS to geolocate themselfes on the map?",iftrue:"Allow to use the GPS",iffalse:"Do not allow to use the GPS, hide the geolocation-buttons",ifunset:"MapComplete default: allow to use the GPS"},type:"boolean",description:""},{path:["enableBackgroundLayerSelection"],required:!1,hints:{group:"feature_switches",question:"Should the user be able to switch the background layer?",iftrue:"Allow to switch the background layer",iffalse:"Do not allow to switch the background layer",ifunset:"MapComplete default: Allow to switch the background layer"},type:"boolean",description:`Enable switching the backgroundlayer.
If false, the quickswitch-buttons are removed (bottom left) and the dropdown in the layer selection is removed as well`},{path:["enableShowAllQuestions"],required:!1,hints:{group:"feature_switches",question:"Should the questions about a feature be presented one by one or all at once?",iftrue:"Show all unanswered questions at the same time",iffalse:"Show unanswered questions one by one",ifunset:"MapComplete default: Use the preference of the user to show questions at the same time or one by one"},type:"boolean",description:""},{path:["enableDownload"],required:!1,hints:{group:"feature_switches",question:"Should the 'download as CSV'- and 'download as Geojson'-buttons be enabled?",iftrue:"Enable the option to download the map as CSV and GeoJson",iffalse:"Enable the option to download the map as CSV and GeoJson",ifunset:"MapComplete default: Enable the option to download the map as CSV and GeoJson"},type:"boolean",description:""},{path:["enablePdfDownload"],required:!1,hints:{group:"feature_switches",question:"Should the 'download as PDF'-button be enabled?",iftrue:"Enable the option to download the map as PDF",iffalse:"Enable the option to download the map as PDF",ifunset:"MapComplete default: Enable the option to download the map as PDF"},type:"boolean",description:""},{path:["enableNoteImports"],required:!1,hints:{group:"advanced",question:"Should the 'notes' from OpenStreetMap be loaded and parsed for import helper notes?",iftrue:"Load notes and show import notes",iffalse:"Do not load import notes",ifunset:"MapComplete default: do not load import notes for sideloaded themes but do load them for official themes"},type:"boolean",description:`If true, notes will be loaded and parsed. If a note is an import (as created by the import_helper.html-tool from mapcomplete),
these notes will be shown if a relevant layer is present.`},{path:["overpassUrl"],required:!1,hints:{group:"advanced",question:"What overpass-api instance should be used for this layout?",ifunset:"Use the default, builtin collection of overpass instances"},type:"array",description:""},{path:["overpassTimeout"],required:!1,hints:{typehint:"pnat",group:"advanced",question:"After how much seconds should the overpass-query stop?",ifunset:"use the default amount of 30 seconds as timeout"},type:"number",description:`If a query takes too long, the overpass-server will abort.
Once can set the amount of time before overpass gives up here.`},{path:["widenFactor"],required:!1,hints:{},type:"number",description:`When a query is run, the data within bounds of the visible map is loaded.
However, users tend to pan and zoom a lot. It is pretty annoying if every single pan means a reloading of the data.
For this, the bounds are widened in order to make a small pan still within bounds of the loaded data.
IF widenfactor is 1, this feature is disabled. A recommended value is between 1 and 3`},{path:["overpassMaxZoom"],required:!1,hints:{},type:"number",description:`At low zoom levels, overpass is used to query features.
At high zoom level, the OSM api is used to fetch one or more BBOX aligning with a slippy tile.
The overpassMaxZoom controls the flipoverpoint: if the zoom is this or lower, overpass is used.`},{path:["osmApiTileSize"],required:!1,hints:{default:"overpassMaxZoom + 1"},type:"number",description:`When the OSM-api is used to fetch features, it does so in a tiled fashion.
These tiles are using a ceratin zoom level, that can be controlled here`},{path:["enableNodeDatabase"],required:!1,hints:{group:"hidden"},type:"boolean",description:`Enables tracking of all nodes when data is loaded.
This is useful for the 'ImportWay' and 'ConflateWay'-buttons who need this database.
Note: this flag will be automatically set and can thus be ignored.`}],ru=[{path:[],required:!1,hints:{},type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["mappings"],required:!1,hints:{question:"What are common options?"},type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["mappings","if"],required:!0,hints:{typehint:"tag",question:"What tags should be matched to show this option?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:"If in 'question'-mode and the contributor selects this option, these tags will be applied to the object"},{path:["mappings","then"],required:!0,hints:{typehint:"rendered",question:"What corresponding text should be shown?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"Shown if the `if` is fulfilled"},{path:["mappings","icon"],required:!1,hints:{typehint:"icon",question:"What icon should be shown next to this mapping?",ifunset:"Show no icon"},type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:"This icon will only be shown if the value is known, it is not displayed in the options (but might be in the future)"},{path:["mappings","icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the  icon"},{path:["mappings","icon","class"],required:!1,hints:{},type:"string",description:"Size of the image"},{path:["mappings","hideInAnswer"],required:!1,hints:{typehint:"tag",question:"Under what circumstances should this mapping be <b>hidden</b> from the possibilities a contributor can pick?",iftrue:"Never show this mapping as option to pick",ifunset:"Always show this mapping as option to pick"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).
In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.
To demonstrate an example making a default assumption:
mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]
For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}
Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch
e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:
{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},
    ]
}
Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["mappings","hideInAnswer","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","hideInAnswer","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot"],required:!1,hints:{question:"What tags should be applied if this mapping is _not_ chosen?",ifunset:"Do not apply a tag if a different mapping is chosen."},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["mappings","ifnot","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","addExtraTags"],required:!1,hints:{typehint:"simple_tag",question:"What extra tags should be added to the object if this object is chosen?"},type:"array",description:`If chosen as answer, these tags will be applied onto the object, together with the tags from the \`if\`
Not compatible with multiAnswer.
This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": ["not:crossing:marking="]
}
\`\`\``},{path:["mappings","searchTerms"],required:!1,hints:{group:"hidden",question:"If there are many options, what search terms match too?"},type:"object",description:`If there are many options, the mappings-radiobuttons will be replaced by an element with a searchfunction
Searchterms (per language) allow to easily find an option if there are many options`},{path:["mappings","priorityIf"],required:!1,hints:{group:"hidden"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["mappings","priorityIf","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","priorityIf","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","#"],required:!1,hints:{group:"hidden"},type:"string",description:"Used for comments or to disable a validation\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["multiAnswer"],required:!1,hints:{question:"Should a contributor be allowed to select multiple mappings?",iftrue:"allow to select multiple mappings",iffalse:"only allow to select a single mapping",ifunset:"only allow to select a single mapping"},type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["freeform"],required:!1,hints:{},type:"object",description:"Allow freeform text input from the user"},{path:["freeform","key"],required:!1,hints:{question:"What is the name of the attribute that should be written to?",ifunset:"do not offer a freeform textfield as answer option"},type:"string",description:"This is the OpenStreetMap-key that that value will be written to"},{path:["freeform","type"],required:!1,hints:{question:"What is the input type?",ifunset:"use an unconstrained <b>string</b> as input (default)",suggestions:[{if:"value=string",then:"<b>string</b> A simple piece of text"},{if:"value=text",then:"<b>text</b> A longer piece of text. Uses an textArea instead of a textField"},{if:"value=date",then:"<b>date</b> A date with date picker"},{if:"value=nat",then:"<b>nat</b> A  whole, positive number or zero"},{if:"value=int",then:"<b>int</b> A whole number, either positive, negative or zero"},{if:"value=distance",then:'<b>distance</b> A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]'},{if:"value=direction",then:"<b>direction</b> A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl)."},{if:"value=wikidata",then:"<b>wikidata</b> A wikidata identifier, e.g. Q42. "},{if:"value=pnat",then:"<b>pnat</b> A strict positive number"},{if:"value=float",then:"<b>float</b> A decimal number"},{if:"value=pfloat",then:"<b>pfloat</b> A positive decimal number or zero"},{if:"value=email",then:"<b>email</b> An email adress"},{if:"value=url",then:"<b>url</b> The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed"},{if:"value=phone",then:"<b>phone</b> A phone number"},{if:"value=opening_hours",then:"<b>opening_hours</b> Has extra elements to easily input when a POI is opened. "},{if:"value=color",then:"<b>color</b> Shows a color picker"},{if:"value=icon",then:"<b>icon</b> Makes sure that a valid .svg-path is added"},{if:"value=fediverse",then:"<b>fediverse</b> Validates fediverse addresses and normalizes them into `@username@server`-format"},{if:"value=id",then:"<b>id</b> Checks for valid identifiers for layers, will automatically replace spaces and uppercase"}]},type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["freeform","placeholder"],required:!1,hints:{typehint:"translation",group:"expert",question:"What placeholder text should be shown in the input-element if there is no input?"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["freeform","helperArgs"],required:!1,hints:{group:"expert"},type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["freeform","addExtraTags"],required:!1,hints:{group:"expert"},type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["freeform","inline"],required:!1,hints:{group:"expert",question:"Show the freeform as box within the question?",iftrue:"show the freeform input field as a small field within the question",ifunset:"show the freeform input field full-width"},type:"boolean",description:`Instead of showing a full-width text field, the text field will be shown within the rendering of the question.
This combines badly with special input elements, as it'll distort the layout.`},{path:["freeform","default"],required:!1,hints:{group:"expert",question:"What value should be entered in the text field if no value is set?",ifunset:"do not prefill the textfield"},type:"string",description:"This can help people to quickly enter the most common option"},{path:["freeform","invalidValues"],required:!1,hints:{group:"expert",question:"What values of the freeform key should be interpreted as 'unknown'?",ifunset:"The question will be considered answered if any value is set for the key"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:"For example, if a feature has `shop=yes`, the question 'what type of shop is this?' should still asked"},{path:["freeform","invalidValues","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["freeform","invalidValues","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["question"],required:!1,hints:{question:"What question should be shown to the contributor?",ifunset:"This tagrendering will be shown if it is known, but cannot be edited by the contributor, effectively resutling in a read-only rendering"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A question is presented ot the user if no mapping matches and the 'freeform' key is not set as well."},{path:["questionHint"],required:!1,hints:{question:"Should some extra information be shown to the contributor, alongside the question?",ifunset:"No extra hint is given"},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`This hint is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["labels"],required:!1,hints:{},type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to only include a subset of the tagRenderings when reusing a layer"},{path:["render"],required:!1,hints:{typehint:"rendered",question:"What text should be rendered?",ifunset:"No text is shown if no predefined options match."},type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:"This piece of text will be shown in the infobox.\nIn this text, values within braces (such as {braced(key)}) are replaced by the corresponding `value` in the object.\nFor example, if the object contains tags `amenity=school; name=Windy Hill School`, the render string `This school is named {name}` will be shown to the user as `This school is named Windy Hill School`\nThis text will be shown if:\n- there is no mapping which matches (or there are no matches)\n- no question, no mappings and no 'freeform' is set\nNote that this is a HTML-interpreted value, so you can add links as e.g. '&lt;a href='{website}'>{website}&lt;/a>' or include images such as `This is of type A &lt;br>&lt;img src='typeA-icon.svg' />`"},{path:["icon"],required:!1,hints:{typehint:"icon",question:"what icon should be shown next to the 'render' value?",ifunset:"No additional icon is shown next to the always shown text"},type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon shown next to the rendering; typically shown pretty small
This is only shown next to the "render" value`},{path:["icon","path"],required:!0,hints:{typehint:"icon"},type:"string",description:"The path to the icon"},{path:["icon","class"],required:!1,hints:{},type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["condition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown?",ifunset:"No specific condition set; always show this tagRendering or ask the question if unkown"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.
This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`
A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["condition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["condition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition"],required:!1,hints:{typehint:"tag",question:"When should this item be shown (including special conditions)?"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{$ref:"#/definitions/{or:TagConfigJson[];}"},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["metacondition","and"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition","or"],required:!1,hints:{typehint:"tag"},type:[{$ref:"#/definitions/{and:TagConfigJson[];}"},{type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["description"],required:!1,hints:{},type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A human-readable text explaining what this tagRendering does.
Mostly used for the shared tagrenderings`},{path:["classes"],required:!1,hints:{question:"What css-classes should be applied to showing this attribute?"},type:"string",description:`A list of css-classes to apply to the entire tagRendering.
These classes are applied in 'answer'-mode, not in question mode
This is only for advanced users.
Values are split on \` \`  (space)`}];var Qe={},js={},ti={},Zn={},gy={get exports(){return Zn},set exports(n){Zn=n}};/*! https://mths.be/he v1.2.0 by @mathias | MIT license */(function(n,e){(function(t){var i=e,s=n&&n.exports==i&&n,o=typeof O=="object"&&O;(o.global===o||o.window===o)&&(t=o);var r=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=/[\x01-\x7F]/g,l=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,a=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,c={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","	":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr",ª:"ordf",á:"aacute",Á:"Aacute",à:"agrave",À:"Agrave",ă:"abreve",Ă:"Abreve",â:"acirc",Â:"Acirc",å:"aring",Å:"angst",ä:"auml",Ä:"Auml",ã:"atilde",Ã:"Atilde",ą:"aogon",Ą:"Aogon",ā:"amacr",Ā:"Amacr",æ:"aelig",Æ:"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf",ℬ:"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf",ℭ:"Cfr","𝒞":"Cscr",ℂ:"Copf",ć:"cacute",Ć:"Cacute",ĉ:"ccirc",Ĉ:"Ccirc",č:"ccaron",Č:"Ccaron",ċ:"cdot",Ċ:"Cdot",ç:"ccedil",Ç:"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf",ď:"dcaron",Ď:"Dcaron",đ:"dstrok",Đ:"Dstrok",ð:"eth",Ð:"ETH","ⅇ":"ee",ℯ:"escr","𝔢":"efr","𝕖":"eopf",ℰ:"Escr","𝔈":"Efr","𝔼":"Eopf",é:"eacute",É:"Eacute",è:"egrave",È:"Egrave",ê:"ecirc",Ê:"Ecirc",ě:"ecaron",Ě:"Ecaron",ë:"euml",Ë:"Euml",ė:"edot",Ė:"Edot",ę:"eogon",Ę:"Eogon",ē:"emacr",Ē:"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf",ℱ:"Fscr",ﬀ:"fflig",ﬃ:"ffilig",ﬄ:"ffllig",ﬁ:"filig",fj:"fjlig",ﬂ:"fllig",ƒ:"fnof",ℊ:"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr",ǵ:"gacute",ğ:"gbreve",Ğ:"Gbreve",ĝ:"gcirc",Ĝ:"Gcirc",ġ:"gdot",Ġ:"Gdot",Ģ:"Gcedil","𝔥":"hfr",ℎ:"planckh","𝒽":"hscr","𝕙":"hopf",ℋ:"Hscr",ℌ:"Hfr",ℍ:"Hopf",ĥ:"hcirc",Ĥ:"Hcirc",ℏ:"hbar",ħ:"hstrok",Ħ:"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf",ℐ:"Iscr",ℑ:"Im",í:"iacute",Í:"Iacute",ì:"igrave",Ì:"Igrave",î:"icirc",Î:"Icirc",ï:"iuml",Ï:"Iuml",ĩ:"itilde",Ĩ:"Itilde",İ:"Idot",į:"iogon",Į:"Iogon",ī:"imacr",Ī:"Imacr",ĳ:"ijlig",Ĳ:"IJlig",ı:"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf",ĵ:"jcirc",Ĵ:"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr",ķ:"kcedil",Ķ:"Kcedil","𝔩":"lfr","𝓁":"lscr",ℓ:"ell","𝕝":"lopf",ℒ:"Lscr","𝔏":"Lfr","𝕃":"Lopf",ĺ:"lacute",Ĺ:"Lacute",ľ:"lcaron",Ľ:"Lcaron",ļ:"lcedil",Ļ:"Lcedil",ł:"lstrok",Ł:"Lstrok",ŀ:"lmidot",Ŀ:"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf",ℳ:"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr",ℕ:"Nopf","𝒩":"Nscr","𝔑":"Nfr",ń:"nacute",Ń:"Nacute",ň:"ncaron",Ň:"Ncaron",ñ:"ntilde",Ñ:"Ntilde",ņ:"ncedil",Ņ:"Ncedil","№":"numero",ŋ:"eng",Ŋ:"ENG","𝕠":"oopf","𝔬":"ofr",ℴ:"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf",º:"ordm",ó:"oacute",Ó:"Oacute",ò:"ograve",Ò:"Ograve",ô:"ocirc",Ô:"Ocirc",ö:"ouml",Ö:"Ouml",ő:"odblac",Ő:"Odblac",õ:"otilde",Õ:"Otilde",ø:"oslash",Ø:"Oslash",ō:"omacr",Ō:"Omacr",œ:"oelig",Œ:"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf",ℙ:"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr",ℚ:"Qopf",ĸ:"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr",ℛ:"Rscr",ℜ:"Re",ℝ:"Ropf",ŕ:"racute",Ŕ:"Racute",ř:"rcaron",Ř:"Rcaron",ŗ:"rcedil",Ŗ:"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS",ś:"sacute",Ś:"Sacute",ŝ:"scirc",Ŝ:"Scirc",š:"scaron",Š:"Scaron",ş:"scedil",Ş:"Scedil",ß:"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf",ť:"tcaron",Ť:"Tcaron",ţ:"tcedil",Ţ:"Tcedil","™":"trade",ŧ:"tstrok",Ŧ:"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr",ú:"uacute",Ú:"Uacute",ù:"ugrave",Ù:"Ugrave",ŭ:"ubreve",Ŭ:"Ubreve",û:"ucirc",Û:"Ucirc",ů:"uring",Ů:"Uring",ü:"uuml",Ü:"Uuml",ű:"udblac",Ű:"Udblac",ũ:"utilde",Ũ:"Utilde",ų:"uogon",Ų:"Uogon",ū:"umacr",Ū:"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr",ŵ:"wcirc",Ŵ:"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf",ý:"yacute",Ý:"Yacute",ŷ:"ycirc",Ŷ:"Ycirc",ÿ:"yuml",Ÿ:"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf",ℨ:"Zfr",ℤ:"Zopf","𝒵":"Zscr",ź:"zacute",Ź:"Zacute",ž:"zcaron",Ž:"Zcaron",ż:"zdot",Ż:"Zdot",Ƶ:"imped",þ:"thorn",Þ:"THORN",ŉ:"napos",α:"alpha",Α:"Alpha",β:"beta",Β:"Beta",γ:"gamma",Γ:"Gamma",δ:"delta",Δ:"Delta",ε:"epsi","ϵ":"epsiv",Ε:"Epsilon",ϝ:"gammad",Ϝ:"Gammad",ζ:"zeta",Ζ:"Zeta",η:"eta",Η:"Eta",θ:"theta",ϑ:"thetav",Θ:"Theta",ι:"iota",Ι:"Iota",κ:"kappa",ϰ:"kappav",Κ:"Kappa",λ:"lambda",Λ:"Lambda",μ:"mu",µ:"micro",Μ:"Mu",ν:"nu",Ν:"Nu",ξ:"xi",Ξ:"Xi",ο:"omicron",Ο:"Omicron",π:"pi",ϖ:"piv",Π:"Pi",ρ:"rho",ϱ:"rhov",Ρ:"Rho",σ:"sigma",Σ:"Sigma",ς:"sigmaf",τ:"tau",Τ:"Tau",υ:"upsi",Υ:"Upsilon",ϒ:"Upsi",φ:"phi",ϕ:"phiv",Φ:"Phi",χ:"chi",Χ:"Chi",ψ:"psi",Ψ:"Psi",ω:"omega",Ω:"ohm",а:"acy",А:"Acy",б:"bcy",Б:"Bcy",в:"vcy",В:"Vcy",г:"gcy",Г:"Gcy",ѓ:"gjcy",Ѓ:"GJcy",д:"dcy",Д:"Dcy",ђ:"djcy",Ђ:"DJcy",е:"iecy",Е:"IEcy",ё:"iocy",Ё:"IOcy",є:"jukcy",Є:"Jukcy",ж:"zhcy",Ж:"ZHcy",з:"zcy",З:"Zcy",ѕ:"dscy",Ѕ:"DScy",и:"icy",И:"Icy",і:"iukcy",І:"Iukcy",ї:"yicy",Ї:"YIcy",й:"jcy",Й:"Jcy",ј:"jsercy",Ј:"Jsercy",к:"kcy",К:"Kcy",ќ:"kjcy",Ќ:"KJcy",л:"lcy",Л:"Lcy",љ:"ljcy",Љ:"LJcy",м:"mcy",М:"Mcy",н:"ncy",Н:"Ncy",њ:"njcy",Њ:"NJcy",о:"ocy",О:"Ocy",п:"pcy",П:"Pcy",р:"rcy",Р:"Rcy",с:"scy",С:"Scy",т:"tcy",Т:"Tcy",ћ:"tshcy",Ћ:"TSHcy",у:"ucy",У:"Ucy",ў:"ubrcy",Ў:"Ubrcy",ф:"fcy",Ф:"Fcy",х:"khcy",Х:"KHcy",ц:"tscy",Ц:"TScy",ч:"chcy",Ч:"CHcy",џ:"dzcy",Џ:"DZcy",ш:"shcy",Ш:"SHcy",щ:"shchcy",Щ:"SHCHcy",ъ:"hardcy",Ъ:"HARDcy",ы:"ycy",Ы:"Ycy",ь:"softcy",Ь:"SOFTcy",э:"ecy",Э:"Ecy",ю:"yucy",Ю:"YUcy",я:"yacy",Я:"YAcy",ℵ:"aleph",ℶ:"beth",ℷ:"gimel",ℸ:"daleth"},d=/["&'<>`]/g,m={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},f=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,y=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,g=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,x={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},k={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},A={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},_=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],S=String.fromCharCode,T={},q=T.hasOwnProperty,I=function(L,te){return q.call(L,te)},$=function(L,te){for(var he=-1,ge=L.length;++he<ge;)if(L[he]==te)return!0;return!1},N=function(L,te){if(!L)return te;var he={},ge;for(ge in te)he[ge]=I(L,ge)?L[ge]:te[ge];return he},G=function(L,te){var he="";return L>=55296&&L<=57343||L>1114111?(te&&ae("character reference outside the permissible Unicode range"),"�"):I(A,L)?(te&&ae("disallowed character reference"),A[L]):(te&&$(_,L)&&ae("disallowed character reference"),L>65535&&(L-=65536,he+=S(L>>>10&1023|55296),L=56320|L&1023),he+=S(L),he)},U=function(L){return"&#x"+L.toString(16).toUpperCase()+";"},z=function(L){return"&#"+L+";"},ae=function(L){throw Error("Parse error: "+L)},ee=function(L,te){te=N(te,ee.options);var he=te.strict;he&&y.test(L)&&ae("forbidden code point");var ge=te.encodeEverything,_e=te.useNamedReferences,Y=te.allowUnsafeSymbols,ce=te.decimal?z:U,be=function(fe){return ce(fe.charCodeAt(0))};return ge?(L=L.replace(u,function(fe){return _e&&I(c,fe)?"&"+c[fe]+";":be(fe)}),_e&&(L=L.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),_e&&(L=L.replace(a,function(fe){return"&"+c[fe]+";"}))):_e?(Y||(L=L.replace(d,function(fe){return"&"+c[fe]+";"})),L=L.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;"),L=L.replace(a,function(fe){return"&"+c[fe]+";"})):Y||(L=L.replace(d,be)),L.replace(r,function(fe){var Be=fe.charCodeAt(0),He=fe.charCodeAt(1),ke=(Be-55296)*1024+He-56320+65536;return ce(ke)}).replace(l,be)};ee.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var Ge=function(L,te){te=N(te,Ge.options);var he=te.strict;return he&&f.test(L)&&ae("malformed character reference"),L.replace(g,function(ge,_e,Y,ce,be,fe,Be,He,ke){var Z,oe,Rt,kn,Ve,Tt;return _e?(Ve=_e,x[Ve]):Y?(Ve=Y,Tt=ce,Tt&&te.isAttributeValue?(he&&Tt=="="&&ae("`&` did not start a character reference"),ge):(he&&ae("named character reference was not terminated by a semicolon"),k[Ve]+(Tt||""))):be?(Rt=be,oe=fe,he&&!oe&&ae("character reference was not terminated by a semicolon"),Z=parseInt(Rt,10),G(Z,he)):Be?(kn=Be,oe=He,he&&!oe&&ae("character reference was not terminated by a semicolon"),Z=parseInt(kn,16),G(Z,he)):(he&&ae("named character reference was not terminated by a semicolon"),ge)})};Ge.options={isAttributeValue:!1,strict:!1};var Me=function(L){return L.replace(d,function(te){return m[te]})},tt={version:"1.2.0",encode:ee,decode:Ge,escape:Me,unescape:Ge};if(i&&!i.nodeType)if(s)s.exports=tt;else for(var ze in tt)I(tt,ze)&&(i[ze]=tt[ze]);else t.he=tt})(O)})(gy,Zn);Object.defineProperty(ti,"__esModule",{value:!0});var ml=Zn,fy=function(){function n(e,t){e===void 0&&(e=null),this.parentNode=e,this.childNodes=[],Object.defineProperty(this,"range",{enumerable:!1,writable:!0,configurable:!0,value:t??[-1,-1]})}return n.prototype.remove=function(){var e=this;if(this.parentNode){var t=this.parentNode.childNodes;this.parentNode.childNodes=t.filter(function(i){return e!==i}),this.parentNode=null}return this},Object.defineProperty(n.prototype,"innerText",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"textContent",{get:function(){return(0,ml.decode)(this.rawText)},set:function(e){this.rawText=(0,ml.encode)(e)},enumerable:!1,configurable:!0}),n}();ti.default=fy;var Cn={};Object.defineProperty(Cn,"__esModule",{value:!0});var Wo;(function(n){n[n.ELEMENT_NODE=1]="ELEMENT_NODE",n[n.TEXT_NODE=3]="TEXT_NODE",n[n.COMMENT_NODE=8]="COMMENT_NODE"})(Wo||(Wo={}));Cn.default=Wo;var my=O&&O.__extends||function(){var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,s){i.__proto__=s}||function(i,s){for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(i[o]=s[o])},n(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");n(e,t);function i(){this.constructor=e}e.prototype=t===null?Object.create(t):(i.prototype=t.prototype,new i)}}(),au=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(js,"__esModule",{value:!0});var yy=au(ti),by=au(Cn),wy=function(n){my(e,n);function e(t,i,s){var o=n.call(this,i,s)||this;return o.rawText=t,o.nodeType=by.default.COMMENT_NODE,o}return e.prototype.clone=function(){return new e(this.rawText,null)},Object.defineProperty(e.prototype,"text",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),e.prototype.toString=function(){return"<!--".concat(this.rawText,"-->")},e}(yy.default);js.default=wy;var Jt={},lu={},uu={},mt={},xn={},Os={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.Doctype=n.CDATA=n.Tag=n.Style=n.Script=n.Comment=n.Directive=n.Text=n.Root=n.isTag=n.ElementType=void 0;var e;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(e=n.ElementType||(n.ElementType={}));function t(i){return i.type===e.Tag||i.type===e.Script||i.type===e.Style}n.isTag=t,n.Root=e.Root,n.Text=e.Text,n.Directive=e.Directive,n.Comment=e.Comment,n.Script=e.Script,n.Style=e.Style,n.Tag=e.Tag,n.CDATA=e.CDATA,n.Doctype=e.Doctype})(Os);var re={},rn=O&&O.__extends||function(){var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,s){i.__proto__=s}||function(i,s){for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(i[o]=s[o])},n(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");n(e,t);function i(){this.constructor=e}e.prototype=t===null?Object.create(t):(i.prototype=t.prototype,new i)}}(),Ci=O&&O.__assign||function(){return Ci=Object.assign||function(n){for(var e,t=1,i=arguments.length;t<i;t++){e=arguments[t];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(n[s]=e[s])}return n},Ci.apply(this,arguments)};Object.defineProperty(re,"__esModule",{value:!0});re.cloneNode=re.hasChildren=re.isDocument=re.isDirective=re.isComment=re.isText=re.isCDATA=re.isTag=re.Element=re.Document=re.CDATA=re.NodeWithChildren=re.ProcessingInstruction=re.Comment=re.Text=re.DataNode=re.Node=void 0;var ct=Os,yr=function(){function n(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(n.prototype,"parentNode",{get:function(){return this.parent},set:function(e){this.parent=e},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"previousSibling",{get:function(){return this.prev},set:function(e){this.prev=e},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"nextSibling",{get:function(){return this.next},set:function(e){this.next=e},enumerable:!1,configurable:!0}),n.prototype.cloneNode=function(e){return e===void 0&&(e=!1),br(this,e)},n}();re.Node=yr;var Bs=function(n){rn(e,n);function e(t){var i=n.call(this)||this;return i.data=t,i}return Object.defineProperty(e.prototype,"nodeValue",{get:function(){return this.data},set:function(t){this.data=t},enumerable:!1,configurable:!0}),e}(yr);re.DataNode=Bs;var du=function(n){rn(e,n);function e(){var t=n!==null&&n.apply(this,arguments)||this;return t.type=ct.ElementType.Text,t}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),e}(Bs);re.Text=du;var hu=function(n){rn(e,n);function e(){var t=n!==null&&n.apply(this,arguments)||this;return t.type=ct.ElementType.Comment,t}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),e}(Bs);re.Comment=hu;var cu=function(n){rn(e,n);function e(t,i){var s=n.call(this,i)||this;return s.name=t,s.type=ct.ElementType.Directive,s}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),e}(Bs);re.ProcessingInstruction=cu;var Ns=function(n){rn(e,n);function e(t){var i=n.call(this)||this;return i.children=t,i}return Object.defineProperty(e.prototype,"firstChild",{get:function(){var t;return(t=this.children[0])!==null&&t!==void 0?t:null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this.children},set:function(t){this.children=t},enumerable:!1,configurable:!0}),e}(yr);re.NodeWithChildren=Ns;var pu=function(n){rn(e,n);function e(){var t=n!==null&&n.apply(this,arguments)||this;return t.type=ct.ElementType.CDATA,t}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),e}(Ns);re.CDATA=pu;var gu=function(n){rn(e,n);function e(){var t=n!==null&&n.apply(this,arguments)||this;return t.type=ct.ElementType.Root,t}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),e}(Ns);re.Document=gu;var fu=function(n){rn(e,n);function e(t,i,s,o){s===void 0&&(s=[]),o===void 0&&(o=t==="script"?ct.ElementType.Script:t==="style"?ct.ElementType.Style:ct.ElementType.Tag);var r=n.call(this,s)||this;return r.name=t,r.attribs=i,r.type=o,r}return Object.defineProperty(e.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tagName",{get:function(){return this.name},set:function(t){this.name=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){var t=this;return Object.keys(this.attribs).map(function(i){var s,o;return{name:i,value:t.attribs[i],namespace:(s=t["x-attribsNamespace"])===null||s===void 0?void 0:s[i],prefix:(o=t["x-attribsPrefix"])===null||o===void 0?void 0:o[i]}})},enumerable:!1,configurable:!0}),e}(Ns);re.Element=fu;function mu(n){return(0,ct.isTag)(n)}re.isTag=mu;function yu(n){return n.type===ct.ElementType.CDATA}re.isCDATA=yu;function bu(n){return n.type===ct.ElementType.Text}re.isText=bu;function wu(n){return n.type===ct.ElementType.Comment}re.isComment=wu;function vu(n){return n.type===ct.ElementType.Directive}re.isDirective=vu;function _u(n){return n.type===ct.ElementType.Root}re.isDocument=_u;function vy(n){return Object.prototype.hasOwnProperty.call(n,"children")}re.hasChildren=vy;function br(n,e){e===void 0&&(e=!1);var t;if(bu(n))t=new du(n.data);else if(wu(n))t=new hu(n.data);else if(mu(n)){var i=e?ko(n.children):[],s=new fu(n.name,Ci({},n.attribs),i);i.forEach(function(l){return l.parent=s}),n.namespace!=null&&(s.namespace=n.namespace),n["x-attribsNamespace"]&&(s["x-attribsNamespace"]=Ci({},n["x-attribsNamespace"])),n["x-attribsPrefix"]&&(s["x-attribsPrefix"]=Ci({},n["x-attribsPrefix"])),t=s}else if(yu(n)){var i=e?ko(n.children):[],o=new pu(i);i.forEach(function(a){return a.parent=o}),t=o}else if(_u(n)){var i=e?ko(n.children):[],r=new gu(i);i.forEach(function(a){return a.parent=r}),n["x-mode"]&&(r["x-mode"]=n["x-mode"]),t=r}else if(vu(n)){var u=new cu(n.name,n.data);n["x-name"]!=null&&(u["x-name"]=n["x-name"],u["x-publicId"]=n["x-publicId"],u["x-systemId"]=n["x-systemId"]),t=u}else throw new Error("Not implemented yet: ".concat(n.type));return t.startIndex=n.startIndex,t.endIndex=n.endIndex,n.sourceCodeLocation!=null&&(t.sourceCodeLocation=n.sourceCodeLocation),t}re.cloneNode=br;function ko(n){for(var e=n.map(function(i){return br(i,!0)}),t=1;t<e.length;t++)e[t].prev=e[t-1],e[t-1].next=e[t];return e}(function(n){var e=O&&O.__createBinding||(Object.create?function(u,l,a,c){c===void 0&&(c=a);var d=Object.getOwnPropertyDescriptor(l,a);(!d||("get"in d?!l.__esModule:d.writable||d.configurable))&&(d={enumerable:!0,get:function(){return l[a]}}),Object.defineProperty(u,c,d)}:function(u,l,a,c){c===void 0&&(c=a),u[c]=l[a]}),t=O&&O.__exportStar||function(u,l){for(var a in u)a!=="default"&&!Object.prototype.hasOwnProperty.call(l,a)&&e(l,u,a)};Object.defineProperty(n,"__esModule",{value:!0}),n.DomHandler=void 0;var i=Os,s=re;t(re,n);var o={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},r=function(){function u(l,a,c){this.dom=[],this.root=new s.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,typeof a=="function"&&(c=a,a=o),typeof l=="object"&&(a=l,l=void 0),this.callback=l??null,this.options=a??o,this.elementCB=c??null}return u.prototype.onparserinit=function(l){this.parser=l},u.prototype.onreset=function(){this.dom=[],this.root=new s.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},u.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},u.prototype.onerror=function(l){this.handleCallback(l)},u.prototype.onclosetag=function(){this.lastNode=null;var l=this.tagStack.pop();this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(l)},u.prototype.onopentag=function(l,a){var c=this.options.xmlMode?i.ElementType.Tag:void 0,d=new s.Element(l,a,void 0,c);this.addNode(d),this.tagStack.push(d)},u.prototype.ontext=function(l){var a=this.lastNode;if(a&&a.type===i.ElementType.Text)a.data+=l,this.options.withEndIndices&&(a.endIndex=this.parser.endIndex);else{var c=new s.Text(l);this.addNode(c),this.lastNode=c}},u.prototype.oncomment=function(l){if(this.lastNode&&this.lastNode.type===i.ElementType.Comment){this.lastNode.data+=l;return}var a=new s.Comment(l);this.addNode(a),this.lastNode=a},u.prototype.oncommentend=function(){this.lastNode=null},u.prototype.oncdatastart=function(){var l=new s.Text(""),a=new s.CDATA([l]);this.addNode(a),l.parent=a,this.lastNode=l},u.prototype.oncdataend=function(){this.lastNode=null},u.prototype.onprocessinginstruction=function(l,a){var c=new s.ProcessingInstruction(l,a);this.addNode(c)},u.prototype.handleCallback=function(l){if(typeof this.callback=="function")this.callback(l,this.dom);else if(l)throw l},u.prototype.addNode=function(l){var a=this.tagStack[this.tagStack.length-1],c=a.children[a.children.length-1];this.options.withStartIndices&&(l.startIndex=this.parser.startIndex),this.options.withEndIndices&&(l.endIndex=this.parser.endIndex),a.children.push(l),c&&(l.prev=c,c.next=l),l.parent=a,this.lastNode=null},u}();n.DomHandler=r,n.default=r})(xn);var Di={},Tu={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.Doctype=n.CDATA=n.Tag=n.Style=n.Script=n.Comment=n.Directive=n.Text=n.Root=n.isTag=n.ElementType=void 0;var e;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(e=n.ElementType||(n.ElementType={}));function t(i){return i.type===e.Tag||i.type===e.Script||i.type===e.Style}n.isTag=t,n.Root=e.Root,n.Text=e.Text,n.Directive=e.Directive,n.Comment=e.Comment,n.Script=e.Script,n.Style=e.Style,n.Tag=e.Tag,n.CDATA=e.CDATA,n.Doctype=e.Doctype})(Tu);var Cu={},Jo={},wr={};Object.defineProperty(wr,"__esModule",{value:!0});wr.default=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(n){return n.charCodeAt(0)}));var vr={};Object.defineProperty(vr,"__esModule",{value:!0});vr.default=new Uint16Array("Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(n){return n.charCodeAt(0)}));var Vo={};(function(n){var e;Object.defineProperty(n,"__esModule",{value:!0}),n.replaceCodePoint=n.fromCodePoint=void 0;var t=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);n.fromCodePoint=(e=String.fromCodePoint)!==null&&e!==void 0?e:function(o){var r="";return o>65535&&(o-=65536,r+=String.fromCharCode(o>>>10&1023|55296),o=56320|o&1023),r+=String.fromCharCode(o),r};function i(o){var r;return o>=55296&&o<=57343||o>1114111?65533:(r=t.get(o))!==null&&r!==void 0?r:o}n.replaceCodePoint=i;function s(o){return(0,n.fromCodePoint)(i(o))}n.default=s})(Vo);(function(n){var e=O&&O.__importDefault||function(g){return g&&g.__esModule?g:{default:g}};Object.defineProperty(n,"__esModule",{value:!0}),n.decodeXML=n.decodeHTMLStrict=n.decodeHTML=n.determineBranch=n.BinTrieFlags=n.fromCodePoint=n.replaceCodePoint=n.decodeCodePoint=n.xmlDecodeTree=n.htmlDecodeTree=void 0;var t=e(wr);n.htmlDecodeTree=t.default;var i=e(vr);n.xmlDecodeTree=i.default;var s=e(Vo);n.decodeCodePoint=s.default;var o=Vo;Object.defineProperty(n,"replaceCodePoint",{enumerable:!0,get:function(){return o.replaceCodePoint}}),Object.defineProperty(n,"fromCodePoint",{enumerable:!0,get:function(){return o.fromCodePoint}});var r;(function(g){g[g.NUM=35]="NUM",g[g.SEMI=59]="SEMI",g[g.ZERO=48]="ZERO",g[g.NINE=57]="NINE",g[g.LOWER_A=97]="LOWER_A",g[g.LOWER_F=102]="LOWER_F",g[g.LOWER_X=120]="LOWER_X",g[g.To_LOWER_BIT=32]="To_LOWER_BIT"})(r||(r={}));var u;(function(g){g[g.VALUE_LENGTH=49152]="VALUE_LENGTH",g[g.BRANCH_LENGTH=16256]="BRANCH_LENGTH",g[g.JUMP_TABLE=127]="JUMP_TABLE"})(u=n.BinTrieFlags||(n.BinTrieFlags={}));function l(g){return function(k,A){for(var _="",S=0,T=0;(T=k.indexOf("&",T))>=0;){if(_+=k.slice(S,T),S=T,T+=1,k.charCodeAt(T)===r.NUM){var q=T+1,I=10,$=k.charCodeAt(q);($|r.To_LOWER_BIT)===r.LOWER_X&&(I=16,T+=1,q+=1);do $=k.charCodeAt(++T);while($>=r.ZERO&&$<=r.NINE||I===16&&($|r.To_LOWER_BIT)>=r.LOWER_A&&($|r.To_LOWER_BIT)<=r.LOWER_F);if(q!==T){var N=k.substring(q,T),G=parseInt(N,I);if(k.charCodeAt(T)===r.SEMI)T+=1;else if(A)continue;_+=(0,s.default)(G),S=T}continue}for(var U=0,z=1,ae=0,ee=g[ae];T<k.length&&(ae=a(g,ee,ae+1,k.charCodeAt(T)),!(ae<0));T++,z++){ee=g[ae];var Ge=ee&u.VALUE_LENGTH;if(Ge){(!A||k.charCodeAt(T)===r.SEMI)&&(U=ae,z=0);var Me=(Ge>>14)-1;if(Me===0)break;ae+=Me}}if(U!==0){var Me=(g[U]&u.VALUE_LENGTH)>>14;_+=Me===1?String.fromCharCode(g[U]&~u.VALUE_LENGTH):Me===2?String.fromCharCode(g[U+1]):String.fromCharCode(g[U+1],g[U+2]),S=T-z+1}}return _+k.slice(S)}}function a(g,x,k,A){var _=(x&u.BRANCH_LENGTH)>>7,S=x&u.JUMP_TABLE;if(_===0)return S!==0&&A===S?k:-1;if(S){var T=A-S;return T<0||T>=_?-1:g[k+T]-1}for(var q=k,I=q+_-1;q<=I;){var $=q+I>>>1,N=g[$];if(N<A)q=$+1;else if(N>A)I=$-1;else return g[$+_]}return-1}n.determineBranch=a;var c=l(t.default),d=l(i.default);function m(g){return c(g,!1)}n.decodeHTML=m;function f(g){return c(g,!0)}n.decodeHTMLStrict=f;function y(g){return d(g,!0)}n.decodeXML=y})(Jo);var _n={},_r={};Object.defineProperty(_r,"__esModule",{value:!0});function es(n){for(var e=1;e<n.length;e++)n[e][0]+=n[e-1][0]+1;return n}_r.default=new Map(es([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(es([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(es([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(es([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));var bs={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.escapeText=n.escapeAttribute=n.escapeUTF8=n.escape=n.encodeXML=n.getCodePoint=n.xmlReplacer=void 0,n.xmlReplacer=/["&'<>$\x80-\uFFFF]/g;var e=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]);n.getCodePoint=String.prototype.codePointAt!=null?function(s,o){return s.codePointAt(o)}:function(s,o){return(s.charCodeAt(o)&64512)===55296?(s.charCodeAt(o)-55296)*1024+s.charCodeAt(o+1)-56320+65536:s.charCodeAt(o)};function t(s){for(var o="",r=0,u;(u=n.xmlReplacer.exec(s))!==null;){var l=u.index,a=s.charCodeAt(l),c=e.get(a);c!==void 0?(o+=s.substring(r,l)+c,r=l+1):(o+="".concat(s.substring(r,l),"&#x").concat((0,n.getCodePoint)(s,l).toString(16),";"),r=n.xmlReplacer.lastIndex+=Number((a&64512)===55296))}return o+s.substr(r)}n.encodeXML=t,n.escape=t;function i(s,o){return function(u){for(var l,a=0,c="";l=s.exec(u);)a!==l.index&&(c+=u.substring(a,l.index)),c+=o.get(l[0].charCodeAt(0)),a=l.index+1;return c+u.substring(a)}}n.escapeUTF8=i(/[&<>'"]/g,e),n.escapeAttribute=i(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),n.escapeText=i(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]))})(bs);var _y=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(_n,"__esModule",{value:!0});_n.encodeNonAsciiHTML=_n.encodeHTML=void 0;var Ty=_y(_r),xu=bs,Cy=/[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;function xy(n){return Au(Cy,n)}_n.encodeHTML=xy;function Ay(n){return Au(xu.xmlReplacer,n)}_n.encodeNonAsciiHTML=Ay;function Au(n,e){for(var t="",i=0,s;(s=n.exec(e))!==null;){var o=s.index;t+=e.substring(i,o);var r=e.charCodeAt(o),u=Ty.default.get(r);if(typeof u=="object"){if(o+1<e.length){var l=e.charCodeAt(o+1),a=typeof u.n=="number"?u.n===l?u.o:void 0:u.n.get(l);if(a!==void 0){t+=a,i=n.lastIndex+=1;continue}}u=u.v}if(u!==void 0)t+=u,i=o+1;else{var c=(0,xu.getCodePoint)(e,o);t+="&#x".concat(c.toString(16),";"),i=n.lastIndex+=Number(c!==r)}}return t+e.substr(i)}(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeXMLStrict=n.decodeHTML5Strict=n.decodeHTML4Strict=n.decodeHTML5=n.decodeHTML4=n.decodeHTMLStrict=n.decodeHTML=n.decodeXML=n.encodeHTML5=n.encodeHTML4=n.encodeNonAsciiHTML=n.encodeHTML=n.escapeText=n.escapeAttribute=n.escapeUTF8=n.escape=n.encodeXML=n.encode=n.decodeStrict=n.decode=n.EncodingMode=n.DecodingMode=n.EntityLevel=void 0;var e=Jo,t=_n,i=bs,s;(function(f){f[f.XML=0]="XML",f[f.HTML=1]="HTML"})(s=n.EntityLevel||(n.EntityLevel={}));var o;(function(f){f[f.Legacy=0]="Legacy",f[f.Strict=1]="Strict"})(o=n.DecodingMode||(n.DecodingMode={}));var r;(function(f){f[f.UTF8=0]="UTF8",f[f.ASCII=1]="ASCII",f[f.Extensive=2]="Extensive",f[f.Attribute=3]="Attribute",f[f.Text=4]="Text"})(r=n.EncodingMode||(n.EncodingMode={}));function u(f,y){y===void 0&&(y=s.XML);var g=typeof y=="number"?{level:y}:y;return g.level===s.HTML?g.mode===o.Strict?(0,e.decodeHTMLStrict)(f):(0,e.decodeHTML)(f):(0,e.decodeXML)(f)}n.decode=u;function l(f,y){y===void 0&&(y=s.XML);var g=typeof y=="number"?{level:y}:y;return g.level===s.HTML?g.mode===o.Legacy?(0,e.decodeHTML)(f):(0,e.decodeHTMLStrict)(f):(0,e.decodeXML)(f)}n.decodeStrict=l;function a(f,y){y===void 0&&(y=s.XML);var g=typeof y=="number"?{level:y}:y;return g.mode===r.UTF8?(0,i.escapeUTF8)(f):g.mode===r.Attribute?(0,i.escapeAttribute)(f):g.mode===r.Text?(0,i.escapeText)(f):g.level===s.HTML?g.mode===r.ASCII?(0,t.encodeNonAsciiHTML)(f):(0,t.encodeHTML)(f):(0,i.encodeXML)(f)}n.encode=a;var c=bs;Object.defineProperty(n,"encodeXML",{enumerable:!0,get:function(){return c.encodeXML}}),Object.defineProperty(n,"escape",{enumerable:!0,get:function(){return c.escape}}),Object.defineProperty(n,"escapeUTF8",{enumerable:!0,get:function(){return c.escapeUTF8}}),Object.defineProperty(n,"escapeAttribute",{enumerable:!0,get:function(){return c.escapeAttribute}}),Object.defineProperty(n,"escapeText",{enumerable:!0,get:function(){return c.escapeText}});var d=_n;Object.defineProperty(n,"encodeHTML",{enumerable:!0,get:function(){return d.encodeHTML}}),Object.defineProperty(n,"encodeNonAsciiHTML",{enumerable:!0,get:function(){return d.encodeNonAsciiHTML}}),Object.defineProperty(n,"encodeHTML4",{enumerable:!0,get:function(){return d.encodeHTML}}),Object.defineProperty(n,"encodeHTML5",{enumerable:!0,get:function(){return d.encodeHTML}});var m=Jo;Object.defineProperty(n,"decodeXML",{enumerable:!0,get:function(){return m.decodeXML}}),Object.defineProperty(n,"decodeHTML",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTMLStrict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeHTML4",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTML5",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTML4Strict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeHTML5Strict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeXMLStrict",{enumerable:!0,get:function(){return m.decodeXML}})})(Cu);var Qn={};Object.defineProperty(Qn,"__esModule",{value:!0});Qn.attributeNames=Qn.elementNames=void 0;Qn.elementNames=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map(function(n){return[n.toLowerCase(),n]}));Qn.attributeNames=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map(function(n){return[n.toLowerCase(),n]}));var Pn=O&&O.__assign||function(){return Pn=Object.assign||function(n){for(var e,t=1,i=arguments.length;t<i;t++){e=arguments[t];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(n[s]=e[s])}return n},Pn.apply(this,arguments)},ky=O&&O.__createBinding||(Object.create?function(n,e,t,i){i===void 0&&(i=t);var s=Object.getOwnPropertyDescriptor(e,t);(!s||("get"in s?!e.__esModule:s.writable||s.configurable))&&(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,i,s)}:function(n,e,t,i){i===void 0&&(i=t),n[i]=e[t]}),qy=O&&O.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),$y=O&&O.__importStar||function(n){if(n&&n.__esModule)return n;var e={};if(n!=null)for(var t in n)t!=="default"&&Object.prototype.hasOwnProperty.call(n,t)&&ky(e,n,t);return qy(e,n),e};Object.defineProperty(Di,"__esModule",{value:!0});Di.render=void 0;var Ot=$y(Tu),ws=Cu,ku=Qn,Sy=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function Dy(n){return n.replace(/"/g,"&quot;")}function Ry(n,e){var t;if(n){var i=((t=e.encodeEntities)!==null&&t!==void 0?t:e.decodeEntities)===!1?Dy:e.xmlMode||e.encodeEntities!=="utf8"?ws.encodeXML:ws.escapeAttribute;return Object.keys(n).map(function(s){var o,r,u=(o=n[s])!==null&&o!==void 0?o:"";return e.xmlMode==="foreign"&&(s=(r=ku.attributeNames.get(s))!==null&&r!==void 0?r:s),!e.emptyAttrs&&!e.xmlMode&&u===""?s:"".concat(s,'="').concat(i(u),'"')}).join(" ")}}var yl=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function Ms(n,e){e===void 0&&(e={});for(var t=("length"in n)?n:[n],i="",s=0;s<t.length;s++)i+=Ey(t[s],e);return i}Di.render=Ms;Di.default=Ms;function Ey(n,e){switch(n.type){case Ot.Root:return Ms(n.children,e);case Ot.Doctype:case Ot.Directive:return Oy(n);case Ot.Comment:return My(n);case Ot.CDATA:return Ny(n);case Ot.Script:case Ot.Style:case Ot.Tag:return jy(n,e);case Ot.Text:return By(n,e)}}var Iy=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),Fy=new Set(["svg","math"]);function jy(n,e){var t;e.xmlMode==="foreign"&&(n.name=(t=ku.elementNames.get(n.name))!==null&&t!==void 0?t:n.name,n.parent&&Iy.has(n.parent.name)&&(e=Pn(Pn({},e),{xmlMode:!1}))),!e.xmlMode&&Fy.has(n.name)&&(e=Pn(Pn({},e),{xmlMode:"foreign"}));var i="<".concat(n.name),s=Ry(n.attribs,e);return s&&(i+=" ".concat(s)),n.children.length===0&&(e.xmlMode?e.selfClosingTags!==!1:e.selfClosingTags&&yl.has(n.name))?(e.xmlMode||(i+=" "),i+="/>"):(i+=">",n.children.length>0&&(i+=Ms(n.children,e)),(e.xmlMode||!yl.has(n.name))&&(i+="</".concat(n.name,">"))),i}function Oy(n){return"<".concat(n.data,">")}function By(n,e){var t,i=n.data||"";return((t=e.encodeEntities)!==null&&t!==void 0?t:e.decodeEntities)!==!1&&!(!e.xmlMode&&n.parent&&Sy.has(n.parent.name))&&(i=e.xmlMode||e.encodeEntities!=="utf8"?(0,ws.encodeXML)(i):(0,ws.escapeText)(i)),i}function Ny(n){return"<![CDATA[".concat(n.children[0].data,"]]>")}function My(n){return"<!--".concat(n.data,"-->")}var Ly=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(mt,"__esModule",{value:!0});mt.innerText=mt.textContent=mt.getText=mt.getInnerHTML=mt.getOuterHTML=void 0;var Dt=xn,Py=Ly(Di),Wy=Os;function qu(n,e){return(0,Py.default)(n,e)}mt.getOuterHTML=qu;function Jy(n,e){return(0,Dt.hasChildren)(n)?n.children.map(function(t){return qu(t,e)}).join(""):""}mt.getInnerHTML=Jy;function ds(n){return Array.isArray(n)?n.map(ds).join(""):(0,Dt.isTag)(n)?n.name==="br"?`
`:ds(n.children):(0,Dt.isCDATA)(n)?ds(n.children):(0,Dt.isText)(n)?n.data:""}mt.getText=ds;function Ho(n){return Array.isArray(n)?n.map(Ho).join(""):(0,Dt.hasChildren)(n)&&!(0,Dt.isComment)(n)?Ho(n.children):(0,Dt.isText)(n)?n.data:""}mt.textContent=Ho;function Uo(n){return Array.isArray(n)?n.map(Uo).join(""):(0,Dt.hasChildren)(n)&&(n.type===Wy.ElementType.Tag||(0,Dt.isCDATA)(n))?Uo(n.children):(0,Dt.isText)(n)?n.data:""}mt.innerText=Uo;var Ue={};Object.defineProperty(Ue,"__esModule",{value:!0});Ue.prevElementSibling=Ue.nextElementSibling=Ue.getName=Ue.hasAttrib=Ue.getAttributeValue=Ue.getSiblings=Ue.getParent=Ue.getChildren=void 0;var Tr=xn;function $u(n){return(0,Tr.hasChildren)(n)?n.children:[]}Ue.getChildren=$u;function Su(n){return n.parent||null}Ue.getParent=Su;function Vy(n){var e,t,i=Su(n);if(i!=null)return $u(i);for(var s=[n],o=n.prev,r=n.next;o!=null;)s.unshift(o),e=o,o=e.prev;for(;r!=null;)s.push(r),t=r,r=t.next;return s}Ue.getSiblings=Vy;function Hy(n,e){var t;return(t=n.attribs)===null||t===void 0?void 0:t[e]}Ue.getAttributeValue=Hy;function Uy(n,e){return n.attribs!=null&&Object.prototype.hasOwnProperty.call(n.attribs,e)&&n.attribs[e]!=null}Ue.hasAttrib=Uy;function Gy(n){return n.name}Ue.getName=Gy;function zy(n){for(var e,t=n.next;t!==null&&!(0,Tr.isTag)(t);)e=t,t=e.next;return t}Ue.nextElementSibling=zy;function Yy(n){for(var e,t=n.prev;t!==null&&!(0,Tr.isTag)(t);)e=t,t=e.prev;return t}Ue.prevElementSibling=Yy;var ht={};Object.defineProperty(ht,"__esModule",{value:!0});ht.prepend=ht.prependChild=ht.append=ht.appendChild=ht.replaceElement=ht.removeElement=void 0;function Ri(n){if(n.prev&&(n.prev.next=n.next),n.next&&(n.next.prev=n.prev),n.parent){var e=n.parent.children;e.splice(e.lastIndexOf(n),1)}}ht.removeElement=Ri;function Ky(n,e){var t=e.prev=n.prev;t&&(t.next=e);var i=e.next=n.next;i&&(i.prev=e);var s=e.parent=n.parent;if(s){var o=s.children;o[o.lastIndexOf(n)]=e,n.parent=null}}ht.replaceElement=Ky;function Zy(n,e){if(Ri(e),e.next=null,e.parent=n,n.children.push(e)>1){var t=n.children[n.children.length-2];t.next=e,e.prev=t}else e.prev=null}ht.appendChild=Zy;function Qy(n,e){Ri(e);var t=n.parent,i=n.next;if(e.next=i,e.prev=n,n.next=e,e.parent=t,i){if(i.prev=e,t){var s=t.children;s.splice(s.lastIndexOf(i),0,e)}}else t&&t.children.push(e)}ht.append=Qy;function Xy(n,e){if(Ri(e),e.parent=n,e.prev=null,n.children.unshift(e)!==1){var t=n.children[1];t.prev=e,e.next=t}else e.next=null}ht.prependChild=Xy;function eb(n,e){Ri(e);var t=n.parent;if(t){var i=t.children;i.splice(i.indexOf(n),0,e)}n.prev&&(n.prev.next=e),e.parent=t,e.prev=n.prev,e.next=n,n.prev=e}ht.prepend=eb;var rt={};Object.defineProperty(rt,"__esModule",{value:!0});rt.findAll=rt.existsOne=rt.findOne=rt.findOneChild=rt.find=rt.filter=void 0;var $i=xn;function tb(n,e,t,i){return t===void 0&&(t=!0),i===void 0&&(i=1/0),Array.isArray(e)||(e=[e]),Cr(n,e,t,i)}rt.filter=tb;function Cr(n,e,t,i){for(var s=[],o=0,r=e;o<r.length;o++){var u=r[o];if(n(u)&&(s.push(u),--i<=0))break;if(t&&(0,$i.hasChildren)(u)&&u.children.length>0){var l=Cr(n,u.children,t,i);if(s.push.apply(s,l),i-=l.length,i<=0)break}}return s}rt.find=Cr;function nb(n,e){return e.find(n)}rt.findOneChild=nb;function Du(n,e,t){t===void 0&&(t=!0);for(var i=null,s=0;s<e.length&&!i;s++){var o=e[s];if((0,$i.isTag)(o))n(o)?i=o:t&&o.children.length>0&&(i=Du(n,o.children,!0));else continue}return i}rt.findOne=Du;function Ru(n,e){return e.some(function(t){return(0,$i.isTag)(t)&&(n(t)||t.children.length>0&&Ru(n,t.children))})}rt.existsOne=Ru;function ib(n,e){for(var t,i=[],s=e.filter($i.isTag),o;o=s.shift();){var r=(t=o.children)===null||t===void 0?void 0:t.filter($i.isTag);r&&r.length>0&&s.unshift.apply(s,r),n(o)&&i.push(o)}return i}rt.findAll=ib;var yt={};Object.defineProperty(yt,"__esModule",{value:!0});yt.getElementsByTagType=yt.getElementsByTagName=yt.getElementById=yt.getElements=yt.testElement=void 0;var bn=xn,Ls=rt,vs={tag_name:function(n){return typeof n=="function"?function(e){return(0,bn.isTag)(e)&&n(e.name)}:n==="*"?bn.isTag:function(e){return(0,bn.isTag)(e)&&e.name===n}},tag_type:function(n){return typeof n=="function"?function(e){return n(e.type)}:function(e){return e.type===n}},tag_contains:function(n){return typeof n=="function"?function(e){return(0,bn.isText)(e)&&n(e.data)}:function(e){return(0,bn.isText)(e)&&e.data===n}}};function Eu(n,e){return typeof e=="function"?function(t){return(0,bn.isTag)(t)&&e(t.attribs[n])}:function(t){return(0,bn.isTag)(t)&&t.attribs[n]===e}}function sb(n,e){return function(t){return n(t)||e(t)}}function Iu(n){var e=Object.keys(n).map(function(t){var i=n[t];return Object.prototype.hasOwnProperty.call(vs,t)?vs[t](i):Eu(t,i)});return e.length===0?null:e.reduce(sb)}function ob(n,e){var t=Iu(n);return t?t(e):!0}yt.testElement=ob;function rb(n,e,t,i){i===void 0&&(i=1/0);var s=Iu(n);return s?(0,Ls.filter)(s,e,t,i):[]}yt.getElements=rb;function ab(n,e,t){return t===void 0&&(t=!0),Array.isArray(e)||(e=[e]),(0,Ls.findOne)(Eu("id",n),e,t)}yt.getElementById=ab;function lb(n,e,t,i){return t===void 0&&(t=!0),i===void 0&&(i=1/0),(0,Ls.filter)(vs.tag_name(n),e,t,i)}yt.getElementsByTagName=lb;function ub(n,e,t,i){return t===void 0&&(t=!0),i===void 0&&(i=1/0),(0,Ls.filter)(vs.tag_type(n),e,t,i)}yt.getElementsByTagType=ub;var Fu={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.uniqueSort=n.compareDocumentPosition=n.DocumentPosition=n.removeSubsets=void 0;var e=xn;function t(r){for(var u=r.length;--u>=0;){var l=r[u];if(u>0&&r.lastIndexOf(l,u-1)>=0){r.splice(u,1);continue}for(var a=l.parent;a;a=a.parent)if(r.includes(a)){r.splice(u,1);break}}return r}n.removeSubsets=t;var i;(function(r){r[r.DISCONNECTED=1]="DISCONNECTED",r[r.PRECEDING=2]="PRECEDING",r[r.FOLLOWING=4]="FOLLOWING",r[r.CONTAINS=8]="CONTAINS",r[r.CONTAINED_BY=16]="CONTAINED_BY"})(i=n.DocumentPosition||(n.DocumentPosition={}));function s(r,u){var l=[],a=[];if(r===u)return 0;for(var c=(0,e.hasChildren)(r)?r:r.parent;c;)l.unshift(c),c=c.parent;for(c=(0,e.hasChildren)(u)?u:u.parent;c;)a.unshift(c),c=c.parent;for(var d=Math.min(l.length,a.length),m=0;m<d&&l[m]===a[m];)m++;if(m===0)return i.DISCONNECTED;var f=l[m-1],y=f.children,g=l[m],x=a[m];return y.indexOf(g)>y.indexOf(x)?f===u?i.FOLLOWING|i.CONTAINED_BY:i.FOLLOWING:f===r?i.PRECEDING|i.CONTAINS:i.PRECEDING}n.compareDocumentPosition=s;function o(r){return r=r.filter(function(u,l,a){return!a.includes(u,l+1)}),r.sort(function(u,l){var a=s(u,l);return a&i.PRECEDING?-1:a&i.FOLLOWING?1:0}),r}n.uniqueSort=o})(Fu);var Ps={};Object.defineProperty(Ps,"__esModule",{value:!0});Ps.getFeed=void 0;var db=mt,Ei=yt;function hb(n){var e=_s(mb,n);return e?e.name==="feed"?cb(e):pb(e):null}Ps.getFeed=hb;function cb(n){var e,t=n.children,i={type:"atom",items:(0,Ei.getElementsByTagName)("entry",t).map(function(r){var u,l=r.children,a={media:ju(l)};dt(a,"id","id",l),dt(a,"title","title",l);var c=(u=_s("link",l))===null||u===void 0?void 0:u.attribs.href;c&&(a.link=c);var d=wn("summary",l)||wn("content",l);d&&(a.description=d);var m=wn("updated",l);return m&&(a.pubDate=new Date(m)),a})};dt(i,"id","id",t),dt(i,"title","title",t);var s=(e=_s("link",t))===null||e===void 0?void 0:e.attribs.href;s&&(i.link=s),dt(i,"description","subtitle",t);var o=wn("updated",t);return o&&(i.updated=new Date(o)),dt(i,"author","email",t,!0),i}function pb(n){var e,t,i=(t=(e=_s("channel",n.children))===null||e===void 0?void 0:e.children)!==null&&t!==void 0?t:[],s={type:n.name.substr(0,3),id:"",items:(0,Ei.getElementsByTagName)("item",n.children).map(function(r){var u=r.children,l={media:ju(u)};dt(l,"id","guid",u),dt(l,"title","title",u),dt(l,"link","link",u),dt(l,"description","description",u);var a=wn("pubDate",u);return a&&(l.pubDate=new Date(a)),l})};dt(s,"title","title",i),dt(s,"link","link",i),dt(s,"description","description",i);var o=wn("lastBuildDate",i);return o&&(s.updated=new Date(o)),dt(s,"author","managingEditor",i,!0),s}var gb=["url","type","lang"],fb=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function ju(n){return(0,Ei.getElementsByTagName)("media:content",n).map(function(e){for(var t=e.attribs,i={medium:t.medium,isDefault:!!t.isDefault},s=0,o=gb;s<o.length;s++){var r=o[s];t[r]&&(i[r]=t[r])}for(var u=0,l=fb;u<l.length;u++){var r=l[u];t[r]&&(i[r]=parseInt(t[r],10))}return t.expression&&(i.expression=t.expression),i})}function _s(n,e){return(0,Ei.getElementsByTagName)(n,e,!0,1)[0]}function wn(n,e,t){return t===void 0&&(t=!1),(0,db.textContent)((0,Ei.getElementsByTagName)(n,e,t,1)).trim()}function dt(n,e,t,i,s){s===void 0&&(s=!1);var o=wn(t,i,s);o&&(n[e]=o)}function mb(n){return n==="rss"||n==="feed"||n==="rdf:RDF"}(function(n){var e=O&&O.__createBinding||(Object.create?function(s,o,r,u){u===void 0&&(u=r);var l=Object.getOwnPropertyDescriptor(o,r);(!l||("get"in l?!o.__esModule:l.writable||l.configurable))&&(l={enumerable:!0,get:function(){return o[r]}}),Object.defineProperty(s,u,l)}:function(s,o,r,u){u===void 0&&(u=r),s[u]=o[r]}),t=O&&O.__exportStar||function(s,o){for(var r in s)r!=="default"&&!Object.prototype.hasOwnProperty.call(o,r)&&e(o,s,r)};Object.defineProperty(n,"__esModule",{value:!0}),n.hasChildren=n.isDocument=n.isComment=n.isText=n.isCDATA=n.isTag=void 0,t(mt,n),t(Ue,n),t(ht,n),t(rt,n),t(yt,n),t(Fu,n),t(Ps,n);var i=xn;Object.defineProperty(n,"isTag",{enumerable:!0,get:function(){return i.isTag}}),Object.defineProperty(n,"isCDATA",{enumerable:!0,get:function(){return i.isCDATA}}),Object.defineProperty(n,"isText",{enumerable:!0,get:function(){return i.isText}}),Object.defineProperty(n,"isComment",{enumerable:!0,get:function(){return i.isComment}}),Object.defineProperty(n,"isDocument",{enumerable:!0,get:function(){return i.isDocument}}),Object.defineProperty(n,"hasChildren",{enumerable:!0,get:function(){return i.hasChildren}})})(uu);var ni={trueFunc:function(){return!0},falseFunc:function(){return!1}},nn={},ue;(function(n){n.Attribute="attribute",n.Pseudo="pseudo",n.PseudoElement="pseudo-element",n.Tag="tag",n.Universal="universal",n.Adjacent="adjacent",n.Child="child",n.Descendant="descendant",n.Parent="parent",n.Sibling="sibling",n.ColumnCombinator="column-combinator"})(ue||(ue={}));const yb={Unknown:null,QuirksMode:"quirks",IgnoreCase:!0,CaseSensitive:!1};var $e;(function(n){n.Any="any",n.Element="element",n.End="end",n.Equals="equals",n.Exists="exists",n.Hyphen="hyphen",n.Not="not",n.Start="start"})($e||($e={}));const bl=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,bb=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,wb=new Map([[126,$e.Element],[94,$e.Start],[36,$e.End],[42,$e.Any],[33,$e.Not],[124,$e.Hyphen]]),vb=new Set(["has","not","matches","is","where","host","host-context"]);function Ou(n){switch(n.type){case ue.Adjacent:case ue.Child:case ue.Descendant:case ue.Parent:case ue.Sibling:case ue.ColumnCombinator:return!0;default:return!1}}const _b=new Set(["contains","icontains"]);function Tb(n,e,t){const i=parseInt(e,16)-65536;return i!==i||t?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)}function gi(n){return n.replace(bb,Tb)}function qo(n){return n===39||n===34}function wl(n){return n===32||n===9||n===10||n===12||n===13}function Cb(n){const e=[],t=Bu(e,`${n}`,0);if(t<n.length)throw new Error(`Unmatched selector: ${n.slice(t)}`);return e}function Bu(n,e,t){let i=[];function s(m){const f=e.slice(t+m).match(bl);if(!f)throw new Error(`Expected name, found ${e.slice(t)}`);const[y]=f;return t+=m+y.length,gi(y)}function o(m){for(t+=m;t<e.length&&wl(e.charCodeAt(t));)t++}function r(){t+=1;const m=t;let f=1;for(;f>0&&t<e.length;t++)e.charCodeAt(t)===40&&!u(t)?f++:e.charCodeAt(t)===41&&!u(t)&&f--;if(f)throw new Error("Parenthesis not matched");return gi(e.slice(m,t-1))}function u(m){let f=0;for(;e.charCodeAt(--m)===92;)f++;return(f&1)===1}function l(){if(i.length>0&&Ou(i[i.length-1]))throw new Error("Did not expect successive traversals.")}function a(m){if(i.length>0&&i[i.length-1].type===ue.Descendant){i[i.length-1].type=m;return}l(),i.push({type:m})}function c(m,f){i.push({type:ue.Attribute,name:m,action:f,value:s(1),namespace:null,ignoreCase:"quirks"})}function d(){if(i.length&&i[i.length-1].type===ue.Descendant&&i.pop(),i.length===0)throw new Error("Empty sub-selector");n.push(i)}if(o(0),e.length===t)return t;e:for(;t<e.length;){const m=e.charCodeAt(t);switch(m){case 32:case 9:case 10:case 12:case 13:{(i.length===0||i[0].type!==ue.Descendant)&&(l(),i.push({type:ue.Descendant})),o(1);break}case 62:{a(ue.Child),o(1);break}case 60:{a(ue.Parent),o(1);break}case 126:{a(ue.Sibling),o(1);break}case 43:{a(ue.Adjacent),o(1);break}case 46:{c("class",$e.Element);break}case 35:{c("id",$e.Equals);break}case 91:{o(1);let f,y=null;e.charCodeAt(t)===124?f=s(1):e.startsWith("*|",t)?(y="*",f=s(2)):(f=s(0),e.charCodeAt(t)===124&&e.charCodeAt(t+1)!==61&&(y=f,f=s(1))),o(0);let g=$e.Exists;const x=wb.get(e.charCodeAt(t));if(x){if(g=x,e.charCodeAt(t+1)!==61)throw new Error("Expected `=`");o(2)}else e.charCodeAt(t)===61&&(g=$e.Equals,o(1));let k="",A=null;if(g!=="exists"){if(qo(e.charCodeAt(t))){const T=e.charCodeAt(t);let q=t+1;for(;q<e.length&&(e.charCodeAt(q)!==T||u(q));)q+=1;if(e.charCodeAt(q)!==T)throw new Error("Attribute value didn't end");k=gi(e.slice(t+1,q)),t=q+1}else{const T=t;for(;t<e.length&&(!wl(e.charCodeAt(t))&&e.charCodeAt(t)!==93||u(t));)t+=1;k=gi(e.slice(T,t))}o(0);const S=e.charCodeAt(t)|32;S===115?(A=!1,o(1)):S===105&&(A=!0,o(1))}if(e.charCodeAt(t)!==93)throw new Error("Attribute selector didn't terminate");t+=1;const _={type:ue.Attribute,name:f,action:g,value:k,namespace:y,ignoreCase:A};i.push(_);break}case 58:{if(e.charCodeAt(t+1)===58){i.push({type:ue.PseudoElement,name:s(2).toLowerCase(),data:e.charCodeAt(t)===40?r():null});continue}const f=s(1).toLowerCase();let y=null;if(e.charCodeAt(t)===40)if(vb.has(f)){if(qo(e.charCodeAt(t+1)))throw new Error(`Pseudo-selector ${f} cannot be quoted`);if(y=[],t=Bu(y,e,t+1),e.charCodeAt(t)!==41)throw new Error(`Missing closing parenthesis in :${f} (${e})`);t+=1}else{if(y=r(),_b.has(f)){const g=y.charCodeAt(0);g===y.charCodeAt(y.length-1)&&qo(g)&&(y=y.slice(1,-1))}y=gi(y)}i.push({type:ue.Pseudo,name:f,data:y});break}case 44:{d(),i=[],o(1);break}default:{if(e.startsWith("/*",t)){const g=e.indexOf("*/",t+2);if(g<0)throw new Error("Comment was not terminated");t=g+2,i.length===0&&o(0);break}let f=null,y;if(m===42)t+=1,y="*";else if(m===124){if(y="",e.charCodeAt(t+1)===124){a(ue.ColumnCombinator),o(2);break}}else if(bl.test(e.slice(t)))y=s(0);else break e;e.charCodeAt(t)===124&&e.charCodeAt(t+1)!==124&&(f=y,e.charCodeAt(t+1)===42?(y="*",t+=2):y=s(1)),i.push(y==="*"?{type:ue.Universal,namespace:f}:{type:ue.Tag,name:y,namespace:f})}}}return d(),t}const Nu=["\\",'"'],Mu=[...Nu,"(",")"],xb=new Set(Nu.map(n=>n.charCodeAt(0))),vl=new Set(Mu.map(n=>n.charCodeAt(0))),Wn=new Set([...Mu,"~","^","$","*","+","!","|",":","[","]"," ","."].map(n=>n.charCodeAt(0)));function Lu(n){return n.map(e=>e.map(Ab).join("")).join(", ")}function Ab(n,e,t){switch(n.type){case ue.Child:return e===0?"> ":" > ";case ue.Parent:return e===0?"< ":" < ";case ue.Sibling:return e===0?"~ ":" ~ ";case ue.Adjacent:return e===0?"+ ":" + ";case ue.Descendant:return" ";case ue.ColumnCombinator:return e===0?"|| ":" || ";case ue.Universal:return n.namespace==="*"&&e+1<t.length&&"name"in t[e+1]?"":`${Pu(n.namespace)}*`;case ue.Tag:return _l(n);case ue.PseudoElement:return`::${Mt(n.name,Wn)}${n.data===null?"":`(${Mt(n.data,vl)})`}`;case ue.Pseudo:return`:${Mt(n.name,Wn)}${n.data===null?"":`(${typeof n.data=="string"?Mt(n.data,vl):Lu(n.data)})`}`;case ue.Attribute:{if(n.name==="id"&&n.action===$e.Equals&&n.ignoreCase==="quirks"&&!n.namespace)return`#${Mt(n.value,Wn)}`;if(n.name==="class"&&n.action===$e.Element&&n.ignoreCase==="quirks"&&!n.namespace)return`.${Mt(n.value,Wn)}`;const i=_l(n);return n.action===$e.Exists?`[${i}]`:`[${i}${kb(n.action)}="${Mt(n.value,xb)}"${n.ignoreCase===null?"":n.ignoreCase?" i":" s"}]`}}}function kb(n){switch(n){case $e.Equals:return"";case $e.Element:return"~";case $e.Start:return"^";case $e.End:return"$";case $e.Any:return"*";case $e.Not:return"!";case $e.Hyphen:return"|";case $e.Exists:throw new Error("Shouldn't be here")}}function _l(n){return`${Pu(n.namespace)}${Mt(n.name,Wn)}`}function Pu(n){return n!==null?`${n==="*"?"*":Mt(n,Wn)}|`:""}function Mt(n,e){let t=0,i="";for(let s=0;s<n.length;s++)e.has(n.charCodeAt(s))&&(i+=`${n.slice(t,s)}\\${n.charAt(s)}`,t=s+1);return i.length>0?i+n.slice(t):n}const qb=Object.freeze(Object.defineProperty({__proto__:null,get AttributeAction(){return $e},IgnoreCaseMode:yb,get SelectorType(){return ue},isTraversal:Ou,parse:Cb,stringify:Lu},Symbol.toStringTag,{value:"Module"})),Ws=Dl(qb);var ii={};Object.defineProperty(ii,"__esModule",{value:!0});ii.isTraversal=void 0;var ft=Ws,Wu=new Map([[ft.SelectorType.Universal,50],[ft.SelectorType.Tag,30],[ft.SelectorType.Attribute,1],[ft.SelectorType.Pseudo,0]]);function $b(n){return!Wu.has(n.type)}ii.isTraversal=$b;var Sb=new Map([[ft.AttributeAction.Exists,10],[ft.AttributeAction.Equals,8],[ft.AttributeAction.Not,7],[ft.AttributeAction.Start,6],[ft.AttributeAction.End,6],[ft.AttributeAction.Any,5]]);function Db(n){for(var e=n.map(Ju),t=1;t<n.length;t++){var i=e[t];if(!(i<0))for(var s=t-1;s>=0&&i<e[s];s--){var o=n[s+1];n[s+1]=n[s],n[s]=o,e[s+1]=e[s],e[s]=i}}}ii.default=Db;function Ju(n){var e,t,i=(e=Wu.get(n.type))!==null&&e!==void 0?e:-1;return n.type===ft.SelectorType.Attribute?(i=(t=Sb.get(n.action))!==null&&t!==void 0?t:4,n.action===ft.AttributeAction.Equals&&n.name==="id"&&(i=9),n.ignoreCase&&(i>>=1)):n.type===ft.SelectorType.Pseudo&&(n.data?n.name==="has"||n.name==="contains"?i=0:Array.isArray(n.data)?(i=Math.min.apply(Math,n.data.map(function(s){return Math.min.apply(Math,s.map(Ju))})),i<0&&(i=0)):i=2:i=3),i}var Js={},Vs={},Rb=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Vs,"__esModule",{value:!0});Vs.attributeRules=void 0;var ts=Rb(ni),Eb=/[-[\]{}()*+?.,\\^$|#\s]/g;function Tl(n){return n.replace(Eb,"\\$&")}var Ib=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function yn(n,e){return typeof n.ignoreCase=="boolean"?n.ignoreCase:n.ignoreCase==="quirks"?!!e.quirksMode:!e.xmlMode&&Ib.has(n.name)}Vs.attributeRules={equals:function(n,e,t){var i=t.adapter,s=e.name,o=e.value;return yn(e,t)?(o=o.toLowerCase(),function(r){var u=i.getAttributeValue(r,s);return u!=null&&u.length===o.length&&u.toLowerCase()===o&&n(r)}):function(r){return i.getAttributeValue(r,s)===o&&n(r)}},hyphen:function(n,e,t){var i=t.adapter,s=e.name,o=e.value,r=o.length;return yn(e,t)?(o=o.toLowerCase(),function(l){var a=i.getAttributeValue(l,s);return a!=null&&(a.length===r||a.charAt(r)==="-")&&a.substr(0,r).toLowerCase()===o&&n(l)}):function(l){var a=i.getAttributeValue(l,s);return a!=null&&(a.length===r||a.charAt(r)==="-")&&a.substr(0,r)===o&&n(l)}},element:function(n,e,t){var i=t.adapter,s=e.name,o=e.value;if(/\s/.test(o))return ts.default.falseFunc;var r=new RegExp("(?:^|\\s)".concat(Tl(o),"(?:$|\\s)"),yn(e,t)?"i":"");return function(l){var a=i.getAttributeValue(l,s);return a!=null&&a.length>=o.length&&r.test(a)&&n(l)}},exists:function(n,e,t){var i=e.name,s=t.adapter;return function(o){return s.hasAttrib(o,i)&&n(o)}},start:function(n,e,t){var i=t.adapter,s=e.name,o=e.value,r=o.length;return r===0?ts.default.falseFunc:yn(e,t)?(o=o.toLowerCase(),function(u){var l=i.getAttributeValue(u,s);return l!=null&&l.length>=r&&l.substr(0,r).toLowerCase()===o&&n(u)}):function(u){var l;return!!(!((l=i.getAttributeValue(u,s))===null||l===void 0)&&l.startsWith(o))&&n(u)}},end:function(n,e,t){var i=t.adapter,s=e.name,o=e.value,r=-o.length;return r===0?ts.default.falseFunc:yn(e,t)?(o=o.toLowerCase(),function(u){var l;return((l=i.getAttributeValue(u,s))===null||l===void 0?void 0:l.substr(r).toLowerCase())===o&&n(u)}):function(u){var l;return!!(!((l=i.getAttributeValue(u,s))===null||l===void 0)&&l.endsWith(o))&&n(u)}},any:function(n,e,t){var i=t.adapter,s=e.name,o=e.value;if(o==="")return ts.default.falseFunc;if(yn(e,t)){var r=new RegExp(Tl(o),"i");return function(l){var a=i.getAttributeValue(l,s);return a!=null&&a.length>=o.length&&r.test(a)&&n(l)}}return function(u){var l;return!!(!((l=i.getAttributeValue(u,s))===null||l===void 0)&&l.includes(o))&&n(u)}},not:function(n,e,t){var i=t.adapter,s=e.name,o=e.value;return o===""?function(r){return!!i.getAttributeValue(r,s)&&n(r)}:yn(e,t)?(o=o.toLowerCase(),function(r){var u=i.getAttributeValue(r,s);return(u==null||u.length!==o.length||u.toLowerCase()!==o)&&n(r)}):function(r){return i.getAttributeValue(r,s)!==o&&n(r)}}};var xr={},Vu={},Hu={},Hs={};Object.defineProperty(Hs,"__esModule",{value:!0});Hs.parse=void 0;var Fb=new Set([9,10,12,13,32]),Cl="0".charCodeAt(0),jb="9".charCodeAt(0);function Ob(n){if(n=n.trim().toLowerCase(),n==="even")return[2,0];if(n==="odd")return[2,1];var e=0,t=0,i=o(),s=r();if(e<n.length&&n.charAt(e)==="n"&&(e++,t=i*(s??1),u(),e<n.length?(i=o(),u(),s=r()):i=s=0),s===null||e<n.length)throw new Error("n-th rule couldn't be parsed ('".concat(n,"')"));return[t,i*s];function o(){return n.charAt(e)==="-"?(e++,-1):(n.charAt(e)==="+"&&e++,1)}function r(){for(var l=e,a=0;e<n.length&&n.charCodeAt(e)>=Cl&&n.charCodeAt(e)<=jb;)a=a*10+(n.charCodeAt(e)-Cl),e++;return e===l?null:a}function u(){for(;e<n.length&&Fb.has(n.charCodeAt(e));)e++}}Hs.parse=Ob;var Xn={},Bb=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Xn,"__esModule",{value:!0});Xn.generate=Xn.compile=void 0;var xl=Bb(ni);function Nb(n){var e=n[0],t=n[1]-1;if(t<0&&e<=0)return xl.default.falseFunc;if(e===-1)return function(o){return o<=t};if(e===0)return function(o){return o===t};if(e===1)return t<0?xl.default.trueFunc:function(o){return o>=t};var i=Math.abs(e),s=(t%i+i)%i;return e>1?function(o){return o>=t&&o%i===s}:function(o){return o<=t&&o%i===s}}Xn.compile=Nb;function Mb(n){var e=n[0],t=n[1]-1,i=0;if(e<0){var s=-e,o=(t%s+s)%s;return function(){var r=o+s*i++;return r>t?null:r}}return e===0?t<0?function(){return null}:function(){return i++===0?t:null}:(t<0&&(t+=e*Math.ceil(-t/e)),function(){return e*i+++t})}Xn.generate=Mb;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.sequence=n.generate=n.compile=n.parse=void 0;var e=Hs;Object.defineProperty(n,"parse",{enumerable:!0,get:function(){return e.parse}});var t=Xn;Object.defineProperty(n,"compile",{enumerable:!0,get:function(){return t.compile}}),Object.defineProperty(n,"generate",{enumerable:!0,get:function(){return t.generate}});function i(o){return(0,t.compile)((0,e.parse)(o))}n.default=i;function s(o){return(0,t.generate)((0,e.parse)(o))}n.sequence=s})(Hu);(function(n){var e=O&&O.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(n,"__esModule",{value:!0}),n.filters=void 0;var t=e(Hu),i=e(ni);function s(r,u){return function(l){var a=u.getParent(l);return a!=null&&u.isTag(a)&&r(l)}}n.filters={contains:function(r,u,l){var a=l.adapter;return function(d){return r(d)&&a.getText(d).includes(u)}},icontains:function(r,u,l){var a=l.adapter,c=u.toLowerCase();return function(m){return r(m)&&a.getText(m).toLowerCase().includes(c)}},"nth-child":function(r,u,l){var a=l.adapter,c=l.equals,d=(0,t.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?s(r,a):function(f){for(var y=a.getSiblings(f),g=0,x=0;x<y.length&&!c(f,y[x]);x++)a.isTag(y[x])&&g++;return d(g)&&r(f)}},"nth-last-child":function(r,u,l){var a=l.adapter,c=l.equals,d=(0,t.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?s(r,a):function(f){for(var y=a.getSiblings(f),g=0,x=y.length-1;x>=0&&!c(f,y[x]);x--)a.isTag(y[x])&&g++;return d(g)&&r(f)}},"nth-of-type":function(r,u,l){var a=l.adapter,c=l.equals,d=(0,t.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?s(r,a):function(f){for(var y=a.getSiblings(f),g=0,x=0;x<y.length;x++){var k=y[x];if(c(f,k))break;a.isTag(k)&&a.getName(k)===a.getName(f)&&g++}return d(g)&&r(f)}},"nth-last-of-type":function(r,u,l){var a=l.adapter,c=l.equals,d=(0,t.default)(u);return d===i.default.falseFunc?i.default.falseFunc:d===i.default.trueFunc?s(r,a):function(f){for(var y=a.getSiblings(f),g=0,x=y.length-1;x>=0;x--){var k=y[x];if(c(f,k))break;a.isTag(k)&&a.getName(k)===a.getName(f)&&g++}return d(g)&&r(f)}},root:function(r,u,l){var a=l.adapter;return function(c){var d=a.getParent(c);return(d==null||!a.isTag(d))&&r(c)}},scope:function(r,u,l,a){var c=l.equals;return!a||a.length===0?n.filters.root(r,u,l):a.length===1?function(d){return c(a[0],d)&&r(d)}:function(d){return a.includes(d)&&r(d)}},hover:o("isHovered"),visited:o("isVisited"),active:o("isActive")};function o(r){return function(l,a,c){var d=c.adapter,m=d[r];return typeof m!="function"?i.default.falseFunc:function(y){return m(y)&&l(y)}}}})(Vu);var ei={};Object.defineProperty(ei,"__esModule",{value:!0});ei.verifyPseudoArgs=ei.pseudos=void 0;ei.pseudos={empty:function(n,e){var t=e.adapter;return!t.getChildren(n).some(function(i){return t.isTag(i)||t.getText(i)!==""})},"first-child":function(n,e){var t=e.adapter,i=e.equals;if(t.prevElementSibling)return t.prevElementSibling(n)==null;var s=t.getSiblings(n).find(function(o){return t.isTag(o)});return s!=null&&i(n,s)},"last-child":function(n,e){for(var t=e.adapter,i=e.equals,s=t.getSiblings(n),o=s.length-1;o>=0;o--){if(i(n,s[o]))return!0;if(t.isTag(s[o]))break}return!1},"first-of-type":function(n,e){for(var t=e.adapter,i=e.equals,s=t.getSiblings(n),o=t.getName(n),r=0;r<s.length;r++){var u=s[r];if(i(n,u))return!0;if(t.isTag(u)&&t.getName(u)===o)break}return!1},"last-of-type":function(n,e){for(var t=e.adapter,i=e.equals,s=t.getSiblings(n),o=t.getName(n),r=s.length-1;r>=0;r--){var u=s[r];if(i(n,u))return!0;if(t.isTag(u)&&t.getName(u)===o)break}return!1},"only-of-type":function(n,e){var t=e.adapter,i=e.equals,s=t.getName(n);return t.getSiblings(n).every(function(o){return i(n,o)||!t.isTag(o)||t.getName(o)!==s})},"only-child":function(n,e){var t=e.adapter,i=e.equals;return t.getSiblings(n).every(function(s){return i(n,s)||!t.isTag(s)})}};function Lb(n,e,t,i){if(t===null){if(n.length>i)throw new Error("Pseudo-class :".concat(e," requires an argument"))}else if(n.length===i)throw new Error("Pseudo-class :".concat(e," doesn't have any arguments"))}ei.verifyPseudoArgs=Lb;var Us={};Object.defineProperty(Us,"__esModule",{value:!0});Us.aliases=void 0;Us.aliases={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:`:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"};var Gs={};(function(n){var e=O&&O.__spreadArray||function(a,c,d){if(d||arguments.length===2)for(var m=0,f=c.length,y;m<f;m++)(y||!(m in c))&&(y||(y=Array.prototype.slice.call(c,0,m)),y[m]=c[m]);return a.concat(y||Array.prototype.slice.call(c))},t=O&&O.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(n,"__esModule",{value:!0}),n.subselects=n.getNextSiblings=n.ensureIsTag=n.PLACEHOLDER_ELEMENT=void 0;var i=t(ni),s=ii;n.PLACEHOLDER_ELEMENT={};function o(a,c){return a===i.default.falseFunc?i.default.falseFunc:function(d){return c.isTag(d)&&a(d)}}n.ensureIsTag=o;function r(a,c){var d=c.getSiblings(a);if(d.length<=1)return[];var m=d.indexOf(a);return m<0||m===d.length-1?[]:d.slice(m+1).filter(c.isTag)}n.getNextSiblings=r;function u(a){return{xmlMode:!!a.xmlMode,lowerCaseAttributeNames:!!a.lowerCaseAttributeNames,lowerCaseTags:!!a.lowerCaseTags,quirksMode:!!a.quirksMode,cacheResults:!!a.cacheResults,pseudos:a.pseudos,adapter:a.adapter,equals:a.equals}}var l=function(a,c,d,m,f){var y=f(c,u(d),m);return y===i.default.trueFunc?a:y===i.default.falseFunc?i.default.falseFunc:function(g){return y(g)&&a(g)}};n.subselects={is:l,matches:l,where:l,not:function(a,c,d,m,f){var y=f(c,u(d),m);return y===i.default.falseFunc?a:y===i.default.trueFunc?i.default.falseFunc:function(g){return!y(g)&&a(g)}},has:function(a,c,d,m,f){var y=d.adapter,g=u(d);g.relativeSelector=!0;var x=c.some(function(T){return T.some(s.isTraversal)})?[n.PLACEHOLDER_ELEMENT]:void 0,k=f(c,g,x);if(k===i.default.falseFunc)return i.default.falseFunc;var A=o(k,y);if(x&&k!==i.default.trueFunc){var _=k.shouldTestNextSiblings,S=_===void 0?!1:_;return function(T){if(!a(T))return!1;x[0]=T;var q=y.getChildren(T),I=S?e(e([],q,!0),r(T,y),!0):q;return y.existsOne(A,I)}}return function(T){return a(T)&&y.existsOne(A,y.getChildren(T))}}}})(Gs);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.compilePseudoSelector=n.aliases=n.pseudos=n.filters=void 0;var e=Ws,t=Vu;Object.defineProperty(n,"filters",{enumerable:!0,get:function(){return t.filters}});var i=ei;Object.defineProperty(n,"pseudos",{enumerable:!0,get:function(){return i.pseudos}});var s=Us;Object.defineProperty(n,"aliases",{enumerable:!0,get:function(){return s.aliases}});var o=Gs;function r(u,l,a,c,d){var m,f=l.name,y=l.data;if(Array.isArray(y)){if(!(f in o.subselects))throw new Error("Unknown pseudo-class :".concat(f,"(").concat(y,")"));return o.subselects[f](u,y,a,c,d)}var g=(m=a.pseudos)===null||m===void 0?void 0:m[f],x=typeof g=="string"?g:s.aliases[f];if(typeof x=="string"){if(y!=null)throw new Error("Pseudo ".concat(f," doesn't have any arguments"));var k=(0,e.parse)(x);return o.subselects.is(u,k,a,c,d)}if(typeof g=="function")return(0,i.verifyPseudoArgs)(g,f,y,1),function(_){return g(_,y)&&u(_)};if(f in t.filters)return t.filters[f](u,y,a,c);if(f in i.pseudos){var A=i.pseudos[f];return(0,i.verifyPseudoArgs)(A,f,y,2),function(_){return A(_,a,y)&&u(_)}}throw new Error("Unknown pseudo-class :".concat(f))}n.compilePseudoSelector=r})(xr);Object.defineProperty(Js,"__esModule",{value:!0});Js.compileGeneralSelector=void 0;var Pb=Vs,Wb=xr,kt=Ws;function $o(n,e){var t=e.getParent(n);return t&&e.isTag(t)?t:null}function Jb(n,e,t,i,s){var o=t.adapter,r=t.equals;switch(e.type){case kt.SelectorType.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case kt.SelectorType.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case kt.SelectorType.Attribute:{if(e.namespace!=null)throw new Error("Namespaced attributes are not yet supported by css-select");return(!t.xmlMode||t.lowerCaseAttributeNames)&&(e.name=e.name.toLowerCase()),Pb.attributeRules[e.action](n,e,t)}case kt.SelectorType.Pseudo:return(0,Wb.compilePseudoSelector)(n,e,t,i,s);case kt.SelectorType.Tag:{if(e.namespace!=null)throw new Error("Namespaced tag names are not yet supported by css-select");var u=e.name;return(!t.xmlMode||t.lowerCaseTags)&&(u=u.toLowerCase()),function(c){return o.getName(c)===u&&n(c)}}case kt.SelectorType.Descendant:{if(t.cacheResults===!1||typeof WeakSet>"u")return function(c){for(var d=c;d=$o(d,o);)if(n(d))return!0;return!1};var l=new WeakSet;return function(c){for(var d=c;d=$o(d,o);)if(!l.has(d)){if(o.isTag(d)&&n(d))return!0;l.add(d)}return!1}}case"_flexibleDescendant":return function(c){var d=c;do if(n(d))return!0;while(d=$o(d,o));return!1};case kt.SelectorType.Parent:return function(c){return o.getChildren(c).some(function(d){return o.isTag(d)&&n(d)})};case kt.SelectorType.Child:return function(c){var d=o.getParent(c);return d!=null&&o.isTag(d)&&n(d)};case kt.SelectorType.Sibling:return function(c){for(var d=o.getSiblings(c),m=0;m<d.length;m++){var f=d[m];if(r(c,f))break;if(o.isTag(f)&&n(f))return!0}return!1};case kt.SelectorType.Adjacent:return o.prevElementSibling?function(c){var d=o.prevElementSibling(c);return d!=null&&n(d)}:function(c){for(var d=o.getSiblings(c),m,f=0;f<d.length;f++){var y=d[f];if(r(c,y))break;o.isTag(y)&&(m=y)}return!!m&&n(m)};case kt.SelectorType.Universal:{if(e.namespace!=null&&e.namespace!=="*")throw new Error("Namespaced universal selectors are not yet supported by css-select");return n}}}Js.compileGeneralSelector=Jb;var Vb=O&&O.__createBinding||(Object.create?function(n,e,t,i){i===void 0&&(i=t);var s=Object.getOwnPropertyDescriptor(e,t);(!s||("get"in s?!e.__esModule:s.writable||s.configurable))&&(s={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,i,s)}:function(n,e,t,i){i===void 0&&(i=t),n[i]=e[t]}),Hb=O&&O.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),Ub=O&&O.__importStar||function(n){if(n&&n.__esModule)return n;var e={};if(n!=null)for(var t in n)t!=="default"&&Object.prototype.hasOwnProperty.call(n,t)&&Vb(e,n,t);return Hb(e,n),e},Gb=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(nn,"__esModule",{value:!0});nn.compileToken=nn.compileUnsafe=nn.compile=void 0;var Pt=Ws,Xt=Gb(ni),Go=Ub(ii),zb=Js,Uu=Gs;function Yb(n,e,t){var i=Gu(n,e,t);return(0,Uu.ensureIsTag)(i,e.adapter)}nn.compile=Yb;function Gu(n,e,t){var i=typeof n=="string"?(0,Pt.parse)(n):n;return Ar(i,e,t)}nn.compileUnsafe=Gu;function zu(n){return n.type===Pt.SelectorType.Pseudo&&(n.name==="scope"||Array.isArray(n.data)&&n.data.some(function(e){return e.some(zu)}))}var Kb={type:Pt.SelectorType.Descendant},Zb={type:"_flexibleDescendant"},Qb={type:Pt.SelectorType.Pseudo,name:"scope",data:null};function Xb(n,e,t){for(var i=e.adapter,s=!!(t!=null&&t.every(function(l){var a=i.isTag(l)&&i.getParent(l);return l===Uu.PLACEHOLDER_ELEMENT||a&&i.isTag(a)})),o=0,r=n;o<r.length;o++){var u=r[o];if(!(u.length>0&&(0,Go.isTraversal)(u[0])&&u[0].type!==Pt.SelectorType.Descendant))if(s&&!u.some(zu))u.unshift(Kb);else continue;u.unshift(Qb)}}function Ar(n,e,t){var i;n.forEach(Go.default),t=(i=e.context)!==null&&i!==void 0?i:t;var s=Array.isArray(t),o=t&&(Array.isArray(t)?t:[t]);if(e.relativeSelector!==!1)Xb(n,e,o);else if(n.some(function(l){return l.length>0&&(0,Go.isTraversal)(l[0])}))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");var r=!1,u=n.map(function(l){if(l.length>=2){var a=l[0],c=l[1];a.type!==Pt.SelectorType.Pseudo||a.name!=="scope"||(s&&c.type===Pt.SelectorType.Descendant?l[1]=Zb:(c.type===Pt.SelectorType.Adjacent||c.type===Pt.SelectorType.Sibling)&&(r=!0))}return e2(l,e,o)}).reduce(t2,Xt.default.falseFunc);return u.shouldTestNextSiblings=r,u}nn.compileToken=Ar;function e2(n,e,t){var i;return n.reduce(function(s,o){return s===Xt.default.falseFunc?Xt.default.falseFunc:(0,zb.compileGeneralSelector)(s,o,e,t,Ar)},(i=e.rootFunc)!==null&&i!==void 0?i:Xt.default.trueFunc)}function t2(n,e){return e===Xt.default.falseFunc||n===Xt.default.trueFunc?n:n===Xt.default.falseFunc||e===Xt.default.trueFunc?e:function(i){return n(i)||e(i)}}(function(n){var e=O&&O.__createBinding||(Object.create?function(A,_,S,T){T===void 0&&(T=S);var q=Object.getOwnPropertyDescriptor(_,S);(!q||("get"in q?!_.__esModule:q.writable||q.configurable))&&(q={enumerable:!0,get:function(){return _[S]}}),Object.defineProperty(A,T,q)}:function(A,_,S,T){T===void 0&&(T=S),A[T]=_[S]}),t=O&&O.__setModuleDefault||(Object.create?function(A,_){Object.defineProperty(A,"default",{enumerable:!0,value:_})}:function(A,_){A.default=_}),i=O&&O.__importStar||function(A){if(A&&A.__esModule)return A;var _={};if(A!=null)for(var S in A)S!=="default"&&Object.prototype.hasOwnProperty.call(A,S)&&e(_,A,S);return t(_,A),_},s=O&&O.__importDefault||function(A){return A&&A.__esModule?A:{default:A}};Object.defineProperty(n,"__esModule",{value:!0}),n.aliases=n.pseudos=n.filters=n.is=n.selectOne=n.selectAll=n.prepareContext=n._compileToken=n._compileUnsafe=n.compile=void 0;var o=i(uu),r=s(ni),u=nn,l=Gs,a=function(A,_){return A===_},c={adapter:o,equals:a};function d(A){var _,S,T,q,I=A??c;return(_=I.adapter)!==null&&_!==void 0||(I.adapter=o),(S=I.equals)!==null&&S!==void 0||(I.equals=(q=(T=I.adapter)===null||T===void 0?void 0:T.equals)!==null&&q!==void 0?q:a),I}function m(A){return function(S,T,q){var I=d(T);return A(S,I,q)}}n.compile=m(u.compile),n._compileUnsafe=m(u.compileUnsafe),n._compileToken=m(u.compileToken);function f(A){return function(S,T,q){var I=d(q);typeof S!="function"&&(S=(0,u.compileUnsafe)(S,I,T));var $=y(T,I.adapter,S.shouldTestNextSiblings);return A(S,$,I)}}function y(A,_,S){return S===void 0&&(S=!1),S&&(A=g(A,_)),Array.isArray(A)?_.removeSubsets(A):_.getChildren(A)}n.prepareContext=y;function g(A,_){for(var S=Array.isArray(A)?A.slice(0):[A],T=S.length,q=0;q<T;q++){var I=(0,l.getNextSiblings)(S[q],_);S.push.apply(S,I)}return S}n.selectAll=f(function(A,_,S){return A===r.default.falseFunc||!_||_.length===0?[]:S.adapter.findAll(A,_)}),n.selectOne=f(function(A,_,S){return A===r.default.falseFunc||!_||_.length===0?null:S.adapter.findOne(A,_)});function x(A,_,S){var T=d(S);return(typeof _=="function"?_:(0,u.compile)(_,T))(A)}n.is=x,n.default=n.selectAll;var k=xr;Object.defineProperty(n,"filters",{enumerable:!0,get:function(){return k.filters}}),Object.defineProperty(n,"pseudos",{enumerable:!0,get:function(){return k.pseudos}}),Object.defineProperty(n,"aliases",{enumerable:!0,get:function(){return k.aliases}})})(lu);var kr={};Object.defineProperty(kr,"__esModule",{value:!0});function n2(n){return n[n.length-1]}kr.default=n2;var qr={},i2=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(qr,"__esModule",{value:!0});var s2=i2(Cn);function zs(n){return n&&n.nodeType===s2.default.ELEMENT_NODE}function Yu(n,e){return zs(n)?n.getAttribute(e):void 0}function o2(n){return(n&&n.rawTagName||"").toLowerCase()}function Ii(n){return n&&n.childNodes}function $r(n){return n?n.parentNode:null}function r2(n){return n.text}function a2(n){for(var e=n.length,t,i,s;--e>-1;){for(t=i=n[e],n[e]=null,s=!0;i;){if(n.indexOf(i)>-1){s=!1,n.splice(e,1);break}i=$r(i)}s&&(n[e]=t)}return n}function Ku(n,e){return e.some(function(t){return zs(t)?n(t)||Ku(n,Ii(t)):!1})}function l2(n){var e=$r(n);return e?Ii(e):[]}function u2(n,e){return Yu(n,e)!==void 0}function Zu(n,e){for(var t=null,i=0,s=e==null?void 0:e.length;i<s&&!t;i++){var o=e[i];if(n(o))t=o;else{var r=Ii(o);r&&r.length>0&&(t=Zu(n,r))}}return t}function Qu(n,e){for(var t=[],i=0,s=e.length;i<s;i++)if(zs(e[i])){n(e[i])&&t.push(e[i]);var o=Ii(e[i]);o&&(t=t.concat(Qu(n,o)))}return t}qr.default={isTag:zs,getAttributeValue:Yu,getName:o2,getChildren:Ii,getParent:$r,getText:r2,removeSubsets:a2,existsOne:Ku,getSiblings:l2,hasAttrib:u2,findOne:Zu,findAll:Qu};var Sr={};Object.defineProperty(Sr,"__esModule",{value:!0});var d2=function(){function n(e,t){e===void 0&&(e=!1),this.addClosingSlash=e,Array.isArray(t)?this.voidTags=t.reduce(function(i,s){return i.add(s.toLowerCase())},new Set):this.voidTags=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].reduce(function(i,s){return i.add(s)},new Set)}return n.prototype.formatNode=function(e,t,i){var s=this.addClosingSlash,o=s&&t&&!t.endsWith(" ")?" ":"",r=s?"".concat(o,"/"):"";return this.isVoidElement(e.toLowerCase())?"<".concat(e).concat(t).concat(r,">"):"<".concat(e).concat(t,">").concat(i,"</").concat(e,">")},n.prototype.isVoidElement=function(e){return this.voidTags.has(e)},n}();Sr.default=d2;var Ys={},h2=O&&O.__extends||function(){var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,s){i.__proto__=s}||function(i,s){for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(i[o]=s[o])},n(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");n(e,t);function i(){this.constructor=e}e.prototype=t===null?Object.create(t):(i.prototype=t.prototype,new i)}}(),Xu=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Ys,"__esModule",{value:!0});var c2=Zn,p2=Xu(ti),g2=Xu(Cn),f2=function(n){h2(e,n);function e(t,i,s){var o=n.call(this,i,s)||this;return o.nodeType=g2.default.TEXT_NODE,o._rawText=t,o}return e.prototype.clone=function(){return new e(this._rawText,null)},Object.defineProperty(e.prototype,"rawText",{get:function(){return this._rawText},set:function(t){this._rawText=t,this._trimmedRawText=void 0,this._trimmedText=void 0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"trimmedRawText",{get:function(){return this._trimmedRawText!==void 0?this._trimmedRawText:(this._trimmedRawText=Al(this.rawText),this._trimmedRawText)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"trimmedText",{get:function(){return this._trimmedText!==void 0?this._trimmedText:(this._trimmedText=Al(this.text),this._trimmedText)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"text",{get:function(){return(0,c2.decode)(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isWhitespace",{get:function(){return/^(\s|&nbsp;)*$/.test(this.rawText)},enumerable:!1,configurable:!0}),e.prototype.toString=function(){return this.rawText},e}(p2.default);Ys.default=f2;function Al(n){for(var e=0,t,i;e>=0&&e<n.length;)/\S/.test(n[e])&&(t===void 0?(t=e,e=n.length):(i=e,e=void 0)),t===void 0?e++:e--;t===void 0&&(t=0),i===void 0&&(i=n.length-1);var s=t>0&&/[^\S\r\n]/.test(n[t-1]),o=i<n.length-1&&/[^\S\r\n]/.test(n[i+1]);return(s?" ":"")+n.slice(t,i+1)+(o?" ":"")}var m2=O&&O.__extends||function(){var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,s){i.__proto__=s}||function(i,s){for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(i[o]=s[o])},n(e,t)};return function(e,t){if(typeof t!="function"&&t!==null)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");n(e,t);function i(){this.constructor=e}e.prototype=t===null?Object.create(t):(i.prototype=t.prototype,new i)}}(),Jn=O&&O.__assign||function(){return Jn=Object.assign||function(n){for(var e,t=1,i=arguments.length;t<i;t++){e=arguments[t];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(n[s]=e[s])}return n},Jn.apply(this,arguments)},fi=O&&O.__spreadArray||function(n,e,t){if(t||arguments.length===2)for(var i=0,s=e.length,o;i<s;i++)(o||!(i in e))&&(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return n.concat(o||Array.prototype.slice.call(e))},an=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Jt,"__esModule",{value:!0});Jt.parse=Jt.base_parse=void 0;var So=lu,y2=an(Zn),Vn=an(kr),Do=an(qr),ed=an(Sr),b2=an(js),Ro=an(ti),Hn=an(Ys),St=an(Cn);function mi(n){return JSON.parse(JSON.stringify(y2.default.decode(n)))}var w2=["h1","h2","h3","h4","h5","h6","header","hgroup"],v2=["details","dialog","dd","div","dt"],_2=["fieldset","figcaption","figure","footer","form"],T2=["table","td","tr"],C2=["address","article","aside","blockquote","br","hr","li","main","nav","ol","p","pre","section","ul"],zo=new Set;function x2(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];for(var t=function(r){for(var u=0;u<r.length;u++){var l=r[u];zo.add(l),zo.add(l.toUpperCase())}},i=0,s=n;i<s.length;i++){var o=s[i];t(o)}}x2(w2,v2,_2,T2,C2);var A2=function(){function n(e,t){e===void 0&&(e=[]),t===void 0&&(t=function(){return null}),this._set=new Set(e),this._afterUpdate=t}return n.prototype._validate=function(e){if(/\s/.test(e))throw new Error("DOMException in DOMTokenList.add: The token '".concat(e,"' contains HTML space characters, which are not valid in tokens."))},n.prototype.add=function(e){this._validate(e),this._set.add(e),this._afterUpdate(this)},n.prototype.replace=function(e,t){this._validate(t),this._set.delete(e),this._set.add(t),this._afterUpdate(this)},n.prototype.remove=function(e){this._set.delete(e)&&this._afterUpdate(this)},n.prototype.toggle=function(e){this._validate(e),this._set.has(e)?this._set.delete(e):this._set.add(e),this._afterUpdate(this)},n.prototype.contains=function(e){return this._set.has(e)},Object.defineProperty(n.prototype,"length",{get:function(){return this._set.size},enumerable:!1,configurable:!0}),n.prototype.values=function(){return this._set.values()},Object.defineProperty(n.prototype,"value",{get:function(){return Array.from(this._set.values())},enumerable:!1,configurable:!0}),n.prototype.toString=function(){return Array.from(this._set.values()).join(" ")},n}(),Yo=function(n){m2(e,n);function e(t,i,s,o,r,u,l){s===void 0&&(s=""),u===void 0&&(u=new ed.default),l===void 0&&(l={});var a=n.call(this,o,r)||this;if(a.rawAttrs=s,a.voidTag=u,a.nodeType=St.default.ELEMENT_NODE,a.rawTagName=t,a.rawAttrs=s||"",a.id=i.id||"",a.childNodes=[],a._parseOptions=l,a.classList=new A2(i.class?i.class.split(/\s+/):[],function(d){return a.setAttribute("class",d.toString())}),i.id&&(s||(a.rawAttrs='id="'.concat(i.id,'"'))),i.class&&!s){var c='class="'.concat(a.classList.toString(),'"');a.rawAttrs?a.rawAttrs+=" ".concat(c):a.rawAttrs=c}return a}return e.prototype.quoteAttribute=function(t){return t==null?"null":JSON.stringify(t.replace(/"/g,"&quot;"))},e.prototype.removeChild=function(t){return this.childNodes=this.childNodes.filter(function(i){return i!==t}),this},e.prototype.exchangeChild=function(t,i){var s=this.childNodes;return this.childNodes=s.map(function(o){return o===t?i:o}),this},Object.defineProperty(e.prototype,"tagName",{get:function(){return this.rawTagName?this.rawTagName.toUpperCase():this.rawTagName},set:function(t){this.rawTagName=t.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"localName",{get:function(){return this.rawTagName.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isVoidElement",{get:function(){return this.voidTag.isVoidElement(this.localName)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rawText",{get:function(){return this.childNodes.reduce(function(t,i){return t+=i.rawText},"")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textContent",{get:function(){return mi(this.rawText)},set:function(t){var i=[new Hn.default(t,this)];this.childNodes=i},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"text",{get:function(){return mi(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"structuredText",{get:function(){var t=[],i=[t];function s(o){if(o.nodeType===St.default.ELEMENT_NODE)zo.has(o.rawTagName)?(t.length>0&&i.push(t=[]),o.childNodes.forEach(s),t.length>0&&i.push(t=[])):o.childNodes.forEach(s);else if(o.nodeType===St.default.TEXT_NODE)if(o.isWhitespace)t.prependWhitespace=!0;else{var r=o.trimmedText;t.prependWhitespace&&(r=" ".concat(r),t.prependWhitespace=!1),t.push(r)}}return s(this),i.map(function(o){return o.join("").replace(/\s{2,}/g," ")}).join(`
`).replace(/\s+$/,"")},enumerable:!1,configurable:!0}),e.prototype.toString=function(){var t=this.rawTagName;if(t){var i=this.rawAttrs?" ".concat(this.rawAttrs):"";return this.voidTag.formatNode(t,i,this.innerHTML)}return this.innerHTML},Object.defineProperty(e.prototype,"innerHTML",{get:function(){return this.childNodes.map(function(t){return t.toString()}).join("")},set:function(t){var i=Ln(t,this._parseOptions),s=i.childNodes.length?i.childNodes:[new Hn.default(t,this)];Nt(s,this),Nt(this.childNodes,null),this.childNodes=s},enumerable:!1,configurable:!0}),e.prototype.set_content=function(t,i){if(i===void 0&&(i={}),t instanceof Ro.default)t=[t];else if(typeof t=="string"){i=Jn(Jn({},this._parseOptions),i);var s=Ln(t,i);t=s.childNodes.length?s.childNodes:[new Hn.default(s.innerHTML,this)]}return Nt(this.childNodes,null),Nt(t,this),this.childNodes=t,this},e.prototype.replaceWith=function(){for(var t=this,i=[],s=0;s<arguments.length;s++)i[s]=arguments[s];var o=this.parentNode,r=i.map(function(l){if(l instanceof Ro.default)return[l];if(typeof l=="string"){var a=Ln(l,t._parseOptions);return a.childNodes.length?a.childNodes:[new Hn.default(l,t)]}return[]}).flat(),u=o.childNodes.findIndex(function(l){return l===t});return Nt([this],null),o.childNodes=fi(fi(fi([],o.childNodes.slice(0,u),!0),Nt(r,o),!0),o.childNodes.slice(u+1),!0),this},Object.defineProperty(e.prototype,"outerHTML",{get:function(){return this.toString()},enumerable:!1,configurable:!0}),e.prototype.trimRight=function(t){for(var i=0;i<this.childNodes.length;i++){var s=this.childNodes[i];if(s.nodeType===St.default.ELEMENT_NODE)s.trimRight(t);else{var o=s.rawText.search(t);o>-1&&(s.rawText=s.rawText.substr(0,o),this.childNodes.length=i+1)}}return this},Object.defineProperty(e.prototype,"structure",{get:function(){var t=[],i=0;function s(r){t.push("  ".repeat(i)+r)}function o(r){var u=r.id?"#".concat(r.id):"",l=r.classList.length?".".concat(r.classList.value.join(".")):"";s("".concat(r.rawTagName).concat(u).concat(l)),i++,r.childNodes.forEach(function(a){a.nodeType===St.default.ELEMENT_NODE?o(a):a.nodeType===St.default.TEXT_NODE&&(a.isWhitespace||s("#text"))}),i--}return o(this),t.join(`
`)},enumerable:!1,configurable:!0}),e.prototype.removeWhitespace=function(){var t=this,i=0;return this.childNodes.forEach(function(s){if(s.nodeType===St.default.TEXT_NODE){if(s.isWhitespace)return;s.rawText=s.trimmedRawText}else s.nodeType===St.default.ELEMENT_NODE&&s.removeWhitespace();t.childNodes[i++]=s}),this.childNodes.length=i,this},e.prototype.querySelectorAll=function(t){return(0,So.selectAll)(t,this,{xmlMode:!0,adapter:Do.default})},e.prototype.querySelector=function(t){return(0,So.selectOne)(t,this,{xmlMode:!0,adapter:Do.default})},e.prototype.getElementsByTagName=function(t){for(var i=t.toUpperCase(),s=[],o=[],r=this,u=0;u!==void 0;){var l=void 0;do l=r.childNodes[u++];while(u<r.childNodes.length&&l===void 0);if(l===void 0){r=r.parentNode,u=o.pop();continue}l.nodeType===St.default.ELEMENT_NODE&&((t==="*"||l.tagName===i)&&s.push(l),l.childNodes.length>0&&(o.push(u),r=l,u=0))}return s},e.prototype.getElementById=function(t){for(var i=[],s=this,o=0;o!==void 0;){var r=void 0;do r=s.childNodes[o++];while(o<s.childNodes.length&&r===void 0);if(r===void 0){s=s.parentNode,o=i.pop();continue}if(r.nodeType===St.default.ELEMENT_NODE){if(r.id===t)return r;r.childNodes.length>0&&(i.push(o),s=r,o=0)}}return null},e.prototype.closest=function(t){var i=new Map,s=this,o=null;function r(l,a){for(var c=null,d=0,m=a.length;d<m&&!c;d++){var f=a[d];if(l(f))c=f;else{var y=i.get(f);y&&(c=r(l,[y]))}}return c}for(;s;)i.set(s,o),o=s,s=s.parentNode;for(s=this;s;){var u=(0,So.selectOne)(t,s,{xmlMode:!0,adapter:Jn(Jn({},Do.default),{getChildren:function(l){var a=i.get(l);return a&&[a]},getSiblings:function(l){return[l]},findOne:r,findAll:function(){return[]}})});if(u)return u;s=s.parentNode}return null},e.prototype.appendChild=function(t){return t.remove(),this.childNodes.push(t),t.parentNode=this,t},Object.defineProperty(e.prototype,"firstChild",{get:function(){return this.childNodes[0]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"lastChild",{get:function(){return(0,Vn.default)(this.childNodes)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attrs",{get:function(){if(this._attrs)return this._attrs;this._attrs={};var t=this.rawAttributes;for(var i in t){var s=t[i]||"";this._attrs[i.toLowerCase()]=mi(s)}return this._attrs},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){var t={},i=this.rawAttributes;for(var s in i){var o=i[s]||"";t[s]=mi(o)}return t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"rawAttributes",{get:function(){if(this._rawAttrs)return this._rawAttrs;var t={};if(this.rawAttrs)for(var i=/([a-zA-Z()[\]#@$.?:][a-zA-Z0-9-_:()[\]#]*)(?:\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+))?/g,s=void 0;s=i.exec(this.rawAttrs);){var o=s[1],r=s[2]||null;r&&(r[0]==="'"||r[0]==='"')&&(r=r.slice(1,r.length-1)),t[o]=t[o]||r}return this._rawAttrs=t,t},enumerable:!1,configurable:!0}),e.prototype.removeAttribute=function(t){var i=this.rawAttributes;return delete i[t],this._attrs&&delete this._attrs[t],this.rawAttrs=Object.keys(i).map(function(s){var o=JSON.stringify(i[s]);return o===void 0||o==="null"?s:"".concat(s,"=").concat(o)}).join(" "),t==="id"&&(this.id=""),this},e.prototype.hasAttribute=function(t){return t.toLowerCase()in this.attrs},e.prototype.getAttribute=function(t){return this.attrs[t.toLowerCase()]},e.prototype.setAttribute=function(t,i){var s=this;if(arguments.length<2)throw new Error("Failed to execute 'setAttribute' on 'Element'");var o=t.toLowerCase(),r=this.rawAttributes;for(var u in r)if(u.toLowerCase()===o){t=u;break}return r[t]=String(i),this._attrs&&(this._attrs[o]=mi(r[t])),this.rawAttrs=Object.keys(r).map(function(l){var a=s.quoteAttribute(r[l]);return a==="null"||a==='""'?l:"".concat(l,"=").concat(a)}).join(" "),t==="id"&&(this.id=i),this},e.prototype.setAttributes=function(t){var i=this;return this._attrs&&delete this._attrs,this._rawAttrs&&delete this._rawAttrs,this.rawAttrs=Object.keys(t).map(function(s){var o=t[s];return o==="null"||o==='""'?s:"".concat(s,"=").concat(i.quoteAttribute(String(o)))}).join(" "),this},e.prototype.insertAdjacentHTML=function(t,i){var s,o,r,u=this;if(arguments.length<2)throw new Error("2 arguments required");var l=Ln(i,this._parseOptions);if(t==="afterend"){var a=this.parentNode.childNodes.findIndex(function(c){return c===u});Nt(l.childNodes,this.parentNode),(s=this.parentNode.childNodes).splice.apply(s,fi([a+1,0],l.childNodes,!1))}else if(t==="afterbegin")Nt(l.childNodes,this),(o=this.childNodes).unshift.apply(o,l.childNodes);else if(t==="beforeend")l.childNodes.forEach(function(c){u.appendChild(c)});else if(t==="beforebegin"){var a=this.parentNode.childNodes.findIndex(function(d){return d===u});Nt(l.childNodes,this.parentNode),(r=this.parentNode.childNodes).splice.apply(r,fi([a,0],l.childNodes,!1))}else throw new Error("The value provided ('".concat(t,"') is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'"));return this},Object.defineProperty(e.prototype,"nextSibling",{get:function(){if(this.parentNode){for(var t=this.parentNode.childNodes,i=0;i<t.length;){var s=t[i++];if(this===s)return t[i]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextElementSibling",{get:function(){if(this.parentNode){for(var t=this.parentNode.childNodes,i=0,s=!1;i<t.length;){var o=t[i++];if(s){if(o instanceof e)return o||null}else this===o&&(s=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){if(this.parentNode){for(var t=this.parentNode.childNodes,i=t.length;i>0;){var s=t[--i];if(this===s)return t[i-1]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousElementSibling",{get:function(){if(this.parentNode){for(var t=this.parentNode.childNodes,i=t.length,s=!1;i>0;){var o=t[--i];if(s){if(o instanceof e)return o||null}else this===o&&(s=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"classNames",{get:function(){return this.classList.toString()},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return Ln(this.toString(),this._parseOptions).firstChild},e}(Ro.default);Jt.default=Yo;var Bt=/<!--[\s\S]*?-->|<(\/?)([a-zA-Z][-.:0-9_a-zA-Z]*)((?:\s+[^>]*?(?:(?:'[^']*')|(?:"[^"]*"))?)*)\s*(\/?)>/g,k2=/(?:^|\s)(id|class)\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+)/gi,q2={area:!0,AREA:!0,base:!0,BASE:!0,br:!0,BR:!0,col:!0,COL:!0,hr:!0,HR:!0,img:!0,IMG:!0,input:!0,INPUT:!0,link:!0,LINK:!0,meta:!0,META:!0,source:!0,SOURCE:!0,embed:!0,EMBED:!0,param:!0,PARAM:!0,track:!0,TRACK:!0,wbr:!0,WBR:!0},kl={li:{li:!0,LI:!0},LI:{li:!0,LI:!0},p:{p:!0,div:!0,P:!0,DIV:!0},P:{p:!0,div:!0,P:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},td:{td:!0,th:!0,TD:!0,TH:!0},TD:{td:!0,th:!0,TD:!0,TH:!0},th:{td:!0,th:!0,TD:!0,TH:!0},TH:{td:!0,th:!0,TD:!0,TH:!0},h1:{h1:!0,H1:!0},H1:{h1:!0,H1:!0},h2:{h2:!0,H2:!0},H2:{h2:!0,H2:!0},h3:{h3:!0,H3:!0},H3:{h3:!0,H3:!0},h4:{h4:!0,H4:!0},H4:{h4:!0,H4:!0},h5:{h5:!0,H5:!0},H5:{h5:!0,H5:!0},h6:{h6:!0,H6:!0},H6:{h6:!0,H6:!0}},ql={li:{ul:!0,ol:!0,UL:!0,OL:!0},LI:{ul:!0,ol:!0,UL:!0,OL:!0},a:{div:!0,DIV:!0},A:{div:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},i:{div:!0,DIV:!0},I:{div:!0,DIV:!0},p:{div:!0,DIV:!0},P:{div:!0,DIV:!0},td:{tr:!0,table:!0,TR:!0,TABLE:!0},TD:{tr:!0,table:!0,TR:!0,TABLE:!0},th:{tr:!0,table:!0,TR:!0,TABLE:!0},TH:{tr:!0,table:!0,TR:!0,TABLE:!0}},yi="documentfragmentcontainer";function td(n,e){var t,i;e===void 0&&(e={});var s=new ed.default((t=e==null?void 0:e.voidTag)===null||t===void 0?void 0:t.closingSlash,(i=e==null?void 0:e.voidTag)===null||i===void 0?void 0:i.tags),o=e.blockTextElements||{script:!0,noscript:!0,style:!0,pre:!0},r=Object.keys(o),u=r.map(function(be){return new RegExp("^".concat(be,"$"),"i")}),l=r.filter(function(be){return o[be]}).map(function(be){return new RegExp("^".concat(be,"$"),"i")});function a(be){return l.some(function(fe){return fe.test(be)})}function c(be){return u.some(function(fe){return fe.test(be)})}var d=function(be,fe){return[be-T,fe-T]},m=new Yo(null,{},"",null,[0,n.length],s,e),f=m,y=[m],g=-1,x=void 0,k;n="<".concat(yi,">").concat(n,"</").concat(yi,">");for(var A=e.lowerCaseTagName,_=e.fixNestedATags,S=n.length-(yi.length+2),T=yi.length+2;k=Bt.exec(n);){var q=k[0],I=k[1],$=k[2],N=k[3],G=k[4],U=q.length,z=Bt.lastIndex-U,ae=Bt.lastIndex;if(g>-1&&g+U<ae){var ee=n.substring(g,z);f.appendChild(new Hn.default(ee,f,d(g,z)))}if(g=Bt.lastIndex,$!==yi){if(q[1]==="!"){if(e.comment){var ee=n.substring(z+4,ae-3);f.appendChild(new b2.default(ee,f,d(z,ae)))}continue}if(A&&($=$.toLowerCase()),!I){for(var Ge={},Me=void 0;Me=k2.exec(N);){var tt=Me[1],ze=Me[2],L=ze[0]==="'"||ze[0]==='"';Ge[tt.toLowerCase()]=L?ze.slice(1,ze.length-1):ze}var te=f.rawTagName;!G&&kl[te]&&kl[te][$]&&(y.pop(),f=(0,Vn.default)(y)),_&&($==="a"||$==="A")&&(x!==void 0&&(y.splice(x),f=(0,Vn.default)(y)),x=y.length);var he=Bt.lastIndex,ge=he-U;if(f=f.appendChild(new Yo($,Ge,N.slice(1),null,d(ge,he),s,e)),y.push(f),c($)){var _e="</".concat($,">"),Y=A?n.toLocaleLowerCase().indexOf(_e,Bt.lastIndex):n.indexOf(_e,Bt.lastIndex),ce=Y===-1?S:Y;if(a($)){var ee=n.substring(he,ce);ee.length>0&&/\S/.test(ee)&&f.appendChild(new Hn.default(ee,f,d(he,ce)))}Y===-1?g=Bt.lastIndex=n.length+1:(g=Bt.lastIndex=Y+_e.length,I="/")}}if(I||G||q2[$])for(;;)if(x!=null&&($==="a"||$==="A")&&(x=void 0),f.rawTagName===$){f.range[1]=d(-1,Math.max(g,ae))[1],y.pop(),f=(0,Vn.default)(y);break}else{var te=f.tagName;if(ql[te]&&ql[te][$]){y.pop(),f=(0,Vn.default)(y);continue}break}}}return y}Jt.base_parse=td;function Ln(n,e){e===void 0&&(e={});for(var t=td(n,e),i=t[0],s=function(){var o=t.pop(),r=(0,Vn.default)(t);o.parentNode&&o.parentNode.parentNode&&(o.parentNode===r&&o.tagName===r.tagName?e.parseNoneClosedTags!==!0&&(r.removeChild(o),o.childNodes.forEach(function(u){r.parentNode.appendChild(u)}),t.pop()):e.parseNoneClosedTags!==!0&&(r.removeChild(o),o.childNodes.forEach(function(u){r.appendChild(u)})))};t.length>1;)s();return i}Jt.parse=Ln;function Nt(n,e){return n.map(function(t){return t.parentNode=e,t})}var nd={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var e=Jt;Object.defineProperty(n,"default",{enumerable:!0,get:function(){return e.parse}})})(nd);var Dr={};Object.defineProperty(Dr,"__esModule",{value:!0});var $2=Jt;function S2(n,e){e===void 0&&(e={});var t=(0,$2.base_parse)(n,e);return Boolean(t.length===1)}Dr.default=S2;var An=O&&O.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Qe,"__esModule",{value:!0});Qe.NodeType=Qe.TextNode=Qe.Node=Qe.valid=Qe.CommentNode=Qe.HTMLElement=dd=Qe.parse=void 0;var id=An(js);Qe.CommentNode=id.default;var sd=An(Jt);Qe.HTMLElement=sd.default;var od=An(ti);Qe.Node=od.default;var rd=An(Ys);Qe.TextNode=rd.default;var ad=An(Cn);Qe.NodeType=ad.default;var ld=An(nd),ud=An(Dr);Qe.valid=ud.default;function Vt(n,e){return e===void 0&&(e={}),(0,ld.default)(n,e)}Qe.default=Vt;var dd=Qe.parse=Vt;Vt.parse=ld.default;Vt.HTMLElement=sd.default;Vt.CommentNode=id.default;Vt.valid=ud.default;Vt.Node=od.default;Vt.TextNode=rd.default;Vt.NodeType=ad.default;const zn=class extends on{constructor(t,i){super("Extract all images from a layoutConfig using the meta paths.",[],"ExctractImages");w(this,"_isOfficial");w(this,"_sharedTagRenderings");this._isOfficial=t,this._sharedTagRenderings=i}static mightBeTagRendering(t){if(!t.type)return!1;let i;return Array.isArray(t.type)?i=t.type:i=[t.type],i.some(s=>{var o,r;return s!==null&&(s.$ref=="#/definitions/TagRenderingConfigJson"||s.$ref=="#/definitions/MinimalTagRenderingConfigJson"||s.$ref=="#/definitions/QuestionableTagRenderingConfigJson"||((o=s.properties)==null?void 0:o.render)!==void 0&&((r=s.properties)==null?void 0:r.mappings)!==void 0)})}convert(t,i){var r,u,l;const s=[];for(const a of zn.layoutMetaPaths){const c=zn.mightBeTagRendering(a),d=a.hints.typehint==="icon"||a.hints.typehint==="image",m=P.CollectPath(a.path,t);if(c)for(const f of m){const y=f.path,g=f.leaf;if(typeof g=="string"){if(!d||(g==""&&i.warn(i+"."+y.join(".")+" Found an empty image"),(r=this._sharedTagRenderings)!=null&&r.has(g)))continue;s.push({path:g,context:i+"."+y})}else for(const x of zn.tagRenderingMetaPaths){const k=P.CollectPath(x.path,g),A=x.hints.typehint==="rendered",_=x.hints.typehint==="icon"||x.hints.typehint==="image";for(const S of k){if(d&&A)if(S.leaf===""||S.leaf.path=="")i.enter(y).enter(S.path).warn("Found an emtpy image");else if(typeof S.leaf!="string"){const T=i.enter(S.path);(this._isOfficial?T.err:T.warn)("found an image path that is not a string: "+JSON.stringify(S.leaf))}else s.push({path:S.leaf,context:i+"."+y});!d&&_&&s.push(...J.T(S.leaf,"extract_images from "+S.path.join(".")).ExtractImages(!1).map(T=>({path:T,context:i+"."+T})))}}}else for(const f of m){if(f.leaf===""){i.enter(f.path).warn("Found an empty image");continue}typeof f.leaf=="string"&&s.push({context:i+"."+f.path.join("."),path:f.leaf})}}const o=[];for(const a of s){if(a.path.startsWith("<")&&a.path.endsWith(">")){const d=dd(a.path),f=Array.from(d.getElementsByTagName("img")).map(y=>y.getAttribute("src"));o.push(...f.map(y=>({path:y,context:a.context+" (in html)"})));continue}const c=P.NoNull(P.NoEmpty((l=(u=a.path)==null?void 0:u.split(";"))==null?void 0:l.map(d=>d.split(":")[0])));for(const d of c)o.push({path:d,context:a.context})}return o}};let _i=zn;w(_i,"layoutMetaPaths",ou.filter(t=>{const i=t.hints.typehint;return zn.mightBeTagRendering(t)||i!==void 0&&(i==="image"||i==="icon"||i==="image[]"||i==="icon[]")})),w(_i,"tagRenderingMetaPaths",ru);class J2 extends Fs{constructor(t){super("Walks over the entire theme and replaces images to the relative URL. Only works if the ID of the theme is an URL",[],"fixImages");w(this,"_knownImages");this._knownImages=t}convert(t,i){let s;try{s=new URL(t.id)}catch{return t}const o=s.protocol+"//"+s.host;let r=s.protocol+"//"+s.host+s.pathname;r=r.substring(0,r.lastIndexOf("/"));const u=this;r.endsWith("assets/generated/themes")&&(i.warn("Detected 'assets/generated/themes' as relative URL. I'm assuming that you are loading your file for the MC-repository, so I'm rewriting all image links as if they were absolute instead of relative"),r=o);function l(a){return u._knownImages.has(a)?a:typeof a!="string"?(i.warn("Found a non-string object while replacing images: "+JSON.stringify(a)),a):a.startsWith("./")?r+a.substring(1):a.startsWith("/")?o+a:a}t=P.Clone(t);for(const a of ou){if(a.hints.typehint!=="image"&&a.hints.typehint!=="icon")continue;const c=_i.mightBeTagRendering(a);P.WalkPath(a.path,t,d=>{if(typeof d=="string")return l(d);if(c)for(const m of ru)m.hints.typehint==="rendered"&&P.WalkPath(m.path,d,f=>l(f));return d})}return t}}export{we as A,L2 as B,Ti as C,vi as D,_i as E,as as F,cy as G,dd as H,Gl as I,N2 as J,J2 as K,dy as L,ot as O,us as P,Te as R,W2 as S,st as T,Qt as V,vt as W,mr as a,de as b,et as c,Kn as d,lr as e,pg as f,gg as g,Nn as h,bi as i,zl as j,Fo as k,xm as l,wi as m,hy as n,ec as o,tn as p,ru as q,ac as r,iy as s,ou as t,Fs as u,P2 as v,B2 as w,py as x,M2 as y,on as z};
//# sourceMappingURL=FixImages-3322fd56.js.map
