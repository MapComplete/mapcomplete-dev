{"version":3,"file":"MvtSource-b6afcd24.js","sources":["../../src/Logic/FeatureSource/Sources/MvtSource.ts"],"sourcesContent":["import { Feature as GeojsonFeature, Geometry } from \"geojson\"\n\nimport { Store, UIEventSource } from \"../../UIEventSource\"\nimport { FeatureSourceForTile, UpdatableFeatureSource } from \"../FeatureSource\"\nimport Pbf from \"pbf\"\n\ntype Coords = [number, number][]\n\nclass MvtFeatureBuilder {\n    private static readonly geom_types = [\"Unknown\", \"Point\", \"LineString\", \"Polygon\"] as const\n    private readonly _size: number\n    private readonly _x0: number\n    private readonly _y0: number\n\n    constructor(extent: number, x: number, y: number, z: number) {\n        this._size = extent * Math.pow(2, z)\n        this._x0 = extent * x\n        this._y0 = extent * y\n    }\n\n    private static signedArea(ring: Coords): number {\n        let sum = 0\n        const len = ring.length\n        // J is basically (i - 1) % len\n        let j = len - 1\n        let p1\n        let p2\n        for (let i = 0; i < len; i++) {\n            p1 = ring[i]\n            p2 = ring[j]\n            sum += (p2.x - p1.x) * (p1.y + p2.y)\n            j = i\n        }\n        return sum\n    }\n\n    /**\n     *\n     * const rings = [   [     [       3.208361864089966,       51.186908820014736     ],     [       3.2084155082702637,       51.18689537073311     ],     [       3.208436965942383,       51.186888646090836     ],     [       3.2084155082702637,       51.18686174751187     ],     [       3.2084155082702637,       51.18685502286465     ],     [       3.2083725929260254,       51.18686847215807     ],     [       3.2083404064178467,       51.18687519680333     ],     [       3.208361864089966,       51.186908820014736     ]   ] ]\n     * MvtFeatureBuilder.classifyRings(rings) // => [rings]\n     */\n    private static classifyRings(rings: Coords[]): Coords[][] {\n        if (rings.length <= 0) {\n            throw \"Now rings in polygon found\"\n        }\n        if (rings.length == 1) {\n            return [rings]\n        }\n\n        const polygons: Coords[][] = []\n        let currentPolygon: Coords[]\n\n        for (let i = 0; i < rings.length; i++) {\n            let ring = rings[i]\n            const area = this.signedArea(ring)\n            if (area === 0) {\n                // Weird, degenerate ring\n                continue\n            }\n            const ccw = area < 0\n\n            if (ccw === area < 0) {\n                if (currentPolygon) {\n                    polygons.push(currentPolygon)\n                }\n                currentPolygon = [ring]\n            } else {\n                currentPolygon.push(ring)\n            }\n        }\n        if (currentPolygon) {\n            polygons.push(currentPolygon)\n        }\n\n        return polygons\n    }\n\n    public toGeoJson(geometry: number[], typeIndex: 1 | 2 | 3, properties: any): GeojsonFeature {\n        let coords: Coords[] = this.encodeGeometry(geometry)\n        let classified = undefined\n        switch (typeIndex) {\n            case 1:\n                const points = []\n                for (let i = 0; i < coords.length; i++) {\n                    points[i] = coords[i][0]\n                }\n                coords = points\n                this.project(<any>coords)\n                break\n\n            case 2:\n                for (let i = 0; i < coords.length; i++) {\n                    this.project(coords[i])\n                }\n                break\n\n            case 3:\n                classified = MvtFeatureBuilder.classifyRings(coords)\n                for (let i = 0; i < classified.length; i++) {\n                    for (let j = 0; j < classified[i].length; j++) {\n                        this.project(classified[i][j])\n                    }\n                }\n                break\n        }\n\n        let type: string = MvtFeatureBuilder.geom_types[typeIndex]\n        let polygonCoords: Coords | Coords[] | Coords[][]\n        if (coords.length === 1) {\n            polygonCoords = (classified ?? coords)[0]\n        } else {\n            polygonCoords = classified ?? coords\n            type = \"Multi\" + type\n        }\n\n        return {\n            type: \"Feature\",\n            geometry: {\n                type: <any>type,\n                coordinates: <any>polygonCoords,\n            },\n            properties,\n        }\n    }\n\n    /**\n     *\n     * const geometry = [9,233,8704,130,438,1455,270,653,248,423,368,493,362,381,330,267,408,301,406,221,402,157,1078,429,1002,449,1036,577,800,545,1586,1165,164,79,40]\n     * const builder = new MvtFeatureBuilder(4096, 66705, 43755, 17)\n     * const expected = [[3.2106759399175644,51.213658395282124],[3.2108227908611298,51.21396418776169],[3.2109133154153824,51.21410154168976],[3.210996463894844,51.214190590500664],[3.211119845509529,51.214294340548975],[3.211241215467453,51.2143745681588],[3.2113518565893173,51.21443085341426],[3.211488649249077,51.21449427925393],[3.2116247713565826,51.214540903490956],[3.211759552359581,51.21457408647774],[3.2121209800243378,51.214664394485254],[3.212456926703453,51.21475890267553],[3.2128042727708817,51.214880292910834],[3.213072493672371,51.214994962285544],[3.2136042416095734,51.21523984134939],[3.2136592268943787,51.21525664260963],[3.213672637939453,51.21525664260963]]\n     * builder.project(builder.encodeGeometry(geometry)[0]) // => expected\n     * @param geometry\n     * @private\n     */\n    private encodeGeometry(geometry: number[]): Coords[] {\n        let cX = 0\n        let cY = 0\n        let coordss: Coords[] = []\n        let currentRing: Coords = []\n        for (let i = 0; i < geometry.length; i++) {\n            let commandInteger = geometry[i]\n            let commandId = commandInteger & 0x7\n            let commandCount = commandInteger >> 3\n            /*\n            Command \tId \tParameters \tParameter Count\n                        MoveTo \t1 \tdX, dY \t2\n                        LineTo \t2 \tdX, dY \t2\n                        ClosePath \t7 \tNo parameters \t0\n            */\n            if (commandId === 1) {\n                // MoveTo means: we start a new ring\n                if (currentRing.length !== 0) {\n                    coordss.push(currentRing)\n                    currentRing = []\n                }\n            }\n            if (commandId === 1 || commandId === 2) {\n                for (let j = 0; j < commandCount; j++) {\n                    const dx = geometry[i + j * 2 + 1]\n                    cX += (dx >> 1) ^ -(dx & 1)\n                    const dy = geometry[i + j * 2 + 2]\n                    cY += (dy >> 1) ^ -(dy & 1)\n                    currentRing.push([cX, cY])\n                }\n                i += commandCount * 2\n            }\n            if (commandId === 7) {\n                currentRing.push([...currentRing[0]])\n                i++\n            }\n        }\n        if (currentRing.length > 0) {\n            coordss.push(currentRing)\n        }\n        return coordss\n    }\n\n    /**\n     * Inline replacement of the location by projecting\n     * @param line the line which will be rewritten inline\n     * @return line\n     */\n    private project(line: Coords) {\n        const y0 = this._y0\n        const x0 = this._x0\n        const size = this._size\n        for (let i = 0; i < line.length; i++) {\n            let p = line[i]\n            let y2 = 180 - ((p[1] + y0) * 360) / size\n            line[i] = [\n                ((p[0] + x0) * 360) / size - 180,\n                (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90,\n            ]\n        }\n        return line\n    }\n}\n\nclass Layer {\n    public static read(pbf, end) {\n        return pbf.readFields(\n            Layer._readField,\n            { version: 0, name: \"\", features: [], keys: [], values: [], extent: 0 },\n            end\n        )\n    }\n\n    static _readField(tag, obj, pbf) {\n        if (tag === 15) obj.version = pbf.readVarint()\n        else if (tag === 1) obj.name = pbf.readString()\n        else if (tag === 2) obj.features.push(Feature.read(pbf, pbf.readVarint() + pbf.pos))\n        else if (tag === 3) obj.keys.push(pbf.readString())\n        else if (tag === 4) obj.values.push(Value.read(pbf, pbf.readVarint() + pbf.pos))\n        else if (tag === 5) obj.extent = pbf.readVarint()\n    }\n\n    public static write(obj, pbf) {\n        if (obj.version) pbf.writeVarintField(15, obj.version)\n        if (obj.name) pbf.writeStringField(1, obj.name)\n        if (obj.features)\n            for (var i = 0; i < obj.features.length; i++)\n                pbf.writeMessage(2, Feature.write, obj.features[i])\n        if (obj.keys) for (i = 0; i < obj.keys.length; i++) pbf.writeStringField(3, obj.keys[i])\n        if (obj.values)\n            for (i = 0; i < obj.values.length; i++) pbf.writeMessage(4, Value.write, obj.values[i])\n        if (obj.extent) pbf.writeVarintField(5, obj.extent)\n    }\n}\n\nclass Feature {\n    static read(pbf, end) {\n        return pbf.readFields(Feature._readField, { id: 0, tags: [], type: 0, geometry: [] }, end)\n    }\n\n    static _readField(tag, obj, pbf) {\n        if (tag === 1) obj.id = pbf.readVarint()\n        else if (tag === 2) pbf.readPackedVarint(obj.tags)\n        else if (tag === 3) obj.type = pbf.readVarint()\n        else if (tag === 4) pbf.readPackedVarint(obj.geometry)\n    }\n\n    public static write(obj, pbf) {\n        if (obj.id) pbf.writeVarintField(1, obj.id)\n        if (obj.tags) pbf.writePackedVarint(2, obj.tags)\n        if (obj.type) pbf.writeVarintField(3, obj.type)\n        if (obj.geometry) pbf.writePackedVarint(4, obj.geometry)\n    }\n}\n\nclass Value {\n    public static read(pbf, end) {\n        return pbf.readFields(\n            Value._readField,\n            {\n                string_value: \"\",\n                float_value: 0,\n                double_value: 0,\n                int_value: 0,\n                uint_value: 0,\n                sint_value: 0,\n                bool_value: false,\n            },\n            end\n        )\n    }\n\n    static _readField = function (tag, obj, pbf) {\n        if (tag === 1) obj.string_value = pbf.readString()\n        else if (tag === 2) obj.float_value = pbf.readFloat()\n        else if (tag === 3) obj.double_value = pbf.readDouble()\n        else if (tag === 4) obj.int_value = pbf.readVarint(true)\n        else if (tag === 5) obj.uint_value = pbf.readVarint()\n        else if (tag === 6) obj.sint_value = pbf.readSVarint()\n        else if (tag === 7) obj.bool_value = pbf.readBoolean()\n    }\n\n    public static write(obj, pbf) {\n        if (obj.string_value) pbf.writeStringField(1, obj.string_value)\n        if (obj.float_value) pbf.writeFloatField(2, obj.float_value)\n        if (obj.double_value) pbf.writeDoubleField(3, obj.double_value)\n        if (obj.int_value) pbf.writeVarintField(4, obj.int_value)\n        if (obj.uint_value) pbf.writeVarintField(5, obj.uint_value)\n        if (obj.sint_value) pbf.writeSVarintField(6, obj.sint_value)\n        if (obj.bool_value) pbf.writeBooleanField(7, obj.bool_value)\n    }\n}\n\nclass Tile {\n    // code generated by pbf v3.2.1\n\n    static GeomType = {\n        UNKNOWN: {\n            value: 0,\n            options: {},\n        },\n        POINT: {\n            value: 1,\n            options: {},\n        },\n        LINESTRING: {\n            value: 2,\n            options: {},\n        },\n        POLYGON: {\n            value: 3,\n            options: {},\n        },\n    }\n\n    public static read(pbf, end) {\n        return pbf.readFields(Tile._readField, { layers: [] }, end)\n    }\n\n    static _readField(tag, obj, pbf) {\n        if (tag === 3) obj.layers.push(Layer.read(pbf, pbf.readVarint() + pbf.pos))\n    }\n\n    static write(obj, pbf) {\n        if (obj.layers)\n            for (var i = 0; i < obj.layers.length; i++)\n                pbf.writeMessage(3, Layer.write, obj.layers[i])\n    }\n}\n\nexport default class MvtSource implements FeatureSourceForTile, UpdatableFeatureSource {\n    public readonly features: Store<GeojsonFeature<Geometry, { [name: string]: any }>[]>\n    public readonly x: number\n    public readonly y: number\n    public readonly z: number\n    private readonly _url: string\n    private readonly _layerName: string\n    private readonly _features: UIEventSource<\n        GeojsonFeature<\n            Geometry,\n            {\n                [name: string]: any\n            }\n        >[]\n    > = new UIEventSource<GeojsonFeature<Geometry, { [p: string]: any }>[]>([])\n    private currentlyRunning: Promise<any>\n\n    constructor(\n        url: string,\n        x: number,\n        y: number,\n        z: number,\n        layerName?: string,\n        isActive?: Store<boolean>\n    ) {\n        this._url = url\n        this._layerName = layerName\n        this.x = x\n        this.y = y\n        this.z = z\n        this.updateAsync()\n        this.features = this._features.map(\n            (fs) => {\n                if (fs === undefined || isActive?.data === false) {\n                    return []\n                }\n                return fs\n            },\n            [isActive]\n        )\n    }\n\n    async updateAsync() {\n        if (!this.currentlyRunning) {\n            this.currentlyRunning = this.download()\n        }\n        await this.currentlyRunning\n    }\n\n    private getValue(v: {\n        // Exactly one of these values must be present in a valid message\n        string_value?: string\n        float_value?: number\n        double_value?: number\n        int_value?: number\n        uint_value?: number\n        sint_value?: number\n        bool_value?: boolean\n    }): string | number | undefined | boolean {\n        if (v.string_value !== \"\") {\n            return v.string_value\n        }\n        if (v.double_value !== 0) {\n            return v.double_value\n        }\n        if (v.float_value !== 0) {\n            return v.float_value\n        }\n        if (v.int_value !== 0) {\n            return v.int_value\n        }\n        if (v.uint_value !== 0) {\n            return v.uint_value\n        }\n        if (v.sint_value !== 0) {\n            return v.sint_value\n        }\n        if (v.bool_value !== false) {\n            return v.bool_value\n        }\n        return undefined\n    }\n\n    private async download(): Promise<void> {\n        try {\n            const result = await fetch(this._url)\n            if (result.status !== 200) {\n                console.error(\"Could not download tile \" + this._url)\n                return\n            }\n            const buffer = await result.arrayBuffer()\n            const data = Tile.read(new Pbf(buffer), undefined)\n            const layers = data.layers\n            let layer = data.layers[0]\n            if (layers.length > 1) {\n                if (!this._layerName) {\n                    throw \"Multiple layers in the downloaded tile, but no layername is given to choose from\"\n                }\n                layer = layers.find((l) => l.name === this._layerName)\n            }\n            if (!layer) {\n                return\n            }\n            const builder = new MvtFeatureBuilder(layer.extent, this.x, this.y, this.z)\n            const features: GeojsonFeature[] = []\n\n            for (const feature of layer.features) {\n                const properties = this.inflateProperties(feature.tags, layer.keys, layer.values)\n                features.push(builder.toGeoJson(feature.geometry, feature.type, properties))\n            }\n            this._features.setData(features)\n        } catch (e) {\n            console.error(\"Could not download MVT tile due to\", e)\n        }\n    }\n\n    private inflateProperties(tags: number[], keys: string[], values: { string_value: string }[]) {\n        const properties = {}\n        for (let i = 0; i < tags.length; i += 2) {\n            properties[keys[tags[i]]] = this.getValue(values[tags[i + 1]])\n        }\n        let type: string\n        switch (properties[\"osm_type\"]) {\n            case \"N\":\n                type = \"node\"\n                break\n            case \"W\":\n                type = \"way\"\n                break\n            case \"R\":\n                type = \"relation\"\n                break\n        }\n        properties[\"id\"] = type + \"/\" + properties[\"osm_id\"]\n        delete properties[\"osm_id\"]\n        delete properties[\"osm_type\"]\n\n        return properties\n    }\n}\n"],"names":["_MvtFeatureBuilder","extent","x","y","z","__publicField","ring","sum","len","j","p1","p2","i","rings","polygons","currentPolygon","area","geometry","typeIndex","properties","coords","classified","points","type","polygonCoords","cX","cY","coordss","currentRing","commandInteger","commandId","commandCount","dx","dy","line","y0","x0","size","p","y2","MvtFeatureBuilder","Layer","pbf","end","tag","obj","Feature","Value","_Value","_Tile","Tile","MvtSource","url","layerName","isActive","UIEventSource","fs","v","result","buffer","data","Pbf","layers","layer","l","builder","features","feature","tags","keys","values"],"mappings":"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"}