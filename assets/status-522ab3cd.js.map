{"version":3,"file":"status-522ab3cd.js","sources":["../../node_modules/@babeard/svelte-heroicons/mini/CheckCircle/CheckCircle.svelte","../../src/UI/Status/StatusIcon.svelte","../../src/UI/Status/ServiceIndicator.svelte","../../src/UI/Status/StatusGUI.svelte","../../src/UI/StatusGui.ts"],"sourcesContent":["<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" clip-rule=\"evenodd\"/>\n</svg>","<script lang=\"ts\">\n  import Loading from \"../Base/Loading.svelte\"\n  import CheckCircle from \"@babeard/svelte-heroicons/mini/CheckCircle\"\n  import XCircle from \"@rgossiaux/svelte-heroicons/solid/XCircle\"\n  import { twJoin } from \"tailwind-merge\"\n  import { XIcon } from \"@rgossiaux/svelte-heroicons/outline\"\n  import Exclamation from \"@rgossiaux/svelte-heroicons/solid/Exclamation\"\n  import Check from \"@babeard/svelte-heroicons/mini/Check\"\n  import { XCircleIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n\n  export let status: \"online\" | \"degraded\" | \"offline\"\n  export let cls: string = \"w-6 h-6 mx-1\"\n</script>\n\n{#if status === \"online\"}\n  <CheckCircle class={twJoin(cls,\"rounded-full shrink-0\")} style=\"color: #22cc22\" />\n{:else if status === \"degraded\"}\n  <Exclamation class={twJoin(cls,\"rounded-full  shrink-0\")} style=\"color: #eecc22\" />\n{:else if status === \"offline\"}\n  <XCircleIcon class={twJoin(cls,\"rounded-full shrink-0\")} style=\"color: #bb2222\" />\n{:else if status === undefined}\n  <div class={twJoin(cls,\"rounded-full shrink-0\")}>\n    <Loading />\n  </div>\n{:else}\n  ? {status}\n{/if}\n\n","<script lang=\"ts\">\nimport StatusIcon from \"./StatusIcon.svelte\"\nimport type { MCService } from \"./MCService.js\"\nimport AccordionSingle from \"../Flowbite/AccordionSingle.svelte\"\n\nexport let service: MCService\nlet status = service.status\nlet msg = service.message\n</script>\n\n\n<AccordionSingle>\n\n<h3 slot=\"header\" class=\"flex items-center m-0\"> <StatusIcon status={$status}/> {service.name}</h3>\n<div class=\"mx-4\">\n  {#if $msg}\n  {$msg}\n    {:else}\n    No extra information available\n    {/if}\n</div>\n</AccordionSingle>\n","<script lang=\"ts\">\n\n  import { Store, Stores, UIEventSource } from \"../../Logic/UIEventSource\"\n  import StatusIcon from \"./StatusIcon.svelte\"\n  import type { MCService } from \"./MCService\"\n  import ServiceIndicator from \"./ServiceIndicator.svelte\"\n  import { OsmConnection } from \"../../Logic/Osm/OsmConnection\"\n  import Constants from \"../../Models/Constants\"\n  import { Utils } from \"../../Utils\"\n  import Loading from \"../Base/Loading.svelte\"\n  import Checkbox from \"../Base/Checkbox.svelte\"\n\n\n  let services: MCService[] = []\n\n  let recheckSignal: UIEventSource<any> = new UIEventSource<any>(undefined)\n  let checkSignal = Stores.Chronic(10000)\n  let autoCheckAgain = new UIEventSource<boolean>(false)\n\n  function testDownload(url: string, raw: boolean = false): Store<{ success } | { error }> {\n    const src = new UIEventSource(undefined)\n\n    function check() {\n      const promise = raw ? Utils.download(url) : Utils.downloadJson(url)\n      promise\n        ?.then((d) => src.setData({ success: d }))\n        ?.catch((err) => src.setData({ error: err }))\n    }\n\n    check()\n    recheckSignal.addCallback(_ => check())\n    checkSignal.addCallback(_ => {\n      if (autoCheckAgain.data) {\n        check()\n      }\n    })\n    return src\n\n  }\n\n\n  function simpleMessage(s: Store<{ success: any } | { error: any }>): Store<string> {\n    return s.mapD(s => {\n      if (s[\"success\"]) {\n        return JSON.stringify(s[\"success\"])\n      }\n      return s[\"error\"]\n    })\n  }\n\n  {\n    const connection = new OsmConnection()\n    const osmApi = connection.apiIsOnline\n    services.push({\n      name: connection.Backend(),\n      status: osmApi.mapD(serviceState => {\n        switch (serviceState) {\n          case \"offline\":\n            return \"offline\"\n          case \"online\":\n            return \"online\"\n          case \"readonly\":\n            return \"degraded\"\n          case \"unknown\":\n            return undefined\n          case \"unreachable\":\n            return \"offline\"\n        }\n      }),\n      message: osmApi,\n    })\n  }\n\n  {\n    const s = \"https://studio.mapcomplete.org\"\n    const status = testDownload(s + \"/overview\")\n    services.push({\n      name: s,\n      status: status.mapD(s => {\n        if (s[\"error\"]) {\n          return \"offline\"\n        }\n        const files: string[] = s[\"success\"][\"allFiles\"]\n        if (files.length < 10) {\n          return \"offline\"\n        }\n        if (files.length < 100) {\n          return \"degraded\"\n        }\n        return \"online\"\n      }),\n      message: status.mapD(s => {\n        if (s[\"error\"]) {\n          return s[\"error\"]\n        }\n        const files: string[] = s[\"success\"][\"allFiles\"]\n        return \"Contains \" + (files.length ?? \"no\") + \" files\"\n      }),\n    })\n  }\n  {\n    services.push(\n      {\n        name: Constants.GeoIpServer,\n        status: testDownload(Constants.GeoIpServer + \"/status\").mapD(result => {\n          if (result[\"success\"].online) {\n            return \"online\"\n          }\n          if (result[\"error\"]) {\n            return \"offline\"\n          } else {\n            return \"degraded\"\n          }\n        }),\n        message: simpleMessage(\n          testDownload(Constants.GeoIpServer + \"/ip\"),\n        ),\n      },\n    )\n  }\n\n  {\n    const s = Constants.ErrorReportServer\n    const status = testDownload(s.replace(/\\/report$/, \"/status\"))\n    services.push({\n      name: s,\n      status: status.mapD(s => {\n        if (s[\"error\"]) {\n          return \"offline\"\n        }\n        const data = s[\"success\"]\n        if (data[\"errors_today\"] === 0) {\n          return \"online\"\n        }\n        return \"degraded\"\n      }),\n      message: simpleMessage(status),\n    })\n  }\n\n  {\n    const s = Constants.linkedDataProxy.replace(/\\/[^/]*$/, \"\")\n    const status = testDownload(s + \"/status\")\n    services.push({\n      name: s,\n      status: status.mapD(s => {\n        if (s[\"error\"]) {\n          return \"offline\"\n        }\n        const data = s[\"success\"]\n        if (data.cached_entries < 10 || data.uptime < 60 * 60) {\n          return \"degraded\"\n        }\n        return \"online\"\n      }),\n      message: simpleMessage(status),\n    })\n  }\n\n  {\n    const s = Constants.SummaryServer\n    const status = testDownload(s + \"/summary/status.json\")\n    services.push({\n      name: s,\n      status: status.mapD(s => {\n        if (s[\"error\"]) {\n          return \"offline\"\n        }\n        console.log(s)\n\n        const attributes = s[\"success\"][\"meta\"]\n        const lastUpdate = new Date(attributes[\"current_timestamp\"])\n        console.log(\"Last update:\", lastUpdate, attributes[\"current_timestamp\"], attributes)\n        const timediffSec = (new Date().getTime() - lastUpdate.getTime()) / 1000\n        const timediffDays = timediffSec / (60 * 60 * 26)\n\n        if (timediffDays > 7) {\n          return \"degraded\"\n        }\n\n        return \"online\"\n      }),\n      message: status.mapD(s => {\n        if (s[\"error\"]) {\n          return s[\"error\"]\n        }\n\n        const attributes = s[\"success\"][\"meta\"]\n        const lastUpdate = new Date(attributes[\"current_timestamp\"])\n        const timediffSec = (new Date().getTime() - lastUpdate.getTime()) / 1000\n        const timediffDays = timediffSec / (60 * 60 * 26)\n\n        const json = JSON.stringify(s[\"success\"], null, \"  \")\n        return \"Database is \" + Math.floor(timediffDays) + \" days out of sync\\n\\n\" + json\n      }),\n    })\n  }\n\n  {\n    const s = Constants.countryCoderEndpoint\n    const status = testDownload(s + \"/0.0.0.json\")\n    services.push({\n      name: s,\n      status: status.mapD(s => {\n        if (s[\"error\"]) {\n          return \"offline\"\n        }\n        const arr = s[\"success\"]\n        if (Array.isArray(arr)) {\n          return \"online\"\n        }\n        return \"degraded\"\n      }),\n      message: status.map(s => JSON.stringify(s)),\n    })\n\n  }\n\n\n  {\n    for (const defaultOverpassUrl of Constants.defaultOverpassUrls) {\n      const statusUrl = defaultOverpassUrl.replace(/\\/interpreter$/, \"/status\")\n      const status = testDownload(statusUrl, true)\n\n      services.push({\n        name: \"Overpass-server: \" + defaultOverpassUrl,\n        status: status.mapD(result => {\n          if (result[\"error\"]) {\n            return \"offline\"\n          }\n\n          // \"Connected as: 3587935836\n          // Current time: 2024-07-14T00:35:58Z\n          // Announced endpoint: gall.openstreetmap.de\n          // Rate limit: 6\n          // 6 slots available now.\n          // Currently running queries (pid, space limit, time limit, start time):\\n\"\n          const msgs = result[\"success\"].split(\"\\n\")\n\n          return \"online\"\n        }),\n        message: simpleMessage(status),\n      })\n    }\n  }\n\n  {\n    services.push({\n      name: \"Mangrove reviews\",\n      status: testDownload(\"https://api.mangrove.reviews\", true).mapD(r => {\n        if (r[\"success\"]) {\n          return \"online\"\n        }\n        return \"offline\"\n      }),\n    })\n  }\n\n\n  let all = new UIEventSource<\"online\" | \"degraded\" | \"offline\">(\"online\")\n  let someLoading = new UIEventSource(true)\n\n  function setAll() {\n    const data = Utils.NoNull(services.map(s => s.status.data))\n    someLoading.setData(data.length !== services.length)\n    if (data.some(d => d === \"offline\")) {\n      all.setData(\"offline\")\n    } else if (data.some(d => d === \"degraded\")) {\n      all.setData(\"degraded\")\n    } else if (data.some(d => d === \"online\")) {\n      all.setData(\"online\")\n    } else {\n      all.setData(undefined)\n    }\n  }\n\n  for (const service of services) {\n    service.status.addCallbackD(() => {\n      setAll()\n    })\n  }\n\n  const trafficLightUrl = \"http://traffic_light_bicycle.local/\"\n  let trafficLightIsOnline = testDownload(trafficLightUrl + \"/status\", true)\n  let enableTrafficLight = new UIEventSource(true)\n\n  /**\n   * So... IN my room, there is a traffic light. Like, an actual traffic light with bicycles.\n   * I put in an ESP32 and can now control it remotely - which is precisely what this code does.\n   * @param state\n   */\n  async function setTrafficLight(state: \"online\" | \"degraded\" | \"offline\") {\n    try {\n\n      const url = trafficLightUrl\n      const status = await Utils.downloadJson(url + \"status\")\n      console.log(status)\n      if (!enableTrafficLight.data) {\n        await Utils.download(url + \"configure?mode=0\")\n        return\n      }\n      switch (state) {\n\n        case \"offline\":\n          await Utils.download(url + \"configure?mode=3\")\n          break\n        case \"degraded\":\n          await Utils.download(url + \"configure?mode=2\")\n          break\n        case \"online\":\n          await Utils.download(url + \"configure?mode=1\")\n          break\n        default:\n          await Utils.download(url + \"configure?mode=7\")\n          break\n\n      }\n    } catch (e) {\n      console.log(\"Could not connect to the traffic light\")\n    }\n  }\n\n  all.addCallbackAndRunD(state => {\n    setTrafficLight(state)\n  })\n  enableTrafficLight.addCallbackAndRunD(_ => {\n    setTrafficLight(all.data)\n  })\n\n</script>\n\n<h1>MapComplete status indicators</h1>\n\n<div class=\"flex\">\n\n  {#if $someLoading}\n    <Loading />\n  {/if}\n  <StatusIcon status={$all} cls=\"w-16 h-16\" />\n  <button on:click={() => recheckSignal.ping()}>Check again</button>\n  <Checkbox selected={autoCheckAgain}>\n    Automatically check again every 10s\n  </Checkbox>\n</div>\n\n{#if $trafficLightIsOnline?.[\"success\"] }\n  <Checkbox selected={enableTrafficLight}>Enable traffic light</Checkbox>\n{/if}\n\n{#each services as service}\n  <ServiceIndicator {service} />\n{/each}\n\n<button on:click={() => {\n    fetch(Constants.ErrorReportServer, {\n                method: \"POST\",\n                body: JSON.stringify({\n                    message: \"Test via the status page, not an actual error\",\n                    version: Constants.vNumber,\n                }),\n            })\n}}>Test error report function</button>\n","import StatusGUI from \"./Status/StatusGUI.svelte\"\n\nexport default class StatusGui {\n    public setup() {\n        new StatusGUI({\n            target: document.getElementById(\"main\"),\n        })\n    }\n}\n\nnew StatusGui().setup()\n"],"names":["ctx","insert","target","svg","anchor","append","path","twJoin","div","status","$$props","cls","create_if_block","t1_value","h3","current","dirty","set_data","t1","service","msg","create_if_block_1","if_block1","_a","i","h1","button0","button1","each_blocks","trafficLightUrl","simpleMessage","s","services","recheckSignal","UIEventSource","checkSignal","Stores","autoCheckAgain","testDownload","url","raw","src","check","promise","Utils","d","err","_","connection","OsmConnection","osmApi","serviceState","files","Constants","result","data","attributes","lastUpdate","timediffDays","json","arr","defaultOverpassUrl","statusUrl","r","all","someLoading","setAll","trafficLightIsOnline","enableTrafficLight","setTrafficLight","state","StatusGui","StatusGUI"],"mappings":"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","x_google_ignoreList":[0]}