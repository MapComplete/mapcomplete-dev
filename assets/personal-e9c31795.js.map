{"version":3,"file":"personal-e9c31795.js","sources":["../../src/assets/generated/metatagging/personal.ts","../../index_personal.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"personal\"\n\n   public metaTaggging_for_advertising(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_aerialway(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_ambulancestation(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_artwork(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      feat.properties['website'] = feat.properties.website ?? feat.properties.url\n   }\n   public metaTaggging_for_assembly_point(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_atm(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bank(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_barrier(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bench(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bench_at_pt(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bicycle_library(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bicycle_rental(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bicycle_tube_vending_machine(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_cafe(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_cleaning(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_parking(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_repair_station(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_shop(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bike_themed_object(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_binocular(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_birdhide(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_cafe_pub(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_charging_station(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_climbing_area(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_contained_climbing_routes_properties', () => overlapWith(feat)('climbing_route').map(f => f.feat.properties).map(p => {return {id: p.id, name: p.name, 'climbing:grade:french': p['climbing:grade:french'], 'climbing:length': p['climbing:length']} }) ) \n      Utils.AddLazyProperty(feat.properties, '_contained_climbing_routes', () => get(feat)('_contained_climbing_routes_properties')?.map(p => `<li><a href='#${p.id}'>${p.name ?? 'climbing route'}</a> (<b class='climbing-${p['__difficulty:char']} rounded-full p-l-1 p-r-1'>${p['climbing:grade:french'] ?? 'unknown difficulty'}</b>, ${p['climbing:length'] ?? 'unkown length'} meter)</li>`).join('') ) \n      Utils.AddLazyProperty(feat.properties, '_contained_climbing_route_ids', () => get(feat)('_contained_climbing_routes_properties')?.map(p => p.id) ) \n      Utils.AddLazyProperty(feat.properties, '_difficulty_hist', () => get(feat)('_contained_climbing_routes_properties')?.map(p => p['climbing:grade:french'])?.filter(p => (p ?? null) !== null)?.sort() ) \n      Utils.AddLazyProperty(feat.properties, '_difficulty_max', () => get(feat)('_difficulty_hist')?.at(-1) ) \n      Utils.AddLazyProperty(feat.properties, '_difficulty_min', () => get(feat)('_difficulty_hist')?.at(0) ) \n      Utils.AddLazyProperty(feat.properties, '_length_hist', () => get(feat)('_contained_climbing_routes_properties')?.map(p => p['climbing:length'])?.filter(p => (p ?? null)  !== null)?.sort() ) \n      Utils.AddLazyProperty(feat.properties, '_length_max', () => get(feat)('_length_hist')?.at(-1) ) \n      Utils.AddLazyProperty(feat.properties, '_length_min', () => get(feat)('_length_hist')?.at(0) ) \n      Utils.AddLazyProperty(feat.properties, '_bolts_hist', () => get(feat)('_contained_climbing_routes_properties')?.map(p => p['climbing:bolts'])?.filter(p => (p ?? null)  !== null)?.sort() ) \n      Utils.AddLazyProperty(feat.properties, '_bolts_max', () => get(feat)('_bolts_hist')?.at(-1) ) \n      Utils.AddLazyProperty(feat.properties, '_bolts_min', () => get(feat)('_bolts_hist')?.at(0) ) \n      Utils.AddLazyProperty(feat.properties, '_contained_climbing_routes_count', () => get(feat)('_contained_climbing_routes_properties')?.length ) \n   }\n   public metaTaggging_for_climbing_club(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_climbing_gym(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_climbing_opportunity(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_climbing_route(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_clock(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_crossings(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_current_view(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_cycleways_and_roads(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_defibrillator(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_days_since_last_survey', () => Math.floor((new Date() - new Date(feat.properties['survey:date']))/(1000*60*60*24)) ) \n      Utils.AddLazyProperty(feat.properties, '_recently_surveyed', () => Number(feat.properties._days_since_last_survey) <= 90 ) \n   }\n   public metaTaggging_for_dentist(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_disaster_response(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_doctors(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_dogpark(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_drinking_water(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water', () => closestn(feat)('drinking_water', 1, undefined, 5000).map(f => ({id: f.feat.id, distance: ''+f.distance}))[0] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water_id', () => get(feat)('_closest_other_drinking_water')?.id ) \n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water_distance', () => Math.floor(Number(get(feat)('_closest_other_drinking_water')?.distance)) ) \n   }\n   public metaTaggging_for_elevator(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_elongated_coin(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_entrance(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_etymology(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_same_name_ids', () => closestn(feat)('*', 250, undefined, 5000)?.filter(f => f.feat.properties.name === feat.properties.name)?.map(f => f.feat.properties.id)??[] ) \n   }\n   public metaTaggging_for_extinguisher(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_fire_station(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_fitness_centre(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_fitness_station(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_fixme(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_food(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_ghost_bike(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_governments(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_guidepost(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_hackerspace(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_hospital(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_hotel(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_hydrant(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_ice_cream(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_indoors(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_information_board(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_kerbs(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_kindergarten_childcare(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_love_hotel(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_map(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_maproulette_challenge(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_maxspeed(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_mountain_rescue(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_nature_reserve(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_note(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      feat.properties['_total_comments'] = get(feat)('comments').length\n      feat.properties['_first_comment'] = get(feat)('comments')[0].text\n      feat.properties['_opened_by_anonymous_user'] = get(feat)('comments')[0].user === undefined\n      feat.properties['_first_user'] = get(feat)('comments')[0].user\n      feat.properties['_last_user'] = (() => {const comms = get(feat)('comments'); return comms[comms.length - 1].user})()\n      feat.properties['_first_user_id'] = get(feat)('comments')[0].uid\n      feat.properties['_is_import_note'] = (() => {const lines = feat.properties['_first_comment'].split('\\n'); const matchesMapCompleteURL = lines.map(l => l.match(\".*https://mapcomplete.\\(osm.be|org\\)/\\([a-zA-Z_-]+\\)\\(.html\\).*#import\")); const matchedIndexes = matchesMapCompleteURL.map((doesMatch, i) => [doesMatch !== null, i]).filter(v => v[0]).map(v => v[1]); return matchedIndexes[0] })()\n   }\n   public metaTaggging_for_observation_tower(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_osm_community_index(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_community_links', () => Object.values(JSON.parse(feat.properties.resources || '{}')).map(value =>{return value.resolved.nameHTML + '<br>&emsp;' + value.resolved.descriptionHTML}).join('<br>') ) \n   }\n   public metaTaggging_for_parcel_lockers(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_parking(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_parking_spaces(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_parking_ticket_machine(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_pedestrian_path(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_pharmacy(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_physiotherapist(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_picnic_table(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_playground(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_size_classification', () => Number(feat.properties._surface) < 10 ? 'small' :  (Number(feat.properties._surface) < 100 ? 'medium' : 'large')  ) \n   }\n   public metaTaggging_for_playground_equipment(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_postboxes(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_postoffices(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_public_bookcase(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_rainbow_crossings(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_reception_desk(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_recycling(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_waste_amount', () => Object.keys(feat.properties).filter(key => key.startsWith('recycling:')).filter(k => feat.properties[k] === 'yes').length ) \n   }\n   public metaTaggging_for_school(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_enclosing', () => enclosingFeatures(feat)('school').map(f => f.feat.properties.id) ) \n      Utils.AddLazyProperty(feat.properties, '_is_enclosed', () => feat.properties._enclosing != '[]' ) \n   }\n   public metaTaggging_for_shelter(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_shops(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_shower(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_ski_piste(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_souvenir_coin(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_souvenir_note(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_speed_camera(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_speed_display(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_sport_pitch(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_size_classification', () => Number(feat.properties._surface) < 200 ? 'small' :  (Number(feat.properties._surface) < 750 ? 'medium' : 'large')  ) \n   }\n   public metaTaggging_for_sports_centre(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_stairs(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_street_lamps(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_surveillance_camera(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_tertiary_education(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_ticket_machine(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_toilet(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_toilet_at_amenity(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_transit_routes(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_numeric_id', () => feat.properties.id.split('/')[1] ) \n   }\n   public metaTaggging_for_transit_stops(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_tree_node(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_trolley_bay(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_vending_machine(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_vending_count', () => feat.properties.vending.split(';').length ) \n   }\n   public metaTaggging_for_veterinary(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_viewpoint(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_walls_and_buildings(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_entrance_properties', () => overlapWith(feat)('entrance')?.map(e => e.feat.properties)?.filter(p => p !== undefined && p.indoor !== 'door') ) \n      Utils.AddLazyProperty(feat.properties, '_entrance_properties_with_width', () => get(feat)('_entrance_properties')?.filter(p => p['width'] !== undefined) ) \n      Utils.AddLazyProperty(feat.properties, '_entrances_count', () => get(feat)('_entrance_properties').length ) \n      Utils.AddLazyProperty(feat.properties, '_entrances_count_without_width_count', () =>  get(feat)('_entrances_count') - get(feat)('_entrance_properties_with_width').length ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width', () =>  Math.max( get(feat)('_entrance_properties').map(p => p.width)) ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width_properties', () =>  /* Can be a list! */ get(feat)('_entrance_properties').filter(p => p.width === get(feat)('_biggest_width')) ) \n      Utils.AddLazyProperty(feat.properties, '_biggest_width_id', () => get(feat)('_biggest_width_properties').id ) \n   }\n   public metaTaggging_for_waste_basket(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_waste_disposal(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_windturbine(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n}","import layout from \"./src/assets/generated/themes/personal.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/personal\"\nimport selected_element from \"./src/assets/generated/layers/selected_element.json\"\nimport gps_location from \"./src/assets/generated/layers/gps_location.json\"\nimport gps_location_history from \"./src/assets/generated/layers/gps_location_history.json\"\nimport home_location from \"./src/assets/generated/layers/home_location.json\"\nimport gps_track from \"./src/assets/generated/layers/gps_track.json\"\nimport range from \"./src/assets/generated/layers/range.json\"\nimport last_click from \"./src/assets/generated/layers/last_click.json\"\nimport favourite from \"./src/assets/generated/layers/favourite.json\"\nimport summary from \"./src/assets/generated/layers/summary.json\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\nimport { Utils } from \"./src/Utils\"\nimport Constants from \"./src/Models/Constants\"\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\nasync function getAvailableLayers(): Promise<Set<string>> {\n    try {\n        const host = new URL(Constants.VectorTileServer).host\n        const status = await Utils.downloadJson(\"https://\" + host + \"/summary/status.json\")\n        return new Set<string>(status.layers)\n    } catch (e) {\n        console.error(\"Could not get MVT available layers due to\", e)\n        return new Set<string>()\n    }\n}\n\nasync function main() {\n    if (!webgl_support()) {\n         new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n    }else{\n        const availableLayers = await getAvailableLayers()\n        MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n        layout.layers.push(<any> selected_element)\n    layout.layers.push(<any> gps_location)\n    layout.layers.push(<any> gps_location_history)\n    layout.layers.push(<any> home_location)\n    layout.layers.push(<any> gps_track)\n    layout.layers.push(<any> range)\n    layout.layers.push(<any> last_click)\n    layout.layers.push(<any> favourite)\n    layout.layers.push(<any> summary)\n        const state = new ThemeViewState(new LayoutConfig(<any> layout), availableLayers)\n        const main = new SvelteUIElement(ThemeViewGUI, { state })\n        main.AttachTo(\"maindiv\")\n    }\n}\nmain()\n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","f","p","_a","_c","_b","comms","l","doesMatch","i","v","value","key","k","e","__publicField","webgl_support","canvas","getAvailableLayers","host","Constants","status","main","FixedUiElement","availableLayers","MetaTagging","layout","selected_element","gps_location","gps_location_history","home_location","gps_track","range","last_click","favourite","summary","state","ThemeViewState","LayoutConfig","SvelteUIElement","ThemeViewGUI"],"mappings":"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"}