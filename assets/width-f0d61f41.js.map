{"version":3,"file":"width-f0d61f41.js","sources":["../../src/assets/generated/metatagging/width.ts","../../index_width.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"width\"\n\n   public metaTaggging_for_street_with_width(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      feat.properties['_car_width'] = 2 /* The width that a single car needs */\n      feat.properties['_cyclistWidth'] = 1.5 /* The width a single cyclist needs to be safely overtaken */\n      feat.properties['_pedestrianWidth'] = 0.75 /* The width a pedestrian needs if sidewalks are missing */\n      Utils.AddLazyProperty(feat.properties, '_has_left_parking', () => (feat.properties['parking:lane:left'] ?? feat.properties['parking:lane:both']) === 'parallel' ) \n      Utils.AddLazyProperty(feat.properties, '_has_right_parking', () => (feat.properties['parking:lane:right'] ?? feat.properties['parking:lane:both']) === 'parallel' ) \n      Utils.AddLazyProperty(feat.properties, '_has_other_parking', () =>  ['parking:lane:left','parking:lane:right','parking:lane:both'].some(key => ['perpendicular','diagonal'].indexOf(feat.properties[key]) >= 0) ) \n      Utils.AddLazyProperty(feat.properties, '_parallel_parking_count', () => get(feat)('_has_right_parking') + get(feat)('_has_left_parking') /* in javascript logic: true + true == 2*/ ) \n      Utils.AddLazyProperty(feat.properties, '_width:needed:parking', () => get(feat)('_parallel_parking_count') * get(feat)('_car_width') ) \n      Utils.AddLazyProperty(feat.properties, '_has_sidewalk_left', () => ['left','both'].indexOf(feat.properties['sidewalk']) >= 0 ) \n      Utils.AddLazyProperty(feat.properties, '_has_sidewalk_right', () => ['right','both'].indexOf(feat.properties['sidewalk']) >= 0 ) \n      Utils.AddLazyProperty(feat.properties, '_pedestrian_flows_in_carriageway', () =>  2 - get(feat)('_has_sidewalk_left') - get(feat)('_has_sidewalk_right') ) \n      Utils.AddLazyProperty(feat.properties, '_width:needed:pedestrians', () => get(feat)('_pedestrianWidth') * get(feat)('_pedestrian_flows_in_carriageway') ) \n      Utils.AddLazyProperty(feat.properties, '_oneway_car', () => (feat.properties['oneway:motor_vehicle'] ?? feat.properties['oneway']) == 'yes' ) \n      Utils.AddLazyProperty(feat.properties, '_width:needed:cars', () => get(feat)('_car_width') * (2 - get(feat)('_oneway_car')) ) \n      Utils.AddLazyProperty(feat.properties, '_cycling_allowed', () => feat.properties.bicycle != 'use_sidepath' && feat.properties.bicycle!='no' ) \n      Utils.AddLazyProperty(feat.properties, '_oneway_bicycle', () => ((feat.properties['oneway:bicycle'] ?? feat.properties['oneway']) == 'yes') && feat.properties['cycleway'] != 'opposite' ) \n      Utils.AddLazyProperty(feat.properties, '_width:needed:cyclists', () => get(feat)('_cycling_allowed') ? (get(feat)('_cyclistWidth') * (2 - get(feat)('_oneway_bicycle'))) : 0 ) \n      feat.properties['_width:needed:total'] = get(feat)('_width:needed:cars') + get(feat)('_width:needed:parking') +  get(feat)('_width:needed:cyclists') +  get(feat)('_width:needed:pedestrians')\n      feat.properties['_width:difference'] = get(feat)('_width:needed:total') - get(feat)('width:carriageway')\n      feat.properties['_width:difference:no_pedestrians'] = get(feat)('_width:difference') - get(feat)('_width:needed:pedestrians')\n   }\n}","import layout from \"./src/assets/generated/themes/width.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/width\"\nimport selected_element from \"./src/assets/generated/layers/selected_element.json\"\nimport gps_location from \"./src/assets/generated/layers/gps_location.json\"\nimport gps_location_history from \"./src/assets/generated/layers/gps_location_history.json\"\nimport home_location from \"./src/assets/generated/layers/home_location.json\"\nimport gps_track from \"./src/assets/generated/layers/gps_track.json\"\nimport range from \"./src/assets/generated/layers/range.json\"\nimport last_click from \"./src/assets/generated/layers/last_click.json\"\nimport favourite from \"./src/assets/generated/layers/favourite.json\"\nimport summary from \"./src/assets/generated/layers/summary.json\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\nimport { Utils } from \"./src/Utils\"\nimport Constants from \"./src/Models/Constants\"\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\nasync function getAvailableLayers(): Promise<Set<string>> {\n    try {\n        const host = new URL(Constants.VectorTileServer).host\n        const status = await Utils.downloadJson(\"https://\" + host + \"/summary/status.json\")\n        return new Set<string>(status.layers)\n    } catch (e) {\n        console.error(\"Could not get MVT available layers due to\", e)\n        return new Set<string>()\n    }\n}\n\nasync function main() {\n    if (!webgl_support()) {\n         new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n    }else{\n        const availableLayers = await getAvailableLayers()\n        MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n        layout.layers.push(<any> selected_element)\n    layout.layers.push(<any> gps_location)\n    layout.layers.push(<any> gps_location_history)\n    layout.layers.push(<any> home_location)\n    layout.layers.push(<any> gps_track)\n    layout.layers.push(<any> range)\n    layout.layers.push(<any> last_click)\n    layout.layers.push(<any> favourite)\n    layout.layers.push(<any> summary)\n        const state = new ThemeViewState(new LayoutConfig(<any> layout), availableLayers)\n        const main = new SvelteUIElement(ThemeViewGUI, { state })\n        main.AttachTo(\"maindiv\")\n    }\n}\nmain()\n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","key","__publicField","webgl_support","canvas","getAvailableLayers","host","Constants","status","e","main","FixedUiElement","availableLayers","MetaTagging","layout","selected_element","gps_location","gps_location_history","home_location","gps_track","range","last_click","favourite","summary","state","ThemeViewState","LayoutConfig","SvelteUIElement","ThemeViewGUI"],"mappings":"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"}