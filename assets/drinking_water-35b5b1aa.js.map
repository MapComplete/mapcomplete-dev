{"version":3,"file":"drinking_water-35b5b1aa.js","sources":["../../src/assets/generated/metatagging/drinking_water.ts","../../index_drinking_water.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"drinking_water\"\n\n   public metaTaggging_for_drinking_water(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water', () => closestn(feat)('drinking_water', 1, undefined, 5000).map(f => ({id: f.feat.id, distance: ''+f.distance}))[0] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water_id', () => get(feat)('_closest_other_drinking_water')?.id ) \n      Utils.AddLazyProperty(feat.properties, '_closest_other_drinking_water_distance', () => Math.floor(Number(get(feat)('_closest_other_drinking_water')?.distance)) ) \n   }\n   public metaTaggging_for_selected_element(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location_history(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_home_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_track(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_range(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_last_click(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_note_import_drinking_water(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_first_comment', () => get(feat)('comments')[0].text.toLowerCase() ) \n      Utils.AddLazyProperty(feat.properties, '_trigger_index', () => (() => {const lines = feat.properties['_first_comment'].split('\\n'); const matchesMapCompleteURL = lines.map(l => l.match(\".*https://mapcomplete.\\(org|osm.be\\)/\\([a-zA-Z_-]+\\)\\(.html\\)?.*#import\")); const matchedIndexes = matchesMapCompleteURL.map((doesMatch, i) => [doesMatch !== null, i]).filter(v => v[0]).map(v => v[1]); return matchedIndexes[0] })() ) \n      Utils.AddLazyProperty(feat.properties, '_comments_count', () => get(feat)('comments').length ) \n      Utils.AddLazyProperty(feat.properties, '_intro', () => (() => {const lines = get(feat)('comments')[0].text.split('\\n'); lines.splice(get(feat)('_trigger_index')-1, lines.length); return lines.filter(l => l !== '').join('<br/>');})() ) \n      Utils.AddLazyProperty(feat.properties, '_tags', () => (() => {let lines = get(feat)('comments')[0].text.split('\\n').map(l => l.trim()); lines.splice(0, get(feat)('_trigger_index') + 1); lines = lines.filter(l => l != ''); return lines.join(';');})() ) \n   }\n}","import layout from \"./src/assets/generated/themes/drinking_water.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/drinking_water\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nif (!webgl_support()) {\n     new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n}else{\n    MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n    const state = new ThemeViewState(new LayoutConfig(<any> layout))\n    const main = new SvelteUIElement(ThemeViewGUI, { state })\n    main.AttachTo(\"maindiv\")\n}    \n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","f","_a","l","doesMatch","i","v","lines","__publicField","webgl_support","canvas","FixedUiElement","MetaTagging","state","ThemeViewState","LayoutConfig","layout","SvelteUIElement","ThemeViewGUI"],"mappings":"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"}