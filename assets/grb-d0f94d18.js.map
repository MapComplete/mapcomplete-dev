{"version":3,"file":"grb-d0f94d18.js","sources":["../../src/assets/generated/metatagging/grb.ts","../../index_grb.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"grb\"\n\n   public metaTaggging_for_named_streets(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_osm_buildings_no_points(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_grb(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_overlaps_with_buildings', () => overlapWith(feat)('osm_buildings_no_points').filter(f => f.feat.properties.id.indexOf('-') < 0) ?? [] ) \n      Utils.AddLazyProperty(feat.properties, '_overlaps_with', () => get(feat)('_overlaps_with_buildings').find(f => f.overlap > 1 /* square meter */ ) ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:source:ref', () => get(feat)('_overlaps_with')?.feat?.properties['source:geometry:ref'] ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:id', () => get(feat)('_overlaps_with')?.feat?.properties?.id ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:source:date', () => (feat.properties['_overlaps_with']?.feat?.properties ?? {})['source:geometry:date']?.replace(/\\//g, '-') ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:building', () => get(feat)('_overlaps_with')?.feat?.properties?.building ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:addr:street', () => (get(feat)('_overlaps_with')?.feat?.properties ?? {})['addr:street'] ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:addr:housenumber', () => (get(feat)('_overlaps_with')?.feat?.properties ?? {})['addr:housenumber'] ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:surface', () => (get(feat)('_overlaps_with')?.feat?.properties ?? {})['_surface'] ) \n      Utils.AddLazyProperty(feat.properties, '_overlap_absolute', () => get(feat)('_overlaps_with')?.overlap ) \n      Utils.AddLazyProperty(feat.properties, '_reverse_overlap_percentage', () => Math.round(100 * get(feat)('_overlap_absolute') / get(feat)('_surface')) ) \n      Utils.AddLazyProperty(feat.properties, '_overlap_percentage', () => Math.round(100 * get(feat)('_overlap_absolute') / get(feat)('_osm_obj:surface')) ) \n      Utils.AddLazyProperty(feat.properties, '_grb_ref', () => feat.properties['source:geometry:entity'] + '/' + feat.properties['source:geometry:oidn'] ) \n      Utils.AddLazyProperty(feat.properties, '_imported_osm_object_found', () => feat.properties['_osm_obj:source:ref'] === feat.properties['_grb_ref'] ) \n      Utils.AddLazyProperty(feat.properties, '_grb_date', () => feat.properties['source:geometry:date'].replace(/\\//g,'-') ) \n      Utils.AddLazyProperty(feat.properties, '_imported_osm_still_fresh', () => feat.properties['_osm_obj:source:date'] == feat.properties._grb_date ) \n      Utils.AddLazyProperty(feat.properties, '_target_building_type', () => feat.properties['_osm_obj:building'] === 'yes' ? feat.properties.building : (feat.properties['_osm_obj:building'] ?? feat.properties.building) ) \n      Utils.AddLazyProperty(feat.properties, '_building:min_level', () => feat.properties['fixme']?.startsWith('verdieping, correct the building tag, add building:level and building:min_level before upload in JOSM!') ? '1' : '' ) \n      Utils.AddLazyProperty(feat.properties, '_intersects_with_other_features', () => intersectionsWith(feat)('generic_osm_object').map(f => \"<a href='https://osm.org/\"+f.feat.properties.id+\"' target='_blank'>\" + f.feat.properties.id + \"</a>\").join(', ') ) \n   }\n   public metaTaggging_for_service_ways(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_generic_osm_object(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_address(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_closest_3_street_names', () => closestn(feat)('named_streets',3, 'name').map(f => f.feat.properties.name) ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:0:name', () => JSON.parse(feat.properties._closest_3_street_names)[0] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:1:name', () => JSON.parse(feat.properties._closest_3_street_names)[1] ) \n      Utils.AddLazyProperty(feat.properties, '_closest_street:2:name', () => JSON.parse(feat.properties._closest_3_street_names)[2] ) \n   }\n   public metaTaggging_for_crab_address(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_HNRLABEL', () => (() => {const lbl = feat.properties.HNRLABEL?.split('-')?.map(l => Number(l))?.filter(i => !isNaN (i)) ;if(lbl?.length != 2) {return feat.properties.HNRLABEL}; const addresses = []; for(let i = lbl[0]; i <= lbl[1]; i += 1){addresses.push(''+i);}; return addresses.join(';')        })() ) \n      Utils.AddLazyProperty(feat.properties, '_embedded_in', () => overlapWith(feat)('osm_buildings_no_points').filter(b => /* Do not match newly created objects */ b.feat.properties.id.indexOf('-') < 0)[0]?.feat?.properties ?? {} ) \n      Utils.AddLazyProperty(feat.properties, '_embedding_nr', () => get(feat)('_embedded_in')['addr:housenumber']+(get(feat)('_embedded_in')['addr:unit'] ?? '') ) \n      Utils.AddLazyProperty(feat.properties, '_embedding_street', () => get(feat)('_embedded_in')['addr:street'] ) \n      Utils.AddLazyProperty(feat.properties, '_embedding_id', () => get(feat)('_embedded_in').id ) \n      Utils.AddLazyProperty(feat.properties, '_closeby_addresses', () => closestn(feat)('address',10,undefined,50).map(f => f.feat).filter(addr => addr.properties['addr:street'] == feat.properties['STRAATNM'] && feat.properties['HNRLABEL'] == addr.properties['addr:housenumber'] + (addr.properties['addr:unit']??'') ).length ) \n      Utils.AddLazyProperty(feat.properties, '_has_identical_closeby_address', () => get(feat)('_closeby_addresses') >= 1 ? 'yes' : 'no' ) \n      Utils.AddLazyProperty(feat.properties, '_embedded_in_grb', () => overlapWith(feat)('grb')[0]?.feat?.properties ?? {} ) \n      Utils.AddLazyProperty(feat.properties, '_embedding_nr_grb', () => get(feat)('_embedded_in_grb')['addr:housenumber'] ) \n      Utils.AddLazyProperty(feat.properties, '_embedding_street_grb', () => get(feat)('_embedded_in_grb')['addr:street'] ) \n   }\n   public metaTaggging_for_current_view(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_overlapping', () => Number(feat.properties.zoom) >= 14 ? overlapWith(feat)('grb').map(ff => ff.feat.properties) : undefined ) \n      Utils.AddLazyProperty(feat.properties, '_applicable_conflate', () => get(feat)('_overlapping')?.filter(p => p._imported !== 'yes' && (!p['_imported_osm_still_fresh'] || !p['_imported_osm_object_found']) && p['_overlap_absolute'] > 10 && p['_overlap_percentage'] > 80 && p['_reverse_overlap_percentage'] > 80)?.map(p => p.id) ) \n      Utils.AddLazyProperty(feat.properties, '_applicable', () => feat.properties._overlapping.filter(p => p._imported !== 'yes' && p._imported_osm_object_found === false && !(p['_overlap_absolute'] > 5) && !p._intersects_with_other_features)?.map(p => p.id) ) \n      Utils.AddLazyProperty(feat.properties, '_applicable_count', () => get(feat)('_applicable')?.length ) \n      Utils.AddLazyProperty(feat.properties, '_applicable_conflate_count', () => get(feat)('_applicable_conflate')?.length ) \n   }\n}","import layout from \"./src/assets/generated/themes/grb.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/grb\"\nimport selected_element from \"./src/assets/generated/layers/selected_element.json\"\nimport gps_location from \"./src/assets/generated/layers/gps_location.json\"\nimport gps_location_history from \"./src/assets/generated/layers/gps_location_history.json\"\nimport home_location from \"./src/assets/generated/layers/home_location.json\"\nimport gps_track from \"./src/assets/generated/layers/gps_track.json\"\nimport range from \"./src/assets/generated/layers/range.json\"\nimport last_click from \"./src/assets/generated/layers/last_click.json\"\nimport favourite from \"./src/assets/generated/layers/favourite.json\"\nimport summary from \"./src/assets/generated/layers/summary.json\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\nimport { Utils } from \"./src/Utils\"\nimport Constants from \"./src/Models/Constants\"\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\nasync function getAvailableLayers(): Promise<Set<string>> {\n    try {\n        const host = new URL(Constants.VectorTileServer).host\n        const status = await Utils.downloadJson(\"https://\" + host + \"/summary/status.json\")\n        return new Set<string>(status.layers)\n    } catch (e) {\n        console.error(\"Could not get MVT available layers due to\", e)\n        return new Set<string>()\n    }\n}\n\nasync function main() {\n    if (!webgl_support()) {\n         new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n    }else{\n        const availableLayers = await getAvailableLayers()\n        MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n        layout.layers.push(<any> selected_element)\n    layout.layers.push(<any> gps_location)\n    layout.layers.push(<any> gps_location_history)\n    layout.layers.push(<any> home_location)\n    layout.layers.push(<any> gps_track)\n    layout.layers.push(<any> range)\n    layout.layers.push(<any> last_click)\n    layout.layers.push(<any> favourite)\n    layout.layers.push(<any> summary)\n        const state = new ThemeViewState(new LayoutConfig(<any> layout), availableLayers)\n        const main = new SvelteUIElement(ThemeViewGUI, { state })\n        main.AttachTo(\"maindiv\")\n    }\n}\nmain()\n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","f","_b","_a","_c","lbl","l","i","addresses","b","addr","ff","p","__publicField","webgl_support","canvas","getAvailableLayers","host","Constants","status","e","main","FixedUiElement","availableLayers","MetaTagging","layout","selected_element","gps_location","gps_location_history","home_location","gps_track","range","last_click","favourite","summary","state","ThemeViewState","LayoutConfig","SvelteUIElement","ThemeViewGUI"],"mappings":"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"}