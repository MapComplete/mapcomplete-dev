{"version":3,"file":"studio-ef8478a0.js","sources":["../../node_modules/@rgossiaux/svelte-heroicons/solid/InformationCircle/InformationCircle.svelte","../../node_modules/@rgossiaux/svelte-heroicons/solid/QuestionMarkCircle/QuestionMarkCircle.svelte","../../node_modules/@rgossiaux/svelte-heroicons/solid/Trash/Trash.svelte","../../node_modules/@babeard/svelte-heroicons/mini/QuestionMarkCircle/QuestionMarkCircle.svelte","../../node_modules/@rgossiaux/svelte-heroicons/outline/Pencil/Pencil.svelte","../../node_modules/@rgossiaux/svelte-heroicons/outline/Trash/Trash.svelte","../../src/Customizations/AllSharedLayers.ts","../../src/UI/Studio/EditLayerState.ts","../../src/UI/Studio/configMeta.ts","../../src/UI/Studio/ShowConversionMessage.svelte","../../src/UI/Studio/SchemaBasedField.svelte","../../src/UI/Studio/QuestionPreview.svelte","../../src/UI/Studio/SchemaBasedMultiType.svelte","../../src/UI/Studio/SchemaBasedArray.svelte","../../src/UI/Studio/ArrayMultiAnswer.svelte","../../src/UI/Studio/SchemaBasedInput.svelte","../../src/UI/Studio/Region.svelte","../../src/UI/Studio/ErrorIndicatorForRegion.svelte","../../src/UI/Studio/MappingInput.svelte","../../src/UI/Studio/TagRenderingInput.svelte","../../src/UI/Studio/ShowConversionMessages.svelte","../../src/UI/Studio/EditLayer.svelte","../../src/UI/Studio/StudioServer.ts","../../src/UI/Map/Marker.svelte","../../src/UI/Studio/EditItemButton.svelte","../../src/UI/Studio/ChooseLayerToEdit.svelte","../../src/UI/Walkthrough/WalkthroughStep.svelte","../../src/UI/Walkthrough/Walkthrough.svelte","../../src/UI/Studio/EditTheme.svelte","../../src/UI/StudioGUI.svelte","../../src/UI/StudioGui.ts"],"sourcesContent":["<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM8.94 6.94a.75.75 0 11-1.061-1.061 3 3 0 112.871 5.026v.345a.75.75 0 01-1.5 0v-.5c0-.72.57-1.172 1.081-1.287A1.5 1.5 0 108.94 6.94zM10 15a1 1 0 100-2 1 1 0 000 2z\" clip-rule=\"evenodd\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\"/>\n</svg>","<!-- svelte-ignore a11y-mouse-events-have-key-events --><svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" {...$$restProps} on:click on:mouseover on:mouseenter on:mouseleave on:keydown><slot />\n  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"/>\n</svg>","import LayerConfig from \"../Models/ThemeConfig/LayerConfig\"\nimport { Utils } from \"../Utils\"\nimport known_layers from \"../assets/generated/known_layers.json\"\nimport { LayerConfigJson } from \"../Models/ThemeConfig/Json/LayerConfigJson\"\n\nexport class AllSharedLayers {\n    public static sharedLayers: Map<string, LayerConfig> = AllSharedLayers.getSharedLayers()\n    public static getSharedLayersConfigs(): Map<string, LayerConfigJson> {\n        const sharedLayers = new Map<string, LayerConfigJson>()\n        for (const layer of known_layers.layers) {\n            // @ts-ignore\n            sharedLayers.set(layer.id, layer)\n        }\n\n        return sharedLayers\n    }\n    private static getSharedLayers(): Map<string, LayerConfig> {\n        const sharedLayers = new Map<string, LayerConfig>()\n        for (const layer of known_layers.layers) {\n            try {\n                // @ts-ignore\n                const parsed = new LayerConfig(layer, \"shared_layers\")\n                sharedLayers.set(layer.id, parsed)\n            } catch (e) {\n                if (!Utils.runningFromConsole) {\n                    console.error(\n                        \"CRITICAL: Could not parse a layer configuration!\",\n                        layer.id,\n                        \" due to\",\n                        e\n                    )\n                }\n            }\n        }\n\n        return sharedLayers\n    }\n}\n","import { ConfigMeta } from \"./configMeta\"\nimport { Store, UIEventSource } from \"../../Logic/UIEventSource\"\nimport { LayerConfigJson } from \"../../Models/ThemeConfig/Json/LayerConfigJson\"\nimport {\n    Conversion,\n    ConversionMessage,\n    DesugaringContext,\n    Pipe,\n} from \"../../Models/ThemeConfig/Conversion/Conversion\"\nimport { PrepareLayer } from \"../../Models/ThemeConfig/Conversion/PrepareLayer\"\nimport { ValidateLayer, ValidateTheme } from \"../../Models/ThemeConfig/Conversion/Validation\"\nimport { AllSharedLayers } from \"../../Customizations/AllSharedLayers\"\nimport { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\nimport { TagUtils } from \"../../Logic/Tags/TagUtils\"\nimport StudioServer from \"./StudioServer\"\nimport { Utils } from \"../../Utils\"\nimport { OsmConnection } from \"../../Logic/Osm/OsmConnection\"\nimport { OsmTags } from \"../../Models/OsmFeature\"\nimport { Feature, Point } from \"geojson\"\nimport LayerConfig from \"../../Models/ThemeConfig/LayerConfig\"\nimport { LayoutConfigJson } from \"../../Models/ThemeConfig/Json/LayoutConfigJson\"\nimport { PrepareTheme } from \"../../Models/ThemeConfig/Conversion/PrepareTheme\"\nimport { ConversionContext } from \"../../Models/ThemeConfig/Conversion/ConversionContext\"\nimport { LocalStorageSource } from \"../../Logic/Web/LocalStorageSource\"\n\nexport interface HighlightedTagRendering {\n    path: ReadonlyArray<string | number>\n    schema: ConfigMeta\n}\n\nexport abstract class EditJsonState<T> {\n    public readonly schema: ConfigMeta[]\n    public readonly category: \"layers\" | \"themes\"\n    public readonly server: StudioServer\n    public readonly showIntro: UIEventSource<\"no\" | \"intro\" | \"tagrenderings\"> = <any>(\n        LocalStorageSource.Get(\"studio-show-intro\", \"intro\")\n    )\n\n    public readonly expertMode: UIEventSource<boolean>\n\n    public readonly configuration: UIEventSource<Partial<T>> = new UIEventSource<Partial<T>>({})\n    public readonly messages: Store<ConversionMessage[]>\n\n    /**\n     * The EditLayerUI shows a 'schemaBasedInput' for this path to pop advanced questions out\n     */\n    public readonly highlightedItem: UIEventSource<HighlightedTagRendering> = new UIEventSource(\n        undefined\n    )\n    private sendingUpdates = false\n    private readonly _stores = new Map<string, UIEventSource<any>>()\n\n    constructor(\n        schema: ConfigMeta[],\n        server: StudioServer,\n        category: \"layers\" | \"themes\",\n        options?: {\n            expertMode?: UIEventSource<boolean>\n        }\n    ) {\n        this.schema = schema\n        this.server = server\n        this.category = category\n        this.expertMode = options?.expertMode ?? new UIEventSource<boolean>(false)\n\n        this.messages = this.setupErrorsForLayers()\n\n        const layerId = this.getId()\n        this.highlightedItem.addCallbackD((hl) => console.log(\"Highlighted item is\", hl))\n        this.configuration\n            .mapD((config) => {\n                if (!this.sendingUpdates) {\n                    console.log(\"Not sending updates yet! Trigger 'startSendingUpdates' first\")\n                    return undefined\n                }\n                return JSON.stringify(config, null, \"  \")\n            })\n            .stabilized(100)\n            .addCallbackD(async (config) => {\n                const id = layerId.data\n                if (id === undefined) {\n                    console.warn(\"No id found in layer, not updating\")\n                    return\n                }\n                await this.server.update(id, config, this.category)\n            })\n    }\n\n    public startSavingUpdates(enabled = true) {\n        this.sendingUpdates = enabled\n        if (enabled) {\n            this.configuration.ping()\n        }\n    }\n\n    public getCurrentValueFor(path: ReadonlyArray<string | number>): any | undefined {\n        // Walk the path down to see if we find something\n        let entry = this.configuration.data\n        for (let i = 0; i < path.length; i++) {\n            if (entry === undefined) {\n                // We reached a dead end - no old vlaue\n                return undefined\n            }\n            const breadcrumb = path[i]\n            entry = entry[breadcrumb]\n        }\n        return entry\n    }\n\n    public async delete(){\n        await this.server.delete(this.getId().data, this.category)\n    }\n    public getStoreFor<T>(path: ReadonlyArray<string | number>): UIEventSource<T | undefined> {\n        const key = path.join(\".\")\n\n        const store = new UIEventSource<any>(this.getCurrentValueFor(path))\n        store.addCallback((v) => {\n            this.setValueAt(path, v)\n        })\n        this._stores.set(key, store)\n        this.configuration.addCallbackD((config) => {\n            store.setData(this.getCurrentValueFor(path))\n        })\n        return store\n    }\n\n    public register(\n        path: ReadonlyArray<string | number>,\n        value: Store<any>,\n        noInitialSync: boolean = true\n    ): () => void {\n        const unsync = value.addCallback((v) => {\n            this.setValueAt(path, v)\n        })\n        if (!noInitialSync) {\n            this.setValueAt(path, value.data)\n        }\n        return unsync\n    }\n\n    public getSchemaStartingWith(path: string[]) {\n        return this.schema.filter(\n            (sch) =>\n                !path.some((part, i) => !(sch.path.length > path.length && sch.path[i] === part))\n        )\n    }\n\n    public getTranslationAt(path: string[]): ConfigMeta {\n        const origConfig = this.getSchema(path)[0]\n        return {\n            path,\n            type: \"translation\",\n            hints: {\n                typehint: \"translation\",\n            },\n            required: origConfig.required ?? false,\n            description: origConfig.description ?? \"A translatable object\",\n        }\n    }\n\n    public getSchema(path: string[]): ConfigMeta[] {\n        const schemas = this.schema.filter(\n            (sch) =>\n                sch !== undefined &&\n                !path.some((part, i) => !(sch.path.length == path.length && sch.path[i] === part))\n        )\n        if (schemas.length == 0) {\n            console.warn(\"No schemas found for path\", path.join(\".\"))\n        }\n        return schemas\n    }\n\n    public setValueAt(path: ReadonlyArray<string | number>, v: any) {\n        let entry = this.configuration.data\n        const isUndefined =\n            v === undefined ||\n            v === null ||\n            v === \"\" ||\n            (typeof v === \"object\" && Object.keys(v).length === 0)\n\n        for (let i = 0; i < path.length - 1; i++) {\n            const breadcrumb = path[i]\n            if (entry[breadcrumb] === undefined) {\n                if (isUndefined) {\n                    // we have a dead end _and_ we do not need to set a value - we do an early return\n                    return\n                }\n                entry[breadcrumb] = typeof path[i + 1] === \"number\" ? [] : {}\n            }\n            entry = entry[breadcrumb]\n        }\n\n        const lastBreadcrumb = path.at(-1)\n        if (isUndefined) {\n            if (entry && entry[lastBreadcrumb]) {\n                delete entry[lastBreadcrumb]\n                this.configuration.ping()\n            }\n        } else if (entry[lastBreadcrumb] !== v) {\n            entry[lastBreadcrumb] = v\n            this.configuration.ping()\n        }\n    }\n\n    public messagesFor(path: ReadonlyArray<string | number>): Store<ConversionMessage[]> {\n        return this.messages.map((msgs) => {\n            if (!msgs) {\n                return []\n            }\n            return msgs.filter((msg) => {\n                const pth = msg.context.path\n                for (let i = 0; i < Math.min(pth.length, path.length); i++) {\n                    if (pth[i] !== path[i]) {\n                        return false\n                    }\n                }\n                return true\n            })\n        })\n    }\n\n    protected abstract buildValidation(state: DesugaringContext): Conversion<T, any>\n\n    protected abstract getId(): Store<string>\n\n    private setupErrorsForLayers(): Store<ConversionMessage[]> {\n        const layers = AllSharedLayers.getSharedLayersConfigs()\n        const questions = layers.get(\"questions\")\n        const sharedQuestions = new Map<string, QuestionableTagRenderingConfigJson>()\n        for (const question of questions.tagRenderings) {\n            sharedQuestions.set(question[\"id\"], <QuestionableTagRenderingConfigJson>question)\n        }\n        let state: DesugaringContext = {\n            tagRenderings: sharedQuestions,\n            sharedLayers: layers,\n        }\n        const prepare = this.buildValidation(state)\n        return this.configuration.mapD((config) => {\n            const context = ConversionContext.construct([], [\"prepare\"])\n            try {\n                prepare.convert(<T>config, context)\n            } catch (e) {\n                console.error(e)\n                context.err(e)\n            }\n            return context.messages\n        })\n    }\n}\n\nexport default class EditLayerState extends EditJsonState<LayerConfigJson> {\n    // Needed for the special visualisations\n    public readonly osmConnection: OsmConnection\n    public readonly imageUploadManager = {\n        getCountsFor() {\n            return 0\n        },\n    }\n    public readonly layout: { getMatchingLayer: (key: any) => LayerConfig }\n    public readonly featureSwitches: {\n        featureSwitchIsDebugging: UIEventSource<boolean>\n    }\n\n    /**\n     * Used to preview and interact with the questions\n     */\n    public readonly testTags = new UIEventSource<OsmTags>({ id: \"node/-12345\" })\n    public readonly exampleFeature: Feature<Point> = {\n        type: \"Feature\",\n        properties: this.testTags.data,\n        geometry: {\n            type: \"Point\",\n            coordinates: [3.21, 51.2],\n        },\n    }\n\n    constructor(\n        schema: ConfigMeta[],\n        server: StudioServer,\n        osmConnection: OsmConnection,\n        options: { expertMode: UIEventSource<boolean> }\n    ) {\n        super(schema, server, \"layers\", options)\n        this.osmConnection = osmConnection\n        this.layout = {\n            getMatchingLayer: (_) => {\n                try {\n                    return new LayerConfig(<LayerConfigJson>this.configuration.data, \"dynamic\")\n                } catch (e) {\n                    return undefined\n                }\n            },\n        }\n        this.featureSwitches = {\n            featureSwitchIsDebugging: new UIEventSource<boolean>(true),\n        }\n\n        this.addMissingTagRenderingIds()\n\n\n        function cleanArray(data: object, key: string): boolean{\n            if(!data){\n                return false\n            }\n            if (data[key]) {\n                // A bit of cleanup\n                const lBefore = data[key].length\n                const cleaned = Utils.NoNull(data[key])\n                if (cleaned.length != lBefore) {\n                    data[key] = cleaned\n                    return true\n                }\n            }\n            return false\n        }\n\n        this.configuration.addCallbackAndRunD((layer) => {\n            let changed = cleanArray(layer, \"tagRenderings\") || cleanArray(layer, \"pointRenderings\")\n            for (const tr of layer.tagRenderings ?? []) {\n                if(typeof tr === \"string\"){\n                    continue\n                }\n\n                const qtr = (<QuestionableTagRenderingConfigJson> tr)\n                if(qtr.freeform && Object.keys(qtr.freeform ).length === 0){\n                    delete qtr.freeform\n                    changed = true\n                }\n            }\n            if(changed){\n                this.configuration.ping()\n            }\n        })\n    }\n\n    protected buildValidation(state: DesugaringContext) {\n        return new Pipe(\n            new PrepareLayer(state),\n            new ValidateLayer(\"dynamic\", false, undefined, true)\n        )\n    }\n\n    protected getId(): Store<string> {\n        return this.configuration.mapD((config) => config.id)\n    }\n\n    private addMissingTagRenderingIds() {\n        this.configuration.addCallbackD((config) => {\n            const trs = Utils.NoNull(config.tagRenderings ?? [])\n            for (let i = 0; i < trs.length; i++) {\n                const tr = trs[i]\n                if (typeof tr === \"string\") {\n                    continue\n                }\n                if (!tr[\"id\"] && !tr[\"override\"]) {\n                    const qtr = <QuestionableTagRenderingConfigJson>tr\n                    let id = \"\" + i + \"_\" + Utils.randomString(5)\n                    if (qtr?.freeform?.key) {\n                        id = qtr?.freeform?.key\n                    } else if (qtr.mappings?.[0]?.if) {\n                        id =\n                            qtr.freeform?.key ??\n                            TagUtils.Tag(qtr.mappings[0].if).usedKeys()?.[0] ??\n                            \"\" + i\n                    }\n                    qtr[\"id\"] = id\n                }\n            }\n        })\n    }\n}\n\nexport class EditThemeState extends EditJsonState<LayoutConfigJson> {\n    constructor(\n        schema: ConfigMeta[],\n        server: StudioServer,\n        options: { expertMode: UIEventSource<boolean> }\n    ) {\n        super(schema, server, \"themes\", options)\n    }\n\n    protected buildValidation(state: DesugaringContext): Conversion<LayoutConfigJson, any> {\n        return new Pipe(\n            new PrepareTheme(state),\n            new ValidateTheme(undefined, \"\", false, new Set(state.tagRenderings.keys()))\n        )\n    }\n\n    protected getId(): Store<string> {\n        return this.configuration.mapD((config) => config.id)\n    }\n}\n","import { JsonSchema, JsonSchemaType } from \"./jsonSchema\"\n\nexport interface ConfigMeta {\n    path: string[]\n    type: JsonSchemaType | JsonSchema[]\n    /**\n     * All fields are lowercase, as they should be case-insensitive\n     */\n    hints: {\n        group?: string\n        typehint?: string\n        typehelper?: string\n        /**\n         * If multiple subcategories can be chosen\n         */\n        types?: string\n        question?: string\n        iftrue?: string\n        iffalse?: string\n        ifunset?: string\n        inline?: string\n        default?: string\n        typesdefault?: string\n        suggestions?: []\n        title?: string\n        multianswer?: \"true\" | string\n    }\n    required: boolean\n    description: string\n}\n\nexport class ConfigMetaUtils {\n    static isTranslation(configMeta: ConfigMeta) {\n        /*      {\n    \"$ref\": \"#/definitions/Record<string,string>\"\n  },\n  {\n    \"type\": \"string\"\n  }*/\n        if (!configMeta.type) {\n            return false\n        }\n        if (Array.isArray(configMeta.type)) {\n            return configMeta.type.some((t) => t[\"$ref\"] === \"#/definitions/Record<string,string>\")\n        } else {\n            return configMeta.type[\"$ref\"] === \"#/definitions/Record<string,string>\"\n        }\n    }\n}\n","<script lang=\"ts\">\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\"\n  import { ExclamationIcon, InformationCircleIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n\n  /**\n   * Single conversion message, styled depending on the type\n   */\n  export let message: ConversionMessage\n</script>\n\n{#if message.level === \"error\"}\n  <div class=\"alert flex items-center justify-between\">\n    <ExclamationIcon class=\"mx-1 h-6 w-6 shrink-0\" />\n    {message.message}\n    <div />\n  </div>\n{:else if message.level === \"warning\"}\n  <div class=\"warning flex items-center justify-between\">\n    <ExclamationIcon class=\"mx-1 h-6 w-6 shrink-0\" />\n    {message.message}\n    <div />\n  </div>\n{:else if message.level === \"information\"}\n  <div class=\"information flex items-center justify-between\">\n    <InformationCircleIcon class=\"mx-1 h-6 w-6 shrink-0\" />\n    {message.message}\n    <div />\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import { UIEventSource } from \"../../Logic/UIEventSource\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\"\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\"\n  import nmd from \"nano-markdown\"\n  import type { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\n  import EditLayerState from \"./EditLayerState\"\n  import { onDestroy } from \"svelte\"\n  import type { JsonSchemaType } from \"./jsonSchema\"\n  import { ConfigMetaUtils } from \"./configMeta.ts\"\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\"\n\n  export let state: EditLayerState\n  export let path: (string | number)[] = []\n  export let schema: ConfigMeta\n  export let startInEditModeIfUnset: boolean = schema.hints && !schema.hints.ifunset\n  let value = new UIEventSource<string | any>(undefined)\n\n  const isTranslation =\n    schema.hints?.typehint === \"translation\" ||\n    schema.hints?.typehint === \"rendered\" ||\n    ConfigMetaUtils.isTranslation(schema)\n  let type = schema.hints.typehint ?? \"string\"\n\n  let rendervalue =\n    (schema.hints.inline ?? schema.path.join(\".\")) +\n    (isTranslation ? \" <b>{translated(value)}</b>\" : \" <b>{value}</b>\")\n\n  if (schema.type === \"boolean\") {\n    rendervalue = undefined\n  }\n  if (schema.hints.typehint === \"tag\" || schema.hints.typehint === \"simple_tag\") {\n    rendervalue = \"{tags()}\"\n  }\n\n  let helperArgs = schema.hints.typehelper?.split(\",\")\n  let inline = schema.hints.inline !== undefined\n  if (isTranslation) {\n    type = \"translation\"\n    if (schema.hints.inline) {\n      const inlineValue = schema.hints.inline\n      rendervalue = inlineValue\n      inline = false\n      helperArgs = [\n        inlineValue.substring(0, inlineValue.indexOf(\"{\")),\n        inlineValue.substring(inlineValue.indexOf(\"}\") + 1),\n      ]\n    }\n  }\n  if (type.endsWith(\"[]\")) {\n    type = type.substring(0, type.length - 2)\n  }\n\n  const configJson: QuestionableTagRenderingConfigJson = {\n    id: path.join(\"_\"),\n    render: rendervalue,\n    question: schema.hints.question,\n    questionHint: nmd(schema.description),\n    freeform:\n      schema.type === \"boolean\"\n        ? undefined\n        : {\n            key: \"value\",\n            type,\n            inline,\n            helperArgs,\n          },\n  }\n\n  if (schema.hints.default) {\n    configJson.mappings = [\n      {\n        if: \"value=\", // We leave this blank\n        then:\n          path.at(-1) +\n          \" is not set. The default value <b>\" +\n          schema.hints.default +\n          \"</b> will be used. \" +\n          (schema.hints.ifunset ?? \"\"),\n      },\n    ]\n  } else if (!schema.required) {\n    configJson.mappings = [\n      {\n        if: \"value=\",\n        then: path.at(-1) + \" is not set. \" + (schema.hints.ifunset ?? \"\"),\n      },\n    ]\n  }\n\n  function mightBeBoolean(type: undefined | JsonSchemaType): boolean {\n    if (type === undefined) {\n      return false\n    }\n    if (type[\"type\"]) {\n      type = type[\"type\"]\n    }\n    if (type === \"boolean\") {\n      return true\n    }\n    if (!Array.isArray(type)) {\n      return false\n    }\n\n    return type.some((t) => mightBeBoolean(t))\n  }\n\n  if (mightBeBoolean(schema.type)) {\n    configJson.mappings = configJson.mappings ?? []\n    configJson.mappings.push(\n      {\n        if: \"value=true\",\n        then: schema.hints?.iftrue ?? \"Yes\",\n      },\n      {\n        if: \"value=false\",\n        then: schema.hints?.iffalse ?? \"No\",\n      }\n    )\n  }\n\n  if (schema.hints.suggestions) {\n    if (!configJson.mappings) {\n      configJson.mappings = []\n    }\n    configJson.mappings.push(...schema.hints.suggestions)\n  }\n  let config: TagRenderingConfig\n  let err: string = undefined\n  let messages = state.messagesFor(path)\n  try {\n    config = new TagRenderingConfig(configJson, \"config based on \" + schema.path.join(\".\"))\n  } catch (e) {\n    console.error(e, config)\n    err = path.join(\".\") + \" \" + e\n  }\n  let startValue = state.getCurrentValueFor(path)\n  let startInEditMode = !startValue && startInEditModeIfUnset\n  const tags = new UIEventSource<Record<string, string>>({ value: startValue })\n  try {\n    onDestroy(\n      state.register(\n        path,\n        tags.map((tgs) => {\n          const v = tgs[\"value\"]\n          if (typeof v !== \"string\") {\n            return { ...v }\n          }\n          if (schema.type === \"boolan\") {\n            return v === \"true\" || v === \"yes\" || v === \"1\"\n          }\n          if (mightBeBoolean(schema.type)) {\n            if (v === \"true\" || v === \"yes\" || v === \"1\") {\n              return true\n            }\n            if (v === \"false\" || v === \"no\" || v === \"0\") {\n              return false\n            }\n          }\n          if (schema.type === \"number\") {\n            if (v === \"\") {\n              return undefined\n            }\n            return Number(v)\n          }\n          if (isTranslation && typeof v === \"string\") {\n            if (v === \"\") {\n              return {}\n            }\n            return JSON.parse(v)\n          }\n          return v\n        }),\n        isTranslation\n      )\n    )\n  } catch (e) {\n    console.error(\"Could not register\", path, \"due to\", e)\n  }\n</script>\n\n{#if err !== undefined}\n  <span class=\"alert\">{err}</span>\n{:else}\n  <div class=\"flex w-full flex-col\">\n    <TagRenderingEditable\n      editMode={startInEditMode}\n      {config}\n      selectedElement={undefined}\n      showQuestionIfUnknown={true}\n      {state}\n      {tags}\n    />\n    {#if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message} />\n      {/each}\n    {/if}\n    {#if window.location.hostname === \"127.0.0.1\"}\n      <span class=\"subtle\" on:click={() => console.log(schema)}>\n        SchemaBasedField <b>{path.join(\".\")}</b>\n        <span class=\"cursor-pointer\" on:click={() => console.log(schema)}>\n          {schema.hints.typehint}\n        </span>\n        Group: {schema.hints.group}\n      </span>\n    {/if}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\"\n  import EditLayerState from \"./EditLayerState\"\n  import * as questions from \"../../assets/generated/layers/questions.json\"\n  import { ImmutableStore, Store } from \"../../Logic/UIEventSource\"\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\"\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\"\n  import nmd from \"nano-markdown\"\n  import type { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson.js\"\n  import type { TagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/TagRenderingConfigJson\"\n  import FromHtml from \"../Base/FromHtml.svelte\"\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\"\n  import NextButton from \"../Base/NextButton.svelte\"\n\n  export let state: EditLayerState\n  export let path: ReadonlyArray<string | number>\n  export let schema: ConfigMeta\n  let value = state.getStoreFor(path)\n\n  let perId: Record<string, TagRenderingConfigJson[]> = {}\n  for (let tagRendering of questions.tagRenderings) {\n    if (tagRendering.labels) {\n      for (let label of tagRendering.labels) {\n        perId[label] = (perId[label] ?? []).concat(tagRendering)\n      }\n    }\n    perId[tagRendering.id] = [tagRendering]\n  }\n\n  let configJson: Store<QuestionableTagRenderingConfigJson[]> = value.map((x) => {\n    if (typeof x === \"string\") {\n      return perId[x]\n    } else {\n      return [x]\n    }\n  })\n  let configs: Store<TagRenderingConfig[]> = configJson.map((configs) => {\n    if (!configs) {\n      return [{ error: \"No configuartions found\" }]\n    }\n    console.log(\"Regenerating configs\")\n    return configs.map((config) => {\n      try {\n        return new TagRenderingConfig(config)\n      } catch (e) {\n        return { error: e }\n      }\n    })\n  })\n  let id: Store<string> = value.mapD((c) => {\n    if (c?.id) {\n      return c.id\n    }\n    if (typeof c === \"string\") {\n      return c\n    }\n    return undefined\n  })\n\n  let tags = state.testTags\n\n  let messages = state.messagesFor(path)\n\n  let description = schema.description\n  if (description) {\n    try {\n      description = nmd(description)\n    } catch (e) {\n      console.error(\"Could not convert description to markdown\", { description })\n    }\n  }\n</script>\n\n<div class=\"flex\">\n  <div class=\"interactive border-interactive m-4 flex w-full flex-col\">\n    {#if $id}\n      TagRendering {$id}\n    {/if}\n    <NextButton clss=\"primary\" on:click={() => state.highlightedItem.setData({ path, schema })}>\n      {#if schema.hints.question}\n        {schema.hints.question}\n      {/if}\n    </NextButton>\n    {#if description}\n      <FromHtml src={description} />\n    {/if}\n    {#each $messages as message}\n      <ShowConversionMessage {message} />\n    {/each}\n\n    <slot class=\"my-4 self-end\" />\n  </div>\n\n  <div class=\"m-4 flex w-full flex-col\">\n    <h3>Preview of this question</h3>\n    {#each $configs as config}\n      {#if config.error !== undefined}\n        <div class=\"alert\">Could not create a preview of this tagRendering: {config.error}</div>\n      {:else if config.condition && !config.condition.matchesProperties($tags)}\n        This tagRendering is currently not shown. It will appear if the feature matches the\n        condition\n        <b>\n          <FromHtml src={config.condition.asHumanString(true, false, {})} />\n        </b>\n\n        Try to answer the relevant question above\n      {:else if config.metacondition && !config.metacondition.matchesProperties($tags)}\n        This tagRendering is currently not shown. It will appear if the feature matches the\n        metacondition\n        <b>\n          <FromHtml src={config.metacondition.asHumanString(true, false, {})} />\n        </b>\n        For a breakdown of usable meta conditions, go to a mapcomplete theme > settings and enable debug-data.\n        The meta-tags will appear at the bottom\n      {:else}\n        <TagRenderingEditable\n          selectedElement={state.exampleFeature}\n          {config}\n          editingEnabled={new ImmutableStore(true)}\n          showQuestionIfUnknown={true}\n          {state}\n          {tags}\n        />\n      {/if}\n    {/each}\n  </div>\n</div>\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import { UIEventSource } from \"../../Logic/UIEventSource\"\n  import type { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\"\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\"\n  import { onDestroy } from \"svelte\"\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\"\n  import type { JsonSchemaType } from \"./jsonSchema\"\n  // @ts-ignore\n  import nmd from \"nano-markdown\"\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\"\n\n  /**\n   * If 'types' is defined: allow the user to pick one of the types to input.\n   */\n\n  export let state: EditLayerState\n  export let path: (string | number)[] = []\n  export let schema: ConfigMeta\n  let expertMode = state.expertMode\n  const defaultOption = schema.hints.typesdefault ? Number(schema.hints.typesdefault) : undefined\n\n  const hasBooleanOption = (<JsonSchemaType[]>schema.type)?.findIndex(\n    (t) => t[\"type\"] === \"boolean\"\n  )\n  const types = schema.hints.types.split(\";\")\n  if (hasBooleanOption >= 0) {\n    types.splice(hasBooleanOption)\n  }\n\n  let lastIsString = false\n  {\n    const types: string | string[] = Array.isArray(schema.type)\n      ? schema.type[schema.type.length - 1].type\n      : []\n    lastIsString = types === \"string\" || (Array.isArray(types) && types.some((i) => i === \"string\"))\n  }\n\n  if (lastIsString) {\n    types.splice(types.length - 1, 1)\n  }\n  const configJson: QuestionableTagRenderingConfigJson = {\n    id: \"TYPE_OF:\" + path.join(\"_\"),\n    question: \"Which subcategory is needed for \" + schema.path.at(-1) + \"?\",\n    questionHint: nmd(schema.description),\n    mappings: types\n      .map((opt) => opt.trim())\n      .filter((opt) => opt.length > 0)\n      .map((opt, i) => ({\n        if: \"chosen_type_index=\" + i,\n        addExtraTags: [\"value=\"],\n        then: opt + (i === defaultOption ? \" (Default)\" : \"\"),\n      })),\n    render: !lastIsString\n      ? undefined\n      : schema.hints.inline ?? \"Use a hardcoded value: <b>{value}</b>\",\n    freeform: !lastIsString\n      ? undefined\n      : {\n          key: \"value\",\n          inline: true,\n          type: schema.hints.typehint,\n          addExtraTags: [\"chosen_type_index=\"],\n        },\n  }\n  let tags = new UIEventSource<Record<string, string>>({})\n\n  if (schema.hints.ifunset) {\n    configJson.mappings.push({\n      if: { and: [\"value=\", \"chosen_type_index=\"] },\n      then: schema.hints.ifunset,\n    })\n  }\n  if (schema.hints.suggestions) {\n    configJson.mappings.push(...schema.hints.suggestions)\n  }\n\n  if (hasBooleanOption >= 0) {\n    configJson.mappings.unshift(\n      {\n        if: \"value=true\",\n        then: schema.hints.iftrue ?? \"Yes\",\n        addExtraTags: [\"chosen_type_index=\"],\n      },\n      {\n        if: \"value=false\",\n        then: schema.hints.iffalse ?? \"No\",\n        addExtraTags: [\"chosen_type_index=\"],\n      }\n    )\n  }\n  const config = new TagRenderingConfig(configJson, \"config based on \" + schema.path.join(\".\"))\n  let chosenOption: number = defaultOption\n\n  const existingValue = state.getCurrentValueFor(path)\n  let hasOverride = existingValue?.override !== undefined\n  if (hasBooleanOption >= 0 && (existingValue === true || existingValue === false)) {\n    tags.setData({ value: \"\" + existingValue })\n  } else if (lastIsString && typeof existingValue === \"string\") {\n    tags.setData({ value: existingValue })\n    chosenOption = undefined\n  } else if (existingValue) {\n    // We found an existing value. Let's figure out what type it matches and select that one\n    // We run over all possibilities and check what is required\n    const possibleTypes: {\n      index: number\n      matchingPropertiesCount: number\n      optionalMatches: number\n    }[] = []\n    outer: for (let i = 0; i < (<[]>schema.type).length; i++) {\n      const type = schema.type[i]\n      let optionalMatches = 0\n      for (const key of Object.keys(type.properties ?? {})) {\n        if (!!existingValue[key]) {\n          optionalMatches++\n        }\n      }\n      if (type.required) {\n        let numberOfMatches = 0\n\n        for (const requiredAttribute of type.required) {\n          if (existingValue[requiredAttribute] === undefined) {\n            // The 'existingValue' does _not_ have this required attribute, so it cannot be of this type\n            continue outer\n          }\n          numberOfMatches++\n        }\n        possibleTypes.push({ index: i, matchingPropertiesCount: numberOfMatches, optionalMatches })\n      } else {\n        possibleTypes.push({ index: i, matchingPropertiesCount: 0, optionalMatches })\n      }\n    }\n    possibleTypes.sort((a, b) => b.optionalMatches - a.optionalMatches)\n    possibleTypes.sort((a, b) => b.matchingPropertiesCount - a.matchingPropertiesCount)\n    if (possibleTypes.length > 0) {\n      chosenOption = possibleTypes[0].index\n      tags.setData({ chosen_type_index: \"\" + chosenOption })\n    }\n  } else if (defaultOption !== undefined) {\n    tags.setData({ chosen_type_index: \"\" + defaultOption })\n  } else {\n    chosenOption = defaultOption\n  }\n\n  if (hasBooleanOption >= 0 || lastIsString) {\n    const directValue = tags.mapD((tags) => {\n      if (tags[\"chosen_type_index\"]) {\n        return \"\"\n      }\n      if (lastIsString) {\n        return tags[\"value\"]\n      }\n      return tags[\"value\"] === \"true\"\n    })\n    onDestroy(state.register(path, directValue))\n  }\n\n  let subSchemas: ConfigMeta[] = []\n\n  let subpath = path\n  const store = state.getStoreFor(path)\n  onDestroy(\n    tags.addCallbackAndRun((tags) => {\n      if (tags[\"value\"] !== undefined && tags[\"value\"] !== \"\") {\n        chosenOption = undefined\n        return\n      }\n      const oldOption = chosenOption\n      chosenOption = tags[\"chosen_type_index\"] ? Number(tags[\"chosen_type_index\"]) : defaultOption\n      const type = schema.type[chosenOption]\n      if (chosenOption !== oldOption) {\n        // Reset the values beneath\n        subSchemas = []\n        const o = state.getCurrentValueFor(path) ?? {}\n        for (const key of type?.required ?? []) {\n          o[key] ??= {}\n        }\n        store.setData(o)\n      }\n      if (!type) {\n        return\n      }\n      subpath = path\n      const cleanPath = <string[]>path.filter((p) => typeof p === \"string\")\n      if (type[\"$ref\"] === \"#/definitions/Record<string,string>\") {\n        // The subtype is a translation object\n        const schema = state.getTranslationAt(cleanPath)\n        subSchemas.push(schema)\n        subpath = path.slice(0, path.length - 2)\n        return\n      }\n      if (!type.properties) {\n        return\n      }\n      for (const crumble of Object.keys(type.properties)) {\n        subSchemas.push(...state.getSchema([...cleanPath, crumble]))\n      }\n    })\n  )\n  let messages = state.messagesFor(path)\n</script>\n\n<div class=\"m-1 flex flex-col gap-y-2 border-2 border-dashed border-gray-300 p-2\">\n  {#if schema.hints.title !== undefined}\n    <h3>{schema.hints.title}</h3>\n    <div>{schema.description}</div>\n  {/if}\n  {#if hasOverride}\n    This object refers to {existingValue.builtin} and overrides some properties. This cannot be edited\n    with MapComplete Studio\n  {:else}\n    <div>\n      <TagRenderingEditable\n        {config}\n        selectedElement={undefined}\n        showQuestionIfUnknown={!schema.hints?.ifunset}\n        {state}\n        {tags}\n      />\n    </div>\n\n    {#if chosenOption !== undefined}\n      {#each subSchemas as subschema}\n        {#if $expertMode || subschema.hints?.group !== \"expert\"}\n          <SchemaBasedInput\n            {state}\n            schema={subschema}\n            path={[...subpath, subschema?.path?.at(-1) ?? \"???\"]}\n          />\n        {:else if window.location.hostname === \"127.0.0.1\"}\n          <span class=\"subtle\">Omitted expert question {subschema.path.join(\".\")}</span>\n        {/if}\n      {/each}\n    {:else if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message} />\n      {/each}\n    {/if}\n  {/if}\n  {#if window.location.hostname === \"127.0.0.1\"}\n    <span class=\"subtle\">\n      SchemaBasedMultiType <b>{path.join(\".\")}</b>\n      <span class=\"cursor-pointer\" on:click={() => console.log(schema)}>\n        {schema.hints.typehint}\n      </span>\n    </span>\n  {/if}\n</div>\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import { UIEventSource } from \"../../Logic/UIEventSource\"\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\"\n  import SchemaBasedField from \"./SchemaBasedField.svelte\"\n  import { TrashIcon } from \"@babeard/svelte-heroicons/mini\"\n  import QuestionPreview from \"./QuestionPreview.svelte\"\n  import SchemaBasedMultiType from \"./SchemaBasedMultiType.svelte\"\n  import ShowConversionMessage from \"./ShowConversionMessage.svelte\"\n\n  export let state: EditLayerState\n  export let schema: ConfigMeta\n\n  let title = schema.path.at(-1)\n  let singular = title\n  if (title?.endsWith(\"s\")) {\n    singular = title.slice(0, title.length - 1)\n  }\n  let article = \"a\"\n  if (singular?.match(/^[aeoui]/)) {\n    article = \"an\"\n  }\n  export let path: (string | number)[] = []\n\n  const isTagRenderingBlock = path.length === 1 && path[0] === \"tagRenderings\"\n\n  if (isTagRenderingBlock) {\n    schema = { ...schema }\n    schema.description = undefined\n  }\n\n  const subparts: ConfigMeta = state\n    .getSchemaStartingWith(schema.path)\n    .filter((part) => part.path.length - 1 === schema.path.length)\n\n  let messages = state.messagesFor(path)\n\n  const currentValue: UIEventSource<any[]> = state.getStoreFor(path)\n  if (currentValue.data === undefined) {\n    currentValue.setData([])\n  }\n\n  function createItem(valueToSet?: any) {\n    if (currentValue.data === undefined) {\n      currentValue.setData([])\n    }\n    currentValue.data.push(valueToSet)\n    currentValue.ping()\n\n    if (isTagRenderingBlock) {\n      state.highlightedItem.setData({ path: [...path, currentValue.data.length - 1], schema })\n    }\n  }\n\n  function fusePath(i: number, subpartPath: string[]): (string | number)[] {\n    const newPath = [...path, i]\n    const toAdd = [...subpartPath]\n    for (const part of path) {\n      if (toAdd[0] === part) {\n        toAdd.splice(0, 1)\n      } else {\n        break\n      }\n    }\n    newPath.push(...toAdd)\n    console.log(\n      \"Fused path \",\n      path.join(\".\"),\n      \"+\",\n      i,\n      \"+\",\n      subpartPath.join(\".\"),\n      \"into\",\n      newPath.join(\".\")\n    )\n    return newPath\n  }\n\n  function schemaForMultitype() {\n    const sch = { ...schema }\n    sch.hints.typehint = undefined\n    return sch\n  }\n\n  function del(i: number) {\n    currentValue.data.splice(i, 1)\n    currentValue.ping()\n  }\n\n  function swap(i: number, j: number) {\n    const x = currentValue.data[i]\n    currentValue.data[i] = currentValue.data[j]\n    currentValue.data[j] = x\n    currentValue.ping()\n  }\n\n  function moveTo(source: number, target: number) {\n    const x = currentValue.data[source]\n    currentValue.data.splice(source, 1)\n    currentValue.data.splice(target, 0, x)\n    currentValue.ping()\n  }\n</script>\n\n<div class=\"pl-2\">\n  <h3>{schema.path.at(-1)}</h3>\n\n  {#if subparts.length > 0}\n    <span class=\"subtle\">\n      {schema.description}\n    </span>\n  {/if}\n  {#if $currentValue === undefined}\n    No array defined\n  {:else if $currentValue.length === 0}\n    No values are defined\n    {#if $messages.length > 0}\n      {#each $messages as message}\n        <ShowConversionMessage {message} />\n      {/each}\n    {/if}\n  {:else if subparts.length === 0}\n    <!-- We need an array of values, so we use the typehint of the _parent_ element as field -->\n    {#each $currentValue as value, i}\n      <div class=\"flex w-full\">\n        <SchemaBasedField {state} {schema} path={fusePath(i, [])} />\n        <button\n          class=\"h-fit w-fit rounded-full border border-black p-1\"\n          on:click={() => {\n            del(i)\n          }}\n        >\n          <TrashIcon class=\"h-4 w-4\" />\n        </button>\n      </div>\n    {/each}\n  {:else}\n    {#each $currentValue as value, i}\n      {#if !isTagRenderingBlock}\n        <div class=\"flex items-center justify-between\">\n          <h3 class=\"m-0\">{singular} {i}</h3>\n          <button\n            class=\"h-fit w-fit rounded-full border border-black p-1\"\n            on:click={() => {\n              del(i)\n            }}\n          >\n            <TrashIcon class=\"h-4 w-4\" />\n          </button>\n        </div>\n      {/if}\n      <div class=\"border border-black\">\n        {#if isTagRenderingBlock}\n          <QuestionPreview {state} path={fusePath(i, [])} {schema}>\n            <button\n              on:click={() => {\n                del(i)\n              }}\n            >\n              <TrashIcon class=\"h-4 w-4\" />\n              Delete this question\n            </button>\n\n            {#if i > 0}\n              <button\n                on:click={() => {\n                  moveTo(i, 0)\n                }}\n              >\n                Move to front\n              </button>\n\n              <button\n                on:click={() => {\n                  swap(i, i - 1)\n                }}\n              >\n                Move up\n              </button>\n            {/if}\n            {#if i + 1 < $currentValue.length}\n              <button\n                on:click={() => {\n                  swap(i, i + 1)\n                }}\n              >\n                Move down\n              </button>\n              <button\n                on:click={() => {\n                  moveTo(i, $currentValue.length - 1)\n                }}\n              >\n                Move to back\n              </button>\n            {/if}\n          </QuestionPreview>\n        {:else if schema.hints.types}\n          <SchemaBasedMultiType {state} path={fusePath(i, [])} schema={schemaForMultitype()} />\n        {:else}\n          {#each subparts as subpart}\n            <SchemaBasedInput {state} path={fusePath(i, [subpart.path.at(-1)])} schema={subpart} />\n          {/each}\n        {/if}\n      </div>\n    {/each}\n  {/if}\n  <div class=\"flex\">\n    <button on:click={() => createItem()}>Add {article} {singular}</button>\n    {#if path.length === 1 && path[0] === \"tagRenderings\"}\n      <button\n        on:click={() => {\n          createItem(\"images\")\n        }}\n      >\n        Add a builtin tagRendering\n      </button>\n    {/if}\n    <slot name=\"extra-button\" />\n  </div>\n</div>\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\"\n  import EditLayerState from \"./EditLayerState\"\n  import type { QuestionableTagRenderingConfigJson } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\n  import { UIEventSource } from \"../../Logic/UIEventSource\"\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\"\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\"\n\n  export let schema: ConfigMeta\n  export let state: EditLayerState\n  export let path: (string | number)[] = []\n\n  const configJson: QuestionableTagRenderingConfigJson = {\n    mappings: schema.hints.suggestions,\n    multiAnswer: true,\n    id: \"multi_anwser_\" + path.join(\"_\"),\n    question: schema.hints.question,\n  }\n  const tags = new UIEventSource({})\n\n  {\n    // Setting the initial value\n    const v = <string[]>state.getCurrentValueFor(path)\n    if (v && v.length > 0) {\n      tags.setData({ value: v.join(\";\") })\n    }\n  }\n\n  tags.addCallbackD((tags) => {\n    const values = tags[\"value\"]?.split(\";\")\n    if (!values) {\n      return\n    }\n    state.setValueAt(path, values)\n  })\n\n  const config = new TagRenderingConfig(configJson)\n</script>\n\n<div>\n  <TagRenderingEditable\n    {config}\n    selectedElement={undefined}\n    showQuestionIfUnknown={true}\n    {state}\n    {tags}\n  />\n</div>\n","<script lang=\"ts\">\n  import type { ConfigMeta } from \"./configMeta\"\n  import SchemaBasedField from \"./SchemaBasedField.svelte\"\n  import EditLayerState from \"./EditLayerState\"\n  import SchemaBasedArray from \"./SchemaBasedArray.svelte\"\n  import SchemaBasedMultiType from \"./SchemaBasedMultiType.svelte\"\n  import ArrayMultiAnswer from \"./ArrayMultiAnswer.svelte\"\n\n  export let schema: ConfigMeta\n  export let state: EditLayerState\n  export let path: (string | number)[] = []\n  let expertMode = state.expertMode\n</script>\n\n{#if (schema.hints?.group !== \"expert\" || $expertMode) && schema.hints.group !== \"hidden\"}\n  {#if schema.hints?.typehint?.endsWith(\"[]\")}\n    <!-- We cheat a bit here by matching this 'magical' type... -->\n    <SchemaBasedArray {path} {state} {schema} />\n  {:else if schema.type === \"array\" && schema.hints.multianswer === \"true\"}\n    <ArrayMultiAnswer {path} {state} {schema} />\n  {:else if schema.type === \"array\"}\n    <SchemaBasedArray {path} {state} {schema} />\n  {:else if schema.hints?.types}\n    <SchemaBasedMultiType {path} {state} {schema} />\n  {:else}\n    <SchemaBasedField {path} {state} {schema} />\n  {/if}\n{:else if window.location.hostname === \"127.0.0.1\"}\n  <div class=\"subtle\">\n    Not showing SBI {schema.path.join(\".\")} due to group {schema.hints.group}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  /***\n   * A 'region' is a collection of properties that can be edited which are somewhat related.\n   * They will typically be a subset of some properties\n   */\n  import type { ConfigMeta } from \"./configMeta\"\n  import EditLayerState from \"./EditLayerState\"\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\"\n\n  export let state: EditLayerState\n  export let configs: ConfigMeta[]\n  export let title: string | undefined = undefined\n\n  export let path: (string | number)[] = []\n\n  let expertMode = state.expertMode\n  let configsNoHidden = configs.filter((schema) => schema.hints?.group !== \"hidden\")\n  let configsFiltered = $expertMode\n    ? configsNoHidden\n    : configsNoHidden.filter((schema) => schema.hints?.group !== \"expert\")\n</script>\n\n{#if configs === undefined}\n  Bug: 'Region' received 'undefined'\n{:else if configs.length === 0}\n  Bug: Region received empty list as configuration\n{:else if title}\n  <div class=\"flex w-full flex-col\">\n    <h3>{title}</h3>\n    <div class=\"flex w-full flex-col gap-y-1 border border-black pl-2\">\n      <slot name=\"description\" />\n      {#each configsFiltered as config}\n        <SchemaBasedInput {state} path={config.path} schema={config} />\n      {/each}\n    </div>\n  </div>\n{:else}\n  <div class=\"flex w-full flex-col gap-y-1 pl-2\">\n    {#each configsFiltered as config}\n      <SchemaBasedInput {state} path={path.concat(config.path)} schema={config} />\n    {/each}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\"\n  import { ExclamationIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n\n  export let firstPaths: Set<string>\n  export let state: EditLayerState\n  let messagesCount = state.messages.map(\n    (msgs) =>\n      msgs.filter((msg) => {\n        const pth = msg.context.path\n        return firstPaths.has(pth[0]) || (pth.length > 1 && firstPaths.has(pth[1]))\n      }).length\n  )\n</script>\n\n{#if $messagesCount > 0}\n  <span class=\"alert flex w-min\">\n    <ExclamationIcon class=\"h-6 w-6\" />\n    {$messagesCount}\n  </span>\n{/if}\n","<script lang=\"ts\">\n  import EditLayerState from \"./EditLayerState\"\n  import { UIEventSource } from \"../../Logic/UIEventSource\"\n  import type { TagConfigJson } from \"../../Models/ThemeConfig/Json/TagConfigJson\"\n  import { TagUtils } from \"../../Logic/Tags/TagUtils\"\n  import FromHtml from \"../Base/FromHtml.svelte\"\n  import { PencilIcon } from \"@rgossiaux/svelte-heroicons/outline\"\n  import Region from \"./Region.svelte\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import configs from \"../../assets/schemas/questionabletagrenderingconfigmeta.json\"\n  import { Utils } from \"../../Utils\"\n  import ToSvelte from \"../Base/ToSvelte.svelte\"\n  import { VariableUiElement } from \"../Base/VariableUIElement\"\n\n  export let state: EditLayerState\n  export let path: (string | number)[]\n  let tag: UIEventSource<TagConfigJson> = state.getStoreFor([...path, \"if\"])\n  let parsedTag = tag.map((t) => (t ? TagUtils.Tag(t) : undefined))\n  let exampleTags = parsedTag.map((pt) => {\n    if (!pt) {\n      return {}\n    }\n    const keys = pt.usedKeys()\n    const o = {}\n    for (const key of keys) {\n      o[key] = \"value\"\n    }\n    return o\n  })\n  let uploadableOnly: boolean = true\n\n  let thenText: UIEventSource<Record<string, string>> = state.getStoreFor([...path, \"then\"])\n  let thenTextEn = thenText.mapD((translation) =>\n    typeof translation === \"string\" ? translation : translation[\"en\"]\n  )\n  let editMode = Object.keys($thenText ?? {})?.length === 0\n\n  let mappingConfigs: ConfigMeta[] = configs\n    .filter((c) => c.path[0] === \"mappings\")\n    .map((c) => <ConfigMeta>Utils.Clone(c))\n    .map((c) => {\n      c.path.splice(0, 1)\n      return c\n    })\n    .filter((c) => c.path.length == 1 && c.hints.group !== \"hidden\")\n</script>\n\n<button\n  on:click={() => {\n    editMode = !editMode\n  }}\n>\n  <PencilIcon class=\"h-6 w-6\" />\n</button>\n\n{#if editMode}\n  <div class=\"flex w-full items-start justify-between\">\n    <div class=\"flex w-full flex-col\">\n      <Region {state} configs={mappingConfigs} {path} />\n    </div>\n\n    <slot name=\"delete\" />\n  </div>\n{:else}\n  <div>\n    {#if Object.keys($thenText).length > 0}\n      <b>\n        {$thenTextEn}\n      </b>\n    {:else}\n      <i>No then is set</i>\n    {/if}\n    <FromHtml src={$parsedTag?.asHumanString(false, false, $exampleTags)} />\n  </div>\n{/if}\n","<script lang=\"ts\">\n  /**\n   * Little helper class to deal with choosing a builtin tagRendering or defining one yourself.\n   * Breaks the ideology that everything should be schema based\n   */\n  import EditLayerState from \"./EditLayerState\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import type {\n    MappingConfigJson,\n    QuestionableTagRenderingConfigJson,\n  } from \"../../Models/ThemeConfig/Json/QuestionableTagRenderingConfigJson\"\n  import TagRenderingConfig from \"../../Models/ThemeConfig/TagRenderingConfig\"\n  import TagRenderingEditable from \"../Popup/TagRendering/TagRenderingEditable.svelte\"\n  import { Store, UIEventSource } from \"../../Logic/UIEventSource\"\n  import * as questions from \"../../assets/generated/layers/questions.json\"\n  import MappingInput from \"./MappingInput.svelte\"\n  import { TrashIcon } from \"@rgossiaux/svelte-heroicons/outline\"\n  import questionableTagRenderingSchemaRaw from \"../../assets/schemas/questionabletagrenderingconfigmeta.json\"\n  import SchemaBasedField from \"./SchemaBasedField.svelte\"\n  import Region from \"./Region.svelte\"\n  import NextButton from \"../Base/NextButton.svelte\"\n  import { QuestionMarkCircleIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n  import { LocalStorageSource } from \"../../Logic/Web/LocalStorageSource\"\n  import { onMount } from \"svelte\"\n\n  export let state: EditLayerState\n  export let schema: ConfigMeta\n  export let path: (string | number)[]\n  let expertMode = state.expertMode\n  const store = state.getStoreFor(path)\n  let value = store.data\n  let hasSeenIntro = UIEventSource.asBoolean(\n    LocalStorageSource.Get(\"studio-seen-tagrendering-tutorial\", \"false\")\n  )\n  onMount(() => {\n    if (!hasSeenIntro.data) {\n      state.showIntro.setData(\"tagrenderings\")\n      hasSeenIntro.setData(true)\n    }\n  })\n  /**\n   * Allows the theme builder to create 'writable' themes.\n   * Should only be enabled for 'tagrenderings' in the theme, if the source is OSM\n   */\n  let allowQuestions: Store<boolean> = state.configuration.mapD(\n    (config) => path.at(0) === \"tagRenderings\" && config.source?.geoJson === undefined\n  )\n\n  let mappingsBuiltin: MappingConfigJson[] = []\n  let perLabel: Record<string, MappingConfigJson> = {}\n  for (const tr of questions.tagRenderings) {\n    let description = tr[\"description\"] ?? tr[\"question\"] ?? \"No description available\"\n    description = description[\"en\"] ?? description\n    if (tr[\"labels\"]) {\n      const labels: string[] = tr[\"labels\"]\n      for (const label of labels) {\n        let labelMapping: MappingConfigJson = perLabel[label]\n\n        if (!labelMapping) {\n          labelMapping = {\n            if: \"value=\" + label,\n            then: {\n              en: \"Builtin collection <b>\" + label + \"</b>:\",\n            },\n          }\n          perLabel[label] = labelMapping\n          mappingsBuiltin.push(labelMapping)\n        }\n        labelMapping.then.en = labelMapping.then.en + \"<div>\" + description + \"</div>\"\n      }\n    }\n\n    mappingsBuiltin.push({\n      if: \"value=\" + tr[\"id\"],\n      then: {\n        en: \"Builtin <b>\" + tr[\"id\"] + \"</b> <div class='subtle'>\" + description + \"</div>\",\n      },\n    })\n  }\n\n  const configBuiltin = new TagRenderingConfig(<QuestionableTagRenderingConfigJson>{\n    question: \"Which builtin element should be shown?\",\n    mappings: mappingsBuiltin,\n  })\n\n  const tags = new UIEventSource({ value })\n\n  tags.addCallbackAndRunD((tgs) => {\n    store.setData(tgs[\"value\"])\n  })\n\n  let mappings: UIEventSource<MappingConfigJson[]> = state.getStoreFor([...path, \"mappings\"])\n\n  const topLevelItems: Record<string, ConfigMeta> = {}\n  for (const item of questionableTagRenderingSchemaRaw) {\n    if (item.path.length === 1) {\n      topLevelItems[item.path[0]] = <ConfigMeta>item\n    }\n  }\n\n  function initMappings() {\n    if (mappings.data === undefined) {\n      mappings.setData([])\n    }\n  }\n\n  const items = new Set([\n    \"question\",\n    \"questionHint\",\n    \"multiAnswer\",\n    \"freeform\",\n    \"render\",\n    \"condition\",\n    \"metacondition\",\n    \"mappings\",\n    \"icon\",\n  ])\n  const ignored = new Set([\"labels\", \"description\", \"classes\"])\n\n  const freeformSchemaAll = <ConfigMeta[]>(\n    questionableTagRenderingSchemaRaw.filter(\n      (schema) => schema.path.length == 2 && schema.path[0] === \"freeform\" && $allowQuestions\n    )\n  )\n  let freeformSchema = $expertMode\n    ? freeformSchemaAll\n    : freeformSchemaAll.filter((schema) => schema.hints?.group !== \"expert\")\n  const missing: string[] = questionableTagRenderingSchemaRaw\n    .filter(\n      (schema) =>\n        schema.path.length >= 1 && !items.has(schema.path[0]) && !ignored.has(schema.path[0])\n    )\n    .map((schema) => schema.path.join(\".\"))\n  console.log({ state })\n</script>\n\n{#if typeof $store === \"string\"}\n  <div class=\"low-interaction flex\">\n    <TagRenderingEditable\n      config={configBuiltin}\n      selectedElement={undefined}\n      showQuestionIfUnknown={true}\n      {state}\n      {tags}\n    />\n    <slot name=\"upper-right\" />\n  </div>\n{:else}\n  <div class=\"flex w-full flex-col gap-y-1 p-1 pr-12\">\n    <div class=\"flex justify-end\">\n      <slot name=\"upper-right\" />\n    </div>\n    {#if $allowQuestions}\n      <SchemaBasedField\n        startInEditModeIfUnset={true}\n        {state}\n        path={[...path, \"question\"]}\n        schema={topLevelItems[\"question\"]}\n      />\n      <SchemaBasedField\n        {state}\n        path={[...path, \"questionHint\"]}\n        schema={topLevelItems[\"questionHint\"]}\n      />\n    {/if}\n    {#each $mappings ?? [] as mapping, i (mapping)}\n      <div class=\"interactive flex w-full\">\n        <MappingInput {state} path={path.concat([\"mappings\", i])}>\n          <button\n            slot=\"delete\"\n            class=\"no-image-background rounded-full\"\n            on:click={() => {\n              initMappings()\n              mappings.data.splice(i, 1)\n              mappings.ping()\n            }}\n          >\n            <TrashIcon class=\"h-4 w-4\" />\n          </button>\n        </MappingInput>\n      </div>\n    {/each}\n\n    <button\n      class=\"primary\"\n      on:click={() => {\n        initMappings()\n        mappings.data.push({ if: undefined, then: {} })\n        mappings.ping()\n      }}\n    >\n      Add a predefined option\n    </button>\n\n    {#if $allowQuestions}\n      <SchemaBasedField\n        {state}\n        path={[...path, \"multiAnswer\"]}\n        schema={topLevelItems[\"multiAnswer\"]}\n      />\n    {/if}\n\n    <h3>Text field and input element configuration</h3>\n    <div class=\"border-l border-dashed border-gray-800 pl-2\">\n      <SchemaBasedField {state} path={[...path, \"render\"]} schema={topLevelItems[\"render\"]} />\n      <Region {state} {path} configs={freeformSchema} />\n      <SchemaBasedField {state} path={[...path, \"icon\"]} schema={topLevelItems[\"icon\"]} />\n    </div>\n\n    <SchemaBasedField {state} path={[...path, \"condition\"]} schema={topLevelItems[\"condition\"]} />\n    {#if $expertMode}\n      <SchemaBasedField\n        {state}\n        path={[...path, \"metacondition\"]}\n        schema={topLevelItems[\"metacondition\"]}\n      />\n    {/if}\n    {#each missing as field}\n      <SchemaBasedField {state} path={[...path, field]} schema={topLevelItems[field]} />\n    {/each}\n\n    <NextButton clss=\"small mt-8\" on:click={() => state.showIntro.setData(\"tagrenderings\")}>\n      <QuestionMarkCircleIcon class=\"h-6 w-6\" />\n      Show the introduction again\n    </NextButton>\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\"\n\n  export let messages: ConversionMessage[]\n</script>\n\n{#if messages.length === 0}\n  <div class=\"thanks\">No errors, warnings or messages</div>\n{/if}\n\n{#each messages as message}\n  <li>\n    {message.level}\n    <span class=\"literal-code\">{message.context.path.join(\".\")}</span>\n    {message.message}\n    <span class=\"literal-code\">\n      {message.context.operation.join(\".\")}\n    </span>\n  </li>\n{/each}\n","<script lang=\"ts\">\n  import type { HighlightedTagRendering } from \"./EditLayerState\"\n  import EditLayerState from \"./EditLayerState\"\n  import layerSchemaRaw from \"../../assets/schemas/layerconfigmeta.json\"\n  import Region from \"./Region.svelte\"\n  import TabbedGroup from \"../Base/TabbedGroup.svelte\"\n  import { Store, UIEventSource } from \"../../Logic/UIEventSource\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import { Utils } from \"../../Utils\"\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\"\n  import ErrorIndicatorForRegion from \"./ErrorIndicatorForRegion.svelte\"\n  import { ChevronRightIcon, TrashIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n  import SchemaBasedInput from \"./SchemaBasedInput.svelte\"\n  import FloatOver from \"../Base/FloatOver.svelte\"\n  import TagRenderingInput from \"./TagRenderingInput.svelte\"\n  import FromHtml from \"../Base/FromHtml.svelte\"\n  import AllTagsPanel from \"../Popup/AllTagsPanel.svelte\"\n  import QuestionPreview from \"./QuestionPreview.svelte\"\n  import ShowConversionMessages from \"./ShowConversionMessages.svelte\"\n\n  const layerSchema: ConfigMeta[] = <any>layerSchemaRaw\n\n  export let state: EditLayerState\n  export let backToStudio: () => void\n  let messages = state.messages\n  let hasErrors = messages.mapD(\n    (m: ConversionMessage[]) => m.filter((m) => m.level === \"error\").length\n  )\n  const configuration = state.configuration\n\n  const allNames = Utils.Dedup(layerSchema.map((meta) => meta.hints.group))\n\n  const perRegion: Record<string, ConfigMeta[]> = {}\n  for (const region of allNames) {\n    perRegion[region] = layerSchema.filter((meta) => meta.hints.group === region)\n  }\n\n  let title: Store<string> = state.getStoreFor([\"id\"])\n  const wl = window.location\n  const baseUrl = wl.protocol + \"//\" + wl.host + \"/theme.html?userlayout=\"\n\n  function firstPathsFor(...regionNames: string[]): Set<string> {\n    const pathNames = new Set<string>()\n    for (const regionName of regionNames) {\n      const region: ConfigMeta[] = perRegion[regionName]\n      for (const configMeta of region) {\n        pathNames.add(configMeta.path[0])\n      }\n    }\n    return pathNames\n  }\n\n  function configForRequiredField(id: string): ConfigMeta {\n    let config = layerSchema.find((config) => config.path.length === 1 && config.path[0] === id)\n    config = Utils.Clone(config)\n    config.required = true\n    config.hints.ifunset = undefined\n    return config\n  }\n\n  let requiredFields = [\"id\", \"name\", \"description\", \"source\"]\n  let currentlyMissing = state.configuration.map((config) => {\n    if (!config) {\n      return []\n    }\n    const missing = []\n    for (const requiredField of requiredFields) {\n      if (!config[requiredField]) {\n        missing.push(requiredField)\n      }\n    }\n    return missing\n  })\n\n  let highlightedItem: UIEventSource<HighlightedTagRendering> = state.highlightedItem\n  function deleteLayer() {\n      state.delete()\n      backToStudio()\n  }\n</script>\n\n<div class=\"flex h-screen flex-col\">\n  <div class=\"my-2 flex w-full justify-between\">\n    <slot />\n    {#if $title === undefined}\n      <h3>Creating a new layer</h3>\n    {:else}\n      <h3>Editing layer {$title}</h3>\n    {/if}\n    {#if $currentlyMissing.length > 0}\n      <div class=\"w-16\" />\n      <!-- Empty div, simply hide this -->\n    {:else if $hasErrors > 0}\n      <div class=\"alert\">{$hasErrors} errors detected</div>\n    {:else}\n      <a\n        class=\"primary button\"\n        href={baseUrl + state.server.layerUrl(title.data)}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        Try it out\n        <ChevronRightIcon class=\"h-6 w-6 shrink-0\" />\n      </a>\n    {/if}\n  </div>\n\n  {#if $currentlyMissing.length > 0}\n    {#each requiredFields as required}\n      <SchemaBasedInput {state} schema={configForRequiredField(required)} path={[required]} />\n    {/each}\n  {:else}\n    <div class=\"m4 h-full overflow-y-auto\">\n      <TabbedGroup>\n        <div slot=\"title0\" class=\"flex\">\n          General properties\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"Basic\")} {state} />\n        </div>\n        <div class=\"flex flex-col\" slot=\"content0\">\n          <Region {state} configs={perRegion[\"Basic\"]} />\n          <div class=\"mt-12\">\n            \n          <button on:click={() => deleteLayer()} class=\"small\" >\n            <TrashIcon class=\"h-6 w-6\"/> Delete this layer\n          </button>\n          </div>\n        </div>\n\n        <div slot=\"title1\" class=\"flex\">\n          Information panel (questions and answers)\n          <ErrorIndicatorForRegion\n            firstPaths={firstPathsFor(\"title\", \"tagrenderings\", \"editing\")}\n            {state}\n          />\n        </div>\n        <div slot=\"content1\">\n          <QuestionPreview path={[\"title\"]} {state} schema={perRegion[\"title\"][0]} />\n          <Region configs={perRegion[\"tagrenderings\"]} {state} title=\"Popup contents\" />\n          <Region configs={perRegion[\"editing\"]} {state} title=\"Other editing elements\" />\n        </div>\n\n        <div slot=\"title2\">\n          Creating a new point\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"presets\")} {state} />\n        </div>\n\n        <div slot=\"content2\">\n          <Region {state} configs={perRegion[\"presets\"]} />\n        </div>\n\n        <div slot=\"title3\" class=\"flex\">\n          Rendering on the map\n          <ErrorIndicatorForRegion\n            firstPaths={firstPathsFor(\"linerendering\", \"pointrendering\")}\n            {state}\n          />\n        </div>\n        <div slot=\"content3\">\n          <Region configs={perRegion[\"linerendering\"]} {state} />\n          <Region configs={perRegion[\"pointrendering\"]} {state} />\n        </div>\n\n        <div slot=\"title4\" class=\"flex\">\n          Advanced functionality\n          <ErrorIndicatorForRegion firstPaths={firstPathsFor(\"advanced\", \"expert\")} {state} />\n        </div>\n        <div slot=\"content4\">\n          <Region configs={perRegion[\"advanced\"]} {state} />\n          <Region configs={perRegion[\"expert\"]} {state} />\n        </div>\n        <div slot=\"title5\">Configuration file</div>\n        <div slot=\"content5\">\n          <div>\n            Below, you'll find the raw configuration file in `.json`-format. This is mostly for\n            debugging purposes\n          </div>\n          <div class=\"literal-code\">\n            <FromHtml src={JSON.stringify($configuration, null, \"  \").replaceAll(\"\\n\", \"</br>\")} />\n          </div>\n\n          <ShowConversionMessages messages={$messages} />\n          <div>\n            The testobject (which is used to render the questions in the 'information panel' item\n            has the following tags:\n          </div>\n\n          <AllTagsPanel tags={state.testTags} />\n        </div>\n      </TabbedGroup>\n    </div>\n    {#if $highlightedItem !== undefined}\n      <FloatOver on:close={() => highlightedItem.setData(undefined)}>\n        <div>\n          <TagRenderingInput\n            path={$highlightedItem.path}\n            {state}\n            schema={$highlightedItem.schema}\n          />\n        </div>\n      </FloatOver>\n    {/if}\n  {/if}\n</div>\n","import { Utils } from \"../../Utils\"\nimport Constants from \"../../Models/Constants\"\nimport { LayerConfigJson } from \"../../Models/ThemeConfig/Json/LayerConfigJson\"\nimport { Store } from \"../../Logic/UIEventSource\"\n\nexport default class StudioServer {\n    private readonly url: string\n    private readonly _userId: Store<number>\n\n    constructor(url: string, userId: Store<number>) {\n        this.url = url\n        this._userId = userId\n    }\n\n    public async fetchOverview(): Promise<\n        {\n            id: string\n            owner: number\n            category: \"layers\" | \"themes\"\n        }[]\n    > {\n        const uid = this._userId.data\n        const { allFiles } = <{ allFiles: string[] }>(\n            await Utils.downloadJson(this.url + \"/overview\")\n        )\n        const layerOverview: {\n            id: string\n            owner: number | undefined\n            category: \"layers\" | \"themes\"\n        }[] = []\n        for (let file of allFiles) {\n            let parts = file.split(\"/\")\n            let owner = Number(parts[0])\n            if (!isNaN(owner)) {\n                parts.splice(0, 1)\n                file = file.substring(file.indexOf(\"/\") + 1)\n            } else {\n                owner = undefined\n            }\n            const category = <\"layers\" | \"themes\">parts[0]\n            const id = file.substring(file.lastIndexOf(\"/\") + 1, file.length - \".json\".length)\n            if (Constants.priviliged_layers.indexOf(<any>id) > 0) {\n                continue\n            }\n            layerOverview.push({ id, owner, category })\n        }\n        return layerOverview\n    }\n\n    async fetch(\n        layerId: string,\n        category: \"layers\" | \"themes\",\n        uid?: number\n    ): Promise<LayerConfigJson> {\n        try {\n            return await Utils.downloadJson(this.urlFor(layerId, category, uid))\n        } catch (e) {\n            return undefined\n        }\n    }\n    async delete(id: string, category: \"layers\" | \"themes\") {\n        if (id === undefined || id === \"\") {\n            return\n        }\n        await fetch(this.urlFor(id, category), {\n            method: \"DELETE\"\n        })\n    }\n    async update(id: string, config: string, category: \"layers\" | \"themes\") {\n        if (id === undefined || id === \"\") {\n            return\n        }\n        await fetch(this.urlFor(id, category), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json;charset=utf-8\",\n            },\n            body: config,\n        })\n    }\n\n    public layerUrl(id: string) {\n        return this.urlFor(id, \"layers\")\n    }\n\n    public urlFor(id: string, category: \"layers\" | \"themes\", uid?: number) {\n        uid ??= this._userId.data\n        const uidStr = uid !== undefined ? \"/\" + uid : \"\"\n        return `${this.url}${uidStr}/${category}/${id}/${id}.json`\n    }\n}\n","<script lang=\"ts\">\n  import Icon from \"./Icon.svelte\"\n\n  /**\n   * Renders a 'marker', which consists of multiple 'icons'\n   */\n  export let icons: { icon: string; color: string }[]\n</script>\n\n{#if icons !== undefined && icons.length > 0}\n  <div class=\"relative h-full w-full\">\n    {#each icons as icon}\n      <Icon icon={icon.icon} color={icon.color} />\n    {/each}\n  </div>\n{/if}\n","<script lang=\"ts\">\n    import { UIEventSource } from \"../../Logic/UIEventSource\"\n    import { OsmConnection } from \"../../Logic/Osm/OsmConnection\"\n    import Marker from \"../Map/Marker.svelte\"\n    import NextButton from \"../Base/NextButton.svelte\"\n    import { AllKnownLayouts } from \"../../Customizations/AllKnownLayouts\"\n    import { AllSharedLayers } from \"../../Customizations/AllSharedLayers\"\n    import { createEventDispatcher } from \"svelte\"\n\n    export let info: { id: string; owner: number }\n    export let category: \"layers\" | \"themes\"\n    export let osmConnection: OsmConnection\n\n    let displayName = UIEventSource.FromPromise(\n        osmConnection.getInformationAboutUser(info.owner),\n    ).mapD((response) => response.display_name)\n\n    let selfId = osmConnection.userDetails.mapD((ud) => ud.uid)\n\n    function fetchIconDescription(layerId): any {\n        if (category === \"themes\") {\n            return AllKnownLayouts.allKnownLayouts.get(layerId).icon\n        }\n        return AllSharedLayers.getSharedLayersConfigs().get(layerId)?._layerIcon\n    }\n\n    const dispatch = createEventDispatcher<{ layerSelected: string }>()\n</script>\n\n<NextButton clss=\"small\" on:click={() => dispatch(\"layerSelected\", info)}>\n  <div class=\"mr-1 h-4 w-4\">\n    <Marker icons={fetchIconDescription(info.id)} />\n  </div>\n  <b class=\"px-1\">{info.id}</b>\n  {#if info.owner && info.owner !== $selfId}\n    {#if $displayName}\n      (made by {$displayName}\n      {#if window.location.host.startsWith(\"127.0.0.1\")}\n        - {info.owner}\n      {/if}\n      )\n    {:else }\n      ({info.owner})\n    {/if}\n  {/if}\n</NextButton>\n","<script lang=\"ts\">\n  import { OsmConnection } from \"../../Logic/Osm/OsmConnection\"\n  import EditItemButton from \"./EditItemButton.svelte\"\n\n  export let layerIds: { id: string; owner: number }[]\n  export let category: \"layers\" | \"themes\" = \"layers\"\n  export let osmConnection: OsmConnection\n</script>\n\n{#if layerIds.length > 0}\n  <slot name=\"title\" />\n  <div class=\"flex flex-wrap\">\n    {#each Array.from(layerIds) as layer}\n      <EditItemButton info={layer} {category} {osmConnection} on:layerSelected />\n    {/each}\n  </div>\n{/if}\n","<script lang=\"ts\">\n  import BackButton from \"../Base/BackButton.svelte\"\n  import NextButton from \"../Base/NextButton.svelte\"\n  import { createEventDispatcher } from \"svelte\"\n\n  const dispatch = createEventDispatcher<{ back; next }>()\n  export let islast = false\n  export let isFirst = false\n  export let pageNumber: number = undefined\n  export let totalPages: number = undefined\n</script>\n\n<div class=\"link-underline flex h-full w-full flex-col justify-between\">\n  <div class=\"overflow-y-auto\">\n    <slot />\n  </div>\n\n  <div class=\"flex flex-col\">\n    {#if pageNumber !== undefined && totalPages !== undefined}\n      <div class=\"flex justify-end\">\n        <div class=\"subtle\">{pageNumber + 1}/{totalPages}</div>\n      </div>\n    {/if}\n    <div class=\"flex w-full\">\n      {#if !isFirst}\n        <BackButton clss=\"w-full\" on:click={() => dispatch(\"back\")}>Back</BackButton>\n      {:else}\n        <div class=\"w-full\" />\n      {/if}\n      <NextButton clss=\"primary w-full\" on:click={() => dispatch(\"next\")}>\n        {#if islast}\n          Finish\n        {:else}\n          Next\n        {/if}\n      </NextButton>\n    </div>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import nmd from \"nano-markdown\"\n  import { createEventDispatcher } from \"svelte\"\n  import WalkthroughStep from \"./WalkthroughStep.svelte\"\n  import FromHtml from \"../Base/FromHtml.svelte\"\n\n  /**\n   * Markdown\n   */\n  export let pages: string[]\n\n  let currentPage: number = 0\n\n  const dispatch = createEventDispatcher<{ done }>()\n\n  function step(incr: number) {\n    if (incr > 0 && currentPage + 1 === pages.length) {\n      dispatch(\"done\")\n      currentPage = 0\n      return\n    }\n    currentPage = Math.min(Math.max(0, currentPage + incr), pages.length)\n  }\n</script>\n\n<WalkthroughStep\n  on:back={() => step(-1)}\n  on:next={() => step(1)}\n  isFirst={currentPage === 0}\n  islast={currentPage + 1 === pages.length}\n  totalPages={pages.length}\n  pageNumber={currentPage}\n>\n  <FromHtml src={nmd(pages[currentPage])} />\n</WalkthroughStep>\n","<script lang=\"ts\">\n  import { EditThemeState } from \"./EditLayerState\"\n  import type { ConfigMeta } from \"./configMeta\"\n  import { ChevronRightIcon } from \"@rgossiaux/svelte-heroicons/solid\"\n  import type { ConversionMessage } from \"../../Models/ThemeConfig/Conversion/Conversion\"\n  import TabbedGroup from \"../Base/TabbedGroup.svelte\"\n  import ShowConversionMessages from \"./ShowConversionMessages.svelte\"\n  import Region from \"./Region.svelte\"\n\n  export let state: EditThemeState\n  let schema: ConfigMeta[] = state.schema.filter((schema) => schema.path.length > 0)\n  let config = state.configuration\n  let messages = state.messages\n  let hasErrors = messages.map(\n    (m: ConversionMessage[]) => m.filter((m) => m.level === \"error\").length\n  )\n  let title = state.getStoreFor([\"id\"])\n  const wl = window.location\n  const baseUrl = wl.protocol + \"//\" + wl.host + \"/theme.html?userlayout=\"\n\n  const perRegion: Record<string, ConfigMeta[]> = {}\n  for (const schemaElement of schema) {\n    const key = schemaElement.hints.group ?? \"no-group\"\n    const list = perRegion[key] ?? (perRegion[key] = [])\n    list.push(schemaElement)\n  }\n  console.log({ perRegion, schema })\n</script>\n\n<div class=\"flex h-screen flex-col\">\n  <div class=\"my-2 flex w-full justify-between\">\n    <slot />\n    <h3>Editing theme {$title}</h3>\n    {#if $hasErrors > 0}\n      <div class=\"alert\">{$hasErrors} errors detected</div>\n    {:else}\n      <a\n        class=\"primary button\"\n        href={baseUrl + state.server.urlFor($title, \"themes\")}\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        Try it out\n        <ChevronRightIcon class=\"h-6 w-6 shrink-0\" />\n      </a>\n    {/if}\n  </div>\n\n  <div class=\"m4 h-full overflow-y-auto\">\n    {Object.keys(perRegion).join(\";\")}\n    <TabbedGroup>\n      <div slot=\"title0\">Basic properties</div>\n      <div slot=\"content0\">\n        <Region configs={perRegion[\"basic\"]} path={[]} {state} title=\"Basic properties\" />\n        <Region configs={perRegion[\"start_location\"]} path={[]} {state} title=\"Start location\" />\n      </div>\n\n      <div slot=\"title1\">Layers</div>\n      <div slot=\"content1\">\n        <Region configs={perRegion[\"layers\"]} path={[]} {state} />\n      </div>\n      <div slot=\"title2\">Feature switches</div>\n      <div slot=\"content2\">\n        <Region configs={perRegion[\"feature_switches\"]} path={[]} {state} />\n      </div>\n\n      <div slot=\"title3\">Advanced options</div>\n      <div slot=\"content3\">\n        <Region configs={perRegion[\"advanced\"]} path={[]} {state} />\n      </div>\n\n      <div slot=\"title4\">Configuration file</div>\n      <div slot=\"content4\">\n        <div class=\"literal-code\">\n          {JSON.stringify($config)}\n        </div>\n\n        <ShowConversionMessages messages={$messages} />\n      </div>\n    </TabbedGroup>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import NextButton from \"./Base/NextButton.svelte\"\n  import { Store, UIEventSource } from \"../Logic/UIEventSource\"\n  import EditLayerState, { EditThemeState } from \"./Studio/EditLayerState\"\n  import EditLayer from \"./Studio/EditLayer.svelte\"\n  import Loading from \"../assets/svg/Loading.svelte\"\n  import StudioServer from \"./Studio/StudioServer\"\n  import LoginToggle from \"./Base/LoginToggle.svelte\"\n  import { OsmConnection } from \"../Logic/Osm/OsmConnection\"\n  import { QueryParameters } from \"../Logic/Web/QueryParameters\"\n\n  import layerSchemaRaw from \"../../src/assets/schemas/layerconfigmeta.json\"\n  import layoutSchemaRaw from \"../../src/assets/schemas/layoutconfigmeta.json\"\n\n  import If from \"./Base/If.svelte\"\n  import BackButton from \"./Base/BackButton.svelte\"\n  import ChooseLayerToEdit from \"./Studio/ChooseLayerToEdit.svelte\"\n  import FloatOver from \"./Base/FloatOver.svelte\"\n  import Walkthrough from \"./Walkthrough/Walkthrough.svelte\"\n  import * as intro from \"../assets/studio_introduction.json\"\n  import * as intro_tagrenderings from \"../assets/studio_tagrenderings_intro.json\"\n\n  import { QuestionMarkCircleIcon } from \"@babeard/svelte-heroicons/mini\"\n  import type { ConfigMeta } from \"./Studio/configMeta\"\n  import EditTheme from \"./Studio/EditTheme.svelte\"\n  import * as meta from \"../../package.json\"\n  import Checkbox from \"./Base/Checkbox.svelte\"\n  import { Utils } from \"../Utils\"\n  import Translations from \"./i18n/Translations\"\n  import Tr from \"./Base/Tr.svelte\"\n  import Add from \"../assets/svg/Add.svelte\"\n\n  export let studioUrl =\n    window.location.hostname === \"127.0.0.2\"\n      ? \"http://127.0.0.1:1235\"\n      : \"https://studio.mapcomplete.org\"\n\n  let osmConnection = new OsmConnection(\n    new OsmConnection({\n      oauth_token: QueryParameters.GetQueryParameter(\n        \"oauth_token\",\n        undefined,\n        \"Used to complete the login\"\n      ),\n    })\n  )\n  const expertMode = UIEventSource.asBoolean(\n    osmConnection.GetPreference(\"studio-expert-mode\", \"false\", {\n      documentation: \"Indicates if more options are shown in mapcomplete studio\",\n    })\n  )\n  expertMode.addCallbackAndRunD((expert) => console.log(\"Expert mode is\", expert))\n  const createdBy = osmConnection.userDetails.data.name\n  const uid = osmConnection.userDetails.map((ud) => ud?.uid)\n  const studio = new StudioServer(studioUrl, uid)\n\n  let layersWithErr = UIEventSource.FromPromiseWithErr(studio.fetchOverview())\n  let layers: Store<{ owner: number }[]> = layersWithErr.mapD((l) =>\n    l.success?.filter((l) => l.category === \"layers\")\n  )\n  let selfLayers = layers.mapD((ls) => ls.filter((l) => l.owner === uid.data), [uid])\n  let otherLayers = layers.mapD(\n    (ls) => ls.filter((l) => l.owner !== undefined && l.owner !== uid.data),\n    [uid]\n  )\n  let officialLayers = layers.mapD((ls) => ls.filter((l) => l.owner === undefined), [uid])\n\n  let themes: Store<{ owner: number }[]> = layersWithErr.mapD((l) =>\n    l.success?.filter((l) => l.category === \"themes\")\n  )\n  let selfThemes = themes.mapD((ls) => ls.filter((l) => l.owner === uid.data), [uid])\n  let otherThemes = themes.mapD(\n    (ls) => ls.filter((l) => l.owner !== undefined && l.owner !== uid.data),\n    [uid]\n  )\n  let officialThemes = themes.mapD((ls) => ls.filter((l) => l.owner === undefined), [uid])\n\n  let state:\n    | undefined\n    | \"edit_layer\"\n    | \"edit_theme\"\n    | \"editing_layer\"\n    | \"editing_theme\"\n    | \"loading\" = undefined\n\n  const layerSchema: ConfigMeta[] = <any>layerSchemaRaw\n  let editLayerState = new EditLayerState(layerSchema, studio, osmConnection, { expertMode })\n  let showIntro = editLayerState.showIntro\n\n  const layoutSchema: ConfigMeta[] = <any>layoutSchemaRaw\n  let editThemeState = new EditThemeState(layoutSchema, studio, { expertMode })\n\n  let layerId = editLayerState.configuration.map((layerConfig) => layerConfig.id)\n\n  const version = meta.version\n\n  async function editLayer(event: Event) {\n    const layerId: { owner: number; id: string } = event.detail\n    state = \"loading\"\n    editLayerState.startSavingUpdates(false)\n    editLayerState.configuration.setData(await studio.fetch(layerId.id, \"layers\", layerId.owner))\n    editLayerState.startSavingUpdates()\n    state = \"editing_layer\"\n  }\n\n  async function editTheme(event: Event) {\n    const id: { id: string; owner: number } = event.detail\n    state = \"loading\"\n    editThemeState.startSavingUpdates(false)\n    editThemeState.configuration.setData(await studio.fetch(id.id, \"themes\", id.owner))\n    editThemeState.startSavingUpdates()\n    state = \"editing_theme\"\n  }\n\n  async function createNewLayer() {\n    state = \"loading\"\n    const initialLayerConfig = {\n      credits: createdBy,\n      minzoom: 15,\n      pointRendering: [\n        {\n          location: [\"point\", \"centroid\"],\n          marker: [\n            {\n              icon: \"circle\",\n              color: \"white\",\n            },\n          ],\n        },\n      ],\n      tagRenderings: [\"images\"],\n      lineRendering: [\n        {\n          width: 1,\n          color: \"blue\",\n        },\n      ],\n    }\n    editLayerState.configuration.setData(initialLayerConfig)\n    editLayerState.startSavingUpdates()\n    state = \"editing_layer\"\n  }\n</script>\n\n<If condition={layersWithErr.map((d) => d?.error !== undefined)}>\n  <div>\n    <div class=\"alert\">\n      Something went wrong while contacting the MapComplete Studio Server: {$layersWithErr[\"error\"]}\n    </div>\n    The server might be offline. Please:\n    <ul>\n      <li>Try again in a few minutes</li>\n      <li>\n        Contact <a href=\"https://app.element.io/#/room/#MapComplete:matrix.org\">\n          the MapComplete community via the chat.\n        </a>\n        Someone might be able to help you\n      </li>\n      <li>\n        File <a href=\"https://github.com/pietervdvn/MapComplete/issues\">an issue</a>\n      </li>\n      <li>\n        Contact the devs via <a href=\"mailto:info@posteo.net\">email</a>\n      </li>\n    </ul>\n  </div>\n  <LoginToggle ignoreLoading={true} slot=\"else\" state={{ osmConnection }}>\n    <div slot=\"not-logged-in\">\n      <NextButton clss=\"primary\" on:click={() => osmConnection.AttemptLogin()}>\n        Please log in to use MapComplete Studio\n      </NextButton>\n    </div>\n    {#if state === undefined}\n      <div class=\"flex h-full flex-col justify-between p-4\">\n        <div class=\"flex w-full flex-col\">\n          <h1>MapComplete Studio</h1>\n\n          <NextButton on:click={() => (state = \"edit_layer\")}>Edit an existing layer</NextButton>\n          <NextButton on:click={() => createNewLayer()}>Create a new layer</NextButton>\n          <NextButton on:click={() => (state = \"edit_theme\")}>Edit a theme</NextButton>\n          <NextButton\n            on:click={() => {\n              editThemeState.configuration.setData({})\n              editThemeState.startSavingUpdates()\n              state = \"editing_theme\"\n            }}\n          >\n            Create a new theme\n          </NextButton>\n          <button\n            class=\"small\"\n            on:click={() => {\n              showIntro.setData(\"intro\")\n            }}\n          >\n            <QuestionMarkCircleIcon class=\"h-6 w-6\" />\n            Show the introduction again\n          </button>\n          <a class=\"button flex\" href={Utils.HomepageLink()}>\n            <Add class=\"h-6 w-6\" />\n            <Tr t={Translations.t.general.backToIndex} />\n          </a>\n        </div>\n        <div>\n          <Checkbox selected={expertMode}>Enable more options (expert mode)</Checkbox>\n          <span class=\"subtle\">MapComplete version {version}</span>\n        </div>\n      </div>\n    {:else if state === \"edit_layer\"}\n      <div class=\"m-4 flex flex-col\">\n        <BackButton\n          clss=\"small p-1\"\n          imageClass=\"w-8 h-8\"\n          on:click={() => {\n            state = undefined\n          }}\n        >\n          MapComplete Studio\n        </BackButton>\n        <h2>Choose a layer to edit</h2>\n        <ChooseLayerToEdit {osmConnection} layerIds={$selfLayers} on:layerSelected={editLayer}>\n          <h3 slot=\"title\">Your layers</h3>\n        </ChooseLayerToEdit>\n        <h3>Layers by other contributors</h3>\n        <ChooseLayerToEdit {osmConnection} layerIds={$otherLayers} on:layerSelected={editLayer} />\n\n        <h3>Official layers by MapComplete</h3>\n        <ChooseLayerToEdit\n          {osmConnection}\n          layerIds={$officialLayers}\n          on:layerSelected={editLayer}\n        />\n      </div>\n    {:else if state === \"edit_theme\"}\n      <div class=\"m-4 flex flex-col\">\n        <BackButton\n          clss=\"small p-1\"\n          imageClass=\"w-8 h-8\"\n          on:click={() => {\n            state = undefined\n          }}\n        >\n          MapComplete Studio\n        </BackButton>\n        <h2>Choose a theme to edit</h2>\n        <ChooseLayerToEdit {osmConnection} layerIds={$selfThemes} on:layerSelected={editTheme}>\n          <h3 slot=\"title\">Your themes</h3>\n        </ChooseLayerToEdit>\n        <h3>Themes by other contributors</h3>\n        <ChooseLayerToEdit {osmConnection} layerIds={$otherThemes} on:layerSelected={editTheme} />\n        <h3>Official themes by MapComplete</h3>\n        <ChooseLayerToEdit\n          {osmConnection}\n          layerIds={$officialThemes}\n          on:layerSelected={editTheme}\n        />\n      </div>\n    {:else if state === \"loading\"}\n      <div class=\"h-8 w-8\">\n        <Loading />\n      </div>\n    {:else if state === \"editing_layer\"}\n      <EditLayer state={editLayerState} backToStudio={() => {state = undefined}}>\n        <BackButton\n          clss=\"small p-1\"\n          imageClass=\"w-8 h-8\"\n          on:click={() => {\n            state = undefined\n          }}\n        >\n          MapComplete Studio\n        </BackButton>\n      </EditLayer>\n    {:else if state === \"editing_theme\"}\n      <EditTheme state={editThemeState}>\n        <BackButton\n          clss=\"small p-1\"\n          imageClass=\"w-8 h-8\"\n          on:click={() => {\n            state = undefined\n          }}\n        >\n          MapComplete Studio\n        </BackButton>\n      </EditTheme>\n    {/if}\n\n    {#if { intro, tagrenderings: intro_tagrenderings }[$showIntro]?.sections}\n      <FloatOver\n        on:close={() => {\n      showIntro.setData(\"no\")\n    }}\n      >\n        <div class=\"flex h-full p-4 pr-12\">\n          <Walkthrough\n            pages={{ intro, tagrenderings: intro_tagrenderings }[$showIntro]?.sections}\n            on:done={() => {\n          showIntro.setData(\"no\")\n        }}\n          />\n        </div>\n      </FloatOver>\n    {/if}\n\n  </LoginToggle>\n</If>\n","import SvelteUIElement from \"./Base/SvelteUIElement\"\nimport StudioGUI from \"./StudioGUI.svelte\"\n\nexport default class StudioGui {\n    public setup() {\n        new SvelteUIElement(StudioGUI, {}).SetClass(\"h-full\").AttachTo(\"main\")\n    }\n}\n\nnew StudioGui().setup()\n"],"names":["ctx","insert","target","svg","anchor","append","path","_AllSharedLayers","sharedLayers","layer","known_layers","parsed","LayerConfig","e","Utils","AllSharedLayers","__publicField","EditJsonState","schema","server","category","options","LocalStorageSource","UIEventSource","layerId","hl","config","id","enabled","entry","i","breadcrumb","key","store","v","value","noInitialSync","unsync","sch","part","origConfig","schemas","isUndefined","lastBreadcrumb","msgs","msg","pth","layers","questions","sharedQuestions","question","state","prepare","context","ConversionContext","EditLayerState","osmConnection","_","cleanArray","data","lBefore","cleaned","changed","tr","qtr","Pipe","PrepareLayer","ValidateLayer","trs","_a","_b","_d","_c","_e","_f","TagUtils","EditThemeState","PrepareTheme","ValidateTheme","ConfigMetaUtils","configMeta","t","t1_value","div1","div0","current","dirty","set_data","t1","message","$$props","create_if_block_2","if_block1","create_if_block_1","div","span","each_blocks","span1","b","span0","t3","t3_value","t5","t5_value","mightBeBoolean","type","startInEditModeIfUnset","isTranslation","rendervalue","helperArgs","inline","inlineValue","configJson","nmd","err","messages","TagRenderingConfig","startValue","startInEditMode","tags","onDestroy","tgs","t_value","create_if_block_4","ImmutableStore","tagrenderingeditable_changes","fromhtml_changes","create_if_block_5","create_if_block_3","div2","h3","each_blocks_1","perId","tagRendering","questions.tagRenderings","label","configs","x","c","description","click_handler","t2_value","t0","t0_value","t2","if_block0","create_if_block_6","if_block2","create_if_block","expertMode","defaultOption","hasBooleanOption","types","lastIsString","opt","chosenOption","existingValue","hasOverride","possibleTypes","outer","optionalMatches","numberOfMatches","requiredAttribute","a","directValue","subSchemas","subpath","$$invalidate","oldOption","o","cleanPath","p","crumble","button","button0","button1","create_if_block_7","create_if_block_9","create_if_block_10","title","singular","article","isTagRenderingBlock","subparts","currentValue","createItem","valueToSet","fusePath","subpartPath","newPath","toAdd","schemaForMultitype","del","swap","j","moveTo","source","$currentValue","values","show_if","schemabasedinput_changes","configsNoHidden","configsFiltered","$expertMode","if_block","firstPaths","messagesCount","parsedTag","exampleTags","pt","keys","thenText","thenTextEn","translation","editMode","$thenText","mappingConfigs","schemabasedfield0_changes","schemabasedfield1_changes","schemabasedfield2_changes","mappinginput_changes","schemabasedfield_changes","hasSeenIntro","onMount","allowQuestions","mappingsBuiltin","perLabel","labels","labelMapping","configBuiltin","mappings","topLevelItems","item","questionableTagRenderingSchemaRaw","initMappings","items","ignored","freeformSchemaAll","$allowQuestions","freeformSchema","missing","click_handler_2","t4_value","t6_value","li","t4","t6","region_changes","region0_changes","region1_changes","div3","alltagspanel_changes","tagrenderinginput_changes","layerSchema","layerSchemaRaw","backToStudio","hasErrors","m","configuration","allNames","meta","perRegion","region","wl","baseUrl","firstPathsFor","regionNames","pathNames","regionName","configForRequiredField","requiredFields","currentlyMissing","requiredField","highlightedItem","deleteLayer","StudioServer","url","userId","allFiles","layerOverview","file","parts","owner","Constants","uid","uidStr","icon_changes","icons","info","displayName","response","selfId","ud","fetchIconDescription","AllKnownLayouts","dispatch","createEventDispatcher","layerIds","islast","isFirst","pageNumber","totalPages","click_handler_1","walkthroughstep_changes","pages","currentPage","step","incr","back_handler","next_handler","schemaElement","ul","h2","h30","h31","Translations","attr","h1","intro","intro_tagrenderings","studioUrl","OsmConnection","QueryParameters","expert","createdBy","studio","layersWithErr","l","selfLayers","ls","otherLayers","officialLayers","themes","selfThemes","otherThemes","officialThemes","editLayerState","showIntro","layoutSchema","layoutSchemaRaw","editThemeState","layerConfig","version","meta.version","editLayer","event","editTheme","createNewLayer","initialLayerConfig","click_handler_3","func_1","d","StudioGui","SvelteUIElement","StudioGUI"],"mappings":"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"}