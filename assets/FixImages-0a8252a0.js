var Zl=Object.defineProperty;var Xl=(n,t,e)=>t in n?Zl(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var y=(n,t,e)=>(Xl(n,typeof t!="symbol"?t+"":t,e),e);import{U as k}from"./Utils-aa3ce114.js";import{F as Ce,a as F,d as Xn,L as Ps,C as P,b as nt,V as Yn,c as Yl,Q as ec}from"./Tr-ad9978df.js";import{B as oi,l as we,I as na}from"./Svg-51a6426a.js";import{U as Kt,a as tc,I as va,S as nc}from"./LocalStorageSource-f5e9c544.js";import{c as q,g as Us}from"./_commonjsHelpers-87174ba5.js";import{v as ic,c as oc}from"./package-7e47cb1c.js";var Fi={},ac={get exports(){return Fi},set exports(n){Fi=n}};/**
 * @license
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash exports="node" include="clone,merge,isEmpty,isArray,compact,each" -d`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(n,t){(function(){var e,i="4.15.0",o=200,a="Expected a function",r="__lodash_hash_undefined__",s=1,p=2,d=1/0,c=9007199254740991,h="[object Arguments]",m="[object Array]",f="[object Boolean]",v="[object Date]",u="[object Error]",$="[object Function]",S="[object GeneratorFunction]",R="[object Map]",C="[object Number]",D="[object Object]",T="[object Promise]",_="[object RegExp]",M="[object Set]",A="[object String]",I="[object Symbol]",B="[object WeakMap]",N="[object ArrayBuffer]",L="[object DataView]",Q="[object Float32Array]",V="[object Float64Array]",De="[object Int8Array]",ve="[object Int16Array]",qe="[object Int32Array]",Ae="[object Uint8Array]",E="[object Uint8ClampedArray]",G="[object Uint16Array]",ee="[object Uint32Array]",ne=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,pe=/^\w*$/,H=/^\./,te=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,re=/[\\^$.*+?()[\]{}|]/g,ie=/\\(\\)?/g,be=/\w*$/,_e=/^\[object .+?Constructor\]$/,he=/^(?:0|[1-9]\d*)$/,U={};U[Q]=U[V]=U[De]=U[ve]=U[qe]=U[Ae]=U[E]=U[G]=U[ee]=!0,U[h]=U[m]=U[N]=U[f]=U[L]=U[v]=U[u]=U[$]=U[R]=U[C]=U[D]=U[_]=U[M]=U[A]=U[B]=!1;var K={};K[h]=K[m]=K[N]=K[L]=K[f]=K[v]=K[Q]=K[V]=K[De]=K[ve]=K[qe]=K[R]=K[C]=K[D]=K[_]=K[M]=K[A]=K[I]=K[Ae]=K[E]=K[G]=K[ee]=!0,K[u]=K[$]=K[B]=!1;var pt=typeof q=="object"&&q&&q.Object===Object&&q,nn=typeof self=="object"&&self&&self.Object===Object&&self,Te=pt||nn||Function("return this")(),Ze=t&&!t.nodeType&&t,Xe=Ze&&!0&&n&&!n.nodeType&&n,kn=Xe&&Xe.exports===Ze,Jn=kn&&pt.process,ge=function(){try{return Jn&&Jn.binding("util")}catch{}}(),Qe=ge&&ge.isTypedArray;function lt(l,g){return l.set(g[0],g[1]),l}function on(l,g){return l.add(g),l}function Nt(l,g,b){switch(b.length){case 0:return l.call(g);case 1:return l.call(g,b[0]);case 2:return l.call(g,b[0],b[1]);case 3:return l.call(g,b[0],b[1],b[2])}return l.apply(g,b)}function an(l,g){for(var b=-1,w=l?l.length:0;++b<w&&g(l[b],b,l)!==!1;);return l}function _t(l,g){for(var b=-1,w=g.length,j=l.length;++b<w;)l[j+b]=g[b];return l}function ke(l,g,b,w){var j=-1,x=l?l.length:0;for(w&&x&&(b=l[++j]);++j<x;)b=g(b,l[j],j,l);return b}function Ft(l,g){for(var b=-1,w=l?l.length:0;++b<w;)if(g(l[b],b,l))return!0;return!1}function In(l){return function(g){return g==null?e:g[l]}}function En(l,g){for(var b=-1,w=Array(l);++b<l;)w[b]=g(b);return w}function rn(l){return function(g){return l(g)}}function On(l,g){return l==null?e:l[g]}function Rt(l){var g=!1;if(l!=null&&typeof l.toString!="function")try{g=!!(l+"")}catch{}return g}function Bt(l){var g=-1,b=Array(l.size);return l.forEach(function(w,j){b[++g]=[j,w]}),b}function Nn(l,g){return function(b){return l(g(b))}}function sn(l){var g=-1,b=Array(l.size);return l.forEach(function(w){b[++g]=w}),b}var Co=Array.prototype,_p=Function.prototype,li=Object.prototype,To=Te["__core-js_shared__"],nr=function(){var l=/[^.]+$/.exec(To&&To.keys&&To.keys.IE_PROTO||"");return l?"Symbol(src)_1."+l:""}(),ci=_p.toString,Fe=li.hasOwnProperty,Rp=ci.call(Object),Lt=li.toString,Dp=RegExp("^"+ci.call(Fe).replace(re,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),ir=kn?Te.Buffer:e,or=Te.Symbol,hi=Te.Uint8Array,ar=Nn(Object.getPrototypeOf,Object),Ap=Object.create,rr=li.propertyIsEnumerable,Sp=Co.splice,sr=Object.getOwnPropertySymbols,$p=ir?ir.isBuffer:e,dr=Nn(Object.keys,Object),pr=Math.max,wo=pn(Te,"DataView"),Fn=pn(Te,"Map"),_o=pn(Te,"Promise"),Ro=pn(Te,"Set"),Do=pn(Te,"WeakMap"),Bn=pn(Object,"create"),Mp=!rr.call({valueOf:1},"valueOf"),xp=Pt(wo),jp=Pt(Fn),qp=Pt(_o),kp=Pt(Ro),Jp=Pt(Do),gi=or?or.prototype:e,Ln=gi?gi.valueOf:e,lr=gi?gi.toString:e;function X(){}function Ht(l){var g=-1,b=l?l.length:0;for(this.clear();++g<b;){var w=l[g];this.set(w[0],w[1])}}function Ip(){this.__data__=Bn?Bn(null):{}}function Ep(l){return this.has(l)&&delete this.__data__[l]}function Op(l){var g=this.__data__;if(Bn){var b=g[l];return b===r?e:b}return Fe.call(g,l)?g[l]:e}function Np(l){var g=this.__data__;return Bn?g[l]!==e:Fe.call(g,l)}function Fp(l,g){var b=this.__data__;return b[l]=Bn&&g===e?r:g,this}Ht.prototype.clear=Ip,Ht.prototype.delete=Ep,Ht.prototype.get=Op,Ht.prototype.has=Np,Ht.prototype.set=Fp;function ct(l){var g=-1,b=l?l.length:0;for(this.clear();++g<b;){var w=l[g];this.set(w[0],w[1])}}function Bp(){this.__data__=[]}function Lp(l){var g=this.__data__,b=mi(g,l);if(b<0)return!1;var w=g.length-1;return b==w?g.pop():Sp.call(g,b,1),!0}function Hp(l){var g=this.__data__,b=mi(g,l);return b<0?e:g[b][1]}function Pp(l){return mi(this.__data__,l)>-1}function Up(l,g){var b=this.__data__,w=mi(b,l);return w<0?b.push([l,g]):b[w][1]=g,this}ct.prototype.clear=Bp,ct.prototype.delete=Lp,ct.prototype.get=Hp,ct.prototype.has=Pp,ct.prototype.set=Up;function ht(l){var g=-1,b=l?l.length:0;for(this.clear();++g<b;){var w=l[g];this.set(w[0],w[1])}}function zp(){this.__data__={hash:new Ht,map:new(Fn||ct),string:new Ht}}function Vp(l){return fi(this,l).delete(l)}function Gp(l){return fi(this,l).get(l)}function Wp(l){return fi(this,l).has(l)}function Qp(l,g){return fi(this,l).set(l,g),this}ht.prototype.clear=zp,ht.prototype.delete=Vp,ht.prototype.get=Gp,ht.prototype.has=Wp,ht.prototype.set=Qp;function ui(l){var g=-1,b=l?l.length:0;for(this.__data__=new ht;++g<b;)this.add(l[g])}function Kp(l){return this.__data__.set(l,r),this}function Zp(l){return this.__data__.has(l)}ui.prototype.add=ui.prototype.push=Kp,ui.prototype.has=Zp;function Ye(l){this.__data__=new ct(l)}function Xp(){this.__data__=new ct}function Yp(l){return this.__data__.delete(l)}function el(l){return this.__data__.get(l)}function tl(l){return this.__data__.has(l)}function nl(l,g){var b=this.__data__;if(b instanceof ct){var w=b.__data__;if(!Fn||w.length<o-1)return w.push([l,g]),this;b=this.__data__=new ht(w)}return b.set(l,g),this}Ye.prototype.clear=Xp,Ye.prototype.delete=Yp,Ye.prototype.get=el,Ye.prototype.has=tl,Ye.prototype.set=nl;function cr(l,g){var b=Je(l)||cn(l)?En(l.length,String):[],w=b.length,j=!!w;for(var x in l)(g||Fe.call(l,x))&&!(j&&(x=="length"||xo(x,w)))&&b.push(x);return b}function Ao(l,g,b){(b!==e&&!ln(l[g],b)||typeof g=="number"&&b===e&&!(g in l))&&(l[g]=b)}function hr(l,g,b){var w=l[g];(!(Fe.call(l,g)&&ln(w,b))||b===e&&!(g in l))&&(l[g]=b)}function mi(l,g){for(var b=l.length;b--;)if(ln(l[b][0],g))return b;return-1}function il(l,g){return l&&Mo(g,Dt(g),l)}function dn(l,g,b,w,j,x,J){var O;if(w&&(O=x?w(l,j,x,J):w(l)),O!==e)return O;if(!et(l))return l;var z=Je(l);if(z){if(O=Fl(l),!g)return yr(l,O)}else{var de=ot(l),oe=de==$||de==S;if(qo(l))return wl(l,g);if(de==D||de==h||oe&&!x){if(Rt(l))return x?l:{};if(O=Bl(oe?{}:l),!g)return Ml(l,il(O,l))}else{if(!K[de])return x?l:{};O=Ll(l,de,dn,g)}}J||(J=new Ye);var me=J.get(l);if(me)return me;if(J.set(l,O),!z)var ye=b?Il(l):Dt(l);return an(ye||l,function(Me,Se){ye&&(Se=Me,Me=l[Se]),hr(O,Se,dn(Me,g,b,w,Se,l,J))}),O}function ol(l){return et(l)?Ap(l):{}}var al=jl(sl),rl=ql();function sl(l,g){return l&&rl(l,g,Dt)}function gr(l,g){g=bi(g,l)?[g]:br(g);for(var b=0,w=g.length;l!=null&&b<w;)l=l[vi(g[b++])];return b&&b==w?l:e}function dl(l,g,b){var w=g(l);return Je(l)?w:_t(w,b(l))}function pl(l){return Lt.call(l)}function ll(l,g){return l!=null&&g in Object(l)}function So(l,g,b,w,j){return l===g?!0:l==null||g==null||!et(l)&&!hn(g)?l!==l&&g!==g:cl(l,g,So,b,w,j)}function cl(l,g,b,w,j,x){var J=Je(l),O=Je(g),z=m,de=m;J||(z=ot(l),z=z==h?D:z),O||(de=ot(g),de=de==h?D:de);var oe=z==D&&!Rt(l),me=de==D&&!Rt(g),ye=z==de;if(ye&&!oe)return x||(x=new Ye),J||Ri(l)?vr(l,g,b,w,j,x):kl(l,g,z,b,w,j,x);if(!(j&p)){var Me=oe&&Fe.call(l,"__wrapped__"),Se=me&&Fe.call(g,"__wrapped__");if(Me||Se){var At=Me?l.value():l,gt=Se?g.value():g;return x||(x=new Ye),b(At,gt,w,j,x)}}return ye?(x||(x=new Ye),Jl(l,g,b,w,j,x)):!1}function hl(l,g,b,w){var j=b.length,x=j,J=!w;if(l==null)return!x;for(l=Object(l);j--;){var O=b[j];if(J&&O[2]?O[1]!==l[O[0]]:!(O[0]in l))return!1}for(;++j<x;){O=b[j];var z=O[0],de=l[z],oe=O[1];if(J&&O[2]){if(de===e&&!(z in l))return!1}else{var me=new Ye;if(w)var ye=w(de,oe,z,l,g,me);if(!(ye===e?So(oe,de,w,s|p,me):ye))return!1}}return!0}function gl(l){if(!et(l)||Ul(l))return!1;var g=Ti(l)||Rt(l)?Dp:_e;return g.test(Pt(l))}function ul(l){return hn(l)&&wi(l.length)&&!!U[Lt.call(l)]}function ur(l){return typeof l=="function"?l:l==null?xr:typeof l=="object"?Je(l)?bl(l[0],l[1]):fl(l):jr(l)}function ml(l){if(!yi(l))return dr(l);var g=[];for(var b in Object(l))Fe.call(l,b)&&b!="constructor"&&g.push(b);return g}function mr(l){if(!et(l))return zl(l);var g=yi(l),b=[];for(var w in l)w=="constructor"&&(g||!Fe.call(l,w))||b.push(w);return b}function fl(l){var g=Ol(l);return g.length==1&&g[0][2]?wr(g[0][0],g[0][1]):function(b){return b===l||hl(b,l,g)}}function bl(l,g){return bi(l)&&Tr(g)?wr(vi(l),g):function(b){var w=Sr(b,l);return w===e&&w===g?$r(b,l):So(g,w,e,s|p)}}function fr(l,g,b,w,j){if(l!==g){if(!(Je(g)||Ri(g)))var x=mr(g);an(x||g,function(J,O){if(x&&(O=J,J=g[O]),et(J))j||(j=new Ye),yl(l,g,O,b,fr,w,j);else{var z=w?w(l[O],J,O+"",l,g,j):e;z===e&&(z=J),Ao(l,O,z)}})}}function yl(l,g,b,w,j,x,J){var O=l[b],z=g[b],de=J.get(z);if(de){Ao(l,b,de);return}var oe=x?x(O,z,b+"",l,g,J):e,me=oe===e;me&&(oe=z,Je(z)||Ri(z)?Je(O)?oe=O:jo(O)?oe=yr(O):(me=!1,oe=dn(z,!0)):Rr(z)||cn(z)?cn(O)?oe=Dr(O):!et(O)||w&&Ti(O)?(me=!1,oe=dn(z,!0)):oe=O:me=!1),me&&(J.set(z,oe),j(oe,z,w,x,J),J.delete(z)),Ao(l,b,oe)}function vl(l){return function(g){return gr(g,l)}}function Cl(l,g){return g=pr(g===e?l.length-1:g,0),function(){for(var b=arguments,w=-1,j=pr(b.length-g,0),x=Array(j);++w<j;)x[w]=b[g+w];w=-1;for(var J=Array(g+1);++w<g;)J[w]=b[w];return J[g]=x,Nt(l,this,J)}}function Tl(l){if(typeof l=="string")return l;if(_i(l))return lr?lr.call(l):"";var g=l+"";return g=="0"&&1/l==-d?"-0":g}function br(l){return Je(l)?l:Vl(l)}function wl(l,g){if(g)return l.slice();var b=new l.constructor(l.length);return l.copy(b),b}function $o(l){var g=new l.constructor(l.byteLength);return new hi(g).set(new hi(l)),g}function _l(l,g){var b=g?$o(l.buffer):l.buffer;return new l.constructor(b,l.byteOffset,l.byteLength)}function Rl(l,g,b){var w=g?b(Bt(l),!0):Bt(l);return ke(w,lt,new l.constructor)}function Dl(l){var g=new l.constructor(l.source,be.exec(l));return g.lastIndex=l.lastIndex,g}function Al(l,g,b){var w=g?b(sn(l),!0):sn(l);return ke(w,on,new l.constructor)}function Sl(l){return Ln?Object(Ln.call(l)):{}}function $l(l,g){var b=g?$o(l.buffer):l.buffer;return new l.constructor(b,l.byteOffset,l.length)}function yr(l,g){var b=-1,w=l.length;for(g||(g=Array(w));++b<w;)g[b]=l[b];return g}function Mo(l,g,b,w){b||(b={});for(var j=-1,x=g.length;++j<x;){var J=g[j],O=w?w(b[J],l[J],J,b,l):e;hr(b,J,O===e?l[J]:O)}return b}function Ml(l,g){return Mo(l,Cr(l),g)}function xl(l){return Cl(function(g,b){var w=-1,j=b.length,x=j>1?b[j-1]:e,J=j>2?b[2]:e;for(x=l.length>3&&typeof x=="function"?(j--,x):e,J&&Hl(b[0],b[1],J)&&(x=j<3?e:x,j=1),g=Object(g);++w<j;){var O=b[w];O&&l(g,O,w,x)}return g})}function jl(l,g){return function(b,w){if(b==null)return b;if(!Ut(b))return l(b,w);for(var j=b.length,x=g?j:-1,J=Object(b);(g?x--:++x<j)&&w(J[x],x,J)!==!1;);return b}}function ql(l){return function(g,b,w){for(var j=-1,x=Object(g),J=w(g),O=J.length;O--;){var z=J[l?O:++j];if(b(x[z],z,x)===!1)break}return g}}function vr(l,g,b,w,j,x){var J=j&p,O=l.length,z=g.length;if(O!=z&&!(J&&z>O))return!1;var de=x.get(l);if(de&&x.get(g))return de==g;var oe=-1,me=!0,ye=j&s?new ui:e;for(x.set(l,g),x.set(g,l);++oe<O;){var Me=l[oe],Se=g[oe];if(w)var At=J?w(Se,Me,oe,g,l,x):w(Me,Se,oe,l,g,x);if(At!==e){if(At)continue;me=!1;break}if(ye){if(!Ft(g,function(gt,zt){if(!ye.has(zt)&&(Me===gt||b(Me,gt,w,j,x)))return ye.add(zt)})){me=!1;break}}else if(!(Me===Se||b(Me,Se,w,j,x))){me=!1;break}}return x.delete(l),x.delete(g),me}function kl(l,g,b,w,j,x,J){switch(b){case L:if(l.byteLength!=g.byteLength||l.byteOffset!=g.byteOffset)return!1;l=l.buffer,g=g.buffer;case N:return!(l.byteLength!=g.byteLength||!w(new hi(l),new hi(g)));case f:case v:case C:return ln(+l,+g);case u:return l.name==g.name&&l.message==g.message;case _:case A:return l==g+"";case R:var O=Bt;case M:var z=x&p;if(O||(O=sn),l.size!=g.size&&!z)return!1;var de=J.get(l);if(de)return de==g;x|=s,J.set(l,g);var oe=vr(O(l),O(g),w,j,x,J);return J.delete(l),oe;case I:if(Ln)return Ln.call(l)==Ln.call(g)}return!1}function Jl(l,g,b,w,j,x){var J=j&p,O=Dt(l),z=O.length,de=Dt(g),oe=de.length;if(z!=oe&&!J)return!1;for(var me=z;me--;){var ye=O[me];if(!(J?ye in g:Fe.call(g,ye)))return!1}var Me=x.get(l);if(Me&&x.get(g))return Me==g;var Se=!0;x.set(l,g),x.set(g,l);for(var At=J;++me<z;){ye=O[me];var gt=l[ye],zt=g[ye];if(w)var Jr=J?w(zt,gt,ye,g,l,x):w(gt,zt,ye,l,g,x);if(!(Jr===e?gt===zt||b(gt,zt,w,j,x):Jr)){Se=!1;break}At||(At=ye=="constructor")}if(Se&&!At){var Di=l.constructor,Ai=g.constructor;Di!=Ai&&"constructor"in l&&"constructor"in g&&!(typeof Di=="function"&&Di instanceof Di&&typeof Ai=="function"&&Ai instanceof Ai)&&(Se=!1)}return x.delete(l),x.delete(g),Se}function Il(l){return dl(l,Dt,Cr)}function El(){var l=X.iteratee||ko;return l=l===ko?ur:l,arguments.length?l(arguments[0],arguments[1]):l}function fi(l,g){var b=l.__data__;return Pl(g)?b[typeof g=="string"?"string":"hash"]:b.map}function Ol(l){for(var g=Dt(l),b=g.length;b--;){var w=g[b],j=l[w];g[b]=[w,j,Tr(j)]}return g}function pn(l,g){var b=On(l,g);return gl(b)?b:e}var Cr=sr?Nn(sr,Object):qr,ot=pl;(wo&&ot(new wo(new ArrayBuffer(1)))!=L||Fn&&ot(new Fn)!=R||_o&&ot(_o.resolve())!=T||Ro&&ot(new Ro)!=M||Do&&ot(new Do)!=B)&&(ot=function(l){var g=Lt.call(l),b=g==D?l.constructor:e,w=b?Pt(b):e;if(w)switch(w){case xp:return L;case jp:return R;case qp:return T;case kp:return M;case Jp:return B}return g});function Nl(l,g,b){g=bi(g,l)?[g]:br(g);for(var w,j=-1,J=g.length;++j<J;){var x=vi(g[j]);if(!(w=l!=null&&b(l,x)))break;l=l[x]}if(w)return w;var J=l?l.length:0;return!!J&&wi(J)&&xo(x,J)&&(Je(l)||cn(l))}function Fl(l){var g=l.length,b=l.constructor(g);return g&&typeof l[0]=="string"&&Fe.call(l,"index")&&(b.index=l.index,b.input=l.input),b}function Bl(l){return typeof l.constructor=="function"&&!yi(l)?ol(ar(l)):{}}function Ll(l,g,b,w){var j=l.constructor;switch(g){case N:return $o(l);case f:case v:return new j(+l);case L:return _l(l,w);case Q:case V:case De:case ve:case qe:case Ae:case E:case G:case ee:return $l(l,w);case R:return Rl(l,w,b);case C:case A:return new j(l);case _:return Dl(l);case M:return Al(l,w,b);case I:return Sl(l)}}function xo(l,g){return g=g??c,!!g&&(typeof l=="number"||he.test(l))&&l>-1&&l%1==0&&l<g}function Hl(l,g,b){if(!et(b))return!1;var w=typeof g;return(w=="number"?Ut(b)&&xo(g,b.length):w=="string"&&g in b)?ln(b[g],l):!1}function bi(l,g){if(Je(l))return!1;var b=typeof l;return b=="number"||b=="symbol"||b=="boolean"||l==null||_i(l)?!0:pe.test(l)||!ne.test(l)||g!=null&&l in Object(g)}function Pl(l){var g=typeof l;return g=="string"||g=="number"||g=="symbol"||g=="boolean"?l!=="__proto__":l===null}function Ul(l){return!!nr&&nr in l}function yi(l){var g=l&&l.constructor,b=typeof g=="function"&&g.prototype||li;return l===b}function Tr(l){return l===l&&!et(l)}function wr(l,g){return function(b){return b==null?!1:b[l]===g&&(g!==e||l in Object(b))}}function zl(l){var g=[];if(l!=null)for(var b in Object(l))g.push(b);return g}var Vl=Ci(function(l){l=Ar(l);var g=[];return H.test(l)&&g.push(""),l.replace(te,function(b,w,j,x){g.push(j?x.replace(ie,"$1"):w||b)}),g});function vi(l){if(typeof l=="string"||_i(l))return l;var g=l+"";return g=="0"&&1/l==-d?"-0":g}function Pt(l){if(l!=null){try{return ci.call(l)}catch{}try{return l+""}catch{}}return""}function Gl(l){for(var g=-1,b=l?l.length:0,w=0,j=[];++g<b;){var x=l[g];x&&(j[w++]=x)}return j}function _r(l,g){var b=Je(l)?an:al;return b(l,El(g,3))}function Ci(l,g){if(typeof l!="function"||g&&typeof g!="function")throw new TypeError(a);var b=function(){var w=arguments,j=g?g.apply(this,w):w[0],x=b.cache;if(x.has(j))return x.get(j);var J=l.apply(this,w);return b.cache=x.set(j,J),J};return b.cache=new(Ci.Cache||ht),b}Ci.Cache=ht;function Wl(l){return dn(l,!1,!0)}function ln(l,g){return l===g||l!==l&&g!==g}function cn(l){return jo(l)&&Fe.call(l,"callee")&&(!rr.call(l,"callee")||Lt.call(l)==h)}var Je=Array.isArray;function Ut(l){return l!=null&&wi(l.length)&&!Ti(l)}function jo(l){return hn(l)&&Ut(l)}var qo=$p||kr;function Ql(l){if(Ut(l)&&(Je(l)||typeof l=="string"||typeof l.splice=="function"||qo(l)||cn(l)))return!l.length;var g=ot(l);if(g==R||g==M)return!l.size;if(Mp||yi(l))return!dr(l).length;for(var b in l)if(Fe.call(l,b))return!1;return!0}function Ti(l){var g=et(l)?Lt.call(l):"";return g==$||g==S}function wi(l){return typeof l=="number"&&l>-1&&l%1==0&&l<=c}function et(l){var g=typeof l;return!!l&&(g=="object"||g=="function")}function hn(l){return!!l&&typeof l=="object"}function Rr(l){if(!hn(l)||Lt.call(l)!=D||Rt(l))return!1;var g=ar(l);if(g===null)return!0;var b=Fe.call(g,"constructor")&&g.constructor;return typeof b=="function"&&b instanceof b&&ci.call(b)==Rp}function _i(l){return typeof l=="symbol"||hn(l)&&Lt.call(l)==I}var Ri=Qe?rn(Qe):ul;function Dr(l){return Mo(l,Mr(l))}function Ar(l){return l==null?"":Tl(l)}function Sr(l,g,b){var w=l==null?e:gr(l,g);return w===e?b:w}function $r(l,g){return l!=null&&Nl(l,g,ll)}function Dt(l){return Ut(l)?cr(l):ml(l)}function Mr(l){return Ut(l)?cr(l,!0):mr(l)}var Kl=xl(function(l,g,b){fr(l,g,b)});function xr(l){return l}function ko(l){return ur(typeof l=="function"?l:dn(l,!0))}function jr(l){return bi(l)?In(vi(l)):vl(l)}function qr(){return[]}function kr(){return!1}X.compact=Gl,X.iteratee=ko,X.keys=Dt,X.keysIn=Mr,X.memoize=Ci,X.merge=Kl,X.property=jr,X.toPlainObject=Dr,X.clone=Wl,X.eq=ln,X.forEach=_r,X.get=Sr,X.hasIn=$r,X.identity=xr,X.isArguments=cn,X.isArray=Je,X.isArrayLike=Ut,X.isArrayLikeObject=jo,X.isBuffer=qo,X.isEmpty=Ql,X.isFunction=Ti,X.isLength=wi,X.isObject=et,X.isObjectLike=hn,X.isPlainObject=Rr,X.isSymbol=_i,X.isTypedArray=Ri,X.stubArray=qr,X.stubFalse=kr,X.toString=Ar,X.each=_r,X.VERSION=i,Xe&&((Xe.exports=X)._=X,Ze._=X)}).call(q)})(ac,Fi);var rc=qi;function qi(n,t){var e=n&&n.type,i;if(e==="FeatureCollection")for(i=0;i<n.features.length;i++)qi(n.features[i],t);else if(e==="GeometryCollection")for(i=0;i<n.geometries.length;i++)qi(n.geometries[i],t);else if(e==="Feature")qi(n.geometry,t);else if(e==="Polygon")Ir(n.coordinates,t);else if(e==="MultiPolygon")for(i=0;i<n.coordinates.length;i++)Ir(n.coordinates[i],t);return n}function Ir(n,t){if(n.length!==0){Er(n[0],t);for(var e=1;e<n.length;e++)Er(n[e],!t)}}function Er(n,t){for(var e=0,i=0,o=0,a=n.length,r=a-1;o<a;r=o++){var s=(n[o][0]-n[r][0])*(n[r][1]+n[o][1]),p=e+s;i+=Math.abs(e)>=Math.abs(s)?e-p+s:s-p+e,e=p}e+i>=0!=!!t&&n.reverse()}var ia={},sc={get exports(){return ia},set exports(n){ia=n}};const dc=[{key:"building",polygon:"all"},{key:"highway",polygon:"whitelist",values:["services","rest_area","escape","elevator"]},{key:"natural",polygon:"blacklist",values:["coastline","cliff","ridge","arete","tree_row"]},{key:"landuse",polygon:"all"},{key:"waterway",polygon:"whitelist",values:["riverbank","dock","boatyard","dam"]},{key:"amenity",polygon:"all"},{key:"leisure",polygon:"all"},{key:"barrier",polygon:"whitelist",values:["city_wall","ditch","hedge","retaining_wall","wall","spikes"]},{key:"railway",polygon:"whitelist",values:["station","turntable","roundhouse","platform"]},{key:"area",polygon:"all"},{key:"boundary",polygon:"all"},{key:"man_made",polygon:"blacklist",values:["cutline","embankment","pipeline"]},{key:"power",polygon:"whitelist",values:["plant","substation","generator","transformer"]},{key:"place",polygon:"all"},{key:"shop",polygon:"all"},{key:"aeroway",polygon:"blacklist",values:["taxiway"]},{key:"tourism",polygon:"all"},{key:"historic",polygon:"all"},{key:"public_transport",polygon:"all"},{key:"office",polygon:"all"},{key:"building:part",polygon:"all"},{key:"military",polygon:"all"},{key:"ruins",polygon:"all"},{key:"area:highway",polygon:"all"},{key:"craft",polygon:"all"},{key:"golf",polygon:"all"},{key:"indoor",polygon:"all"}];(function(n){n.exports=dc})(sc);var W=Fi,Si=rc,ki={};ia.forEach(function(n){if(n.polygon==="all")ki[n.key]=!0;else{var t=n.polygon==="whitelist"?"included_values":"excluded_values",e={};n.values.forEach(function(i){e[i]=!0}),ki[n.key]={},ki[n.key][t]=e}});function pc(n,t){return(n.version||t.version)&&n.version!==t.version?(+n.version||0)>(+t.version||0)?n:t:W.merge(n,t)}var Bi={};Bi=function(n,t,e){t=W.merge({verbose:!1,flatProperties:!0,uninterestingTags:{source:!0,source_ref:!0,"source:ref":!0,history:!0,attribution:!0,created_by:!0,"tiger:county":!0,"tiger:tlid":!0,"tiger:upload_uuid":!0},polygonFeatures:ki,deduplicator:pc},t);var i;return typeof XMLDocument<"u"&&n instanceof XMLDocument||typeof XMLDocument>"u"&&n.childNodes?i=a(n):i=o(n),i;function o(p){var d=new Array,c=new Array,h=new Array;function m(T){var _=W.clone(T);_.lat=T.center.lat,_.lon=T.center.lon,_.__is_center_placeholder=!0,d.push(_)}function f(T){var _=W.clone(T);_.nodes=[];function M(A,I,B){var N={type:"node",id:"_"+_.type+"/"+_.id+"bounds"+B,lat:A,lon:I};_.nodes.push(N.id),d.push(N)}M(_.bounds.minlat,_.bounds.minlon,1),M(_.bounds.maxlat,_.bounds.minlon,2),M(_.bounds.maxlat,_.bounds.maxlon,3),M(_.bounds.minlat,_.bounds.maxlon,4),_.nodes.push(_.nodes[0]),_.__is_bounds_placeholder=!0,c.push(_)}function v(T){function _(M,A,I){var B={type:"node",id:I,lat:M,lon:A};d.push(B)}W.isArray(T.nodes)||(T.nodes=T.geometry.map(function(M){return M!==null?"_anonymous@"+M.lat+"/"+M.lon:"_anonymous@unknown_location"})),T.geometry.forEach(function(M,A){M&&_(M.lat,M.lon,T.nodes[A])})}function u(T){function _(A,I,B){var N={type:"node",id:B,lat:A,lon:I};d.push(N)}function M(A,I){if(c.some(function(L){return L.type=="way"&&L.id==I}))return;var B={type:"way",id:I,nodes:[]};function N(L,Q){var V={type:"node",id:"_anonymous@"+L+"/"+Q,lat:L,lon:Q};B.nodes.push(V.id),d.push(V)}A.forEach(function(L){L?N(L.lat,L.lon):B.nodes.push(void 0)}),c.push(B)}T.members.forEach(function(A,I){A.type=="node"?A.lat&&_(A.lat,A.lon,A.ref):A.type=="way"&&A.geometry&&(A.ref="_fullGeom"+A.ref,M(A.geometry,A.ref))})}for(var $=0;$<p.elements.length;$++)switch(p.elements[$].type){case"node":var S=p.elements[$];d.push(S);break;case"way":var R=W.clone(p.elements[$]);R.nodes=W.clone(R.nodes),c.push(R),R.center&&m(R),R.geometry?v(R):R.bounds&&f(R);break;case"relation":var C=W.clone(p.elements[$]);C.members=W.clone(C.members),h.push(C);var D=C.members&&C.members.some(function(T){return T.type=="node"&&T.lat||T.type=="way"&&T.geometry&&T.geometry.length>0});C.center&&m(C),D?u(C):C.bounds&&f(C);break}return r(d,c,h)}function a(p){var d=new Array,c=new Array,h=new Array;function m(C,D,T){C.hasAttribute(T)&&(D[T]=C.getAttribute(T))}function f(C,D){var T=W.clone(C);m(D,T,"lat"),m(D,T,"lon"),T.__is_center_placeholder=!0,d.push(T)}function v(C,D){var T=W.clone(C);T.nodes=[];function _(M,A,I){var B={type:"node",id:"_"+T.type+"/"+T.id+"bounds"+I,lat:M,lon:A};T.nodes.push(B.id),d.push(B)}_(D.getAttribute("minlat"),D.getAttribute("minlon"),1),_(D.getAttribute("maxlat"),D.getAttribute("minlon"),2),_(D.getAttribute("maxlat"),D.getAttribute("maxlon"),3),_(D.getAttribute("minlat"),D.getAttribute("maxlon"),4),T.nodes.push(T.nodes[0]),T.__is_bounds_placeholder=!0,c.push(T)}function u(C,D){function T(_,M,A){var I={type:"node",id:A,lat:_,lon:M};return d.push(I),I.id}W.isArray(C.nodes)||(C.nodes=[],W.each(D,function(_,M){C.nodes.push("_anonymous@"+_.getAttribute("lat")+"/"+_.getAttribute("lon"))})),W.each(D,function(_,M){_.getAttribute("lat")&&T(_.getAttribute("lat"),_.getAttribute("lon"),C.nodes[M])})}function $(C,D){function T(M,A,I){var B={type:"node",id:I,lat:M,lon:A};d.push(B)}function _(M,A){if(c.some(function(N){return N.type=="way"&&N.id==A}))return;var I={type:"way",id:A,nodes:[]};function B(N,L){var Q={type:"node",id:"_anonymous@"+N+"/"+L,lat:N,lon:L};I.nodes.push(Q.id),d.push(Q)}W.each(M,function(N){N.getAttribute("lat")?B(N.getAttribute("lat"),N.getAttribute("lon")):I.nodes.push(void 0)}),c.push(I)}W.each(D,function(M,A){C.members[A].type=="node"?M.getAttribute("lat")&&T(M.getAttribute("lat"),M.getAttribute("lon"),C.members[A].ref):C.members[A].type=="way"&&M.getElementsByTagName("nd").length>0&&(C.members[A].ref="_fullGeom"+C.members[A].ref,_(M.getElementsByTagName("nd"),C.members[A].ref))})}W.each(p.getElementsByTagName("node"),function(C,D){var T={};W.each(C.getElementsByTagName("tag"),function(M){T[M.getAttribute("k")]=M.getAttribute("v")});var _={type:"node"};m(C,_,"id"),m(C,_,"lat"),m(C,_,"lon"),m(C,_,"version"),m(C,_,"timestamp"),m(C,_,"changeset"),m(C,_,"uid"),m(C,_,"user"),W.isEmpty(T)||(_.tags=T),d.push(_)});var S,R;return W.each(p.getElementsByTagName("way"),function(C,D){var T={},_=[];W.each(C.getElementsByTagName("tag"),function(I){T[I.getAttribute("k")]=I.getAttribute("v")});var M=!1;W.each(C.getElementsByTagName("nd"),function(I,B){var N;(N=I.getAttribute("ref"))&&(_[B]=N),!M&&I.getAttribute("lat")&&(M=!0)});var A={type:"way"};m(C,A,"id"),m(C,A,"version"),m(C,A,"timestamp"),m(C,A,"changeset"),m(C,A,"uid"),m(C,A,"user"),_.length>0&&(A.nodes=_),W.isEmpty(T)||(A.tags=T),(S=C.getElementsByTagName("center")[0])&&f(A,S),M?u(A,C.getElementsByTagName("nd")):(R=C.getElementsByTagName("bounds")[0])&&v(A,R),c.push(A)}),W.each(p.getElementsByTagName("relation"),function(C,D){var T={},_=[];W.each(C.getElementsByTagName("tag"),function(I){T[I.getAttribute("k")]=I.getAttribute("v")});var M=!1;W.each(C.getElementsByTagName("member"),function(I,B){_[B]={},m(I,_[B],"ref"),m(I,_[B],"role"),m(I,_[B],"type"),(!M&&_[B].type=="node"&&I.getAttribute("lat")||_[B].type=="way"&&I.getElementsByTagName("nd").length>0)&&(M=!0)});var A={type:"relation"};m(C,A,"id"),m(C,A,"version"),m(C,A,"timestamp"),m(C,A,"changeset"),m(C,A,"uid"),m(C,A,"user"),_.length>0&&(A.members=_),W.isEmpty(T)||(A.tags=T),(S=C.getElementsByTagName("center")[0])&&f(A,S),M?$(A,C.getElementsByTagName("member")):(R=C.getElementsByTagName("bounds")[0])&&v(A,R),h.push(A)}),r(d,c,h)}function r(p,d,c){function h(ne,pe){if(typeof pe!="object"&&(pe={}),typeof t.uninterestingTags=="function")return!t.uninterestingTags(ne,pe);for(var H in ne)if(t.uninterestingTags[H]!==!0&&!(pe[H]===!0||pe[H]===ne[H]))return!0;return!1}function m(ne){var pe={timestamp:ne.timestamp,version:ne.version,changeset:ne.changeset,user:ne.user,uid:ne.uid};for(var H in pe)pe[H]===void 0&&delete pe[H];return pe}for(var f=new Object,v=new Object,u=0;u<p.length;u++){var $=p[u];f[$.id]!==void 0&&($=t.deduplicator($,f[$.id])),f[$.id]=$,typeof $.tags<"u"&&h($.tags)&&(v[$.id]=!0)}for(var u=0;u<c.length;u++)if(W.isArray(c[u].members))for(var S=0;S<c[u].members.length;S++)c[u].members[S].type=="node"&&(v[c[u].members[S].ref]=!0);for(var R=new Object,C=new Object,u=0;u<d.length;u++){var D=d[u];if(R[D.id]&&(D=t.deduplicator(D,R[D.id])),R[D.id]=D,W.isArray(D.nodes))for(var S=0;S<D.nodes.length;S++)typeof D.nodes[S]!="object"&&(C[D.nodes[S]]=!0,D.nodes[S]=f[D.nodes[S]])}var T=new Array;for(var _ in f){var $=f[_];(!C[_]||v[_])&&T.push($)}for(var M=new Array,u=0;u<c.length;u++){var A=c[u];M[A.id]&&(A=t.deduplicator(A,M[A.id])),M[A.id]=A}var I={node:{},way:{},relation:{}};for(var _ in M){var A=M[_];if(!W.isArray(A.members)){t.verbose&&console.warn("Relation",A.type+"/"+A.id,"ignored because it has no members");continue}for(var S=0;S<A.members.length;S++){var B=A.members[S].type,N=A.members[S].ref;if(typeof N!="number"&&(N=N.replace("_fullGeom","")),!I[B]){t.verbose&&console.warn("Relation",A.type+"/"+A.id,"member",B+"/"+N,"ignored because it has an invalid type");continue}typeof I[B][N]>"u"&&(I[B][N]=[]),I[B][N].push({role:A.members[S].role,rel:A.id,reltags:A.tags})}}var L,Q=[];for(u=0;u<T.length;u++){if(typeof T[u].lon>"u"||typeof T[u].lat>"u"){t.verbose&&console.warn("POI",T[u].type+"/"+T[u].id,"ignored because it lacks coordinates");continue}var V={type:"Feature",id:T[u].type+"/"+T[u].id,properties:{type:T[u].type,id:T[u].id,tags:T[u].tags||{},relations:I.node[T[u].id]||[],meta:m(T[u])},geometry:{type:"Point",coordinates:[+T[u].lon,+T[u].lat]}};T[u].__is_center_placeholder&&(V.properties.geometry="center"),e?e(V):Q.push(V)}for(var De=[],ve=[],u=0;u<c.length;u++)if(M[c[u].id]===c[u]){if(typeof c[u].tags<"u"&&(c[u].tags.type=="route"||c[u].tags.type=="waterway")){let pe=function(H){var te=!1,re;re=H.members.filter(function(he){return he.type==="way"}),re=re.map(function(he){var U=R[he.ref];if(U===void 0||U.nodes===void 0){t.verbose&&console.warn("Route "+H.type+"/"+H.id,"tainted by a missing or incomplete  way",he.type+"/"+he.ref),te=!0;return}return{id:he.ref,role:he.role,way:U,nodes:U.nodes.filter(function(K){return K!==void 0?!0:(te=!0,t.verbose&&console.warn("Route",H.type+"/"+H.id,"tainted by a way",he.type+"/"+he.ref,"with a missing node"),!1)})}}),re=W.compact(re);var ie;ie=Jo(re);var be=[];if(be=W.compact(ie.map(function(he){return W.compact(he.map(function(U){return[+U.lon,+U.lat]}))})),be.length==0)return t.verbose&&console.warn("Route",H.type+"/"+H.id,"contains no coordinates"),!1;var _e={type:"Feature",id:H.type+"/"+H.id,properties:{type:H.type,id:H.id,tags:H.tags||{},relations:I[H.type][H.id]||[],meta:m(H)},geometry:{type:be.length===1?"LineString":"MultiLineString",coordinates:be.length===1?be[0]:be}};return te&&(t.verbose&&console.warn("Route",H.type+"/"+H.id,"is tainted"),_e.properties.tainted=!0),_e};if(!W.isArray(c[u].members)){t.verbose&&console.warn("Route",c[u].type+"/"+c[u].id,"ignored because it has no members");continue}if(c[u].members.forEach(function(H){R[H.ref]&&!h(R[H.ref].tags)&&(R[H.ref].is_skippablerelationmember=!0)}),V=pe(c[u]),V===!1){t.verbose&&console.warn("Route relation",c[u].type+"/"+c[u].id,"ignored because it has invalid geometry");continue}e?e(Si(V)):ve.push(V)}if(typeof c[u].tags<"u"&&(c[u].tags.type=="multipolygon"||c[u].tags.type=="boundary")){let H=function(te,re){var ie=!1,be=Ae?"way":"relation",_e=typeof te.id=="number"?te.id:+te.id.replace("_fullGeom",""),he;he=re.members.filter(function(ge){return ge.type==="way"}),he=he.map(function(ge){var Qe=R[ge.ref];if(Qe===void 0||Qe.nodes===void 0){t.verbose&&console.warn("Multipolygon",be+"/"+_e,"tainted by a missing or incomplete way",ge.type+"/"+ge.ref),ie=!0;return}return{id:ge.ref,role:ge.role||"outer",way:Qe,nodes:Qe.nodes.filter(function(lt){return lt!==void 0?!0:(ie=!0,t.verbose&&console.warn("Multipolygon",be+"/"+_e,"tainted by a way",ge.type+"/"+ge.ref,"with a missing node"),!1)})}}),he=W.compact(he);var U,K;U=Jo(he.filter(function(ge){return ge.role==="outer"})),K=Jo(he.filter(function(ge){return ge.role==="inner"}));var pt;function nn(ge){var Qe=function(_t,ke){for(var Ft=0;Ft<ke.length;Ft++)if(on(ke[Ft],_t))return!0;return!1},lt=function(_t){return _t.map(function(ke){return[+ke.lat,+ke.lon]})},on=function(_t,ke){for(var Ft=_t[0],In=_t[1],En=!1,rn=0,On=ke.length-1;rn<ke.length;On=rn++){var Rt=ke[rn][0],Bt=ke[rn][1],Nn=ke[On][0],sn=ke[On][1],Co=Bt>In!=sn>In&&Ft<(Nn-Rt)*(In-Bt)/(sn-Bt)+Rt;Co&&(En=!En)}return En},Nt,an;for(ge=lt(ge),Nt=0;Nt<U.length;Nt++)if(an=lt(U[Nt]),Qe(an,ge))return Nt}pt=U.map(function(ge){return[ge]});for(var Te=0;Te<K.length;Te++){var Ze=nn(K[Te]);Ze!==void 0?pt[Ze].push(K[Te]):t.verbose&&console.warn("Multipolygon",be+"/"+_e,"contains an inner ring with no containing outer")}var Xe=[];if(Xe=W.compact(pt.map(function(ge){var Qe=W.compact(ge.map(function(lt){if(lt.length<4){t.verbose&&console.warn("Multipolygon",be+"/"+_e,"contains a ring with less than four nodes");return}return W.compact(lt.map(function(on){return[+on.lon,+on.lat]}))}));if(Qe.length==0){t.verbose&&console.warn("Multipolygon",be+"/"+_e,"contains an empty ring cluster");return}return Qe})),Xe.length==0)return t.verbose&&console.warn("Multipolygon",be+"/"+_e,"contains no coordinates"),!1;var kn="MultiPolygon";Xe.length===1&&(kn="Polygon",Xe=Xe[0]);var Jn={type:"Feature",id:te.type+"/"+_e,properties:{type:te.type,id:_e,tags:te.tags||{},relations:I[te.type][te.id]||[],meta:m(te)},geometry:{type:kn,coordinates:Xe}};return ie&&(t.verbose&&console.warn("Multipolygon",be+"/"+_e,"is tainted"),Jn.properties.tainted=!0),Jn};if(!W.isArray(c[u].members)){t.verbose&&console.warn("Multipolygon",c[u].type+"/"+c[u].id,"ignored because it has no members");continue}for(var qe=0,S=0;S<c[u].members.length;S++)c[u].members[S].role=="outer"?qe++:t.verbose&&c[u].members[S].role!="inner"&&console.warn("Multipolygon",c[u].type+"/"+c[u].id,"member",c[u].members[S].type+"/"+c[u].members[S].ref,'ignored because it has an invalid role: "'+c[u].members[S].role+'"');if(c[u].members.forEach(function(te){R[te.ref]&&(te.role==="outer"&&!h(R[te.ref].tags,c[u].tags)&&(R[te.ref].is_skippablerelationmember=!0),te.role==="inner"&&!h(R[te.ref].tags)&&(R[te.ref].is_skippablerelationmember=!0))}),qe==0){t.verbose&&console.warn("Multipolygon relation",c[u].type+"/"+c[u].id,"ignored because it has no outer ways");continue}var Ae=!1;qe==1&&!h(c[u].tags,{type:!0})&&(Ae=!0);var V=null;if(!Ae)V=H(c[u],c[u]);else{var E=c[u].members.filter(function(te){return te.role==="outer"})[0];if(E=R[E.ref],E===void 0){t.verbose&&console.warn("Multipolygon relation",c[u].type+"/"+c[u].id,"ignored because outer way",E.type+"/"+E.ref,"is missing");continue}E.is_skippablerelationmember=!0,V=H(E,c[u])}if(V===!1){t.verbose&&console.warn("Multipolygon relation",c[u].type+"/"+c[u].id,"ignored because it has invalid geometry");continue}e?e(Si(V)):ve.push(V)}}for(var u=0;u<d.length;u++)if(R[d[u].id]===d[u]){if(!W.isArray(d[u].nodes)){t.verbose&&console.warn("Way",d[u].type+"/"+d[u].id,"ignored because it has no nodes");continue}if(!d[u].is_skippablerelationmember){typeof d[u].id!="number"&&(d[u].id=+d[u].id.replace("_fullGeom","")),d[u].tainted=!1,d[u].hidden=!1;var G=new Array;for(S=0;S<d[u].nodes.length;S++)typeof d[u].nodes[S]=="object"?G.push([+d[u].nodes[S].lon,+d[u].nodes[S].lat]):(t.verbose&&console.warn("Way",d[u].type+"/"+d[u].id,"is tainted by an invalid node"),d[u].tainted=!0);if(G.length<=1){t.verbose&&console.warn("Way",d[u].type+"/"+d[u].id,"ignored because it contains too few nodes");continue}var ee="LineString";typeof d[u].nodes[0]<"u"&&typeof d[u].nodes[d[u].nodes.length-1]<"u"&&d[u].nodes[0].id===d[u].nodes[d[u].nodes.length-1].id&&(typeof d[u].tags<"u"&&s(d[u].tags)||d[u].__is_bounds_placeholder)&&(ee="Polygon",G=[G]);var V={type:"Feature",id:d[u].type+"/"+d[u].id,properties:{type:d[u].type,id:d[u].id,tags:d[u].tags||{},relations:I.way[d[u].id]||[],meta:m(d[u])},geometry:{type:ee,coordinates:G}};d[u].tainted&&(t.verbose&&console.warn("Way",d[u].type+"/"+d[u].id,"is tainted"),V.properties.tainted=!0),d[u].__is_bounds_placeholder&&(V.properties.geometry="bounds"),e?e(Si(V)):ee=="LineString"?De.push(V):ve.push(V)}}return e?!0:(L={type:"FeatureCollection",features:[]},L.features=L.features.concat(ve),L.features=L.features.concat(De),L.features=L.features.concat(Q),t.flatProperties&&L.features.forEach(function(ne){ne.properties=W.merge(ne.properties.meta,ne.properties.tags,{id:ne.properties.type+"/"+ne.properties.id})}),L=Si(L),L)}function s(p){var d=t.polygonFeatures;if(typeof d=="function")return d(p);if(p.area==="no")return!1;for(var c in p){var h=p[c],m=d[c];if(!(typeof m>"u")&&h!=="no"&&(m===!0||m.included_values&&m.included_values[h]===!0||m.excluded_values&&m.excluded_values[h]!==!0))return!0}return!1}};function Jo(n){for(var t=function(h){return h[0]},e=function(h){return h[h.length-1]},i=function(h,m){return h!==void 0&&m!==void 0&&h.id===m.id},o=[],a,r,s,p,d,c;n.length;)for(a=n.pop().nodes.slice(),o.push(a);n.length&&!i(t(a),e(a));){for(r=t(a),s=e(a),p=0;p<n.length;p++)if(c=n[p].nodes,i(s,t(c))){d=a.push,c=c.slice(1);break}else if(i(s,e(c))){d=a.push,c=c.slice(0,-1).reverse();break}else if(i(r,e(c))){d=a.unshift,c=c.slice(0,-1);break}else if(i(r,t(c))){d=a.unshift,c=c.slice(1).reverse();break}else c=d=null;if(!c)break;n.splice(p,1),d.apply(a,c)}return o}Bi.toGeojson=Bi;var lc=Bi;const cc={"#":"Settings in this file override the `config`-section of `package.json`"},hc=Object.freeze(Object.defineProperty({__proto__:null,default:cc},Symbol.toStringTag,{value:"Module"})),rt=class{static isRetina(){return k.runningFromConsole?!1:window.matchMedia&&(window.matchMedia("only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx), only screen and (min-resolution: 75.6dpcm)").matches||window.matchMedia("only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min--moz-device-pixel-ratio: 2), only screen and (min-device-pixel-ratio: 2)").matches)||window.devicePixelRatio&&window.devicePixelRatio>=2}};let fe=rt;y(fe,"vNumber",ic),y(fe,"MaprouletteApiKey",""),y(fe,"added_by_default",["selected_element","gps_location","gps_location_history","home_location","gps_track","range","last_click"]),y(fe,"no_include",["conflation","split_point","split_road","current_view","import_candidate","usersettings"]),y(fe,"priviliged_layers",[...rt.added_by_default,...rt.no_include]),y(fe,"userJourney",{moreScreenUnlock:1,personalLayoutUnlock:5,historyLinkVisible:10,deletePointsOfOthersUnlock:20,tagsVisibleAt:25,tagsVisibleAndWikiLinked:30,mapCompleteHelpUnlock:50,themeGeneratorReadOnlyUnlock:50,themeGeneratorFullUnlock:500,addNewPointWithUnreadMessagesUnlock:500,importHelperUnlock:5e3}),y(fe,"minZoomLevelToAddNewPoint",rt.isRetina()?18:19),y(fe,"updateTimeoutSec",30),y(fe,"nearbyVisitTime",30*60),y(fe,"distanceToChangeObjectBins",[25,50,100,500,1e3,5e3,Number.MAX_VALUE]),y(fe,"themeOrder",["personal","cyclofix","waste","etymology","food","cafes_and_pubs","shops","playgrounds","hailhydrant","toilets","aed","bookcases"]),y(fe,"zoomToLocationTimeout",15),y(fe,"config",(()=>({...oc,...hc}))()),y(fe,"ImgurApiKey",rt.config.api_keys.imgur),y(fe,"mapillary_client_token_v4",rt.config.api_keys.mapillary_v4),y(fe,"defaultOverpassUrls",rt.config.default_overpass_urls),y(fe,"countryCoderEndpoint",rt.config.country_coder_host),y(fe,"_defaultPinIcons",["square","circle","none","pin","person","plus","ring","star","teardrop","triangle","crosshair"]),y(fe,"defaultPinIcons",rt._defaultPinIcons);const tr=class extends oi{constructor(e,i=3){var a,r,s;super();y(this,"title");y(this,"level");y(this,"id");if(e===void 0)throw"A title should have some content. Undefined is not allowed";typeof e=="string"?this.title=new Ce(e):this.title=e,this.level=i;let o;typeof e=="string"?o=e:e instanceof Ce?o=e.content:k.runningFromConsole||(o=(a=e.ConstructElement())==null?void 0:a.textContent),this.id=((s=(r=o==null?void 0:o.replace(/ /g,"-"))==null?void 0:r.replace(/[?#.;:/]/,""))==null?void 0:s.toLowerCase())??"",this.SetClass(tr.defaultClassesPerLevel[i]??"")}AsMarkdown(){const e=" "+this.title.AsMarkdown()+" ";return this.level==1?`

`+e+`
`+"=".repeat(e.length)+`

`:this.level==2?`

`+e+`
`+"-".repeat(e.length)+`

`:`

`+"#".repeat(this.level)+e+`

`}InnerConstructElement(){const e=this.title.ConstructElement();if(e===void 0)return;const i=document.createElement("h"+this.level);return i.appendChild(e),e.id=this.id,i}};let je=tr;y(je,"defaultClassesPerLevel",["","text-3xl font-bold","text-2xl font-bold","text-xl font-bold","text-lg font-bold"]);class Yi{}class Ie extends Yi{constructor(e,i){super();y(this,"key");y(this,"value");if(this.key=e,this.value=i,e===void 0||e==="")throw"Invalid key: undefined or empty";if(i===void 0)throw`Invalid value while constructing a Tag with key '${e}': value is undefined`;i==="*"&&console.warn(`Got suspicious tag ${e}=*   ; did you mean ${e}~* ?`)}matchesProperties(e){let i=e[this.key];if(i===void 0&&(this.value===""||this.value===void 0))return!0;if(typeof i!="string"){if(i===!0&&(this.value==="true"||this.value==="yes")||i===!1&&(this.value==="false"||this.value==="no"))return!0;i=""+i}return i===this.value}asOverpass(){return this.value===""?['[!"'+this.key+'"]']:[`["${this.key}"="${this.value}"]`]}asHumanString(e,i,o){let a=this.value;return i&&(a=k.EllipsesAfter(a,25)),(a===""||a===void 0)&&o!==void 0?(o[this.key]??"")===""?"":"<span class='line-through'>"+this.key+"</span>":e?`<a href='https://wiki.openstreetmap.org/wiki/Key:${this.key}' target='_blank'>${this.key}</a>=<a href='https://wiki.openstreetmap.org/wiki/Tag:${this.key}%3D${this.value}' target='_blank'>${a}</a>`:this.key+"="+a}isUsableAsAnswer(){return!0}shadows(e){return e.key!==void 0&&e.key!==this.key?!1:e.matchesProperties({[this.key]:this.value})}usedKeys(){return[this.key]}usedTags(){return this.value==""?[]:[this]}asChange(){return[{k:this.key,v:this.value}]}optimize(){return this}isNegative(){return!1}visit(e){e(this)}}class Ee extends Yi{constructor(e){super();y(this,"or");this.or=e}static construct(e){return e.length===1?e[0]:new Ee(e)}matchesProperties(e){for(const i of this.or)if(i.matchesProperties(e))return!0;return!1}asOverpass(){const e=[];for(const i of this.or){const o=i.asOverpass();e.push(...o)}return e}asHumanString(e,i,o){return this.or.map(a=>a.asHumanString(e,i,o)).join("|")}isUsableAsAnswer(){return!1}shadows(e){if(e instanceof Ee){for(const i of this.or){let o=!1;for(let a=0;a<e.or.length&&!o;a++){let r=e.or[a];o=i.shadows(r)}if(!o)return!1}return!0}return!1}usedKeys(){return[].concat(...this.or.map(e=>e.usedKeys()))}usedTags(){return[].concat(...this.or.map(e=>e.usedTags()))}asChange(e){const i=[];for(const o of this.or)i.push(...o.asChange(e));return i}removePhraseConsideredKnown(e,i){const o=[];for(const a of this.or){if(a instanceof Ee)throw"Optimize expressions before using removePhraseConsideredKnown";if(a instanceof ae){const r=a.removePhraseConsideredKnown(e,i);if(r===!1)continue;if(r===!0)return!0;o.push(r);continue}if(i&&e.shadows(a))return!0;!i&&a.shadows(e)||o.push(a)}return o.length===0?!1:Ee.construct(o)}optimize(){if(this.or.length===0)return!1;const e=this.or.map(r=>r.optimize()).filter(r=>r!==!1);if(e.some(r=>r===!0))return!0;const i=e,o=[];let a=[];for(const r of i)r instanceof Ee?o.push(...r.or):r instanceof ae?a.push(r):o.push(r);{let r=!1;do{const s=[];e:for(let p of a){for(const d of o){const c=p.removePhraseConsideredKnown(d,!1);if(c===!1)continue e;if(c===!0)return!0;if(c instanceof ae){p=c;continue}o.push(c),r=!0;continue e}s.push(p)}a=s}while(r)}if(a.length===1)o.push(a[0]);else if(a.length>1){let r=a[0].and;for(let s=1;s<a.length&&r.length>0;s++){const p=a[s];r=r.filter(d=>p.and.some(c=>c.shadows(d)))}if(r.length===0)o.push(...a);else{const s=[];for(const d of a){const c=d.and.filter(h=>!r.some(m=>m.shadows(h)));s.push(ae.construct(c))}r.push(Ee.construct(s));const p=new ae(r).optimize();if(p===!0)return!0;p===!1||o.push(ae.construct(r))}}return o.length===0?!1:se.ContainsOppositeTags(o)?!0:(se.sortFilters(o,!1),Ee.construct(o))}isNegative(){return this.or.some(e=>e.isNegative())}visit(e){e(this),this.or.forEach(i=>i.visit(e))}}class le extends Yi{constructor(e,i,o=!1){super();y(this,"key");y(this,"value");y(this,"invert");y(this,"matchesEmpty");this.key=e,this.value=i,this.invert=o,this.matchesEmpty=le.doesMatch("",this.value)}static doesMatch(e,i){if(e!==void 0)return typeof e=="number"&&(e=""+e),typeof i=="string"?e===i:i.test(e)}static source(e){return typeof e=="string"?e:e.source}asOverpass(){const e=this.invert?"!":"";if(typeof this.key!="string")return[`[~"${this.key.source}"${e}~"${le.source(this.value)}"]`];if(this.value instanceof RegExp){const i=this.value.source;if(i==="^..*$"||i===".+")return[`[${e}"${this.key}"]`];const o=this.value.ignoreCase?",i":"";return[`["${this.key}"${e}~"${i}"${o}]`]}else return[`["${this.key}"${e}="${this.value}"]`]}isUsableAsAnswer(){return!1}matchesProperties(e){if(typeof this.key=="string"){let i=e[this.key];return!i||i===""?this.invert!==this.matchesEmpty:typeof i=="string"?le.doesMatch(i,this.value)!=this.invert:typeof this.value!="string"&&this.value.source===".*"?!this.invert:(typeof i!="string"&&(i=JSON.stringify(i)),le.doesMatch(i,this.value)!=this.invert)}for(const i in e)if(i!==void 0&&le.doesMatch(i,this.key)){let o=e[i]??"";return typeof o!="string"&&(o=JSON.stringify(o)),le.doesMatch(o,this.value)!=this.invert}return this.matchesEmpty?!this.invert:this.invert}asHumanString(){if(typeof this.key=="string"){const e=typeof this.value=="string"?"=":"~";return`${this.key}${this.invert?"!":""}${e}${le.source(this.value)}`}return`${this.key.source}${this.invert?"!":""}~~${le.source(this.value)}`}shadows(e){if(e instanceof le){if((e.key.source??e.key)!==(this.key.source??this.key))return!1;if((e.value.source??e.key)===(this.value.source??this.key)&&this.invert==e.invert)return!0;if(typeof e.value=="string"){const i=le.doesMatch(e.value,this.value);if(!this.invert&&!e.invert)return i;if(this.invert&&!e.invert||!this.invert&&e.invert)return!i;if(!this.invert&&!e.invert)return i}return!1}return e instanceof Ie&&le.doesMatch(e.key,this.key)?this.value.source==="^..*$"?this.invert?e.value==="":!1:this.invert?!1:(this.value.source??this.value)===e.value:!1}usedKeys(){if(typeof this.key=="string")return[this.key];throw"Key cannot be determined as it is a regex"}usedTags(){return[]}asChange(){return this.invert?[]:typeof this.key=="string"?typeof this.value=="string"?[{k:this.key,v:this.value}]:((this.value.toString()!="/^..*$/"||this.value.toString()!=".+")&&console.warn("Regex value in tag; using wildcard:",this.key,this.value),[{k:this.key,v:void 0}]):(console.error("Cannot export regex tag to asChange; ",this.key,this.value),[])}optimize(){return this}isNegative(){return this.invert}visit(e){e(this)}}class ae extends Yi{constructor(e){super();y(this,"and");this.and=e}static construct(e){return e.length===1?e[0]:new ae(e)}static combine(e,i){const o=[];for(const a of i)o.push(e+a);return o}normalize(){const e=[];for(const i of this.and)i instanceof ae?e.push(...i.and):e.push(i);return new ae(e)}matchesProperties(e){for(const i of this.and)if(!i.matchesProperties(e))return!1;return!0}asOverpass(){let e=null;for(const i of this.and){const o=i.asOverpass();if(e===null){e=o;continue}const a=[];for(const r of e)a.push(...ae.combine(r,o));e=a}return e}asHumanString(e,i,o){return this.and.map(a=>a.asHumanString(e,i,o)).filter(a=>a!=="").join("&")}isUsableAsAnswer(){for(const e of this.and)if(!e.isUsableAsAnswer())return!1;return!0}shadows(e){if(!(e instanceof ae))return!1;for(const i of this.and){let o=!1;for(const a of e.and)if(o=i.shadows(a),o)break;if(!o)return!1}for(const i of e.and){let o=!1;for(const a of this.and)if(o=a.shadows(i),o)break;if(!o)return!1}return!0}usedKeys(){return[].concat(...this.and.map(e=>e.usedKeys()))}usedTags(){return[].concat(...this.and.map(e=>e.usedTags()))}asChange(e){const i=[];for(const o of this.and)i.push(...o.asChange(e));return i}removePhraseConsideredKnown(e,i){const o=[];for(const a of this.and){if(a instanceof ae)throw"Optimize expressions before using removePhraseConsideredKnown";if(a instanceof Ee){const r=a.removePhraseConsideredKnown(e,i);if(r===!0)continue;if(r===!1)return!1;o.push(r);continue}if(!(i&&e.shadows(a))){if(!i&&a.shadows(e))return!1;o.push(a)}}return o.length===0?!0:ae.construct(o)}optimize(){if(this.and.length===0)return!0;const e=this.and.map(r=>r.optimize()).filter(r=>r!==!0);if(e.some(r=>r===!1))return!1;const i=e;{const r={};for(const s of i)s instanceof Ie&&(r[s.key]=s.value);for(let s=0;s<i.length;s++){const p=i[s];if(p instanceof Ie){const d=p.key,c=r[d];if(c===void 0)continue;if(c!==p.value)return!1}if(p instanceof le){const d=p.key;if(typeof d!="string")continue;const c=r[d];if(c===void 0)continue;if(p.invert){if(typeof p.value=="string"&&c===p.value||c.match(p.value)!==null)return!1;i.splice(s,1),s--}else if(c!==p.value)return!1}}}const o=[];let a=[];for(const r of i)r instanceof ae?o.push(...r.and):r instanceof Ee?a.push(r):o.push(r);{let r=!1;do{const s=[];e:for(let p of a){for(const d of o){const c=p.removePhraseConsideredKnown(d,!0);if(c===!0)continue e;if(c===!1)return!1;if(c instanceof Ee){p=c;continue}o.push(c),r=!0;continue e}s.push(p)}a=s}while(r)}if(a=a.filter(r=>!se.containsEquivalents(o,r.or)),a.length===1)o.push(a[0]);else if(a.length>1){let r=a[0].or;for(let s=1;s<a.length&&r.length>0;s++){const p=a[s];r=r.filter(d=>p.or.some(c=>c.shadows(d)))}if(r.length===0)o.push(...a);else{const s=[];for(const d of a){const c=d.or.filter(h=>!r.some(m=>m.shadows(h)));s.push(Ee.construct(c))}r.push(ae.construct(s));const p=new Ee(r).optimize();if(p===!1)return!1;p===!0||o.push(p)}}return o.length===0?!0:se.ContainsOppositeTags(o)?!1:(se.sortFilters(o,!0),ae.construct(o))}isNegative(){return!this.and.some(e=>!e.isNegative())}visit(e){e(this),this.and.forEach(i=>i.visit(e))}}class gc{constructor(t,e,i=""){y(this,"_key");y(this,"_predicate");y(this,"_representation");this._key=t,this._predicate=e,this._representation=i}asChange(t){throw"A comparable tag can not be used to be uploaded to OSM"}asHumanString(t,e,i){return this._key+this._representation}asOverpass(){throw"A comparable tag can not be used as overpass filter"}shadows(t){return t===this}isUsableAsAnswer(){return!1}matchesProperties(t){return this._predicate(t[this._key])}usedKeys(){return[this._key]}usedTags(){return[]}optimize(){return this}isNegative(){return!0}visit(t){t(this)}}class yt{constructor(t,e,i=!1){y(this,"_key");y(this,"_value");y(this,"_invert");this._key=t,this._value=e,this._invert=i}static substituteString(t,e){for(const i in e)t=t.replace(new RegExp("\\{"+i+"\\}","g"),e[i]);return t.replace(/{.*}/g,"")}asTag(t){if(this._invert)throw"Cannot convert an inverted substituting tag";return new Ie(this._key,k.SubstituteKeys(this._value,t))}asHumanString(t,e,i){return this._key+(this._invert?"!":"")+"="+yt.substituteString(this._value,i)}asOverpass(){throw"A variable with substitution can not be used to query overpass"}shadows(t){return t instanceof yt?t._key===this._key&&t._value===this._value&&t._invert===this._invert:!1}isUsableAsAnswer(){return!this._invert}matchesProperties(t){const e=t[this._key];if(e===void 0||e==="")return!1;const i=yt.substituteString(this._value,t);return e===i!==this._invert}usedKeys(){return[this._key]}usedTags(){return[]}asChange(t){if(this._invert)throw"An inverted substituting tag can not be used to create a change";const e=yt.substituteString(this._value,t);if(e.match(/{.*}/)!==null)throw"Could not calculate all the substitutions: still have "+e;return[{k:this._key,v:e}]}optimize(){return this}isNegative(){return!1}visit(t){t(this)}}const uc={"addr:street":117211930,"addr:housenumber":125040768,emergency:1939478,barrier:18424246,tourism:2683525,amenity:20541353,bench:894256,rental:8838,bicycle_rental:7447,vending:206755,"service:bicycle:rental":3570,pub:316,theme:426,"service:bicycle:.*":0,"service:bicycle:cleaning":807,shop:5062252,"service:bicycle:retail":9162,network:2181336,sport:2194801,"service:bicycle:repair":11381,association:369,ngo:42,leisure:7368076,club:38429,"disused:amenity":40880,"planned:amenity":205,tileId:0,"construction:amenity":1206,cycleway:906487,highway:218189453,bicycle:6218071,cyclestreet:8185,"camera:direction":40676,direction:1896015,access:16030036,entrance:2954076,"name:etymology":24485,memorial:132172,indoor:353116,"name:etymology:wikidata":285224,landuse:35524214,name:88330405,protect_class:73801,information:831513,man_made:5116088,boundary:2142378,"tower:type":451658,playground:109175,route:939184,"surveillance:type":116760,natural:52353504,building:500469053},mc={emergency:{defibrillator:51273,ambulance_station:11047,fire_extinguisher:7355,fire_hydrant:1598739},barrier:{cycle_barrier:104166,bollard:502220,wall:3535056},tourism:{artwork:187470,map:51,viewpoint:191765},amenity:{bench:1736979,bicycle_library:36,bicycle_rental:49082,vending_machine:201871,bar:199662,pub:174979,cafe:467521,restaurant:1211671,bicycle_wash:44,bike_wash:0,bicycle_repair_station:9247,bicycle_parking:435959,binoculars:479,biergarten:10309,charging_station:65402,drinking_water:250463,fast_food:460079,fire_station:122200,parking:4255206,public_bookcase:13120,toilets:350648,recycling:333925,waste_basket:550357,waste_disposal:156765},bench:{stand_up_bench:87,yes:524993},"service:bicycle:rental":{yes:3054},pub:{cycling:9,bicycle:0},theme:{cycling:8,bicycle:16},"service:bicycle:cleaning":{yes:607,diy:0},shop:{bicycle:46488,sports:37024},sport:{cycling:6045,bicycle:96},association:{cycling:5,bicycle:20},ngo:{cycling:0,bicycle:0},leisure:{bird_hide:5669,nature_reserve:117016,picnic_table:206322,pitch:1990293,playground:705102},club:{cycling:3,bicycle:49},"disused:amenity":{charging_station:164},"planned:amenity":{charging_station:115},"construction:amenity":{charging_station:221},cycleway:{lane:314576,track:86541,shared_lane:60824},highway:{residential:61321708,crossing:6119521,cycleway:1423789,traffic_signals:1512639,tertiary:7051727,unclassified:15756878,secondary:4486617,primary:3110552,footway:16496620,path:11438303,steps:1327396,corridor:27051,pedestrian:685989,bridleway:102280,track:22670967,living_street:1519108,street_lamp:2811705},bicycle:{designated:1110839},cyclestreet:{yes:8164},access:{public:6222,yes:1363526},memorial:{ghost_bike:503},indoor:{door:9722},landuse:{grass:4898559,village_green:104681},name:{"Park Oude God":1},information:{board:242007,map:85912,office:24139,visitor_centre:285},man_made:{surveillance:148172,watermill:9699},boundary:{protected_area:97075},"tower:type":{observation:19654},playground:{forest:56},"surveillance:type":{camera:112963,ALPR:2522,ANPR:3},natural:{tree:18245059}},fc={keys:uc,tags:mc},$e=class{static KVtoProperties(t){const e={};for(const i of t)e[i.key]=i.value;return e}static changeAsProperties(t){const e={};for(const i of t)e[i.k]=i.v;return e}static AllKeysAreContained(t,e){for(const i in e){const o=t[i];if(o===void 0)return!1;const a=e[i];for(const r of a)if(o.indexOf(r)<0)return!1}return!0}static SplitKeys(t){return this.SplitKeysRegex(t,!1)}static SplitKeysRegex(t,e){const i={};for(t=[...t];t.length>0;){const o=t.shift();if(o!==void 0){if(o instanceof ae){t.push(...o.and);continue}if(o instanceof Ie){i[o.key]===void 0&&(i[o.key]=[]),i[o.key].push(...o.value.split(";").map(a=>a.trim()));continue}if(e&&o instanceof le){const a=o.key;if(typeof a!="string")throw console.error("Invalid type to flatten the multiAnswer: key is a regex too",o),"Invalid type to FlattenMultiAnswer: key is a regex too";const r=a;i[r]===void 0&&(i[r]=[]),i[r].push(o);continue}throw console.error("Invalid type to flatten the multiAnswer",o),"Invalid type to FlattenMultiAnswer, not one of RegexTag, Tag or And: "+o.asHumanString(!1,!1,{})}}return i}static FlattenAnd(t,e){const i=[];return t.visit(o=>{o instanceof Ie&&i.push(o),o instanceof yt&&i.push(o.asTag(e))}),i}static FlattenMultiAnswer(t){if(t===void 0)return new ae([]);let e=$e.SplitKeys(t);const i=[];for(const o in e){const a=k.Dedup(e[o]).filter(r=>r!=="");a.sort(),i.push(new Ie(o,a.join(";")))}return new ae(i)}static MatchesMultiAnswer(t,e){const i=$e.SplitKeysRegex([t],!0);for(const o in i){const a=i[o];if(e[o]===void 0)return!1;const r=e[o].split(";").map(s=>s.trim());for(const s of a){if(s instanceof le){if(!s.matchesProperties(e))return!1;continue}if(r.indexOf(s)<0)return!1}}return!0}static SimpleTag(t,e){const i=k.SplitFirst(t,"=");if(i.length!==2)throw`Invalid tag: no (or too much) '=' found (in ${e??"unkown context"})`;return new Ie(i[0],i[1])}static isValidKey(t){return t.match(/^[a-z][a-z0-9:_]{2,253}[a-z0-9]$/)!==null}static Tag(t,e=""){try{return this.ParseTagUnsafe(t,e)}catch(i){throw console.error("Could not parse tag",t,"in context",e,"due to ",i),i}}static ParseUploadableTag(t,e=""){const i=this.Tag(t,e);return i.visit(o=>{if(!(o instanceof ae)&&!(o instanceof Ie)&&!(o instanceof yt))throw`Error at ${e}: detected a non-uploadable tag at a location where this is not supported: ${o.asHumanString(!1,!1,{})}`}),i}static TagD(t,e=""){if(t!==void 0)return $e.Tag(t,e)}static sortFilters(t,e){t.sort((i,o)=>$e.order(i,o,e))}static toString(t,e=!0){let i;return t instanceof Ee?i=$e.joinL(t.or,"|",e):t instanceof ae?i=$e.joinL(t.and,"&",e):i=t.asHumanString(!1,!1,{}),e&&(i=i.trim()),i}static parseRegexOperator(t){const e=t.match(/^([_|a-zA-Z0-9: -]+)(!)?~([i]~)?(.*)$/);if(e==null)return null;const[i,o,a,r,s]=e;return{key:o,value:s,invert:a=="!",modifier:r=="i~"?"i":""}}static ContainsOppositeTags(t){for(let e=0;e<t.length;e++){const i=t[e];if(i instanceof Ie||i instanceof le)for(let o=e+1;o<t.length;o++){const a=t[o];if((a instanceof Ie||a instanceof le)&&a.key===i.key&&(a.value.source??a.value)===(i.value.source??i.value)&&(a.invert??!1)!==(i.invert??!1))return!0}}return!1}static removeShadowedElementsFrom(t,e){return e.filter(i=>!t.some(o=>o.shadows(i)))}static removeEquivalents(t){const e=[];e:for(let i=0;i<t.length;i++){const o=t[i];for(let a=0;a<t.length;a++){if(i===a)continue;if(t[a].shadows(o))continue e}e.push(o)}return e}static containsEquivalents(t,e){return e.some(i=>t.some(o=>o.shadows(i)))}static LevelsParser(t){if(t==null)return[];let e=k.NoNull([t]);return e=[].concat(...e.map(i=>i==null?void 0:i.split(";"))),e=[].concat(...e.map(i=>{if(i=i.trim(),i==="")return;if(i.indexOf("-")<0||i.startsWith("-"))return i;const[o,a]=i.split("-").map(s=>Number(s.trim()));if(isNaN(o)||isNaN(a))return;const r=[];for(let s=o;s<=a;s++)r.push(s+"");return r})),k.NoNull(e)}static ParseTagUnsafe(t,e=""){if(t===void 0)throw new Error(`Error while parsing a tag: 'json' is undefined in ${e}. Make sure all the tags are defined and at least one tag is present in a complex expression`);if(typeof t!="string"){if(t.and!==void 0&&t.or!==void 0)throw`Error while parsing a TagConfig: got an object where both 'and' and 'or' are defined. Did you override a value? Perhaps use \`"=parent": { ... }\` instead of "parent": {...}\` to trigger a replacement and not a fuse of values`;if(t.and!==void 0)return new ae(t.and.map(a=>$e.Tag(a,e)));if(t.or!==void 0)return new Ee(t.or.map(a=>$e.Tag(a,e)));throw`At ${e}: unrecognized tag: ${JSON.stringify(t)}`}const i=t;for(const[a,r]of $e.comparators)if(i.indexOf(a)>=0){const s=k.SplitFirst(i,a);let p=Number(s[1].trim());isNaN(p)&&(p=new Date(s[1].trim()).getTime());const d=c=>{if(c===void 0)return!1;let h;return typeof c=="number"?h=c:typeof h=="string"?h=Number(c==null?void 0:c.trim()):h=Number(c),isNaN(h)&&typeof c=="string"&&(h=k.ParseDate(c).getTime(),isNaN(h))?!1:r(h,p)};return new gc(s[0],d,a+p)}if(i.indexOf("~~")>=0){const a=k.SplitFirst(i,"~~");let r;a[0]==="*"?r=new RegExp(".+","i"):r=new RegExp("^("+a[0]+")$");let s;return a[1]==="*"?s=new RegExp(".+","si"):s=new RegExp("^("+a[1]+")$","s"),new le(r,s)}const o=$e.parseRegexOperator(i);if(o!=null){if(o.value==="*"&&o.invert)throw`Don't use 'key!~*' - use 'key=' instead (empty string as value (in the tag ${i} while parsing ${e})`;if(o.value==="")throw"Detected a regextag with an empty regex; this is not allowed. Use '"+o.key+"='instead (at "+e+")";let a=o.value;return a==="*"?new le(o.key,new RegExp(".+","si"+o.modifier),o.invert):new le(o.key,new RegExp("^("+a+")$","s"+o.modifier),o.invert)}if(i.indexOf("!:=")>=0){const a=k.SplitFirst(i,"!:=");return new yt(a[0],a[1],!0)}if(i.indexOf(":=")>=0){const a=k.SplitFirst(i,":=");return new yt(a[0],a[1])}if(i.indexOf("!=")>=0){const a=k.SplitFirst(i,"!=");if(a[1]==="*")throw"At "+e+": invalid tag "+i+". To indicate a missing tag, use '"+a[0]+"!=' instead";return a[1]===""?new le(a[0],/.+/is):new le(a[0],a[1],!0)}if(i.indexOf("=")>=0){const a=k.SplitFirst(i,"=");if(a[1]=="*")throw`Error while parsing tag '${i}' in ${e}: detected a wildcard on a normal value. Use a regex pattern instead`;return new Ie(a[0],a[1])}throw`Error while parsing tag '${i}' in ${e}: no key part and value part were found`}static GetCount(t,e){if(t===void 0)return;const i=$e.keyCounts.tags[t];return i!==void 0&&i[e]!==void 0?i[e]:$e.keyCounts.keys[t]}static order(t,e,i){const o=t instanceof le,a=e instanceof le;if(o!==a)return o?1:-1;if(t.key!==void 0&&e.key!==void 0){if(i){const r=$e.GetCount(t.key,t.value),s=$e.GetCount(e.key,e.value);if(r!==void 0&&s!==void 0)return r-s}return t.key===e.key?0:t.key<e.key?-1:1}return 0}static joinL(t,e,i){const o=t.map(a=>$e.toString(a,!1)).join(e);return i?o:" ("+o+") "}};let se=$e;y(se,"keyCounts",fc),y(se,"comparators",[["<=",(t,e)=>t<=e],[">=",(t,e)=>t>=e],["<",(t,e)=>t<e],[">",(t,e)=>t>e]]);const bc={},yc=Object.freeze(Object.defineProperty({__proto__:null,default:bc},Symbol.toStringTag,{value:"Module"})),vc=Us(yc);class Cc{constructor(t,e){y(this,"osmTags");y(this,"geojsonSource");y(this,"geojsonZoomLevel");y(this,"isOsmCacheLayer");y(this,"mercatorCrs");y(this,"idKey");let i=0;if(t.osmTags&&i++,t.overpassScript&&i++,t.geojsonSource&&i++,i==0)throw`Source: nothing correct defined in the source (in ${e}) (the params are ${JSON.stringify(t)})`;if(t.isOsmCache&&t.geojsonSource==null)throw console.error(t),`Source said it is a OSM-cached layer, but didn't define the actual source of the cache (in context ${e})`;if(t.geojsonSource!==void 0&&t.geojsonSourceLevel!==void 0&&!["x","y","x_min","x_max","y_min","Y_max"].some(o=>t.geojsonSource.indexOf(o)>0))throw`Source defines a geojson-zoomLevel, but does not specify {x} nor {y} (or equivalent), this is probably a bug (in context ${e})`;if(t.osmTags!==void 0){const o=t.osmTags.optimize();if(o===!1)throw"Error at "+e+`: the specified tags are conflicting with each other: they will never match anything at all.
	The offending tags are: `+t.osmTags.asHumanString(!1,!1,{})+"	They optmize into 'false' ";if(o===!0)throw"Error at "+e+": the specified tags are very wide: they will always match everything"}this.osmTags=t.osmTags??new le("id",/.*/),this.geojsonSource=t.geojsonSource,this.geojsonZoomLevel=t.geojsonSourceLevel,this.isOsmCacheLayer=t.isOsmCache??!1,this.mercatorCrs=t.mercatorCrs??!1,this.idKey=t.idKey}}class Ji extends oi{constructor(e,i=!1){super();y(this,"uiElements");y(this,"_ordered");this._ordered=i,this.uiElements=k.NoNull(e).map(o=>F.W(o))}AsMarkdown(){return this._ordered?`

`+this.uiElements.map((e,i)=>"  "+i+". "+e.AsMarkdown().replace(/\n/g,`  
`)).join(`
`)+`
`:`

`+this.uiElements.map(e=>"  - "+e.AsMarkdown().replace(/\n/g,`  
`)).join(`
`)+`
`}InnerConstructElement(){const e=document.createElement(this._ordered?"ol":"ul");for(const i of this.uiElements){if(i==null)continue;const o=i.ConstructElement();if(o!==void 0){const a=document.createElement("li");a.appendChild(o),e.appendChild(a)}}return e}}class Tc extends oi{constructor(e){super();y(this,"content");this.content=e??""}AsMarkdown(){let e;return typeof this.content!="string"?e=this.content.AsMarkdown():e=this.content,`

`+e+`

`}InnerConstructElement(){const e=document.createElement("p");return typeof this.content!="string"?e.appendChild(this.content.ConstructElement()):e.innerHTML=this.content,e}}class Ue{constructor(t,e,i,o){y(this,"name");y(this,"explanation");y(this,"inputmode");y(this,"textArea");this.name=t,this.inputmode=i,this.textArea=o??!1,this.name.endsWith("textfield")&&(this.name=this.name.substr(0,this.name.length-9)),this.name.endsWith("textfielddef")&&(this.name=this.name.substr(0,this.name.length-12)),typeof e=="string"?this.explanation=e:this.explanation=e.AsMarkdown()}getFeedback(t,e){if(this.isValid(t))return;const i=F.t.validation[this.name];if(i!==void 0)return i.feedback}getPlaceholder(){return F.t.validation[this.name].description}isValid(t,e){return!0}reformat(t,e){return t}}class wc extends Ue{constructor(){super("string","A simple piece of text")}}class _c extends Ue{constructor(){super("text","A longer piece of text. Uses an textArea instead of a textField","text",!0)}}class Rc extends Ue{constructor(){super("date","A date with date picker")}isValid(t){return!isNaN(new Date(t).getTime())}reformat(t){if(console.log("Reformatting",t),!this.isValid(t))return t;const e=new Date(t);let i=""+(e.getMonth()+1),o=""+e.getDate();const a=e.getFullYear();return i.length<2&&(i="0"+i),o.length<2&&(o="0"+o),[a,i,o].join("-")}}class Ca extends Ue{constructor(t,e){super(t??"int",e??"A whole number, either positive, negative or zero","numeric")}isValid(t){return t=""+t,t!==void 0&&t.indexOf(".")<0&&!isNaN(Number(t))}getFeedback(t){const e=Number(t);if(isNaN(e))return F.t.validation.nat.notANumber;if(Math.floor(e)!==e)return F.t.validation.nat.mustBeWhole}}class zs extends Ca{constructor(t,e){super(t??"nat",e??"A  whole, positive number or zero")}isValid(t){return t===void 0?!1:(t=""+t,t.indexOf(".")<0&&!isNaN(Number(t))&&Number(t)>=0)}getFeedback(t){const e=super.getFeedback(t);if(e!==void 0)return e;if(Number(t)<0)return F.t.validation.nat.mustBePositive}}class Dc extends Ue{constructor(){super("distance",'A geographical distance in meters (rounded at two points). Will give an extra minimap with a measurement tool. Arguments: [ zoomlevel, preferredBackgroundMapType (comma separated) ], e.g. `["21", "map,photo"]',"decimal");y(this,"isValid",e=>{const i=Number(e);return!isNaN(i)})}}class Ac extends Ca{constructor(){super("direction",["A geographical direction, in degrees. 0° is north, 90° is east, ... Will return a value between 0 (incl) and 360 (excl).","### Input helper","This element has an input helper showing a map and 'viewport' indicating the direction. By default, this map is zoomed to zoomlevel 17, but this can be changed with the first argument"].join(`

`))}isValid(t){return t.endsWith("°")&&(t=t.substring(0,t.length-1)),super.isValid(t)}reformat(t){return t.endsWith("°")&&(t=t.substring(0,t.length-1)),""+Number(t)%360}}var Ke={shortLang:n=>n.toLowerCase().split("_")[0],forceArray:n=>(typeof n=="string"&&(n=[n]),n||[]),isPlainObject:n=>!(!n||typeof n!="object"||n instanceof Array),fixedEncodeURIComponent:n=>encodeURIComponent(n).replace(/[!'()*]/g,Sc),replaceSpaceByUnderscores:n=>n.replace(/\s/g,"_"),uniq:n=>Array.from(new Set(n))};const Sc=n=>"%"+n.charCodeAt(0).toString(16),Vs=n=>t=>{const e={};return Object.keys(t).forEach(i=>{const o=t[i];o!=null?e[i]=n?o.map($c):o.value:e[i]=n?[]:null}),e},$c=n=>n.value,Hn=Vs(!1);var Ta={labels:Hn,descriptions:Hn,aliases:Vs(!0),lemmas:Hn,representations:Hn,glosses:Hn},Mc=n=>{typeof n=="object"&&(n=n.time);const t=n[0];let[e,i]=n.slice(1).split("T");e=e.replace(/-00/g,"-01");const o=`${e}T${i}`;return xc(t,o)};const xc=(n,t)=>{const e=t.split("-")[0];return n==="-"||e.length>4?jc(n,t,e):new Date(t)},jc=(n,t,e)=>{let i;return e.length===4?i=`${n}00${t}`:e.length===5?i=`${n}0${t}`:i=n+t,new Date(i)},wa=Mc,ce={};ce.isNumericId=n=>/^[1-9][0-9]*$/.test(n);ce.isEntityId=n=>/^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)$/.test(n);ce.isEntitySchemaId=n=>/^E[1-9][0-9]*$/.test(n);ce.isItemId=n=>/^Q[1-9][0-9]*$/.test(n);ce.isPropertyId=n=>/^P[1-9][0-9]*$/.test(n);ce.isLexemeId=n=>/^L[1-9][0-9]*$/.test(n);ce.isFormId=n=>/^L[1-9][0-9]*-F[1-9][0-9]*$/.test(n);ce.isSenseId=n=>/^L[1-9][0-9]*-S[1-9][0-9]*$/.test(n);ce.isGuid=n=>/^((Q|P|L)[1-9][0-9]*|L[1-9][0-9]*-(F|S)[1-9][0-9]*)\$[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(n);ce.isHash=n=>/^[0-9a-f]{40}$/.test(n);ce.isPropertyClaimsId=n=>{const[t,e]=n.split("#");return ce.isEntityId(t)&&ce.isPropertyId(e)};ce.isRevisionId=n=>/^\d+$/.test(n);ce.isEntityPageTitle=n=>{if(typeof n!="string")return!1;let[t,e]=n.split(":");return t&&e?kc(t)&&ce[`is${t}Id`](e):(e=t,ce.isItemId(e))};const qc=["Item","Property","Lexeme"],kc=n=>qc.includes(n),Jc=n=>/^(Q|P|L)[1-9][0-9]*$/.test(n);ce.getNumericId=n=>{if(!Jc(n))throw new Error(`invalid entity id: ${n}`);return n.replace(/^(Q|P|L)/,"")};ce.wikibaseTimeToDateObject=wa;const _a=n=>t=>{try{return n(t)}catch{t=t.time||t;const i=t[0];let[o,a]=t.slice(1).split("T");return o=o.replace(/-00/g,"-01"),`${i}${o}T${a}`}},Ic=n=>wa(n).getTime(),Ec=n=>wa(n).toISOString(),Oc=n=>{if(typeof n=="object"){const{time:t,precision:e}=n;e===9?n=t.replace("-01-01T","-00-00T"):e===10?n=t.replace("-01T","-00T"):n=t}return n.split("T")[0].replace(/^\+/,"").replace(/^(-?)0+/,"$1").replace(/-00$/,"").replace(/-00$/,"")};ce.wikibaseTimeToEpochTime=_a(Ic);ce.wikibaseTimeToISOString=_a(Ec);ce.wikibaseTimeToSimpleDay=_a(Oc);ce.getImageUrl=(n,t)=>{let e=`https://commons.wikimedia.org/wiki/Special:FilePath/${n}`;return typeof t=="number"&&(e+=`?width=${t}`),e};ce.getEntityIdFromGuid=n=>{const t=n.split(/[$-]/);if(t.length===6)return t[0].toUpperCase();if(t.length===7)return t.slice(0,2).join("-").toUpperCase();throw new Error(`invalid guid: ${n}`)};var Xt=ce;const{wikibaseTimeToISOString:Nc,wikibaseTimeToEpochTime:Fc,wikibaseTimeToSimpleDay:Bc}=Xt,St=n=>n.value,Lc=(n,t)=>t.keepRichValues?n.value:n.value.text,gn=(n,t)=>Pc(n,t.entityPrefix),Hc={item:"Q",lexeme:"L",property:"P"},Pc=(n,t)=>{const{value:e}=n,i=e.id||Hc[e["entity-type"]]+e["numeric-id"];return typeof t=="string"?`${t}:${i}`:i},Uc=(n,t)=>{const{value:e}=n,i=parseFloat(e.amount);if(t.keepRichValues){const o={amount:parseFloat(e.amount),unit:e.unit.replace(/^https?:\/\/.*\/entity\//,"")};return e.upperBound!=null&&(o.upperBound=parseFloat(e.upperBound)),e.lowerBound!=null&&(o.lowerBound=parseFloat(e.lowerBound)),o}else return i},zc=(n,t)=>t.keepRichValues?n.value:[n.value.latitude,n.value.longitude],Vc=(n,t)=>{let e;if(typeof t.timeConverter=="function"?e=t.timeConverter(n.value):e=Gc(t.timeConverter)(n.value),t.keepRichValues){const{timezone:i,before:o,after:a,precision:r,calendarmodel:s}=n.value;return{time:e,timezone:i,before:o,after:a,precision:r,calendarmodel:s}}else return e},Gc=(n="iso")=>{const t=Wc[n];if(!t)throw new Error(`invalid converter key: ${JSON.stringify(n).substring(0,100)}`);return t},Wc={iso:Nc,epoch:Fc,"simple-day":Bc,none:n=>n.time||n},Or={commonsMedia:St,"external-id":St,"geo-shape":St,"globe-coordinate":zc,math:St,monolingualtext:Lc,"musical-notation":St,quantity:Uc,string:St,"tabular-data":St,time:Vc,url:St,"wikibase-entityid":gn,"wikibase-form":gn,"wikibase-item":gn,"wikibase-lexeme":gn,"wikibase-property":gn,"wikibase-sense":gn};var Qc={parsers:Or,parse:(n,t,e,i)=>{n=n||t.type,n=n.replace(" ","-");try{return Or[n](t,e)}catch(o){throw o.message==="parsers[datatype] is not a function"&&(o.message=`${n} claim parser isn't implemented
        Claim id: ${i}
        Please report to https://github.com/maxlath/wikibase-sdk/issues`),o}}};const Gs=n=>{const t=n.reduce(Zc,{});return t.preferred||t.normal||[]},Kc=n=>n.filter(t=>t.rank!=="deprecated"),Zc=(n,t)=>{const{rank:e}=t;return n[e]||(n[e]=[]),n[e].push(t),n},Xc=n=>{const t={};return Object.keys(n).forEach(e=>{t[e]=Gs(n[e])}),t};var Ws={truthyClaims:Xc,truthyPropertyClaims:Gs,nonDeprecatedPropertyClaims:Kc};const{parse:Yc}=Qc,{uniq:eh}=Ke,{truthyPropertyClaims:th,nonDeprecatedPropertyClaims:nh}=Ws,Ra=(n,...t)=>{const{propertyPrefix:e}=Aa(t),i={};for(let o in n){const a=n[o];e&&(o=e+":"+o),i[o]=Da(a,...t)}return i},Da=(n,...t)=>{if(n==null||n.length===0)return[];const{keepNonTruthy:e,keepNonDeprecated:i,areSubSnaks:o}=Aa(t);return i?n=nh(n):e||o||(n=th(n)),n=n.map(a=>oa(a,...t)).filter(ih),n[0]&&typeof n[0]!="object"?eh(n):n},ih=n=>n!==void 0,oa=(n,...t)=>{t=Aa(t);const{keepQualifiers:e,keepReferences:i,keepIds:o,keepHashes:a,keepTypes:r,keepSnaktypes:s,keepRanks:p}=sh(t),{mainsnak:d,rank:c}=n;let h,m,f,v,u,$;if(d?(m=d.datatype,f=d.datavalue,v=d.snaktype):(f=n.datavalue,m=n.datatype,v=n.snaktype,n.hash?u=!0:$=!0),f)h=Yc(m,f,t,n.id);else if(v==="somevalue")h=t.somevalueValue;else if(v==="novalue")h=t.novalueValue;else throw new Error("no datavalue or special snaktype found");if(u){if(!(a||r||s))return h;const C={value:h};return a&&(C.hash=n.hash),r&&(C.type=m),s&&(C.snaktype=v),C}if($)return r?{type:m,value:h}:h;if(!(e||i||o||r||s||p))return h;const S={value:h};r&&(S.type=m),s&&(S.snaktype=v),p&&(S.rank=c);const R=eo(t);return R.keepHashes=a,e&&(S.qualifiers=Qs(n.qualifiers,R)),i&&(n.references=n.references||[],S.references=Ks(n.references,R)),o&&(S.id=n.id),S},Aa=n=>{if(n==null)return{};if(n[0]&&typeof n[0]=="object")return n[0];const[t,e,i]=n;return{entityPrefix:t,propertyPrefix:e,keepQualifiers:i}},Qs=(n,t)=>Ra(n,eo(t)),oh=(n,t)=>Da(n,eo(t)),Ks=(n,t)=>n.map(e=>ah(e,t)),ah=(n,t)=>{const e=eo(t),i=Ra(n.snaks,e);return e.keepHashes?{snaks:i,hash:n.hash}:i},eo=(n={})=>n.areSubSnaks?n:Object.assign({},n,{areSubSnaks:!0}),rh=["keepQualifiers","keepReferences","keepIds","keepHashes","keepTypes","keepSnaktypes","keepRanks","keepRichValues"],sh=n=>(n.keepAll&&rh.forEach(t=>{n[t]==null&&(n[t]=!0)}),n);var Sa={simplifyClaims:Ra,simplifyPropertyClaims:Da,simplifyClaim:oa,simplifyQualifiers:Qs,simplifyPropertyQualifiers:oh,simplifyQualifier:oa,simplifyReferences:Ks};const{isFormId:dh}=Xt,{representations:ph}=Ta,{simplifyClaims:lh}=Sa,Zs=(n,t)=>{const{id:e,representations:i,grammaticalFeatures:o,claims:a}=n;if(!dh(e))throw new Error("invalid form object");return{id:e,representations:ph(i),grammaticalFeatures:o,claims:lh(a,t)}},ch=(n,t)=>n.map(e=>Zs(e,t));var hh={simplifyForm:Zs,simplifyForms:ch};const{isSenseId:gh}=Xt,{glosses:uh}=Ta,{simplifyClaims:mh}=Sa,Xs=(n,t)=>{const{id:e,glosses:i,claims:o}=n;if(!gh(e))throw new Error("invalid sense object");return{id:e,glosses:uh(i),claims:mh(o,t)}},fh=(n,t)=>n.map(e=>Xs(e,t));var bh={simplifySense:Xs,simplifySenses:fh},yh=["aa","ab","ace","ady","af","ak","als","alt","ami","am","ang","an","arc","ar","ary","arz","ast","as","atj","avk","av","awa","ay","azb","az","ban","bar","bat_smg","ba","bcl","be_x_old","be","bg","bh","bi","bjn","bm","bn","bo","bpy","br","bs","bug","bxr","ca","cbk_zam","cdo","ceb","ce","cho","chr","ch","chy","ckb","co","crh","cr","csb","cs","cu","cv","cy","dag","da","de","din","diq","dsb","dty","dv","dz","ee","el","eml","en","eo","es","et","eu","ext","fa","ff","fiu_vro","fi","fj","fo","frp","frr","fr","fur","fy","gag","gan","ga","gcr","gd","glk","gl","gn","gom","gor","got","gu","gv","hak","ha","haw","he","hif","hi","ho","hr","hsb","ht","hu","hy","hyw","hz","ia","id","ie","ig","ii","ik","ilo","inh","io","is","it","iu","jam","ja","jbo","jv","kaa","kab","ka","kbd","kbp","kg","ki","kj","kk","kl","km","kn","koi","ko","krc","kr","ksh","ks","ku","kv","kw","ky","lad","la","lbe","lb","lez","lfn","lg","lij","li","lld","lmo","ln","lo","lrc","ltg","lt","lv","mad","mai","map_bms","mdf","mg","mhr","mh","min","mi","mk","ml","mni","mn","mnw","mo","mrj","mr","ms","mt","mus","mwl","myv","my","mzn","nah","nap","na","nds_nl","nds","ne","new","ng","nia","nl","nn","nov","no","nqo","nrm","nso","nv","ny","oc","olo","om","or","os","pag","pam","pap","pa","pcd","pdc","pfl","pih","pi","pl","pms","pnb","pnt","ps","pt","pwn","qu","rm","rmy","rn","roa_rup","roa_tara","ro","rue","ru","rw","sah","sat","sa","scn","sco","sc","sd","se","sg","shi","shn","sh","shy","simple","si","skr","sk","sl","smn","sm","sn","sources","so","sq","srn","sr","ss","stq","st","su","sv","sw","szl","szy","ta","tay","tcy","tet","te","tg","th","ti","tk","tl","tn","to","tpi","trv","tr","ts","tt","tum","tw","tyv","ty","udm","ug","uk","ur","uz","vec","vep","ve","vi","vls","vo","war","wa","wo","wuu","xal","xh","xmf","yi","yo","yue","za","zea","zh_classical","zh_min_nan","zh_yue","zh","zu"];const{fixedEncodeURIComponent:vh,replaceSpaceByUnderscores:Ch,isPlainObject:Th}=Ke,{isPropertyId:wh}=Xt,Nr="https://www.wikidata.org/wiki/",_h=yh,Rh=(n,t)=>{if(Th(n)&&(t=n.title,n=n.site),!n)throw new Error("missing a site");if(!t)throw new Error("missing a title");const e=n.replace(/wiki$/,""),i=Fr[e]||Fr[n];if(i)return i(t);const{lang:o,project:a}=$a(n);return t=vh(Ch(t)),`https://${o}.${a}.org/wiki/${t}`},$i=n=>t=>`https://${n}.wikimedia.org/wiki/${t}`,Fr={commons:$i("commons"),mediawiki:n=>`https://www.mediawiki.org/wiki/${n}`,meta:$i("meta"),species:$i("species"),wikidata:n=>wh(n)?`${Nr}Property:${n}`:`${Nr}${n}`,wikimania:$i("wikimania")},Dh=/^https?:\/\/([\w-]{2,10})\.(\w+)\.org\/\w+\/(.*)/,$a=n=>{if(n.startsWith("http")){const t=n,e=t.match(Dh);if(!e)throw new Error(`invalid sitelink url: ${t}`);let[i,o,a]=e.slice(1);a=decodeURIComponent(a);let r;return i==="www"?(i="en",r=o):i==="commons"?(i="en",o=r="commons"):r=`${i}${o}`.replace("wikipedia","wiki"),{lang:i,project:o,key:r,title:a,url:t}}else{const t=n,e=Ah[t];if(e)return{lang:"en",project:e,key:t};const[i,o,a]=t.split("wik");if(a!=null)throw new Error(`invalid sitelink key: ${t}`);if(_h.indexOf(i)===-1)throw new Error(`sitelink lang not found: ${i}`);const r=$h[o];if(!r)throw new Error(`sitelink project not found: ${r}`);return{lang:i,project:r,key:t}}},Ah={commonswiki:"commons",mediawikiwiki:"mediawiki",metawiki:"meta",specieswiki:"specieswiki",wikidatawiki:"wikidata",wikimaniawiki:"wikimania"},Sh=n=>{try{return $a(n),!0}catch{return!1}},$h={i:"wikipedia",isource:"wikisource",iquote:"wikiquote",tionary:"wiktionary",ibooks:"wikibooks",iversity:"wikiversity",ivoyage:"wikivoyage",inews:"wikinews"};var Ys={getSitelinkUrl:Rh,getSitelinkData:$a,isSitelinkKey:Sh};const{getSitelinkUrl:Mh}=Ys;var xh=(n,t={})=>{const{addUrl:e}=t;return Object.keys(n).reduce(jh(n,e),{})};const jh=(n,t)=>(e,i)=>{if(n[i]==null)return e[i]=n[i],e;const{title:o}=n[i];return t?e[i]={title:o,url:Mh(i,o)}:e[i]=o,e};var qh=(n,t={})=>{typeof n=="string"&&(n=JSON.parse(n));const{vars:e}=n.head,i=n.results.bindings;if(e.length===1&&t.minimize===!0){const s=e[0];return i.map(p=>aa(p[s])).filter(p=>p!=null)}const{richVars:o,associatedVars:a,standaloneVars:r}=Fh(e);return i.map(Lh(o,a,r))};const aa=n=>{if(!n)return;let{datatype:t}=n;return t=t&&t.replace("http://www.w3.org/2001/XMLSchema#",""),(kh[n.type]||Jh(t))(n)},kh={uri:n=>Oh(n.value),bnode:()=>null},Mi=n=>parseFloat(n.value),Jh=n=>(n=n&&n.replace("http://www.w3.org/2001/XMLSchema#",""),Ih[n]||Eh),Ih={decimal:Mi,integer:Mi,float:Mi,double:Mi,boolean:n=>n.value==="true"},Eh=n=>n.value,Oh=n=>n.match(/http.*\/entity\/statement\//)?Nh(n):n.replace(/^https?:\/\/.*\/entity\//,"").replace(/^https?:\/\/.*\/prop\/direct\//,""),Nh=n=>{n=n.replace(/^https?:\/\/.*\/entity\/statement\//,"");const t=n.split("-");return t[0]+"$"+t.slice(1).join("-")},Fh=n=>{let t=n.filter(a=>n.some(Bh(a)));t=t.filter(a=>!t.some(r=>a!==r&&a.startsWith(r)));const e=new RegExp(`^(${t.join("|")})[A-Z]`),i=n.filter(a=>e.test(a)),o=n.filter(a=>!t.includes(a)&&!e.test(a));return{richVars:t,associatedVars:i,standaloneVars:o}},Bh=n=>{const t=new RegExp(`^${n}[A-Z]\\w+`);return t.test.bind(t)},Lh=(n,t,e)=>i=>{const o={};for(const a of n){const r={},s=aa(i[a]);s!=null&&(r.value=s);for(const p of t)p.startsWith(a)&&Hh(i,a,p,r);Object.keys(r).length>0&&(o[a]=r)}for(const a of e)o[a]=aa(i[a]);return o},Hh=(n,t,e,i)=>{let o=e.split(t)[1];o=o[0].toLowerCase()+o.slice(1),o=Ph[o]||o;const a=n[e];a!=null&&(i[o]=a.value)},Ph={altLabel:"aliases"},{labels:Uh,descriptions:zh,aliases:Vh,lemmas:Gh,glosses:Wh}=Ta,{simplifyClaim:Br,simplifyPropertyClaims:Lr,simplifyClaims:Hr,simplifyQualifier:Qh,simplifyPropertyQualifiers:Kh,simplifyQualifiers:Zh,simplifyReferences:Xh}=Sa,{simplifyForm:Yh,simplifyForms:eg}=hh,{simplifySense:tg,simplifySenses:ng}=bh,ig=xh,og=qh;var ed={labels:Uh,descriptions:zh,aliases:Vh,claim:Br,propertyClaims:Lr,claims:Hr,qualifier:Qh,propertyQualifiers:Kh,qualifiers:Zh,references:Xh,sitelinks:ig,snak:Br,propertySnaks:Lr,snaks:Hr,lemmas:Gh,glosses:Wh,form:Yh,forms:eg,sense:tg,senses:ng,sparqlResults:og};const Ma=ed,xa=(n,t)=>{const{type:e}=n,i={id:n.id,type:e,modified:n.modified};return n.datatype&&(i.datatype=n.datatype),e==="item"?(ze(n,i,"labels"),ze(n,i,"descriptions"),ze(n,i,"aliases"),ze(n,i,"claims",t),ze(n,i,"sitelinks",t)):e==="property"?(i.datatype=n.datatype,ze(n,i,"labels"),ze(n,i,"descriptions"),ze(n,i,"aliases"),ze(n,i,"claims",t)):e==="lexeme"&&(ze(n,i,"lemmas"),i.lexicalCategory=n.lexicalCategory,i.language=n.language,ze(n,i,"claims",t),ze(n,i,"forms",t),ze(n,i,"senses",t)),i},ze=(n,t,e,i)=>{n[e]!=null&&(t[e]=Ma[e](n[e],i))},td=(n,t={})=>{n.entities&&(n=n.entities);const{entityPrefix:e}=t;return Object.keys(n).reduce((i,o)=>{const a=n[o];return e&&(o=`${e}:${o}`),i[o]=xa(a,t),i},{})};Ma.entity=xa;Ma.entities=td;var ag={simplifyEntity:xa,simplifyEntities:td};const{simplifyEntity:rg}=ag,Pr={entities:n=>{n=n.body||n;const{entities:t}=n;return Object.keys(t).forEach(e=>{t[e]=rg(t[e])}),t},pagesTitles:n=>(n=n.body||n,n.query.search.map(t=>t.title))};var sg={wb:Pr,wd:Pr},Io,Ur;function dg(){if(Ur)return Io;Ur=1;const n=typeof location<"u"&&typeof document<"u";let t;return n?t=e=>new URLSearchParams(e).toString():t=vc.stringify,Io=e=>i=>(n&&(i.origin="*"),Object.keys(i).forEach(o=>{i[o]==null&&delete i[o]}),e+"?"+t(i)),Io}var Eo,zr;function pg(){if(zr)return Eo;zr=1;const{isPlainObject:n}=Ke,t=["item","property","lexeme","form","sense"];return Eo=e=>(i,o,a,r,s)=>{let p,d;if(n(i)){const c=i;i=c.search,o=c.language,a=c.limit,d=c.continue,r=c.format,s=c.uselang,p=c.type}if(!(i&&i.length>0))throw new Error("search can't be empty");if(o=o||"en",s=s||o,a=a||"20",r=r||"json",p=p||"item",d=d||"0",!t.includes(p))throw new Error(`invalid type: ${p}`);return e({action:"wbsearchentities",search:i,language:o,limit:a,continue:d,format:r,uselang:s,type:p})},Eo}var Oo,Vr;function lg(){if(Vr)return Oo;Vr=1;const{isPlainObject:n}=Ke,t=/^\d+[|\d]*$/;return Oo=e=>i=>{if(!n(i))throw new Error(`expected parameters to be passed as an object, got ${i} (${typeof i})`);for(const v in i)if(v.startsWith("sr")){const u=v.replace(/^sr/,"");if(i[u]!=null)throw new Error(`${u} and ${v} are the same`);i[u]=i[v]}const{search:o,haswbstatement:a,format:r="json",limit:s,offset:p,profile:d,sort:c}=i;let{namespace:h,prop:m}=i;if(!(o||a))throw new Error('missing "search" or "haswbstatement" parameter');let f="";if(o&&(f+=o),a){const v=a instanceof Array?a:[a];for(const u of v)u[0]==="-"?f+=` -haswbstatement:${u.slice(1)}`:f+=` haswbstatement:${u}`}if(s!=null&&(typeof s!="number"||s<1))throw new Error(`invalid limit: ${s}`);if(p!=null&&(typeof p!="number"||p<0))throw new Error(`invalid offset: ${p}`);if(h instanceof Array?h=h.join("|"):typeof h=="number"&&(h=h.toString()),h&&!t.test(h))throw new Error(`invalid namespace: ${h}`);if(d!=null&&typeof d!="string")throw new Error(`invalid profile: ${d} (${typeof d}, expected string)`);if(c!=null&&typeof c!="string")throw new Error(`invalid sort: ${c} (${typeof c}, expected string)`);if(m!=null&&(h instanceof Array&&(m=m.join("|")),typeof m!="string"))throw new Error(`invalid prop: ${m} (${typeof m}, expected string)`);return e({action:"query",list:"search",srsearch:f.trim(),format:r,srnamespace:h,srlimit:s,sroffset:p,srqiprofile:d,srsort:c,srprop:m})},Oo}var No,Gr;function to(){if(Gr)return No;Gr=1;const n=Xt,t=(e,i)=>o=>{if(!n[i](o))throw new Error(`invalid ${e}: ${o}`)};return No={entityId:t("entity id","isEntityId"),propertyId:t("property id","isPropertyId"),entityPageTitle:t("entity page title","isEntityPageTitle"),revisionId:t("revision id","isRevisionId")},No}var Fo,Wr;function nd(){if(Wr)return Fo;Wr=1;const{isPlainObject:n,forceArray:t,shortLang:e}=Ke,i=to();return Fo=o=>(a,r,s,p,d)=>{if(n(a)&&({ids:a,languages:r,props:s,format:p,redirects:d}=a),p=p||"json",!(a&&a.length>0))throw new Error("no id provided");a=t(a),a.forEach(i.entityId),a.length>50&&console.warn(`getEntities accepts 50 ids max to match Wikidata API limitations:
      this request won't get all the desired entities.
      You can use getManyEntities instead to generate several request urls
      to work around this limitation`);const c={action:"wbgetentities",ids:a.join("|"),format:p};return d===!1&&(c.redirects="no"),r&&(r=t(r).map(e),c.languages=r.join("|")),s&&s.length>0&&(c.props=t(s).join("|")),o(c)},Fo}var Bo,Qr;function cg(){if(Qr)return Bo;Qr=1;const{isPlainObject:n}=Ke;Bo=e=>{const i=nd()(e);return(o,a,r,s,p)=>{if(n(o)&&({ids:o,languages:a,props:r,format:s,redirects:p}=o),!(o instanceof Array))throw new Error("getManyEntities expects an array of ids");return t(o).map(d=>i(d,a,r,s,p))}};const t=e=>{const i=[];for(;e.length>0;){const o=e.slice(0,50);e=e.slice(50),i.push(o)}return i};return Bo}var Lo,Kr;function hg(){if(Kr)return Lo;Kr=1;const{forceArray:n}=Ke,t=to();Lo=o=>(a,r={})=>{a=n(a),a.forEach(t.entityPageTitle);const s=a.length===1,p={action:"query",prop:"revisions"};p.titles=a.join("|"),p.format=r.format||"json",s&&(p.rvlimit=r.limit||"max"),s&&r.start&&(p.rvstart=e(r.start)),s&&r.end&&(p.rvend=e(r.end));const{prop:d,user:c,excludeuser:h,tag:m}=r;return d?p.rvprop=n(d).join("|"):p.rvprop="ids|flags|timestamp|user|userid|size|slotsize|sha1|slotsha1|contentmodel|comment|parsedcomment|content|tags|roles|oresscores",p.rvslots="*",c&&(p.rvuser=c),h&&(p.rvexcludeuser=h),m&&(p.rvtag=m),o(p)};const e=o=>typeof o=="number"&&o<i?o:Math.trunc(new Date(o).getTime()/1e3),i=new Date("2000-01-01").getTime();return Lo}var Ho,Zr;function gg(){if(Zr)return Ho;Zr=1;const n=to(),{isPlainObject:t}=Ke;return Ho=(e,i)=>(o,a)=>(t(o)&&(a=o.revision,o=o.id),n.entityId(o),n.revisionId(a),`${e}/${i}/index.php?title=Special:EntityData/${o}.json&revision=${a}`),Ho}var Po,Xr;function ug(){if(Xr)return Po;Xr=1;const{isPlainObject:n,forceArray:t,shortLang:e}=Ke;Po=o=>(a,r,s,p,d,c)=>{if(n(a)){const m=a;a=m.titles,r=m.sites,s=m.languages,p=m.props,d=m.format,c=m.redirects}if(d=d||"json",!(a&&a.length>0))throw new Error("no titles provided");r&&r.length>0||(r=["enwiki"]),a=t(a),r=t(r).map(i),p=t(p);const h={action:"wbgetentities",titles:a.join("|"),sites:r.join("|"),format:d};return r.length===1&&a.length===1&&(h.normalize=!0),s&&(s=t(s).map(e),h.languages=s.join("|")),p&&p.length>0&&(h.props=p.join("|")),c===!1&&(h.redirects="no"),o(h)};const i=o=>o.length===2?`${o}wiki`:o;return Po}var Uo,Yr;function id(){if(Yr)return Uo;Yr=1;const{fixedEncodeURIComponent:n}=Ke;return Uo=t=>e=>{const i=n(e);return`${t}?format=json&query=${i}`},Uo}var zo,es;function mg(){if(es)return zo;es=1;const{forceArray:n}=Ke,{isItemId:t}=Xt,e=to(),i="FILTER NOT EXISTS { ?subject rdf:type wikibase:Property . } ";zo=d=>{const c=id()(d);return(h,m,f={})=>{const{limit:v,caseInsensitive:u,keepProperties:$}=f,S=u?s:r,R=$?"":i;let C=n(h);C.forEach(e.propertyId),C=C.map(p).join("|");let T=`SELECT DISTINCT ?subject WHERE { ${o(m,S,C,R)} }`;return v&&(T+=` LIMIT ${v}`),c(T)}};const o=(d,c,h,m)=>d instanceof Array?"{ "+d.map(a).map(v=>c(h,v,m)).join("} UNION {")+" }":c(h,a(d),m),a=d=>(t(d)?d=`wd:${d}`:typeof d=="string"&&(d=`'${d}'`),d),r=(d,c,h,m)=>`?subject ${d} ${c} .
    ${h}`,s=(d,c,h,m)=>`?subject ${d} ?value .
    FILTER (lcase(?value) = ${c.toLowerCase()})
    ${h}`,p=d=>"wdt:"+d;return zo}const{isPlainObject:fg}=Ke,bg=ed,yg=sg,vg=Xt,Cg=Ys,Tg=Ws,wg=`Tip: if you just want to access functions that don't need an instance or a sparqlEndpoint,
those are also exposed directly on the module object. Exemple:
const { isItemId, simplify } = require('wikibase-sdk')`,od=Object.assign({simplify:bg,parse:yg},vg,Cg,Tg),ad=n=>{if(!fg(n))throw new Error("invalid config");const{instance:t,sparqlEndpoint:e}=n;let{wgScriptPath:i="w"}=n;if(i=i.replace(/^\//,""),!(t||e))throw new Error(`one of instance or sparqlEndpoint should be set at initialization.
${wg}`);let o,a,r;if(t){ts("instance",t),a=t.replace(/\/$/,"").replace(`/${i}/api.php`,""),r=`${a}/${i}/api.php`;const d=dg()(r);o={searchEntities:pg()(d),cirrusSearchPages:lg()(d),getEntities:nd()(d),getManyEntities:cg()(d),getRevisions:hg()(d),getEntityRevision:gg()(t,i),getEntitiesFromSitelinks:ug()(d)}}else o={searchEntities:Vt("searchEntities"),cirrusSearchPages:Vt("cirrusSearchPages"),getEntities:Vt("getEntities"),getManyEntities:Vt("getManyEntities"),getRevisions:Vt("getRevisions"),getEntityRevision:Vt("getEntityRevision"),getEntitiesFromSitelinks:Vt("getEntitiesFromSitelinks")};let s;return e?(ts("sparqlEndpoint",e),s={sparqlQuery:id()(e),getReverseClaims:mg()(e)}):s={sparqlQuery:ns("sparqlQuery"),getReverseClaims:ns("getReverseClaims")},Object.assign({instance:{root:a,apiEndpoint:r}},od,o,s)};Object.assign(ad,od);const ts=(n,t)=>{if(!(typeof t=="string"&&t.startsWith("http")))throw new Error(`invalid ${n}: ${t}`)},rd=n=>t=>()=>{throw new Error(`${t} requires ${n} to be set at initialization`)},ns=rd("a sparqlEndpoint"),Vt=rd("an instance");var _g=ad,ra=_g({instance:"https://www.wikidata.org",sparqlEndpoint:"https://query.wikidata.org/sparql"});class Rn{constructor(t,e,i,o,a,r){y(this,"id");y(this,"labels");y(this,"descriptions");y(this,"claims");y(this,"wikisites");y(this,"commons");this.id=t,this.labels=e,this.descriptions=i,this.claims=o,this.wikisites=a,this.commons=r}static fromJson(t){const e=new Map;for(const s in t.labels)e.set(s,t.labels[s].value);const i=new Map;for(const s in t.descriptions)i.set(s,t.descriptions[s].value);const o=new Map;for(const s in t.sitelinks){const p=s.substring(0,s.length-4),d=t.sitelinks[s].title;o.set(p,d)}const a=o.get("commons");o.delete("commons");const r=Rn.extractClaims(t.claims);return new Rn(t.id,e,i,r,o,a)}static extractClaims(t){const e=ra.simplify.claims(t,{timeConverter:"simple-day"}),i=new Map;for(const o in e){const a=e[o];i.set(o,new Set(a))}return i}}class Rg{constructor(t){y(this,"id");y(this,"lemma");y(this,"senses");y(this,"claims");this.id=t.id,this.claims=Rn.extractClaims(t.claims),this.lemma=new Map;for(const e in t.lemmas)this.lemma.set(e,t.lemmas[e].value);this.senses=new Map;for(const e of t.senses){const i=e.glosses;for(const o in i){let a=this.senses.get(o);a===void 0?a="":a=a+"; ",this.senses.set(o,a+i[o].value)}}}asWikidataResponse(){return new Rn(this.id,this.lemma,this.senses,this.claims,new Map,void 0)}}const Be=class{static LoadWikidataEntry(t){const e=this.ExtractKey(t),i=Be._storeCache.get(e);if(i)return i;const o=Kt.FromPromiseWithErr(Be.LoadWikidataEntryAsync(e));return Be._storeCache.set(e,o),o}static async searchAdvanced(t,e){let i="";(e==null?void 0:e.instanceOf)!==void 0&&e.instanceOf.length>0&&(i="{"+e.instanceOf.map(c=>`{ ?item wdt:P31/wdt:P279* wd:Q${c}. }`).join(" UNION ")+"}");const a=((e==null?void 0:e.notInstanceOf)??[]).concat([17379835]).map(d=>`MINUS {?item wdt:P31/wdt:P279* wd:Q${d} .}`),r=`SELECT * WHERE {
            SERVICE wikibase:mwapi {
                bd:serviceParam wikibase:api "EntitySearch" .
                bd:serviceParam wikibase:endpoint "www.wikidata.org" .
                bd:serviceParam mwapi:search "${t.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}" .
                bd:serviceParam mwapi:language "${e.lang}" .
                ?item wikibase:apiOutputItem mwapi:item .
                ?num wikibase:apiOrdinal true .
                bd:serviceParam wikibase:limit ${Math.round(((e==null?void 0:e.maxCount)??20)*1.5)} .
                ?label wikibase:apiOutput mwapi:label .
                ?description wikibase:apiOutput "@description" .
            }
            ${i}
            ${a.join(`
    `)}
        } ORDER BY ASC(?num) LIMIT ${(e==null?void 0:e.maxCount)??20}`,s=ra.sparqlQuery(r);return(await k.downloadJson(s)).results.bindings.map(({item:d,label:c,description:h,num:m})=>({relevance:m==null?void 0:m.value,id:d==null?void 0:d.value,label:c==null?void 0:c.value,description:h==null?void 0:h.value}))}static async search(t,e,i=1){const o=(e==null?void 0:e.maxCount)??20;let a=Math.min(o,50);const r=i*a-a,s=(e==null?void 0:e.lang)??"en",p="https://www.wikidata.org/w/api.php?action=wbsearchentities&search="+t+"&language="+s+"&limit="+a+"&continue="+r+"&format=json&uselang="+s+"&type=item&origin=*&props=",c=(await k.downloadJsonCached(p,1e4)).search;if(c.length<a)return c;if(c.length<o){const h={...e};h.maxCount=o-c.length,c.push(...await Be.search(t,h,i+1))}return c}static async searchAndFetch(t,e){const i=await Be.searchAdvanced(t,e),o=await Promise.all(i.map(async a=>{try{return console.log("Loading ",a.id),await Be.LoadWikidataEntry(a.id).AsPromise()}catch(r){console.error(r);return}}));return k.NoNull(o.map(a=>a.success))}static ExtractKey(t){if(typeof t=="number")return"Q"+t;if(t===void 0){console.error("ExtractKey: value is undefined");return}t=t.trim().toLowerCase();for(const e of Be._prefixesToRemove)t.startsWith(e)&&(t=t.substring(e.length));if(!(t.startsWith("http")&&t==="")){for(const e of Be._identifierPrefixes)if(t.startsWith(e)){const i=t.substring(e.length);if(i==="")return;const o=Number(i);return isNaN(o)?void 0:t.toUpperCase()}if(t!==""&&!isNaN(Number(t)))return"Q"+t}}static QIdToNumber(t){if(t==null)return;if(typeof t=="number")return t;if(t=t.trim(),!t.startsWith("Q"))return;t=t.substr(1);const e=Number(t);if(!isNaN(e))return e}static IdToArticle(t){if(t.startsWith("Q"))return"https://wikidata.org/wiki/"+t;if(t.startsWith("L"))return"https://wikidata.org/wiki/Lexeme:"+t;throw"Unknown id type: "+t}static async Sparql(t,e){const i="SELECT "+t.map(r=>r.startsWith("?")?r:"?"+r).join(" ")+`
WHERE
{
`+e.map(r=>r.endsWith(".")?r:r+".").join(`
`)+`  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE]". }
}`,o=ra.sparqlQuery(i);return(await k.downloadJsonCached(o,24*60*60*1e3)).results.bindings}static async LoadWikidataEntryAsync(t){const e=""+t,i=Be._cache.get(e);if(i)return i;const o=Be.LoadWikidataEntryUncachedAsync(t);return Be._cache.set(e,o),o}static async LoadWikidataEntryUncachedAsync(t){const e=Be.ExtractKey(t);if(e===void 0){console.warn("Could not extract a wikidata entry from",t);return}const i="https://www.wikidata.org/wiki/Special:EntityData/"+e+".json",o=(await k.downloadJsonCached(i,1e4)).entities,a=Array.from(Object.keys(o))[0],r=o[a];return e.startsWith("L")?new Rg(r).asWikidataResponse():Rn.fromJson(r)}};let it=Be;y(it,"_identifierPrefixes",["Q","L"].map(t=>t.toLowerCase())),y(it,"_prefixesToRemove",["https://www.wikidata.org/wiki/Lexeme:","https://www.wikidata.org/wiki/","http://www.wikidata.org/entity/","Lexeme:"].map(t=>t.toLowerCase())),y(it,"_storeCache",new Map),y(it,"_cache",new Map);class sd extends oi{}class ja extends sd{constructor(e){super();y(this,"enterPressed",new Kt(void 0));y(this,"value");y(this,"_actualField");y(this,"_isValid");y(this,"_rawValue");y(this,"_isFocused",!1);y(this,"_options");this._options=e??{},e=e??{},this.value=(e==null?void 0:e.value)??new Kt(void 0),this._rawValue=new Kt(""),this._isValid=e.isValid??(i=>!0)}static SetCursorPosition(e,i){e!=null&&(i===-1&&(i=e.value.length),e.focus(),e.setSelectionRange(i,i))}GetValue(){return this.value}IsValid(e){return e==null?!1:this._isValid(e)}InnerConstructElement(){const e=this._options,i=this;let o,a="";e.placeholder&&(typeof e.placeholder=="string"?(a=e.placeholder,o=void 0):(e.placeholder instanceof tc&&e.placeholder.data!==void 0?o=e.placeholder:e.placeholder instanceof Xn&&e.placeholder.translations!==void 0&&(o=Ps.language.map(d=>e.placeholder.textFor(d))),a=(o==null?void 0:o.data)??a??"")),this.SetClass("form-text-field");let r;if(e.htmlType==="area"){this.SetClass("w-full box-border max-w-full");const d=document.createElement("textarea");d.placeholder=a,d.rows=e.textAreaRows,d.cols=50,d.style.width="100%",d.dir="auto",r=d,o&&o.addCallbackAndRunD(c=>d.placeholder=c)}else{const d=document.createElement("input");d.type=e.htmlType??"text",d.inputMode=e.inputMode,d.placeholder=a,d.style.cssText=e.inputStyle??"width: 100%;",d.dir="auto",r=d,o&&o.addCallbackAndRunD(c=>d.placeholder=c)}const s=document.createElement("form");s.appendChild(r),s.onsubmit=()=>!1,e.label&&s.appendChild(e.label.ConstructElement());const p=r;return this.value.addCallbackAndRunD(d=>{p.value=d}),p.oninput=()=>{const d=p.value.substring(p.selectionEnd).replace(/ /g,"").length;let c=p.value;i._rawValue.setData(c),i.IsValid(c)?i.value.setData(c):i.value.setData(void 0),c=p.value;let h=c.length-d;for(;h>=0&&c.substr(h).replace(/ /g,"").length<d;)h--;ja.SetCursorPosition(p,h)},p.addEventListener("keyup",function(d){d.key==="Enter"&&i.enterPressed.setData(p.value)}),this._isFocused&&p.focus(),this._actualField=p,s}focus(){this._actualField===void 0?this._isFocused=!0:this._actualField.focus()}}class dd extends P{constructor(t){const e=F.W(t)??F.t.general.loading;e.SetClass("pl-2"),super([we.loading_svg().SetClass("animate-spin self-center").SetStyle("width: 1.5rem; height: 1.5rem; min-width: 1.5rem;"),e]),this.SetClass("flex p-1")}}class Dg{GetRelevantUrls(t,e){const i=(e==null?void 0:e.prefixes)??this.defaultKeyPrefixes;if(i===void 0)throw"No `defaultKeyPrefixes` defined by this image provider";const o=new Kt([]),a=new Set;return t.addCallbackAndRunD(r=>{var s,p;for(const d in r){if(!i.some(h=>d.startsWith(h)))continue;const c=k.NoEmpty(((p=(s=r[d])==null?void 0:s.split(";"))==null?void 0:p.map(h=>h.trim()))??[]);for(const h of c)a.has(h)||(a.add(h),this.ExtractUrls(d,h).then(m=>{for(const f of m??[])f!==void 0&&f.then(v=>{v!==void 0&&(o.data.push(v),o.ping())})}))}}),o}}class Ag{constructor(){y(this,"title","");y(this,"artist","");y(this,"license");y(this,"licenseShortName","");y(this,"usageTerms","");y(this,"attributionRequired",!1);y(this,"copyrighted",!1);y(this,"credit","");y(this,"description","");y(this,"informationLocation")}}class qa{static async GetCategoryContents(t,e=10,i=void 0){var d;if(t==null||t==="")return[];t.startsWith("Category:")||(t="Category:"+t);let o="https://commons.wikimedia.org/w/api.php?action=query&list=categorymembers&format=json&&origin=*&cmtitle="+encodeURIComponent(t);i!==void 0&&(o=`${o}&cmcontinue=${i}`);const a=await k.downloadJson(o),s=(((d=a.query)==null?void 0:d.categorymembers)??[]).map(c=>c.title);if(a.continue===void 0)return s;if(e-s.length<=0)return console.debug(`Recursive wikimedia category load stopped for ${t}`),s;const p=await qa.GetCategoryContents(t,e-s.length,a.continue.cmcontinue);return s.push(...p),s}}const st=class extends Dg{constructor(){super();y(this,"commons_key","wikimedia_commons");y(this,"defaultKeyPrefixes",[this.commons_key,"image"])}static ExtractFileName(e){if(!e.startsWith("http"))return e;const i=new URL(e).pathname;return i.substring(i.lastIndexOf("/")+1)}static PrepareUrl(e){return e.toLowerCase().startsWith("https://commons.wikimedia.org/wiki/")?e:`https://commons.wikimedia.org/wiki/Special:FilePath/${encodeURIComponent(e)}?width=500&height=400`}static startsWithCommonsPrefix(e){return st.commonsPrefixes.some(i=>e.startsWith(i))}static removeCommonsPrefix(e){if(e.startsWith("https://upload.wikimedia.org/"))return e=e.substring(e.lastIndexOf("/")+1),e=decodeURIComponent(e),e.startsWith("File:")||(e="File:"+e),e;for(const i of st.commonsPrefixes)if(e.startsWith(i)){let o=e.substr(i.length);return i.startsWith("http")&&(o=decodeURIComponent(o)),o}return e}SourceIcon(e){const i=we.wikimedia_commons_white_svg().SetStyle("width:2em;height: 2em");return e===void 0?i:new nt(we.wikimedia_commons_white_svg(),`https://commons.wikimedia.org/wiki/${e}`,!0)}PrepUrl(e){return e=st.removeCommonsPrefix(e),e.startsWith("File:")?this.UrlForImage(e):this.UrlForImage("File:"+e)}async ExtractUrls(e,i){const o=st.startsWithCommonsPrefix(i);return e!==void 0&&e!==this.commons_key&&!o?[]:(i=st.removeCommonsPrefix(i),i.startsWith("Category:")?(await qa.GetCategoryContents(i)).filter(r=>r.startsWith("File:")).map(r=>Promise.resolve(this.UrlForImage(r))):i.startsWith("File:")?[Promise.resolve(this.UrlForImage(i))]:i.startsWith("http")?[]:[Promise.resolve(this.UrlForImage("File:"+i))])}async DownloadAttribution(e){var d,c,h,m,f,v,u,$,S;if(e=st.ExtractFileName(e),e==="")return;const i="https://en.wikipedia.org/w/api.php?action=query&prop=imageinfo&iiprop=extmetadata&titles="+e+"&format=json&origin=*",o=await k.downloadJsonCached(i,365*24*60*60),a=new Ag,r=o.query.pages[-1];if(r===void 0)return;const s=(d=(r.imageinfo??[])[0])==null?void 0:d.extmetadata;if(s===void 0){console.warn("The file",e,"has no usable metedata or license attached... Please fix the license info file yourself!");return}let p=r.title;return p.startsWith("File:")&&(p=p.substr(5)),(p.endsWith(".jpg")||p.endsWith(".png"))&&(p=p.substring(0,p.length-4)),a.title=p,a.artist=(c=s.Artist)==null?void 0:c.value,a.license=(h=s.License)==null?void 0:h.value,a.copyrighted=(m=s.Copyrighted)==null?void 0:m.value,a.attributionRequired=(f=s.AttributionRequired)==null?void 0:f.value,a.usageTerms=(v=s.UsageTerms)==null?void 0:v.value,a.licenseShortName=(u=s.LicenseShortName)==null?void 0:u.value,a.credit=($=s.Credit)==null?void 0:$.value,a.description=(S=s.ImageDescription)==null?void 0:S.value,a.informationLocation=new URL("https://en.wikipedia.org/wiki/"+r.title),a}UrlForImage(e){return e.startsWith("File:")||(e="File:"+e),{url:st.PrepareUrl(e),key:void 0,provider:this}}};let Gn=st;y(Gn,"singleton",new st),y(Gn,"commonsPrefixes",["https://commons.wikimedia.org/wiki/","https://upload.wikimedia.org","File:"]);const Mt=class extends Yn{constructor(t,e){let i=!1;const o=t.stabilized(250).bind(a=>a===void 0||a===""||a==="Q"?null:(i=!0,it.LoadWikidataEntry(a)));super(o.map(a=>{if(a===null||!i)return e==null?void 0:e.whileLoading;if(a===void 0)return new dd(F.t.general.loading);if(a.error!==void 0)return new Ce(a.error).SetClass("alert");const r=a.success;return Mt.WikidataResponsePreview(r,e)}))}static WikidataResponsePreview(t,e){var r,s,p;let i=(r=new nt(new P([t.id,e!=null&&e.noImages?t.id:we.wikidata_svg().SetStyle("width: 2.5rem").SetClass("block")]).SetClass("flex"),it.IdToArticle(t.id),!0))==null?void 0:r.SetClass("must-link"),o=new P([new P([(s=Xn.fromMap(t.labels))==null?void 0:s.SetClass("font-bold"),i]).SetClass("flex justify-between flex-wrap-reverse"),Xn.fromMap(t.descriptions),Mt.QuickFacts(t,e),...(e==null?void 0:e.extraItems)??[]]).SetClass("flex flex-col link-underline"),a;return((p=t.claims.get("P18"))==null?void 0:p.size)>0&&(a=Array.from(t.claims.get("P18"))[0]),a&&!(e!=null&&e.noImages)&&(a=Gn.singleton.PrepUrl(a).url,o=new P([new na(a).SetStyle((e==null?void 0:e.imageStyle)??"max-width: 5rem; width: unset; height: 4rem").SetClass("rounded-xl mr-2"),o.SetClass("w-full")]).SetClass("flex")),o.SetClass("p-2 w-full"),o}static QuickFacts(t,e){var o,a,r;const i=[];for(const s of Mt.extraProperties){let p=!0;for(const v of s.requires){if(!((o=t.claims)!=null&&o.has("P"+v.p))){p=!1;break}if(!((a=t.claims)!=null&&a.get("P"+v.p).has("Q"+v.q))){p=!1;break}}if(!p)continue;const d=s.property,c=(e!=null&&e.noImages?s.textMode:s.display)??s.display;if(((r=t.claims)==null?void 0:r.get(d))===void 0)continue;const h=Array.from(t.claims.get(d));if(c instanceof Xn){i.push(c.Subs({value:h.join(", ")}).SetClass("m-2"));continue}const f=k.NoNull(h.map(v=>c.get(v))).map(v=>typeof v=="string"?new Ce(v):v());i.push(new P(f).SetClass("flex m-2"))}if(i.length!==0)return new P(i).SetClass("flex")}};let Wn=Mt;y(Wn,"isHuman",[{p:31,q:5}]),y(Wn,"extraProperties",[{requires:Mt.isHuman,property:"P21",display:new Map([["Q6581097",()=>we.gender_male_svg().SetStyle("width: 1rem; height: auto")],["Q6581072",()=>we.gender_female_svg().SetStyle("width: 1rem; height: auto")],["Q1097630",()=>we.gender_inter_svg().SetStyle("width: 1rem; height: auto")],["Q1052281",()=>we.gender_trans_svg().SetStyle("width: 1rem; height: auto")],["Q2449503",()=>we.gender_trans_svg().SetStyle("width: 1rem; height: auto")],["Q48270",()=>we.gender_queer_svg().SetStyle("width: 1rem; height: auto")]]),textMode:new Map([["Q6581097","♂️"],["Q6581072","♀️"],["Q1097630","⚥️"],["Q1052281","🏳️‍⚧️"],["Q2449503","🏳️‍⚧️"],["Q48270","🏳️‍🌈 ⚧"]])},{property:"P569",requires:Mt.isHuman,display:F.t.general.wikipedia.previewbox.born},{property:"P570",requires:Mt.isHuman,display:F.t.general.wikipedia.previewbox.died}]);class Dn extends oi{constructor(e,i,o){super();y(this,"_header");y(this,"_contents");y(this,"_contentStyle");y(this,"_sortable");this._contentStyle=(o==null?void 0:o.contentStyle)??[["min-width: 9rem"]],this._header=e==null?void 0:e.map(F.W),this._contents=i.map(a=>a.map(F.W)),this._sortable=(o==null?void 0:o.sortable)??!1}AsMarkdown(){const e=this._header.map(r=>(r==null?void 0:r.AsMarkdown())??" "),i=k.NoNull(e).join(" | "),o=e.map(r=>"-".repeat(r.length+2)).join(" | "),a=this._contents.map(r=>r.map(s=>{var p,d;return((d=(p=s==null?void 0:s.AsMarkdown())==null?void 0:p.replaceAll("\\","\\\\"))==null?void 0:d.replaceAll("|","\\|"))??" "}).join(" | ")).join(`
`);return`

`+[i,o,a,""].join(`
`)}InnerConstructElement(){const e=document.createElement("table"),i=new Kt(void 0),o=this,a=k.NoNull((this._header??[]).map((r,s)=>(o._sortable&&r.onClick(()=>{i.data==s?i.setData(-1-s):i.setData(s)}),r.ConstructElement())));if(a.length>0){const r=document.createElement("thead"),s=document.createElement("tr");a.forEach(p=>{const d=document.createElement("th");d.appendChild(p),s.appendChild(d)}),r.appendChild(s),e.appendChild(r)}for(let r=0;r<this._contents.length;r++){let s=this._contents[r];const p=document.createElement("tr");for(let d=0;d<s.length;d++)try{let c=s[d];if((c==null?void 0:c.ConstructElement)===void 0)continue;const h=c==null?void 0:c.ConstructElement();if(h===void 0)continue;let m;this._contentStyle!==void 0&&this._contentStyle[r]!==void 0&&this._contentStyle[d]!==void 0&&(m=this._contentStyle[r][d]);const f=document.createElement("td");f.style.cssText=m,f.appendChild(h),p.appendChild(f)}catch(c){console.error("Could not render an element in a table due to",c,s[d])}e.appendChild(p)}return i.addCallback(r=>{if(r===void 0)return;const s=r<0,p=s?-r-1:r;let d=Array.from(e.rows);d.splice(0,1),d=d.sort((c,h)=>{var v,u,$,S;const m=(u=(v=c.cells[p])==null?void 0:v.textContent)==null?void 0:u.toLowerCase(),f=(S=($=h.cells[p])==null?void 0:$.textContent)==null?void 0:S.toLowerCase();return m===f?0:m<f!==s?-1:1});for(let c=d.length;c>1;c--)e.deleteRow(c);for(const c of d)e.appendChild(c)}),e}}const Qi=class extends sd{constructor(e){super();y(this,"wikidataId");y(this,"searchText");y(this,"instanceOf");y(this,"notInstanceOf");this.searchText=e==null?void 0:e.searchText,this.wikidataId=(e==null?void 0:e.value)??new Kt(void 0),this.instanceOf=e==null?void 0:e.instanceOf,this.notInstanceOf=e==null?void 0:e.notInstanceOf}GetValue(){return this.wikidataId}IsValid(e){return e.startsWith("Q")&&!isNaN(Number(e.substring(1)))}InnerConstructElement(){const e=new ja({placeholder:F.t.general.wikipedia.searchWikidata,value:this.searchText,inputStyle:"width: calc(100% - 0.5rem); border: 1px solid black"}),i=this.wikidataId,o=new va({success:void 0}),a=e.GetValue().bind(s=>{if(s.length<3&&!s.match(/[qQ][0-9]+/))return o;const p=Ps.language.data,d=p+":"+s;let c=Qi._searchCache.get(d);return c===void 0&&(c=it.searchAndFetch(s,{lang:p,maxCount:5,notInstanceOf:this.notInstanceOf,instanceOf:this.instanceOf}),Qi._searchCache.set(d,c)),nc.FromPromiseWithErr(c)}),r=new Yn(a.map(s=>{if(e.GetValue().data.length===0)return F.t.general.wikipedia.doSearch;if(e.GetValue().data.length<3)return F.t.general.wikipedia.searchToShort;if(s===void 0)return new dd(F.t.general.loading);if(s.error!==void 0)return new P([F.t.general.wikipedia.failed.Clone().SetClass("alert"),s.error]);const p=s.success;return p.length===0?F.t.general.wikipedia.noResults.Subs({search:e.GetValue().data??""}):new P(p.map(d=>{const c=Wn.WikidataResponsePreview(d).SetClass("rounded-xl p-1 sm:p-2 md:p-3 m-px border-2 sm:border-4 transition-colors");return c.onClick(()=>{i.setData(d.id)}),i.addCallbackAndRunD(h=>{h===d.id?c.SetClass("subtle-background border-attention"):(c.RemoveClass("subtle-background"),c.RemoveClass("border-attention"))}),c})).SetClass("flex flex-col")},[e.GetValue()]));return new P([new je(F.t.general.wikipedia.searchWikidata,3).SetClass("m-2"),new P([we.search_svg().SetStyle("width: 1.5rem"),e.SetClass("m-2 w-full")]).SetClass("flex"),r]).SetClass("flex flex-col border-2 border-black rounded-xl m-2 p-2").ConstructElement()}};let Qn=Qi;y(Qn,"docs",new P([new je("Helper arguments"),new Dn(["name","doc"],[["key","the value of this tag will initialize search (default: name)"],["options",new P(["A JSON-object of type `{ removePrefixes: string[], removePostfixes: string[] }`.",new Dn(["subarg","doc"],[["removePrefixes","remove these snippets of text from the start of the passed string to search. This is either a list OR a hash of languages to a list. The individual strings are interpreted as case ignoring regexes"],["removePostfixes","remove these snippets of text from the end of the passed string to search. This is either a list OR a hash of languages to a list. The individual strings are interpreted as case ignoring regexes."],["instanceOf","A list of Q-identifier which indicates that the search results _must_ be an entity of this type, e.g. [`Q5`](https://www.wikidata.org/wiki/Q5) for humans"],["notInstanceof","A list of Q-identifiers which indicates that the search results _must not_ be an entity of this type, e.g. [`Q79007`](https://www.wikidata.org/wiki/Q79007) to filter away all streets from the search results"]])])]]),new je("Example usage"),`The following is the 'freeform'-part of a layer config which will trigger a search for the wikidata item corresponding with the name of the selected feature. It will also remove '-street', '-square', ... if found at the end of the name

\`\`\`json
"freeform": {
    "key": "name:etymology:wikidata",
    "type": "wikidata",
    "helperArgs": [
        "name",
        {
            "removePostfixes": {"en": [
                "street",
                "boulevard",
                "path",
                "square",
                "plaza",
            ],
             "nl": ["straat","plein","pad","weg",laan"],
             "fr":["route (de|de la|de l'| de le)"]
             },

            "#": "Remove streets and parks from the search results:"
             "notInstanceOf": ["Q79007","Q22698"]
        }

    ]
}
\`\`\`

Another example is to search for species and trees:

\`\`\`json
 "freeform": {
        "key": "species:wikidata",
        "type": "wikidata",
        "helperArgs": [
          "species",
          {
          "instanceOf": [10884, 16521]
        }]
      }
\`\`\`
`])),y(Qn,"_searchCache",new Map);class Sg extends Ue{constructor(){super("wikidata",new P(["A wikidata identifier, e.g. Q42.",Qn.docs]))}isValid(t){return t===void 0||t.length<=2?!1:!t.split(";").some(e=>it.ExtractKey(e)===void 0)}reformat(t){if(t===void 0)return;let e=t.split(";").map(i=>it.ExtractKey(i)).join("; ");return t.endsWith(";")&&(e=e+";"),e}}class $g extends zs{constructor(){super("pnat","A strict positive number");y(this,"isValid",e=>super.isValid(e)?Number(e)>0:!1)}getFeedback(e){const i=super.getFeedback(e);if(i!==void 0)return i;if(Number(e)===0)return F.t.validation.pnat.noZero}}class Mg extends Ue{constructor(e,i){super(e??"float",i??"A decimal number","decimal");y(this,"inputmode","decimal")}isValid(e){return!isNaN(Number(e))&&!e.endsWith(".")&&!e.endsWith(",")}reformat(e){return""+Number(e)}getFeedback(e){if(isNaN(Number(e)))return F.t.validation.nat.notANumber}}class xg extends Ue{constructor(){super("pfloat","A positive decimal number or zero");y(this,"isValid",e=>!isNaN(Number(e))&&Number(e)>=0&&!e.endsWith(".")&&!e.endsWith(","))}getFeedback(e){const i=super.getFeedback(e);if(i!==void 0)return i;if(Number(e)<0)return F.t.validation.nat.mustBePositive}}var jg=/^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/,qg=function(n){if(!n||n.length>254)return!1;var t=jg.test(n);if(!t)return!1;var e=n.split("@");if(e[0].length>64)return!1;var i=e[1].split(".");return!i.some(function(o){return o.length>63})};class kg extends Ue{constructor(){super("email","An email adress","email");y(this,"isValid",e=>e===void 0?!1:(e=e.trim(),e.startsWith("mailto:")&&(e=e.substring(7)),qg(e)));y(this,"reformat",e=>{if(e!==void 0)return e=e.trim(),e.startsWith("mailto:")&&(e=e.substring(7)),e})}getFeedback(e){return e.indexOf("@")<0?F.t.validation.email.noAt:super.getFeedback(e)}}class Jg extends Ue{constructor(){super("url","The validatedTextField will format URLs to always be valid and have a https://-header (even though the 'https'-part will be hidden from the user. Furthermore, some tracking parameters will be removed","url")}reformat(t){try{let e;!t.startsWith("http://")&&!t.startsWith("https://")&&!t.startsWith("http:")?e=new URL("https://"+t):e=new URL(t);const i=["fbclid","gclid","cmpid","agid","utm","utm_source","utm_medium","campaignid","campaign","AdGroupId","AdGroup","TargetId","msclkid"];for(const a of i)e.searchParams.delete(a.toLowerCase());let o=e.toString();return o.endsWith("/")&&!t.endsWith("/")&&(o=o.substr(0,o.length-1)),o}catch(e){console.error(e);return}}isValid(t){try{!t.startsWith("http://")&&!t.startsWith("https://")&&!t.startsWith("http:")&&(t="https://"+t);const e=new URL(t);return e.host.indexOf(".")>0&&e.host[e.host.length-1]!=="."}catch{return!1}}}const Ig={version:4,country_calling_codes:{1:["US","AG","AI","AS","BB","BM","BS","CA","DM","DO","GD","GU","JM","KN","KY","LC","MP","MS","PR","SX","TC","TT","VC","VG","VI"],7:["RU","KZ"],20:["EG"],27:["ZA"],30:["GR"],31:["NL"],32:["BE"],33:["FR"],34:["ES"],36:["HU"],39:["IT","VA"],40:["RO"],41:["CH"],43:["AT"],44:["GB","GG","IM","JE"],45:["DK"],46:["SE"],47:["NO","SJ"],48:["PL"],49:["DE"],51:["PE"],52:["MX"],53:["CU"],54:["AR"],55:["BR"],56:["CL"],57:["CO"],58:["VE"],60:["MY"],61:["AU","CC","CX"],62:["ID"],63:["PH"],64:["NZ"],65:["SG"],66:["TH"],81:["JP"],82:["KR"],84:["VN"],86:["CN"],90:["TR"],91:["IN"],92:["PK"],93:["AF"],94:["LK"],95:["MM"],98:["IR"],211:["SS"],212:["MA","EH"],213:["DZ"],216:["TN"],218:["LY"],220:["GM"],221:["SN"],222:["MR"],223:["ML"],224:["GN"],225:["CI"],226:["BF"],227:["NE"],228:["TG"],229:["BJ"],230:["MU"],231:["LR"],232:["SL"],233:["GH"],234:["NG"],235:["TD"],236:["CF"],237:["CM"],238:["CV"],239:["ST"],240:["GQ"],241:["GA"],242:["CG"],243:["CD"],244:["AO"],245:["GW"],246:["IO"],247:["AC"],248:["SC"],249:["SD"],250:["RW"],251:["ET"],252:["SO"],253:["DJ"],254:["KE"],255:["TZ"],256:["UG"],257:["BI"],258:["MZ"],260:["ZM"],261:["MG"],262:["RE","YT"],263:["ZW"],264:["NA"],265:["MW"],266:["LS"],267:["BW"],268:["SZ"],269:["KM"],290:["SH","TA"],291:["ER"],297:["AW"],298:["FO"],299:["GL"],350:["GI"],351:["PT"],352:["LU"],353:["IE"],354:["IS"],355:["AL"],356:["MT"],357:["CY"],358:["FI","AX"],359:["BG"],370:["LT"],371:["LV"],372:["EE"],373:["MD"],374:["AM"],375:["BY"],376:["AD"],377:["MC"],378:["SM"],380:["UA"],381:["RS"],382:["ME"],383:["XK"],385:["HR"],386:["SI"],387:["BA"],389:["MK"],420:["CZ"],421:["SK"],423:["LI"],500:["FK"],501:["BZ"],502:["GT"],503:["SV"],504:["HN"],505:["NI"],506:["CR"],507:["PA"],508:["PM"],509:["HT"],590:["GP","BL","MF"],591:["BO"],592:["GY"],593:["EC"],594:["GF"],595:["PY"],596:["MQ"],597:["SR"],598:["UY"],599:["CW","BQ"],670:["TL"],672:["NF"],673:["BN"],674:["NR"],675:["PG"],676:["TO"],677:["SB"],678:["VU"],679:["FJ"],680:["PW"],681:["WF"],682:["CK"],683:["NU"],685:["WS"],686:["KI"],687:["NC"],688:["TV"],689:["PF"],690:["TK"],691:["FM"],692:["MH"],850:["KP"],852:["HK"],853:["MO"],855:["KH"],856:["LA"],880:["BD"],886:["TW"],960:["MV"],961:["LB"],962:["JO"],963:["SY"],964:["IQ"],965:["KW"],966:["SA"],967:["YE"],968:["OM"],970:["PS"],971:["AE"],972:["IL"],973:["BH"],974:["QA"],975:["BT"],976:["MN"],977:["NP"],992:["TJ"],993:["TM"],994:["AZ"],995:["GE"],996:["KG"],998:["UZ"]},countries:{AC:["247","00","(?:[01589]\\d|[46])\\d{4}",[5,6]],AD:["376","00","(?:1|6\\d)\\d{7}|[135-9]\\d{5}",[6,8,9],[["(\\d{3})(\\d{3})","$1 $2",["[135-9]"]],["(\\d{4})(\\d{4})","$1 $2",["1"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]]],AE:["971","00","(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",[5,6,7,8,9,10,11,12],[["(\\d{3})(\\d{2,9})","$1 $2",["60|8"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[236]|[479][2-8]"],"0$1"],["(\\d{3})(\\d)(\\d{5})","$1 $2 $3",["[479]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"]],"0"],AF:["93","00","[2-7]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"]],"0"],AG:["1","011","(?:268|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([457]\\d{6})$","268$1",0,"268"],AI:["1","011","(?:264|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2457]\\d{6})$","264$1",0,"264"],AL:["355","00","(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}",[6,7,8,9],[["(\\d{3})(\\d{3,4})","$1 $2",["80|9"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["4[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2358][2-5]|4"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["[23578]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["6"],"0$1"]],"0"],AM:["374","00","(?:[1-489]\\d|55|60|77)\\d{6}",[8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[89]0"],"0 $1"],["(\\d{3})(\\d{5})","$1 $2",["2|3[12]"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["1|47"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[3-9]"],"0$1"]],"0"],AO:["244","00","[29]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[29]"]]]],AR:["54","00","(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}",[10,11],[["(\\d{4})(\\d{2})(\\d{4})","$1 $2-$3",["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])","2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["1"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[68]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2-$3",["[23]"],"0$1",1],["(\\d)(\\d{4})(\\d{2})(\\d{4})","$2 15-$3-$4",["9(?:2[2-469]|3[3-578])","9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))","9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",0,"$1 $2 $3-$4"],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 15-$3-$4",["91"],"0$1",0,"$1 $2 $3-$4"],["(\\d{3})(\\d{3})(\\d{5})","$1-$2-$3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 15-$3-$4",["9"],"0$1",0,"$1 $2 $3-$4"]],"0",0,"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?","9$1"],AS:["1","011","(?:[58]\\d\\d|684|900)\\d{7}",[10],0,"1",0,"1|([267]\\d{6})$","684$1",0,"684"],AT:["43","00","1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}",[4,5,6,7,8,9,10,11,12,13],[["(\\d)(\\d{3,12})","$1 $2",["1(?:11|[2-9])"],"0$1"],["(\\d{3})(\\d{2})","$1 $2",["517"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["5[079]"],"0$1"],["(\\d{3})(\\d{3,10})","$1 $2",["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"],"0$1"],["(\\d{4})(\\d{3,9})","$1 $2",["[2-467]|5[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["5"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,7})","$1 $2 $3",["5"],"0$1"]],"0"],AU:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}",[5,6,7,8,9,10,12],[["(\\d{2})(\\d{3,4})","$1 $2",["16"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,4})","$1 $2 $3",["16"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["14|4"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[2378]"],"(0$1)"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:30|[89])"]]],"0",0,"0|(183[12])",0,0,0,[["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,["163\\d{2,6}",[5,6,7,8,9]],["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],AW:["297","00","(?:[25-79]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[25-9]"]]]],AX:["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}",[5,6,7,8,9,10,11,12],0,"0",0,0,0,0,"18",0,"00"],AZ:["994","00","365\\d{6}|(?:[124579]\\d|60|88)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[28]|2|365|46","1[28]|2|365[45]|46","1[28]|2|365(?:4|5[02])|46"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[13-9]"],"0$1"]],"0"],BA:["387","00","6\\d{8}|(?:[35689]\\d|49|70)\\d{6}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["6[1-3]|[7-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2-$3",["[3-5]|6[56]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["6"],"0$1"]],"0"],BB:["1","011","(?:246|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","246$1",0,"246"],BD:["880","00","[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{4,6})","$1-$2",["31[5-8]|[459]1"],"0$1"],["(\\d{3})(\\d{3,7})","$1-$2",["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"],"0$1"],["(\\d{4})(\\d{3,6})","$1-$2",["[13-9]|22"],"0$1"],["(\\d)(\\d{7,8})","$1-$2",["2"],"0$1"]],"0"],BE:["32","00","4\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:80|9)0"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[239]|4[23]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[15-8]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4"],"0$1"]],"0"],BF:["226","00","[025-7]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[025-7]"]]]],BG:["359","00","00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",[6,7,8,9,12],[["(\\d)(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["43[1-6]|70[1-9]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:70|8)0"],"0$1"],["(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3",["43[1-7]|7"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[48]|9[08]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"]],"0"],BH:["973","00","[136-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[13679]|8[047]"]]]],BI:["257","00","(?:[267]\\d|31)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2367]"]]]],BJ:["229","00","[24-689]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-689]"]]]],BL:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:2[7-9]|5[12]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],BM:["1","011","(?:441|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","441$1",0,"441"],BN:["673","00","[2-578]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-578]"]]]],BO:["591","00(?:1\\d)?","(?:[2-467]\\d\\d|8001)\\d{5}",[8,9],[["(\\d)(\\d{7})","$1 $2",["[23]|4[46]"]],["(\\d{8})","$1",["[67]"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["8"]]],"0",0,"0(1\\d)?"],BQ:["599","00","(?:[34]1|7\\d)\\d{5}",[7],0,0,0,0,0,0,"[347]"],BR:["55","00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)","(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",[8,9,10,11],[["(\\d{4})(\\d{4})","$1-$2",["300|4(?:0[02]|37)","4(?:02|37)0|[34]00"]],["(\\d{3})(\\d{2,3})(\\d{4})","$1 $2 $3",["(?:[358]|90)0"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"],"($1)"],["(\\d{2})(\\d{5})(\\d{4})","$1 $2-$3",["[16][1-9]|[2-57-9]"],"($1)"]],"0",0,"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?","$2"],BS:["1","011","(?:242|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([3-8]\\d{6})$","242$1",0,"242"],BT:["975","00","[17]\\d{7}|[2-8]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[2-68]|7[246]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[67]|7"]]]],BW:["267","00","(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}",[7,8,10],[["(\\d{2})(\\d{5})","$1 $2",["90"]],["(\\d{3})(\\d{4})","$1 $2",["[24-6]|3[15-79]"]],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37]"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["8"]]]],BY:["375","810","(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3})","$1 $2",["800"],"8 $1"],["(\\d{3})(\\d{2})(\\d{2,4})","$1 $2 $3",["800"],"8 $1"],["(\\d{4})(\\d{2})(\\d{3})","$1 $2-$3",["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])","1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"],"8 0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["1(?:[56]|7[467])|2[1-3]"],"8 0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-4]"],"8 0$1"],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["[89]"],"8 $1"]],"8",0,"0|80?",0,0,0,0,"8~10"],BZ:["501","00","(?:0800\\d|[2-8])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1-$2",["[2-8]"]],["(\\d)(\\d{3})(\\d{4})(\\d{3})","$1-$2-$3-$4",["0"]]]],CA:["1","011","(?:[2-8]\\d|90)\\d{8}|3\\d{6}",[7,10],0,"1",0,0,0,0,0,[["(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|3[178]|50|68|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}",[10]],["",[10]],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",[10]],["900[2-9]\\d{6}",[10]],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-7]|33|44|66|77|88)|622)[2-9]\\d{6}",[10]],0,["310\\d{4}",[7]],0,["600[2-9]\\d{6}",[10]]]],CC:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],CD:["243","00","[189]\\d{8}|[1-68]\\d{6}",[7,9],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[1-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]"],"0$1"]],"0"],CF:["236","00","(?:[27]\\d{3}|8776)\\d{4}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[278]"]]]],CG:["242","00","222\\d{6}|(?:0\\d|80)\\d{7}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[02]"]]]],CH:["41","00","8\\d{11}|[2-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8[047]|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-79]|81"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["8"],"0$1"]],"0"],CI:["225","00","[02]\\d{9}",[10],[["(\\d{2})(\\d{2})(\\d)(\\d{5})","$1 $2 $3 $4",["2"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3 $4",["0"]]]],CK:["682","00","[2-578]\\d{4}",[5],[["(\\d{2})(\\d{3})","$1 $2",["[2-578]"]]]],CL:["56","(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0","12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}",[9,10,11],[["(\\d{5})(\\d{4})","$1 $2",["219","2196"],"($1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["44"]],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2[1-36]"],"($1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["9[2-9]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"],"($1)"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["60|8"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{3})(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3 $4",["60"]]]],CM:["237","00","[26]\\d{8}|88\\d{6,7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["88"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[26]|88"]]]],CN:["86","00|1(?:[12]\\d|79)\\d\\d00","1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}",[7,8,9,10,11,12],[["(\\d{2})(\\d{5,6})","$1 $2",["(?:10|2[0-57-9])[19]","(?:10|2[0-57-9])(?:10|9[56])","10(?:10|9[56])|2[0-57-9](?:100|9[56])"],"0$1"],["(\\d{3})(\\d{5,6})","$1 $2",["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]","(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]","85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])","85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["(?:4|80)0"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|2(?:[02-57-9]|1[1-9])","10|2(?:[02-57-9]|1[1-9])","10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"],"0$1",1],["(\\d{3})(\\d{7,8})","$1 $2",["9"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["80"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[3-578]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["1[3-9]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["[12]"],"0$1",1]],"0",0,"0|(1(?:[12]\\d|79)\\d\\d)",0,0,0,0,"00"],CO:["57","00(?:4(?:[14]4|56)|[579])","(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}",[10,11],[["(\\d{3})(\\d{7})","$1 $2",["6"],"($1)"],["(\\d{3})(\\d{7})","$1 $2",["3[0-357]|91"]],["(\\d)(\\d{3})(\\d{7})","$1-$2-$3",["1"],"0$1",0,"$1 $2 $3"]],"0",0,"0(4(?:[14]4|56)|[579])?"],CR:["506","00","(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}",[8,10],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[3-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[89]"]]],0,0,"(19(?:0[0-2468]|1[09]|20|66|77|99))"],CU:["53","119","[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}",[6,7,8,10],[["(\\d{2})(\\d{4,6})","$1 $2",["2[1-4]|[34]"],"(0$1)"],["(\\d)(\\d{6,7})","$1 $2",["7"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["5"],"0$1"],["(\\d{3})(\\d{7})","$1 $2",["8"],"0$1"]],"0"],CV:["238","0","(?:[2-59]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2-589]"]]]],CW:["599","00","(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[3467]"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["9[4-8]"]]],0,0,0,0,0,"[69]"],CX:["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",[9]],["4(?:83[0-389]|93[0-6])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-9]|8[0-24-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],CY:["357","00","(?:[279]\\d|[58]0)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[257-9]"]]]],CZ:["420","00","(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]|9[015-7]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3 $4",["96"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]]],DE:["49","00","[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}",[4,5,6,7,8,9,10,11,12,13,14,15],[["(\\d{2})(\\d{3,13})","$1 $2",["3[02]|40|[68]9"],"0$1"],["(\\d{3})(\\d{3,12})","$1 $2",["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1","2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"],"0$1"],["(\\d{4})(\\d{2,11})","$1 $2",["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]","[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["138"],"0$1"],["(\\d{5})(\\d{2,10})","$1 $2",["3"],"0$1"],["(\\d{3})(\\d{5,11})","$1 $2",["181"],"0$1"],["(\\d{3})(\\d)(\\d{4,10})","$1 $2 $3",["1(?:3|80)|9"],"0$1"],["(\\d{3})(\\d{7,8})","$1 $2",["1[67]"],"0$1"],["(\\d{3})(\\d{7,12})","$1 $2",["8"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["185","1850","18500"],"0$1"],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["18[68]"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["15[0568]"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["15[1279]"],"0$1"],["(\\d{3})(\\d{8})","$1 $2",["18"],"0$1"],["(\\d{3})(\\d{2})(\\d{7,8})","$1 $2 $3",["1(?:6[023]|7)"],"0$1"],["(\\d{4})(\\d{2})(\\d{7})","$1 $2 $3",["15[279]"],"0$1"],["(\\d{3})(\\d{2})(\\d{8})","$1 $2 $3",["15"],"0$1"]],"0"],DJ:["253","00","(?:2\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[27]"]]]],DK:["45","00","[2-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-9]"]]]],DM:["1","011","(?:[58]\\d\\d|767|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","767$1",0,"767"],DO:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,0,0,0,"8001|8[024]9"],DZ:["213","00","(?:[1-4]|[5-79]\\d|80)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["9"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-8]"],"0$1"]],"0"],EC:["593","00","1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}",[8,9,10,11],[["(\\d)(\\d{3})(\\d{4})","$1 $2-$3",["[2-7]"],"(0$1)",0,"$1-$2-$3"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{3})(\\d{3,4})","$1 $2 $3",["1"]]],"0"],EE:["372","00","8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88","[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]],["(\\d{4})(\\d{3,4})","$1 $2",["[45]|8(?:00|[1-49])","[45]|8(?:00[1-9]|[1-49])"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],EG:["20","00","[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}",[8,9,10],[["(\\d)(\\d{7,8})","$1 $2",["[23]"],"0$1"],["(\\d{2})(\\d{6,7})","$1 $2",["1[35]|[4-6]|8[2468]|9[235-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[189]"],"0$1"]],"0"],EH:["212","00","[5-8]\\d{8}",[9],0,"0",0,0,0,0,"528[89]"],ER:["291","00","[178]\\d{6}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[178]"],"0$1"]],"0"],ES:["34","00","[5-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]00"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-9]"]]]],ET:["251","00","(?:11|[2-579]\\d)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-579]"],"0$1"]],"0"],FI:["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}",[5,6,7,8,9,10,11,12],[["(\\d)(\\d{4,9})","$1 $2",["[2568][1-8]|3(?:0[1-9]|[1-9])|9"],"0$1"],["(\\d{3})(\\d{3,7})","$1 $2",["[12]00|[368]|70[07-9]"],"0$1"],["(\\d{2})(\\d{4,8})","$1 $2",["[1245]|7[135]"],"0$1"],["(\\d{2})(\\d{6,10})","$1 $2",["7"],"0$1"]],"0",0,0,0,0,"1[03-79]|[2-9]",0,"00"],FJ:["679","0(?:0|52)","45\\d{5}|(?:0800\\d|[235-9])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1 $2",["[235-9]|45"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]]],0,0,0,0,0,0,0,"00"],FK:["500","00","[2-7]\\d{4}",[5]],FM:["691","00","(?:[39]\\d\\d|820)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[389]"]]]],FO:["298","00","[2-9]\\d{5}",[6],[["(\\d{6})","$1",["[2-9]"]]],0,0,"(10(?:01|[12]0|88))"],FR:["33","00","[1-9]\\d{8}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0 $1"],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[1-79]"],"0$1"]],"0"],GA:["241","00","(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}",[7,8],[["(\\d)(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-7]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["11|[67]"],"0$1"]],0,0,"0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})","$1"],GB:["44","00","[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",[7,9,10],[["(\\d{3})(\\d{4})","$1 $2",["800","8001","80011","800111","8001111"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["845","8454","84546","845464"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["800"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["1(?:38|5[23]|69|76|94)","1(?:(?:38|69)7|5(?:24|39)|768|946)","1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["1(?:[2-69][02-9]|[78])"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[25]|7(?:0|6[02-9])","[25]|7(?:0|6(?:[03-9]|2[356]))"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[1389]"],"0$1"]],"0",0,0,0,0,0,[["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:[02]\\d|1[0-246-9])))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}",[9,10]],["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]],0," x"],GD:["1","011","(?:473|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","473$1",0,"473"],GE:["995","00","(?:[3-57]\\d\\d|800)\\d{6}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["32"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[57]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[348]"],"0$1"]],"0"],GF:["594","00","(?:[56]94|80\\d|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],GG:["44","00","(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",[7,9,10],0,"0",0,"0|([25-9]\\d{5})$","1481$1",0,0,[["1481[25-9]\\d{5}",[10]],["7(?:(?:781|839)\\d|911[17])\\d{5}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]]],GH:["233","00","(?:[235]\\d{3}|800)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[235]"],"0$1"]],"0"],GI:["350","00","(?:[25]\\d\\d|606)\\d{5}",[8],[["(\\d{3})(\\d{5})","$1 $2",["2"]]]],GL:["299","00","(?:19|[2-689]\\d|70)\\d{4}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["19|[2-9]"]]]],GM:["220","00","[2-9]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],GN:["224","00","722\\d{6}|(?:3|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["3"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[67]"]]]],GP:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0",0,0,0,0,0,[["590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|6[0-389]|7[08]|8[0-689]|9\\d)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],GQ:["240","00","222\\d{6}|(?:3\\d|55|[89]0)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235]"]],["(\\d{3})(\\d{6})","$1 $2",["[89]"]]]],GR:["30","00","5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}",[10,11,12],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["21|7"]],["(\\d{4})(\\d{6})","$1 $2",["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2689]"]],["(\\d{3})(\\d{3,4})(\\d{5})","$1 $2 $3",["8"]]]],GT:["502","00","(?:1\\d{3}|[2-7])\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],GU:["1","011","(?:[58]\\d\\d|671|900)\\d{7}",[10],0,"1",0,"1|([3-9]\\d{6})$","671$1",0,"671"],GW:["245","00","[49]\\d{8}|4\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["40"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"]]]],GY:["592","001","9008\\d{3}|(?:[2-467]\\d\\d|862)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-46-9]"]]]],HK:["852","00(?:30|5[09]|[126-9]?)","8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}",[5,6,7,8,9,11],[["(\\d{3})(\\d{2,5})","$1 $2",["900","9003"]],["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{3})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]],0,0,0,0,0,0,0,"00"],HN:["504","00","8\\d{10}|[237-9]\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1-$2",["[237-9]"]]]],HR:["385","00","(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",[6,7,8,9],[["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["6[01]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{4})(\\d{3})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-5]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"]],"0"],HT:["509","00","(?:[2-489]\\d|55)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[2-589]"]]]],HU:["36","00","[235-7]\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"06 $1"]],"06"],ID:["62","00[89]","(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}",[7,8,9,10,11,12,13],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["15"]],["(\\d{2})(\\d{5,9})","$1 $2",["2[124]|[36]1"],"(0$1)"],["(\\d{3})(\\d{5,7})","$1 $2",["800"],"0$1"],["(\\d{3})(\\d{5,8})","$1 $2",["[2-79]"],"(0$1)"],["(\\d{3})(\\d{3,4})(\\d{3})","$1-$2-$3",["8[1-35-9]"],"0$1"],["(\\d{3})(\\d{6,8})","$1 $2",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["804"],"0$1"],["(\\d{3})(\\d)(\\d{3})(\\d{3})","$1 $2 $3 $4",["80"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1-$2-$3",["8"],"0$1"]],"0"],IE:["353","00","(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["2[24-9]|47|58|6[237-9]|9[35-9]"],"(0$1)"],["(\\d{3})(\\d{5})","$1 $2",["[45]0"],"(0$1)"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["1"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2569]|4[1-69]|7[14]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["81"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[78]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["4"],"(0$1)"],["(\\d{2})(\\d)(\\d{3})(\\d{4})","$1 $2 $3 $4",["8"],"0$1"]],"0"],IL:["972","0(?:0|1[2-9])","1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",[7,8,9,10,11,12],[["(\\d{4})(\\d{3})","$1-$2",["125"]],["(\\d{4})(\\d{2})(\\d{2})","$1-$2-$3",["121"]],["(\\d)(\\d{3})(\\d{4})","$1-$2-$3",["[2-489]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1-$2-$3",["12"]],["(\\d{4})(\\d{6})","$1-$2",["159"]],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3-$4",["1[7-9]"]],["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})","$1-$2 $3-$4",["15"]]],"0"],IM:["44","00","1624\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([25-8]\\d{5})$","1624$1",0,"74576|(?:16|7[56])24"],IN:["91","00","(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}",[8,9,10,11,12,13],[["(\\d{8})","$1",["5(?:0|2[23]|3[03]|[67]1|88)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],0,1],["(\\d{4})(\\d{4,5})","$1 $2",["180","1800"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["140"],0,1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["11|2[02]|33|4[04]|79[1-7]|80[2-46]","11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])","11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"],"0$1",1],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807","1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]","1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"],"0$1",1],["(\\d{5})(\\d{5})","$1 $2",["[6-9]"],"0$1",1],["(\\d{4})(\\d{2,4})(\\d{4})","$1 $2 $3",["1(?:6|8[06])","1(?:6|8[06]0)"],0,1],["(\\d{4})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["18"],0,1]],"0"],IO:["246","00","3\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["3"]]]],IQ:["964","00","(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-6]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],IR:["98","00","[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",[4,5,6,7,10],[["(\\d{4,5})","$1",["96"],"0$1"],["(\\d{2})(\\d{4,5})","$1 $2",["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[1-8]"],"0$1"]],"0"],IS:["354","00|1(?:0(?:01|[12]0)|100)","(?:38\\d|[4-9])\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["[4-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["3"]]],0,0,0,0,0,0,0,"00"],IT:["39","00","0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?",[6,7,8,9,10,11],[["(\\d{2})(\\d{4,6})","$1 $2",["0[26]"]],["(\\d{3})(\\d{3,6})","$1 $2",["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])","0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]],["(\\d{4})(\\d{2,6})","$1 $2",["0(?:[13-579][2-46-8]|8[236-8])"]],["(\\d{4})(\\d{4})","$1 $2",["894"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[26]|5"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["1(?:44|[679])|[378]"]],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[13-57-9][0159]|14"]],["(\\d{2})(\\d{4})(\\d{5})","$1 $2 $3",["0[26]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["3"]]],0,0,0,0,0,0,[["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"],["3[1-9]\\d{8}|3[2-9]\\d{7}",[9,10]],["80(?:0\\d{3}|3)\\d{3}",[6,9]],["(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}",[6,8,9,10]],["1(?:78\\d|99)\\d{6}",[9,10]],0,0,0,["55\\d{8}",[10]],["84(?:[08]\\d{3}|[17])\\d{3}",[6,9]]]],JE:["44","00","1534\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([0-24-8]\\d{5})$","1534$1",0,0,[["1534[0-24-8]\\d{5}"],["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"],["80(?:07(?:35|81)|8901)\\d{4}"],["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"],["701511\\d{4}"],0,["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}"],["56\\d{8}"]]],JM:["1","011","(?:[58]\\d\\d|658|900)\\d{7}",[10],0,"1",0,0,0,0,"658|876"],JO:["962","00","(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2356]|87"],"(0$1)"],["(\\d{3})(\\d{5,6})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["70"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],JP:["81","010","00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",[8,9,10,11,12,13,14,15,16,17],[["(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3",["(?:12|57|99)0"],"0$1"],["(\\d{4})(\\d)(\\d{4})","$1-$2-$3",["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2-$3",["[36]|4(?:2[09]|7[01])","[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"],"0$1"],["(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3",["[14]|[289][2-9]|5[3-9]|7[2-4679]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["800"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[257-9]"],"0$1"]],"0"],KE:["254","000","(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}",[7,8,9,10],[["(\\d{2})(\\d{5,7})","$1 $2",["[24-6]"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[17]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0"],KG:["996","00","8\\d{9}|(?:[235-8]\\d|99)\\d{7}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["3(?:1[346]|[24-79])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235-79]|88"],"0$1"],["(\\d{3})(\\d{3})(\\d)(\\d{2,3})","$1 $2 $3 $4",["8"],"0$1"]],"0"],KH:["855","00[14-9]","1\\d{9}|[1-9]\\d{7,8}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],KI:["686","00","(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",[5,8],0,"0"],KM:["269","00","[3478]\\d{6}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[3478]"]]]],KN:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","869$1",0,"869"],KP:["850","00|99","85\\d{6}|(?:19\\d|[2-7])\\d{7}",[8,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"]],"0"],KR:["82","00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))","00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}",[5,6,8,9,10,11,12,13,14],[["(\\d{2})(\\d{3,4})","$1-$2",["(?:3[1-3]|[46][1-4]|5[1-5])1"],"0$1"],["(\\d{4})(\\d{4})","$1-$2",["1"]],["(\\d)(\\d{3,4})(\\d{4})","$1-$2-$3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60|8"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1-$2-$3",["[1346]|5[1-5]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{2})(\\d{5})(\\d{4})","$1-$2-$3",["5"],"0$1"]],"0",0,"0(8(?:[1-46-8]|5\\d\\d))?"],KW:["965","00","18\\d{5}|(?:[2569]\\d|41)\\d{6}",[7,8],[["(\\d{4})(\\d{3,4})","$1 $2",["[169]|2(?:[235]|4[1-35-9])|52"]],["(\\d{3})(\\d{5})","$1 $2",["[245]"]]]],KY:["1","011","(?:345|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","345$1",0,"345"],KZ:["7","810","(?:33622|8\\d{8})\\d{5}|[78]\\d{9}",[10,14],0,"8",0,0,0,0,"33|7",0,"8~10"],LA:["856","00","[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2[13]|3[14]|[4-8]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["30[013-9]"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[23]"],"0$1"]],"0"],LB:["961","00","[27-9]\\d{7}|[13-9]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27-9]"]]],"0"],LC:["1","011","(?:[58]\\d\\d|758|900)\\d{7}",[10],0,"1",0,"1|([2-8]\\d{6})$","758$1",0,"758"],LI:["423","00","[68]\\d{8}|(?:[2378]\\d|90)\\d{5}",[7,9],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2379]|8(?:0[09]|7)","[2379]|8(?:0(?:02|9)|7)"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["69"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]],"0",0,"0|(1001)"],LK:["94","00","[1-9]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[1-689]"],"0$1"]],"0"],LR:["231","00","(?:[25]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[4-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23578]"],"0$1"]],"0"],LS:["266","00","(?:[256]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2568]"]]]],LT:["370","00","(?:[3469]\\d|52|[78]0)\\d{6}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["52[0-7]"],"(8-$1)",1],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[7-9]"],"8 $1",1],["(\\d{2})(\\d{6})","$1 $2",["37|4(?:[15]|6[1-8])"],"(8-$1)",1],["(\\d{3})(\\d{5})","$1 $2",["[3-6]"],"(8-$1)",1]],"8",0,"[08]"],LU:["352","00","35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}",[4,5,6,7,8,9,10,11],[["(\\d{2})(\\d{3})","$1 $2",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["20[2-689]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4",["2(?:[0367]|4[3-8])"]],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["80[01]|90[015]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["20"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4 $5",["2(?:[0367]|4[3-8])"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})","$1 $2 $3 $4",["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]],0,0,"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"],LV:["371","00","(?:[268]\\d|90)\\d{6}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[269]|8[01]"]]]],LY:["218","00","[2-9]\\d{8}",[9],[["(\\d{2})(\\d{7})","$1-$2",["[2-9]"],"0$1"]],"0"],MA:["212","00","[5-8]\\d{8}",[9],[["(\\d{5})(\\d{4})","$1-$2",["5(?:29|38)","5(?:29[1289]|389)","529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5[45]"],"0$1"],["(\\d{4})(\\d{5})","$1-$2",["5(?:2[2-489]|3[5-9]|9)|892","5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"],"0$1"],["(\\d{2})(\\d{7})","$1-$2",["8"],"0$1"],["(\\d{3})(\\d{6})","$1-$2",["[5-7]"],"0$1"]],"0",0,0,0,0,0,[["5293[01]\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"],["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[017]\\d|2[0-2]|6[0-8]|8[0-3]))\\d{6}"],["80\\d{7}"],["89\\d{7}"],0,0,0,0,["592(?:4[0-2]|93)\\d{4}"]]],MC:["377","00","(?:[3489]|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["4"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[389]"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["6"],"0$1"]],"0"],MD:["373","00","(?:[235-7]\\d|[89]0)\\d{6}",[8],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["22|3"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[25-7]"],"0$1"]],"0"],ME:["382","00","(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"0$1"]],"0"],MF:["590","00","(?:590|(?:69|80)\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["976[01]\\d{5}"]]],MG:["261","00","[23]\\d{8}",[9],[["(\\d{2})(\\d{2})(\\d{3})(\\d{2})","$1 $2 $3 $4",["[23]"],"0$1"]],"0",0,"0|([24-9]\\d{6})$","20$1"],MH:["692","011","329\\d{4}|(?:[256]\\d|45)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1-$2",["[2-6]"]]],"1"],MK:["389","00","[2-578]\\d{7}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2|34[47]|4(?:[37]7|5[47]|64)"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[347]"],"0$1"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["[58]"],"0$1"]],"0"],ML:["223","00","[24-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-9]"]]]],MM:["95","00","1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}",[6,7,8,9,10],[["(\\d)(\\d{2})(\\d{3})","$1 $2 $3",["16|2"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[4-7]|8[1-35]"],"0$1"],["(\\d)(\\d{3})(\\d{4,6})","$1 $2 $3",["9(?:2[0-4]|[35-9]|4[137-9])"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["92"],"0$1"],["(\\d)(\\d{5})(\\d{4})","$1 $2 $3",["9"],"0$1"]],"0"],MN:["976","001","[12]\\d{7,9}|[5-9]\\d{7}",[8,9,10],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[12]1"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[5-9]"]],["(\\d{3})(\\d{5,6})","$1 $2",["[12]2[1-3]"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["[12](?:27|3[2-8]|4[2-68]|5[1-4689])","[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["[12]"],"0$1"]],"0"],MO:["853","00","0800\\d{3}|(?:28|[68]\\d)\\d{6}",[7,8],[["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{4})(\\d{4})","$1 $2",["[268]"]]]],MP:["1","011","[58]\\d{9}|(?:67|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","670$1",0,"670"],MQ:["596","00","(?:69|80)\\d{7}|(?:59|97)6\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],MR:["222","00","(?:[2-4]\\d\\d|800)\\d{5}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-48]"]]]],MS:["1","011","(?:[58]\\d\\d|664|900)\\d{7}",[10],0,"1",0,"1|([34]\\d{6})$","664$1",0,"664"],MT:["356","00","3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2357-9]"]]]],MU:["230","0(?:0|[24-7]0|3[03])","(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[2-46]|8[013]"]],["(\\d{4})(\\d{4})","$1 $2",["[57]"]],["(\\d{5})(\\d{5})","$1 $2",["8"]]],0,0,0,0,0,0,0,"020"],MV:["960","0(?:0|19)","(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",[7,10],[["(\\d{3})(\\d{4})","$1-$2",["[3467]|9[1-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"]]],0,0,0,0,0,0,0,"00"],MW:["265","00","(?:[1289]\\d|31|77)\\d{7}|1\\d{6}",[7,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["1[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[137-9]"],"0$1"]],"0"],MX:["52","0[09]","1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[01]\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}",[10,11],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["33|5[56]|81"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2-9]"],0,1],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 $3 $4",["1(?:33|5[56]|81)"],0,1],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 $3 $4",["1"],0,1]],"01",0,"0(?:[12]|4[45])|1",0,0,0,0,"00"],MY:["60","00","1\\d{8,9}|(?:3\\d|[4-9])\\d{7}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1-$2 $3",["[4-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1-$2 $3",["1(?:[02469]|[378][1-9]|53)|8","1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2 $3",["3"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3-$4",["1(?:[367]|80)"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2 $3",["15"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2 $3",["1"],"0$1"]],"0"],MZ:["258","00","(?:2|8\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2|8[2-79]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],NA:["264","00","[68]\\d{7,8}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["87"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],NC:["687","00","(?:050|[2-57-9]\\d\\d)\\d{3}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1.$2.$3",["[02-57-9]"]]]],NE:["227","00","[027-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["08"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[089]|2[013]|7[04]"]]]],NF:["672","00","[13]\\d{5}",[6],[["(\\d{2})(\\d{4})","$1 $2",["1[0-3]"]],["(\\d)(\\d{5})","$1 $2",["[13]"]]],0,0,"([0-258]\\d{4})$","3$1"],NG:["234","009","(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}",[7,8,10,11,12,13,14],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["78"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]|9(?:0[3-9]|[1-9])"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[3-7]|8[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["[78]"],"0$1"],["(\\d{3})(\\d{5})(\\d{5,6})","$1 $2 $3",["[78]"],"0$1"]],"0"],NI:["505","00","(?:1800|[25-8]\\d{3})\\d{4}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[125-8]"]]]],NL:["31","00","(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}",[5,6,7,8,9,10,11],[["(\\d{3})(\\d{4,7})","$1 $2",["[89]0"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["66"],"0$1"],["(\\d)(\\d{8})","$1 $2",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-578]|91"],"0$1"],["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3",["9"],"0$1"]],"0"],NO:["47","00","(?:0|[2-9]\\d{3})\\d{4}",[5,8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[489]|59"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[235-7]"]]],0,0,0,0,0,"[02-689]|7[0-8]"],NP:["977","00","(?:1\\d|9)\\d{9}|[1-9]\\d{7}",[8,10,11],[["(\\d)(\\d{7})","$1-$2",["1[2-6]"],"0$1"],["(\\d{2})(\\d{6})","$1-$2",["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"],"0$1"],["(\\d{3})(\\d{7})","$1-$2",["9"]]],"0"],NR:["674","00","(?:444|(?:55|8\\d)\\d|666)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[4-68]"]]]],NU:["683","00","(?:[47]|888\\d)\\d{3}",[4,7],[["(\\d{3})(\\d{4})","$1 $2",["8"]]]],NZ:["64","0(?:0|161)","[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,8})","$1 $2",["8[1-579]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["50[036-8]|[89]0","50(?:[0367]|88)|[89]0"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["24|[346]|7[2-57-9]|9[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:10|74)|[59]|80"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["1|2[028]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,5})","$1 $2 $3",["2(?:[169]|7[0-35-9])|7|86"],"0$1"]],"0",0,0,0,0,0,0,"00"],OM:["968","00","(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}",[7,8,9],[["(\\d{3})(\\d{4,6})","$1 $2",["[58]"]],["(\\d{2})(\\d{6})","$1 $2",["2"]],["(\\d{4})(\\d{4})","$1 $2",["[179]"]]]],PA:["507","00","(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}",[7,8,10,11],[["(\\d{3})(\\d{4})","$1-$2",["[1-57-9]"]],["(\\d{4})(\\d{4})","$1-$2",["[68]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]]],PE:["51","00|19(?:1[124]|77|90)00","(?:[14-8]|9\\d)\\d{7}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["80"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["1"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[4-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"]]],"0",0,0,0,0,0,0,"00"," Anexo "],PF:["689","00","4\\d{5}(?:\\d{2})?|8\\d{7,8}",[6,8,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["44"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4|8[7-9]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],PG:["675","00|140[1-3]","(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["18|[2-69]|85"]],["(\\d{4})(\\d{4})","$1 $2",["[78]"]]],0,0,0,0,0,0,0,"00"],PH:["63","00","(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}",[6,8,9,10,11,12,13],[["(\\d)(\\d{5})","$1 $2",["2"],"(0$1)"],["(\\d{4})(\\d{4,6})","$1 $2",["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2","3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"],"(0$1)"],["(\\d{5})(\\d{4})","$1 $2",["346|4(?:27|9[35])|883","3469|4(?:279|9(?:30|56))|8834"],"(0$1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|8[2-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})","$1 $2 $3 $4",["1"]]],"0"],PK:["92","00","122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,7})","$1 $2 $3",["[89]0"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["1"]],["(\\d{3})(\\d{6,7})","$1 $2",["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])","9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"],"(0$1)"],["(\\d{2})(\\d{7,8})","$1 $2",["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"],"(0$1)"],["(\\d{5})(\\d{5})","$1 $2",["58"],"(0$1)"],["(\\d{3})(\\d{7})","$1 $2",["3"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[24-9]"],"(0$1)"]],"0"],PL:["48","00","(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}",[6,7,8,9,10],[["(\\d{5})","$1",["19"]],["(\\d{3})(\\d{3})","$1 $2",["11|20|64"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1","(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["64"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[2-8]|[2-7]|8[1-79]|9[145]"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["8"]]]],PM:["508","00","(?:[45]|80\\d\\d)\\d{5}",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[45]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],PR:["1","011","(?:[589]\\d\\d|787)\\d{7}",[10],0,"1",0,0,0,0,"787|939"],PS:["970","00","[2489]2\\d{6}|(?:1\\d|5)\\d{8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2489]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["5"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],PT:["351","00","1693\\d{5}|(?:[26-9]\\d|30)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["2[12]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["16|[236-9]"]]]],PW:["680","01[12]","(?:[24-8]\\d\\d|345|900)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],PY:["595","00","59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3,6})","$1 $2",["[2-9]0"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"],"(0$1)"],["(\\d{3})(\\d{4,5})","$1 $2",["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["87"]],["(\\d{3})(\\d{6})","$1 $2",["9(?:[5-79]|8[1-6])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["9"]]],"0"],QA:["974","00","800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}",[7,8,9,11],[["(\\d{3})(\\d{4})","$1 $2",["2[16]|8"]],["(\\d{4})(\\d{4})","$1 $2",["[3-7]"]]]],RE:["262","00","976\\d{6}|(?:26|[68]\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2689]"],"0$1"]],"0",0,0,0,0,"26[23]|69|[89]"],RO:["40","00","(?:[2378]\\d|90)\\d{7}|[23]\\d{5}",[6,9],[["(\\d{3})(\\d{3})","$1 $2",["2[3-6]","2[3-6]\\d9"],"0$1"],["(\\d{2})(\\d{4})","$1 $2",["219|31"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23]1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[237-9]"],"0$1"]],"0",0,0,0,0,0,0,0," int "],RS:["381","00","38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}",[6,7,8,9,10,11,12],[["(\\d{3})(\\d{3,9})","$1 $2",["(?:2[389]|39)0|[7-9]"],"0$1"],["(\\d{2})(\\d{5,10})","$1 $2",["[1-36]"],"0$1"]],"0"],RU:["7","810","8\\d{13}|[347-9]\\d{9}",[10,14],[["(\\d{4})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-8]|2[1-9])","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"],"8 ($1)",1],["(\\d{5})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-68]|2[1-9])","7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))","7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[349]|8(?:[02-7]|1[1-8])"],"8 ($1)",1],["(\\d{4})(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3 $4",["8"],"8 ($1)"]],"8",0,0,0,0,"3[04-689]|[489]",0,"8~10"],RW:["250","00","(?:06|[27]\\d\\d|[89]00)\\d{6}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"]]],"0"],SA:["966","00","92\\d{7}|(?:[15]|8\\d)\\d{8}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["9"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["81"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]],"0"],SB:["677","0[01]","(?:[1-6]|[7-9]\\d\\d)\\d{4}",[5,7],[["(\\d{2})(\\d{5})","$1 $2",["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]],SC:["248","010|0[0-2]","800\\d{4}|(?:[249]\\d|64)\\d{5}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[246]|9[57]"]]],0,0,0,0,0,0,0,"00"],SD:["249","00","[19]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[19]"],"0$1"]],"0"],SE:["46","00","(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{2,3})(\\d{2})","$1-$2 $3",["20"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{4})","$1-$2",["9(?:00|39|44|9)"],"0$1",0,"$1 $2"],["(\\d{2})(\\d{3})(\\d{2})","$1-$2 $3",["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3"],["(\\d)(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2,3})(\\d{2})","$1-$2 $3",["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{2,3})(\\d{3})","$1-$2 $3",["9(?:00|39|44)"],"0$1",0,"$1 $2 $3"],["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3 $4"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["10|7"],"0$1",0,"$1 $2 $3 $4"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1-$2 $3 $4",["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{3})","$1-$2 $3 $4",["9"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4 $5",["[26]"],"0$1",0,"$1 $2 $3 $4 $5"]],"0"],SG:["65","0[0-3]\\d","(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}",[8,10,11],[["(\\d{4})(\\d{4})","$1 $2",["[369]|8(?:0[1-6]|[1-9])"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]],["(\\d{4})(\\d{4})(\\d{3})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],SH:["290","00","(?:[256]\\d|8)\\d{3}",[4,5],0,0,0,0,0,0,"[256]"],SI:["386","00|10(?:22|66|88|99)","[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}",[5,6,7,8],[["(\\d{2})(\\d{3,6})","$1 $2",["8[09]|9"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["59|8"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37][01]|4[0139]|51|6"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-57]"],"(0$1)"]],"0",0,0,0,0,0,0,"00"],SJ:["47","00","0\\d{4}|(?:[489]\\d|[57]9)\\d{6}",[5,8],0,0,0,0,0,0,"79"],SK:["421","00","[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",[6,7,9],[["(\\d)(\\d{2})(\\d{3,4})","$1 $2 $3",["21"],"0$1"],["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["[3-5][1-8]1","[3-5][1-8]1[67]"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1/$2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[689]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1/$2 $3 $4",["[3-5]"],"0$1"]],"0"],SL:["232","00","(?:[237-9]\\d|66)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[236-9]"],"(0$1)"]],"0"],SM:["378","00","(?:0549|[5-7]\\d)\\d{6}",[8,10],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-7]"]],["(\\d{4})(\\d{6})","$1 $2",["0"]]],0,0,"([89]\\d{5})$","0549$1"],SN:["221","00","(?:[378]\\d|93)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[379]"]]]],SO:["252","00","[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}",[6,7,8,9],[["(\\d{2})(\\d{4})","$1 $2",["8[125]"]],["(\\d{6})","$1",["[134]"]],["(\\d)(\\d{6})","$1 $2",["[15]|2[0-79]|3[0-46-8]|4[0-7]"]],["(\\d)(\\d{7})","$1 $2",["(?:2|90)4|[67]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3478]|64|90"]],["(\\d{2})(\\d{5,7})","$1 $2",["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]],"0"],SR:["597","00","(?:[2-5]|68|[78]\\d)\\d{5}",[6,7],[["(\\d{2})(\\d{2})(\\d{2})","$1-$2-$3",["56"]],["(\\d{3})(\\d{3})","$1-$2",["[2-5]"]],["(\\d{3})(\\d{4})","$1-$2",["[6-8]"]]]],SS:["211","00","[19]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[19]"],"0$1"]],"0"],ST:["239","00","(?:22|9\\d)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[29]"]]]],SV:["503","00","[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?",[7,8,11],[["(\\d{3})(\\d{4})","$1 $2",["[89]"]],["(\\d{4})(\\d{4})","$1 $2",["[267]"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[89]"]]]],SX:["1","011","7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|(5\\d{6})$","721$1",0,"721"],SY:["963","00","[1-39]\\d{8}|[1-5]\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-5]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1",1]],"0"],SZ:["268","00","0800\\d{4}|(?:[237]\\d|900)\\d{6}",[8,9],[["(\\d{4})(\\d{4})","$1 $2",["[0237]"]],["(\\d{5})(\\d{4})","$1 $2",["9"]]]],TA:["290","00","8\\d{3}",[4],0,0,0,0,0,0,"8"],TC:["1","011","(?:[58]\\d\\d|649|900)\\d{7}",[10],0,"1",0,"1|([2-479]\\d{6})$","649$1",0,"649"],TD:["235","00|16","(?:22|[69]\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2679]"]]],0,0,0,0,0,0,0,"00"],TG:["228","00","[279]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[279]"]]]],TH:["66","00[1-9]","(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}",[8,9,10,13],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[13-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],TJ:["992","810","(?:00|[1-57-9]\\d)\\d{7}",[9],[["(\\d{6})(\\d)(\\d{2})","$1 $2 $3",["331","3317"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[34]7|91[78]"]],["(\\d{4})(\\d)(\\d{4})","$1 $2 $3",["3[1-5]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[0-57-9]"]]],0,0,0,0,0,0,0,"8~10"],TK:["690","00","[2-47]\\d{3,6}",[4,5,6,7]],TL:["670","00","7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[2-489]|70"]],["(\\d{4})(\\d{4})","$1 $2",["7"]]]],TM:["993","810","[1-6]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["12"],"(8 $1)"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-5]"],"(8 $1)"],["(\\d{2})(\\d{6})","$1 $2",["6"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],TN:["216","00","[2-57-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-57-9]"]]]],TO:["676","00","(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}",[5,7],[["(\\d{2})(\\d{3})","$1-$2",["[2-4]|50|6[09]|7[0-24-69]|8[05]"]],["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{3})(\\d{4})","$1 $2",["[5-9]"]]]],TR:["90","00","4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}",[7,10,12,13],[["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["512|8[01589]|90"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5(?:[0-59]|61)","5(?:[0-59]|616)","5(?:[0-59]|6161)"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24][1-8]|3[1-9]"],"(0$1)",1],["(\\d{3})(\\d{3})(\\d{6,7})","$1 $2 $3",["80"],"0$1",1]],"0"],TT:["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-46-8]\\d{6})$","868$1",0,"868"],TV:["688","00","(?:2|7\\d\\d|90)\\d{4}",[5,6,7],[["(\\d{2})(\\d{3})","$1 $2",["2"]],["(\\d{2})(\\d{4})","$1 $2",["90"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],TW:["886","0(?:0[25-79]|19)","[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}",[7,8,9,10,11],[["(\\d{2})(\\d)(\\d{4})","$1 $2 $3",["202"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[258]0"],"0$1"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]","[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,5})","$1 $2 $3",["7"],"0$1"]],"0",0,0,0,0,0,0,0,"#"],TZ:["255","00[056]","(?:[25-8]\\d|41|90)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[24]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["5"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[67]"],"0$1"]],"0"],UA:["380","00","[89]\\d{9}|[3-9]\\d{8}",[9,10],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]","6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])","3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|89|9[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0",0,0,0,0,0,0,"0~0"],UG:["256","00[057]","800\\d{6}|(?:[29]0|[347]\\d)\\d{7}",[9],[["(\\d{4})(\\d{5})","$1 $2",["202","2024"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[27-9]|4(?:6[45]|[7-9])"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[34]"],"0$1"]],"0"],US:["1","011","[2-9]\\d{9}|3\\d{6}",[10],[["(\\d{3})(\\d{4})","$1-$2",["310"],0,1],["(\\d{3})(\\d{3})(\\d{4})","($1) $2-$3",["[2-9]"],0,1,"$1-$2-$3"]],"1",0,0,0,0,0,[["505(?:[2-57-9]\\d\\d|6(?:[0-35-9]\\d|4[46]))\\d{4}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"],[""],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"],["900[2-9]\\d{6}"],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-7]|33|44|66|77|88)[2-9]\\d{6}"]]],UY:["598","0(?:0|1[3-9]\\d)","(?:0004|4)\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}",[7,8,10,13],[["(\\d{3})(\\d{4})","$1 $2",["405|8|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[124]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["4"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["0"]]],"0",0,0,0,0,0,0,"00"," int. "],UZ:["998","810","(?:33|[5-79]\\d|88)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[35-9]"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],VA:["39","00","0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",[6,7,8,9,10,11],0,0,0,0,0,0,"06698"],VC:["1","011","(?:[58]\\d\\d|784|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","784$1",0,"784"],VE:["58","00","[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}",[10],[["(\\d{3})(\\d{7})","$1-$2",["[24-689]"],"0$1"]],"0"],VG:["1","011","(?:284|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-578]\\d{6})$","284$1",0,"284"],VI:["1","011","[58]\\d{9}|(?:34|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","340$1",0,"340"],VN:["84","00","[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["80"],"0$1",1],["(\\d{4})(\\d{4,6})","$1 $2",["1"],0,1],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[69]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3578]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["2[48]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["2"],"0$1",1]],"0"],VU:["678","00","[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}",[5,7],[["(\\d{3})(\\d{4})","$1 $2",["[57-9]"]]]],WF:["681","00","(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[478]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],WS:["685","0","(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}",[5,6,7,10],[["(\\d{5})","$1",["[2-5]|6[1-9]"]],["(\\d{3})(\\d{3,7})","$1 $2",["[68]"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],XK:["383","00","[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[23]"],"0$1"]],"0"],YE:["967","00","(?:1|7\\d)\\d{7}|[1-7]\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-6]|7(?:[24-6]|8[0-7])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["7"],"0$1"]],"0"],YT:["262","00","80\\d{7}|(?:26|63)9\\d{6}",[9],0,"0",0,0,0,0,"269|63"],ZA:["27","00","[1-79]\\d{8}|8\\d{4,9}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,4})","$1 $2",["8[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["8[1-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["860"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],ZM:["260","00","800\\d{6}|(?:21|63|[79]\\d)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[28]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[79]"],"0$1"]],"0"],ZW:["263","00","2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",[5,6,7,8,9,10],[["(\\d{3})(\\d{3,5})","$1 $2",["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"],"0$1"],["(\\d)(\\d{3})(\\d{2,4})","$1 $2 $3",["[49]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["80"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2","2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)","2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["29[013-9]|39|54"],"0$1"],["(\\d{4})(\\d{3,5})","$1 $2",["(?:25|54)8","258|5483"],"0$1"]],"0"]},nonGeographic:{800:["800",0,"(?:00|[1-9]\\d)\\d{6}",[8],[["(\\d{4})(\\d{4})","$1 $2",["\\d"]]],0,0,0,0,0,0,[0,0,["(?:00|[1-9]\\d)\\d{6}"]]],808:["808",0,"[1-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[1-9]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,["[1-9]\\d{7}"]]],870:["870",0,"7\\d{11}|[35-7]\\d{8}",[9,12],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[35-7]"]]],0,0,0,0,0,0,[0,["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]],878:["878",0,"10\\d{10}",[12],[["(\\d{2})(\\d{5})(\\d{5})","$1 $2 $3",["1"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["10\\d{10}"]]],881:["881",0,"[0-36-9]\\d{8}",[9],[["(\\d)(\\d{3})(\\d{5})","$1 $2 $3",["[0-36-9]"]]],0,0,0,0,0,0,[0,["[0-36-9]\\d{8}"]]],882:["882",0,"[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?",[7,8,9,10,11,12],[["(\\d{2})(\\d{5})","$1 $2",["16|342"]],["(\\d{2})(\\d{6})","$1 $2",["49"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["1[36]|9"]],["(\\d{2})(\\d{4})(\\d{3})","$1 $2 $3",["3[23]"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["16"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|23|3(?:[15]|4[57])|4|51"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["34"]],["(\\d{2})(\\d{4,5})(\\d{5})","$1 $2 $3",["[1-35]"]]],0,0,0,0,0,0,[0,["342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}",[7,8,9,10,12]],0,0,0,0,0,0,["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}"]]],883:["883",0,"(?:[1-4]\\d|51)\\d{6,10}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,8})","$1 $2 $3",["[14]|2[24-689]|3[02-689]|51[24-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["510"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["21"]],["(\\d{4})(\\d{4})(\\d{4})","$1 $2 $3",["51[13]"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[235]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}"]]],888:["888",0,"\\d{11}",[11],[["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3"]],0,0,0,0,0,0,[0,0,0,0,0,0,["\\d{11}"]]],979:["979",0,"[1359]\\d{8}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[1359]"]]],0,0,0,0,0,0,[0,0,0,["[1359]\\d{8}"]]]}};function Eg(n,t){var e=Array.prototype.slice.call(t);return e.push(Ig),n.apply(this,e)}function sa(n){return sa=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sa(n)}function is(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function Og(n,t,e){return t&&is(n.prototype,t),e&&is(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}function Ng(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function Fg(n,t){if(typeof t!="function"&&t!==null)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(t&&t.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),t&&ti(n,t)}function Bg(n){var t=ld();return function(){var i=ni(n),o;if(t){var a=ni(this).constructor;o=Reflect.construct(i,arguments,a)}else o=i.apply(this,arguments);return Lg(this,o)}}function Lg(n,t){if(t&&(sa(t)==="object"||typeof t=="function"))return t;if(t!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return pd(n)}function pd(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}function da(n){var t=typeof Map=="function"?new Map:void 0;return da=function(i){if(i===null||!Hg(i))return i;if(typeof i!="function")throw new TypeError("Super expression must either be null or a function");if(typeof t<"u"){if(t.has(i))return t.get(i);t.set(i,o)}function o(){return Ii(i,arguments,ni(this).constructor)}return o.prototype=Object.create(i.prototype,{constructor:{value:o,enumerable:!1,writable:!0,configurable:!0}}),ti(o,i)},da(n)}function Ii(n,t,e){return ld()?Ii=Reflect.construct:Ii=function(o,a,r){var s=[null];s.push.apply(s,a);var p=Function.bind.apply(o,s),d=new p;return r&&ti(d,r.prototype),d},Ii.apply(null,arguments)}function ld(){if(typeof Reflect>"u"||!Reflect.construct||Reflect.construct.sham)return!1;if(typeof Proxy=="function")return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch{return!1}}function Hg(n){return Function.toString.call(n).indexOf("[native code]")!==-1}function ti(n,t){return ti=Object.setPrototypeOf||function(i,o){return i.__proto__=o,i},ti(n,t)}function ni(n){return ni=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},ni(n)}var $t=function(n){Fg(e,n);var t=Bg(e);function e(i){var o;return Ng(this,e),o=t.call(this,i),Object.setPrototypeOf(pd(o),e.prototype),o.name=o.constructor.name,o}return Og(e)}(da(Error)),ka=2,Pg=17,Ug=3,Jt="0-9０-９٠-٩۰-۹",zg="-‐-―−ー－",Vg="／/",Gg="．.",Wg="  ­​⁠　",Qg="()（）［］\\[\\]",Kg="~⁓∼～",Li="".concat(zg).concat(Vg).concat(Gg).concat(Wg).concat(Qg).concat(Kg),Ja="+＋";function os(n,t){n=n.split("-"),t=t.split("-");for(var e=n[0].split("."),i=t[0].split("."),o=0;o<3;o++){var a=Number(e[o]),r=Number(i[o]);if(a>r)return 1;if(r>a)return-1;if(!isNaN(a)&&isNaN(r))return 1;if(isNaN(a)&&!isNaN(r))return-1}return n[1]&&t[1]?n[1]>t[1]?1:n[1]<t[1]?-1:0:!n[1]&&t[1]?1:n[1]&&!t[1]?-1:0}function Hi(n){return Hi=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Hi(n)}function no(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function as(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function io(n,t,e){return t&&as(n.prototype,t),e&&as(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}var Zg="1.2.0",Xg="1.7.35",rs=" ext. ",Yg=/^\d+$/,Ne=function(){function n(t){no(this,n),iu(t),this.metadata=t,cd.call(this,t)}return io(n,[{key:"getCountries",value:function(){return Object.keys(this.metadata.countries).filter(function(e){return e!=="001"})}},{key:"getCountryMetadata",value:function(e){return this.metadata.countries[e]}},{key:"nonGeographic",value:function(){if(!(this.v1||this.v2||this.v3))return this.metadata.nonGeographic||this.metadata.nonGeographical}},{key:"hasCountry",value:function(e){return this.getCountryMetadata(e)!==void 0}},{key:"hasCallingCode",value:function(e){if(this.getCountryCodesForCallingCode(e))return!0;if(this.nonGeographic()){if(this.nonGeographic()[e])return!0}else{var i=this.countryCallingCodes()[e];if(i&&i.length===1&&i[0]==="001")return!0}}},{key:"isNonGeographicCallingCode",value:function(e){return this.nonGeographic()?!!this.nonGeographic()[e]:!this.getCountryCodesForCallingCode(e)}},{key:"country",value:function(e){return this.selectNumberingPlan(e)}},{key:"selectNumberingPlan",value:function(e,i){if(e&&Yg.test(e)&&(i=e,e=null),e&&e!=="001"){if(!this.hasCountry(e))throw new Error("Unknown country: ".concat(e));this.numberingPlan=new ss(this.getCountryMetadata(e),this)}else if(i){if(!this.hasCallingCode(i))throw new Error("Unknown calling code: ".concat(i));this.numberingPlan=new ss(this.getNumberingPlanMetadata(i),this)}else this.numberingPlan=void 0;return this}},{key:"getCountryCodesForCallingCode",value:function(e){var i=this.countryCallingCodes()[e];if(i)return i.length===1&&i[0].length===3?void 0:i}},{key:"getCountryCodeForCallingCode",value:function(e){var i=this.getCountryCodesForCallingCode(e);if(i)return i[0]}},{key:"getNumberingPlanMetadata",value:function(e){var i=this.getCountryCodeForCallingCode(e);if(i)return this.getCountryMetadata(i);if(this.nonGeographic()){var o=this.nonGeographic()[e];if(o)return o}else{var a=this.countryCallingCodes()[e];if(a&&a.length===1&&a[0]==="001")return this.metadata.countries["001"]}}},{key:"countryCallingCode",value:function(){return this.numberingPlan.callingCode()}},{key:"IDDPrefix",value:function(){return this.numberingPlan.IDDPrefix()}},{key:"defaultIDDPrefix",value:function(){return this.numberingPlan.defaultIDDPrefix()}},{key:"nationalNumberPattern",value:function(){return this.numberingPlan.nationalNumberPattern()}},{key:"possibleLengths",value:function(){return this.numberingPlan.possibleLengths()}},{key:"formats",value:function(){return this.numberingPlan.formats()}},{key:"nationalPrefixForParsing",value:function(){return this.numberingPlan.nationalPrefixForParsing()}},{key:"nationalPrefixTransformRule",value:function(){return this.numberingPlan.nationalPrefixTransformRule()}},{key:"leadingDigits",value:function(){return this.numberingPlan.leadingDigits()}},{key:"hasTypes",value:function(){return this.numberingPlan.hasTypes()}},{key:"type",value:function(e){return this.numberingPlan.type(e)}},{key:"ext",value:function(){return this.numberingPlan.ext()}},{key:"countryCallingCodes",value:function(){return this.v1?this.metadata.country_phone_code_to_countries:this.metadata.country_calling_codes}},{key:"chooseCountryByCountryCallingCode",value:function(e){return this.selectNumberingPlan(e)}},{key:"hasSelectedNumberingPlan",value:function(){return this.numberingPlan!==void 0}}]),n}(),ss=function(){function n(t,e){no(this,n),this.globalMetadataObject=e,this.metadata=t,cd.call(this,e.metadata)}return io(n,[{key:"callingCode",value:function(){return this.metadata[0]}},{key:"getDefaultCountryMetadataForRegion",value:function(){return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())}},{key:"IDDPrefix",value:function(){if(!(this.v1||this.v2))return this.metadata[1]}},{key:"defaultIDDPrefix",value:function(){if(!(this.v1||this.v2))return this.metadata[12]}},{key:"nationalNumberPattern",value:function(){return this.v1||this.v2?this.metadata[1]:this.metadata[2]}},{key:"possibleLengths",value:function(){if(!this.v1)return this.metadata[this.v2?2:3]}},{key:"_getFormats",value:function(e){return e[this.v1?2:this.v2?3:4]}},{key:"formats",value:function(){var e=this,i=this._getFormats(this.metadata)||this._getFormats(this.getDefaultCountryMetadataForRegion())||[];return i.map(function(o){return new eu(o,e)})}},{key:"nationalPrefix",value:function(){return this.metadata[this.v1?3:this.v2?4:5]}},{key:"_getNationalPrefixFormattingRule",value:function(e){return e[this.v1?4:this.v2?5:6]}},{key:"nationalPrefixFormattingRule",value:function(){return this._getNationalPrefixFormattingRule(this.metadata)||this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())}},{key:"_nationalPrefixForParsing",value:function(){return this.metadata[this.v1?5:this.v2?6:7]}},{key:"nationalPrefixForParsing",value:function(){return this._nationalPrefixForParsing()||this.nationalPrefix()}},{key:"nationalPrefixTransformRule",value:function(){return this.metadata[this.v1?6:this.v2?7:8]}},{key:"_getNationalPrefixIsOptionalWhenFormatting",value:function(){return!!this.metadata[this.v1?7:this.v2?8:9]}},{key:"nationalPrefixIsOptionalWhenFormattingInNationalFormat",value:function(){return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata)||this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())}},{key:"leadingDigits",value:function(){return this.metadata[this.v1?8:this.v2?9:10]}},{key:"types",value:function(){return this.metadata[this.v1?9:this.v2?10:11]}},{key:"hasTypes",value:function(){return this.types()&&this.types().length===0?!1:!!this.types()}},{key:"type",value:function(e){if(this.hasTypes()&&ds(this.types(),e))return new nu(ds(this.types(),e),this)}},{key:"ext",value:function(){return this.v1||this.v2?rs:this.metadata[13]||rs}}]),n}(),eu=function(){function n(t,e){no(this,n),this._format=t,this.metadata=e}return io(n,[{key:"pattern",value:function(){return this._format[0]}},{key:"format",value:function(){return this._format[1]}},{key:"leadingDigitsPatterns",value:function(){return this._format[2]||[]}},{key:"nationalPrefixFormattingRule",value:function(){return this._format[3]||this.metadata.nationalPrefixFormattingRule()}},{key:"nationalPrefixIsOptionalWhenFormattingInNationalFormat",value:function(){return!!this._format[4]||this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:"nationalPrefixIsMandatoryWhenFormattingInNationalFormat",value:function(){return this.usesNationalPrefix()&&!this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()}},{key:"usesNationalPrefix",value:function(){return!!(this.nationalPrefixFormattingRule()&&!tu.test(this.nationalPrefixFormattingRule()))}},{key:"internationalFormat",value:function(){return this._format[5]||this.format()}}]),n}(),tu=/^\(?\$1\)?$/,nu=function(){function n(t,e){no(this,n),this.type=t,this.metadata=e}return io(n,[{key:"pattern",value:function(){return this.metadata.v1?this.type:this.type[0]}},{key:"possibleLengths",value:function(){if(!this.metadata.v1)return this.type[1]||this.metadata.possibleLengths()}}]),n}();function ds(n,t){switch(t){case"FIXED_LINE":return n[0];case"MOBILE":return n[1];case"TOLL_FREE":return n[2];case"PREMIUM_RATE":return n[3];case"PERSONAL_NUMBER":return n[4];case"VOICEMAIL":return n[5];case"UAN":return n[6];case"PAGER":return n[7];case"VOIP":return n[8];case"SHARED_COST":return n[9]}}function iu(n){if(!n)throw new Error("[libphonenumber-js] `metadata` argument not passed. Check your arguments.");if(!Vo(n)||!Vo(n.countries))throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(Vo(n)?"an object of shape: { "+Object.keys(n).join(", ")+" }":"a "+ou(n)+": "+n,"."))}var Vo=function(t){return Hi(t)==="object"},ou=function(t){return Hi(t)};function Ia(n,t){if(t=new Ne(t),t.hasCountry(n))return t.country(n).countryCallingCode();throw new Error("Unknown country: ".concat(n))}function au(n,t){return t.countries[n]!==void 0}function cd(n){var t=n.version;typeof t=="number"?(this.v1=t===1,this.v2=t===2,this.v3=t===3,this.v4=t===4):t?os(t,Zg)===-1?this.v2=!0:os(t,Xg)===-1?this.v3=!0:this.v4=!0:this.v1=!0}var ru=";ext=",un=function(t){return"([".concat(Jt,"]{1,").concat(t,"})")};function hd(n){var t="20",e="15",i="9",o="6",a="[  \\t,]*",r="[:\\.．]?[  \\t,-]*",s="#?",p="(?:e?xt(?:ensi(?:ó?|ó))?n?|ｅ?ｘｔｎ?|доб|anexo)",d="(?:[xｘ#＃~～]|int|ｉｎｔ)",c="[- ]+",h="[  \\t]*",m="(?:,{2}|;)",f=ru+un(t),v=a+p+r+un(t)+s,u=a+d+r+un(i)+s,$=c+un(o)+"#",S=h+m+r+un(e)+s,R=h+"(?:,)+"+r+un(i)+s;return f+"|"+v+"|"+u+"|"+$+"|"+S+"|"+R}var su="["+Jt+"]{"+ka+"}",du="["+Ja+"]{0,1}(?:["+Li+"]*["+Jt+"]){3,}["+Li+Jt+"]*",pu=new RegExp("^["+Ja+"]{0,1}(?:["+Li+"]*["+Jt+"]){1,2}$","i"),lu=du+"(?:"+hd()+")?",cu=new RegExp("^"+su+"$|^"+lu+"$","i");function gd(n){return n.length>=ka&&cu.test(n)}function hu(n){return pu.test(n)}var ps=new RegExp("(?:"+hd()+")$","i");function gu(n){var t=n.search(ps);if(t<0)return{};for(var e=n.slice(0,t),i=n.match(ps),o=1;o<i.length;){if(i[o])return{number:e,ext:i[o]};o++}}var uu={0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9","０":"0","１":"1","２":"2","３":"3","４":"4","５":"5","６":"6","７":"7","８":"8","９":"9","٠":"0","١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","۰":"0","۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9"};function mu(n){return uu[n]}function fu(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=bu(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function bu(n,t){if(n){if(typeof n=="string")return ls(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return ls(n,t)}}function ls(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function cs(n){for(var t="",e=fu(n.split("")),i;!(i=e()).done;){var o=i.value;t+=yu(o,t)||""}return t}function yu(n,t){return n==="+"?t?void 0:"+":mu(n)}function vu(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=Cu(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Cu(n,t){if(n){if(typeof n=="string")return hs(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return hs(n,t)}}function hs(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function Tu(n,t){for(var e=n.slice(),i=vu(t),o;!(o=i()).done;){var a=o.value;n.indexOf(a)<0&&e.push(a)}return e.sort(function(r,s){return r-s})}function Ea(n,t){return ud(n,void 0,t)}function ud(n,t,e){var i=e.type(t),o=i&&i.possibleLengths()||e.possibleLengths();if(!o)return"IS_POSSIBLE";if(t==="FIXED_LINE_OR_MOBILE"){if(!e.type("FIXED_LINE"))return ud(n,"MOBILE",e);var a=e.type("MOBILE");a&&(o=Tu(o,a.possibleLengths()))}else if(t&&!i)return"INVALID_LENGTH";var r=n.length,s=o[0];return s===r?"IS_POSSIBLE":s>r?"TOO_SHORT":o[o.length-1]<r?"TOO_LONG":o.indexOf(r,1)>=0?"IS_POSSIBLE":"INVALID_LENGTH"}function wu(n,t,e){if(t===void 0&&(t={}),e=new Ne(e),t.v2){if(!n.countryCallingCode)throw new Error("Invalid phone number object passed");e.selectNumberingPlan(n.countryCallingCode)}else{if(!n.phone)return!1;if(n.country){if(!e.hasCountry(n.country))throw new Error("Unknown country: ".concat(n.country));e.country(n.country)}else{if(!n.countryCallingCode)throw new Error("Invalid phone number object passed");e.selectNumberingPlan(n.countryCallingCode)}}if(e.possibleLengths())return md(n.phone||n.nationalNumber,e);if(n.countryCallingCode&&e.isNonGeographicCallingCode(n.countryCallingCode))return!0;throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.')}function md(n,t){switch(Ea(n,t)){case"IS_POSSIBLE":return!0;default:return!1}}function _u(n,t){return Au(n)||Du(n,t)||fd(n,t)||Ru()}function Ru(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Du(n,t){var e=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e!=null){var i=[],o=!0,a=!1,r,s;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!(t&&i.length===t));o=!0);}catch(p){a=!0,s=p}finally{try{!o&&e.return!=null&&e.return()}finally{if(a)throw s}}return i}}function Au(n){if(Array.isArray(n))return n}function Su(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=fd(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function fd(n,t){if(n){if(typeof n=="string")return gs(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return gs(n,t)}}function gs(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function $u(n){var t,e;n=n.replace(/^tel:/,"tel=");for(var i=Su(n.split(";")),o;!(o=i()).done;){var a=o.value,r=a.split("="),s=_u(r,2),p=s[0],d=s[1];switch(p){case"tel":t=d;break;case"ext":e=d;break;case"phone-context":d[0]==="+"&&(t=d+t);break}}if(!gd(t))return{};var c={number:t};return e&&(c.ext=e),c}function Mu(n){var t=n.number,e=n.ext;if(!t)return"";if(t[0]!=="+")throw new Error('"formatRFC3966()" expects "number" to be in E.164 format.');return"tel:".concat(t).concat(e?";ext="+e:"")}function Ct(n,t){return n=n||"",new RegExp("^(?:"+t+")$").test(n)}function xu(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=ju(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function ju(n,t){if(n){if(typeof n=="string")return us(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return us(n,t)}}function us(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}var qu=["MOBILE","PREMIUM_RATE","TOLL_FREE","SHARED_COST","VOIP","PERSONAL_NUMBER","PAGER","UAN","VOICEMAIL"];function Oa(n,t,e){if(t=t||{},!!n.country){e=new Ne(e),e.selectNumberingPlan(n.country,n.countryCallingCode);var i=t.v2?n.nationalNumber:n.phone;if(Ct(i,e.nationalNumberPattern())){if(Go(i,"FIXED_LINE",e))return e.type("MOBILE")&&e.type("MOBILE").pattern()===""||!e.type("MOBILE")||Go(i,"MOBILE",e)?"FIXED_LINE_OR_MOBILE":"FIXED_LINE";for(var o=xu(qu),a;!(a=o()).done;){var r=a.value;if(Go(i,r,e))return r}}}}function Go(n,t,e){return t=e.type(t),!t||!t.pattern()||t.possibleLengths()&&t.possibleLengths().indexOf(n.length)<0?!1:Ct(n,t.pattern())}function ku(n,t,e){if(t=t||{},e=new Ne(e),!n.country)return!1;if(e.selectNumberingPlan(n.country,n.countryCallingCode),e.hasTypes())return Oa(n,t,e.metadata)!==void 0;var i=t.v2?n.nationalNumber:n.phone;return Ct(i,e.nationalNumberPattern())}function Ju(n,t,e){var i=new Ne(e),o=i.getCountryCodesForCallingCode(n);return o?o.filter(function(a){return Iu(t,a,e)}):[]}function Iu(n,t,e){var i=new Ne(e);return i.selectNumberingPlan(t),i.numberingPlan.possibleLengths().indexOf(n.length)>=0}function Eu(n){return n.replace(new RegExp("[".concat(Li,"]+"),"g")," ").trim()}var Ou=/(\$\d)/;function Nu(n,t,e){var i=e.useInternationalFormat,o=e.withNationalPrefix;e.carrierCode,e.metadata;var a=n.replace(new RegExp(t.pattern()),i?t.internationalFormat():o&&t.nationalPrefixFormattingRule()?t.format().replace(Ou,t.nationalPrefixFormattingRule()):t.format());return i?Eu(a):a}var Fu=/^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/;function Bu(n,t,e){var i=new Ne(e);if(i.selectNumberingPlan(n,t),i.defaultIDDPrefix())return i.defaultIDDPrefix();if(Fu.test(i.IDDPrefix()))return i.IDDPrefix()}function Lu(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=Hu(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Hu(n,t){if(n){if(typeof n=="string")return ms(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return ms(n,t)}}function ms(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function fs(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter(function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable})),e.push.apply(e,i)}return e}function bs(n){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?fs(Object(e),!0).forEach(function(i){Pu(n,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):fs(Object(e)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))})}return n}function Pu(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}var ys={formatExtension:function(t,e,i){return"".concat(t).concat(i.ext()).concat(e)}};function Uu(n,t,e,i){if(e?e=bs(bs({},ys),e):e=ys,i=new Ne(i),n.country&&n.country!=="001"){if(!i.hasCountry(n.country))throw new Error("Unknown country: ".concat(n.country));i.country(n.country)}else if(n.countryCallingCode)i.selectNumberingPlan(n.countryCallingCode);else return n.phone||"";var o=i.countryCallingCode(),a=e.v2?n.nationalNumber:n.phone,r;switch(t){case"NATIONAL":return a?(r=Pi(a,n.carrierCode,"NATIONAL",i,e),Wo(r,n.ext,i,e.formatExtension)):"";case"INTERNATIONAL":return a?(r=Pi(a,null,"INTERNATIONAL",i,e),r="+".concat(o," ").concat(r),Wo(r,n.ext,i,e.formatExtension)):"+".concat(o);case"E.164":return"+".concat(o).concat(a);case"RFC3966":return Mu({number:"+".concat(o).concat(a),ext:n.ext});case"IDD":if(!e.fromCountry)return;var s=Vu(a,n.carrierCode,o,e.fromCountry,i);return Wo(s,n.ext,i,e.formatExtension);default:throw new Error('Unknown "format" argument passed to "formatNumber()": "'.concat(t,'"'))}}function Pi(n,t,e,i,o){var a=zu(i.formats(),n);return a?Nu(n,a,{useInternationalFormat:e==="INTERNATIONAL",withNationalPrefix:!(a.nationalPrefixIsOptionalWhenFormattingInNationalFormat()&&o&&o.nationalPrefix===!1),carrierCode:t,metadata:i}):n}function zu(n,t){for(var e=Lu(n),i;!(i=e()).done;){var o=i.value;if(o.leadingDigitsPatterns().length>0){var a=o.leadingDigitsPatterns()[o.leadingDigitsPatterns().length-1];if(t.search(a)!==0)continue}if(Ct(t,o.pattern()))return o}}function Wo(n,t,e,i){return t?i(n,t,e):n}function Vu(n,t,e,i,o){var a=Ia(i,o.metadata);if(a===e){var r=Pi(n,t,"NATIONAL",o);return e==="1"?e+" "+r:r}var s=Bu(i,void 0,o.metadata);if(s)return"".concat(s," ").concat(e," ").concat(Pi(n,null,"INTERNATIONAL",o))}function vs(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter(function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable})),e.push.apply(e,i)}return e}function Cs(n){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?vs(Object(e),!0).forEach(function(i){Gu(n,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):vs(Object(e)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))})}return n}function Gu(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function Wu(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function Ts(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function Qu(n,t,e){return t&&Ts(n.prototype,t),e&&Ts(n,e),Object.defineProperty(n,"prototype",{writable:!1}),n}var Ku=function(){function n(t,e,i){if(Wu(this,n),!t)throw new TypeError("`country` or `countryCallingCode` not passed");if(!e)throw new TypeError("`nationalNumber` not passed");if(!i)throw new TypeError("`metadata` not passed");var o=new Ne(i);Zu(t)&&(this.country=t,o.country(t),t=o.countryCallingCode()),this.countryCallingCode=t,this.nationalNumber=e,this.number="+"+this.countryCallingCode+this.nationalNumber,this.metadata=i}return Qu(n,[{key:"setExt",value:function(e){this.ext=e}},{key:"getPossibleCountries",value:function(){return this.country?[this.country]:Ju(this.countryCallingCode,this.nationalNumber,this.metadata)}},{key:"isPossible",value:function(){return wu(this,{v2:!0},this.metadata)}},{key:"isValid",value:function(){return ku(this,{v2:!0},this.metadata)}},{key:"isNonGeographic",value:function(){var e=new Ne(this.metadata);return e.isNonGeographicCallingCode(this.countryCallingCode)}},{key:"isEqual",value:function(e){return this.number===e.number&&this.ext===e.ext}},{key:"getType",value:function(){return Oa(this,{v2:!0},this.metadata)}},{key:"format",value:function(e,i){return Uu(this,e,i?Cs(Cs({},i),{},{v2:!0}):{v2:!0},this.metadata)}},{key:"formatNational",value:function(e){return this.format("NATIONAL",e)}},{key:"formatInternational",value:function(e){return this.format("INTERNATIONAL",e)}},{key:"getURI",value:function(e){return this.format("RFC3966",e)}}]),n}(),Zu=function(t){return/^[A-Z]{2}$/.test(t)},Xu=new RegExp("(["+Jt+"])");function Yu(n,t,e,i){if(t){var o=new Ne(i);o.selectNumberingPlan(t,e);var a=new RegExp(o.IDDPrefix());if(n.search(a)===0){n=n.slice(n.match(a)[0].length);var r=n.match(Xu);if(!(r&&r[1]!=null&&r[1].length>0&&r[1]==="0"))return n}}}function em(n,t){if(n&&t.numberingPlan.nationalPrefixForParsing()){var e=new RegExp("^(?:"+t.numberingPlan.nationalPrefixForParsing()+")"),i=e.exec(n);if(i){var o,a,r=i.length-1,s=r>0&&i[r];if(t.nationalPrefixTransformRule()&&s)o=n.replace(e,t.nationalPrefixTransformRule()),r>1&&(a=i[1]);else{var p=i[0];o=n.slice(p.length),s&&(a=i[1])}var d;if(s){var c=n.indexOf(i[1]),h=n.slice(0,c);h===t.numberingPlan.nationalPrefix()&&(d=t.numberingPlan.nationalPrefix())}else d=i[0];return{nationalNumber:o,nationalPrefix:d,carrierCode:a}}}return{nationalNumber:n}}function pa(n,t){var e=em(n,t),i=e.carrierCode,o=e.nationalNumber;if(o!==n){if(!tm(n,o,t))return{nationalNumber:n};if(t.possibleLengths()&&!nm(o,t))return{nationalNumber:n}}return{nationalNumber:o,carrierCode:i}}function tm(n,t,e){return!(Ct(n,e.nationalNumberPattern())&&!Ct(t,e.nationalNumberPattern()))}function nm(n,t){switch(Ea(n,t)){case"TOO_SHORT":case"INVALID_LENGTH":return!1;default:return!0}}function im(n,t,e,i){var o=t?Ia(t,i):e;if(n.indexOf(o)===0){i=new Ne(i),i.selectNumberingPlan(t,e);var a=n.slice(o.length),r=pa(a,i),s=r.nationalNumber,p=pa(n,i),d=p.nationalNumber;if(!Ct(d,i.nationalNumberPattern())&&Ct(s,i.nationalNumberPattern())||Ea(d,i)==="TOO_LONG")return{countryCallingCode:o,number:a}}return{number:n}}function om(n,t,e,i){if(!n)return{};if(n[0]!=="+"){var o=Yu(n,t,e,i);if(o&&o!==n)n="+"+o;else{if(t||e){var a=im(n,t,e,i),r=a.countryCallingCode,s=a.number;if(r)return{countryCallingCode:r,number:s}}return{number:n}}}if(n[1]==="0")return{};i=new Ne(i);for(var p=2;p-1<=Ug&&p<=n.length;){var d=n.slice(1,p);if(i.hasCallingCode(d))return i.selectNumberingPlan(d),{countryCallingCode:d,number:n.slice(p)};p++}return{}}function am(n,t){var e=typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e)return(e=e.call(n)).next.bind(e);if(Array.isArray(n)||(e=rm(n))||t&&n&&typeof n.length=="number"){e&&(n=e);var i=0;return function(){return i>=n.length?{done:!0}:{done:!1,value:n[i++]}}}throw new TypeError(`Invalid attempt to iterate non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function rm(n,t){if(n){if(typeof n=="string")return ws(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return ws(n,t)}}function ws(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function sm(n,t,e){e=new Ne(e);for(var i=am(n),o;!(o=i()).done;){var a=o.value;if(e.country(a),e.leadingDigits()){if(t&&t.search(e.leadingDigits())===0)return a}else if(Oa({phone:t,country:a},void 0,e.metadata))return a}}var dm=!1;function pm(n,t,e){if(dm&&e.isNonGeographicCallingCode(n))return"001";var i=e.getCountryCodesForCallingCode(n);if(i)return i.length===1?i[0]:sm(i,t,e.metadata)}var lm=250,cm=new RegExp("["+Ja+Jt+"]"),hm=new RegExp("[^"+Jt+"#]+$");function gm(n,t,e){if(t=t||{},e=new Ne(e),t.defaultCountry&&!e.hasCountry(t.defaultCountry))throw t.v2?new $t("INVALID_COUNTRY"):new Error("Unknown country: ".concat(t.defaultCountry));var i=mm(n,t.v2,t.extract),o=i.number,a=i.ext,r=i.error;if(!o){if(t.v2)throw r==="TOO_SHORT"?new $t("TOO_SHORT"):new $t("NOT_A_NUMBER");return{}}var s=bm(o,t.defaultCountry,t.defaultCallingCode,e),p=s.country,d=s.nationalNumber,c=s.countryCallingCode,h=s.carrierCode;if(!e.hasSelectedNumberingPlan()){if(t.v2)throw new $t("INVALID_COUNTRY");return{}}if(!d||d.length<ka){if(t.v2)throw new $t("TOO_SHORT");return{}}if(d.length>Pg){if(t.v2)throw new $t("TOO_LONG");return{}}if(t.v2){var m=new Ku(c,d,e.metadata);return p&&(m.country=p),h&&(m.carrierCode=h),a&&(m.ext=a),m}var f=(t.extended?e.hasSelectedNumberingPlan():p)?Ct(d,e.nationalNumberPattern()):!1;return t.extended?{country:p,countryCallingCode:c,carrierCode:h,valid:f,possible:f?!0:!!(t.extended===!0&&e.possibleLengths()&&md(d,e)),phone:d,ext:a}:f?fm(p,d,a):{}}function um(n,t,e){if(n){if(n.length>lm){if(e)throw new $t("TOO_LONG");return}if(t===!1)return n;var i=n.search(cm);if(!(i<0))return n.slice(i).replace(hm,"")}}function mm(n,t,e){if(n&&n.indexOf("tel:")===0)return $u(n);var i=um(n,e,t);if(!i)return{};if(!gd(i))return hu(i)?{error:"TOO_SHORT"}:{};var o=gu(i);return o.ext?o:{number:i}}function fm(n,t,e){var i={country:n,phone:t};return e&&(i.ext=e),i}function bm(n,t,e,i){var o=om(cs(n),t,e,i.metadata),a=o.countryCallingCode,r=o.number,s;if(a)i.selectNumberingPlan(a);else if(r&&(t||e))i.selectNumberingPlan(t,e),t&&(s=t),a=e||Ia(t,i.metadata);else return{};if(!r)return{countryCallingCode:a};var p=pa(cs(r),i),d=p.nationalNumber,c=p.carrierCode,h=pm(a,d,i);return h&&(s=h,h==="001"||i.country(s)),{country:s,countryCallingCode:a,nationalNumber:d,carrierCode:c}}function _s(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter(function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable})),e.push.apply(e,i)}return e}function Rs(n){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?_s(Object(e),!0).forEach(function(i){ym(n,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):_s(Object(e)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))})}return n}function ym(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function vm(n,t,e){return gm(n,Rs(Rs({},t),{},{v2:!0}),e)}function la(n){return la=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(t){return typeof t}:function(t){return t&&typeof Symbol=="function"&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},la(n)}function Ds(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter(function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable})),e.push.apply(e,i)}return e}function Cm(n){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?Ds(Object(e),!0).forEach(function(i){Tm(n,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):Ds(Object(e)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))})}return n}function Tm(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function wm(n,t){return Am(n)||Dm(n,t)||Rm(n,t)||_m()}function _m(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function Rm(n,t){if(n){if(typeof n=="string")return As(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);if(e==="Object"&&n.constructor&&(e=n.constructor.name),e==="Map"||e==="Set")return Array.from(n);if(e==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return As(n,t)}}function As(n,t){(t==null||t>n.length)&&(t=n.length);for(var e=0,i=new Array(t);e<t;e++)i[e]=n[e];return i}function Dm(n,t){var e=n==null?null:typeof Symbol<"u"&&n[Symbol.iterator]||n["@@iterator"];if(e!=null){var i=[],o=!0,a=!1,r,s;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!(t&&i.length===t));o=!0);}catch(p){a=!0,s=p}finally{try{!o&&e.return!=null&&e.return()}finally{if(a)throw s}}return i}}function Am(n){if(Array.isArray(n))return n}function Sm(n){var t=Array.prototype.slice.call(n),e=wm(t,4),i=e[0],o=e[1],a=e[2],r=e[3],s,p,d;if(typeof i=="string")s=i;else throw new TypeError("A text for parsing must be a string.");if(!o||typeof o=="string")r?(p=a,d=r):(p=void 0,d=a),o&&(p=Cm({defaultCountry:o},p));else if($m(o))a?(p=o,d=a):d=o;else throw new Error("Invalid second argument: ".concat(o));return{text:s,options:p,metadata:d}}var $m=function(t){return la(t)==="object"};function Ss(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);t&&(i=i.filter(function(o){return Object.getOwnPropertyDescriptor(n,o).enumerable})),e.push.apply(e,i)}return e}function $s(n){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?Ss(Object(e),!0).forEach(function(i){Mm(n,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):Ss(Object(e)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(e,i))})}return n}function Mm(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function xm(n,t,e){t&&t.defaultCountry&&!au(t.defaultCountry,e)&&(t=$s($s({},t),{},{defaultCountry:void 0}));try{return vm(n,t,e)}catch(i){if(!(i instanceof $t))throw i}}function jm(){var n=Sm(arguments),t=n.text,e=n.options,i=n.metadata;return xm(t,e,i)}function Ms(){return Eg(jm,arguments)}class qm extends Ue{constructor(){super("phone","A phone number","tel")}getFeedback(t,e){if(this.isValid(t,e))return;const i=F.t.validation.phone,o=i.feedback;if(e){const a=e();if(a)return i.feedbackCountry.Subs({country:a})}return o}isValid(t,e){var o,a;if(t===void 0)return!1;t.startsWith("tel:")&&(t=t.substring(4));let i;return e!==void 0&&(i=(o=e())==null?void 0:o.toUpperCase()),((a=Ms(t,i))==null?void 0:a.isValid())??!1}reformat(t,e){var o;t.startsWith("tel:")&&(t=t.substring(4));let i;return e&&(i=e()),(o=Ms(t,i==null?void 0:i.toUpperCase()))==null?void 0:o.formatInternational()}}class km extends Ue{constructor(){super("opening_hours",new P(["Has extra elements to easily input when a POI is opened.",new je("Helper arguments"),new Dn(["name","doc"],[["options",new P(["A JSON-object of type `{ prefix: string, postfix: string }`. ",new Dn(["subarg","doc"],[["prefix","Piece of text that will always be added to the front of the generated opening hours. If the OSM-data does not start with this, it will fail to parse."],["postfix","Piece of text that will always be added to the end of the generated opening hours"]])])]]),new je("Example usage"),`To add a conditional (based on time) access restriction:

\`\`\`

"freeform": {
    "key": "access:conditional",
    "type": "opening_hours",
    "helperArgs": [
        {
          "prefix":"no @ (",
          "postfix":")"
        }
    ]
}
\`\`\`

*Don't forget to pass the prefix and postfix in the rendering as well*: \`{opening_hours_table(opening_hours,yes @ &LPARENS, &RPARENS )\``]))}}class Jm extends Ue{constructor(){super("color","Shows a color picker")}}const Ki=class extends Ue{constructor(){super("fediverse","Validates fediverse addresses and normalizes them into `@username@server`-format")}reformat(t){if(t.startsWith("@")||(t="@"+t),t.match(Ki.usernameAtServer))return t;try{const e=new URL(t),i=e.pathname;if(i.match(/^\/\w+$/))return`@${i.substring(1)}@${e.hostname}`}catch{}}getFeedback(t){const e=t.match(Ki.usernameAtServer);if(console.log("Match:",e),e){const i=e[2];try{new URL("https://"+i);return}catch{return F.t.validation.fediverse.invalidHost.Subs({host:i})}}try{if(new URL(t).pathname.match(/^\/\w+$/))return}catch{}return F.t.validation.fediverse.feedback}isValid(t){return this.getFeedback(t)===void 0}};let Ei=Ki;y(Ei,"usernameAtServer",/^@?(\w+)@((\w|\.)+)$/);const Tn=class{static _byTypeConstructor(){const t=new Map;for(const e of Tn.AllValidators)t.set(e.name,e);return t}static HelpText(){const t=Tn.AllValidators.map(e=>new P([new je(e.name,3),e.explanation]).SetClass("flex flex-col"));return new P([new je("Available types for text fields",1),"The listed types here trigger a special input element. Use them in `tagrendering.freeform.type` of your tagrendering to activate them",...t]).SetClass("flex flex-col")}static get(t){return Tn._byType.get(t)}};let xt=Tn;y(xt,"availableTypes",["string","text","date","nat","int","distance","direction","wikidata","pnat","float","pfloat","email","url","phone","opening_hours","color","fediverse"]),y(xt,"AllValidators",[new wc,new _c,new Rc,new zs,new Ca,new Dc,new Ac,new Sg,new $g,new Mg,new xg,new kg,new Jg,new qm,new km,new Jm,new Ei]),y(xt,"_byType",Tn._byTypeConstructor());class qt{constructor(t,e){y(this,"id");y(this,"render");y(this,"renderIcon");y(this,"renderIconClass");y(this,"question");y(this,"questionhint");y(this,"condition");y(this,"metacondition");y(this,"description");y(this,"configuration_warnings",[]);y(this,"freeform");y(this,"multiAnswer");y(this,"mappings");y(this,"labels");y(this,"classes");var o,a,r,s,p;if(t===void 0)throw"Initing a TagRenderingConfig with undefined in "+e;typeof t=="number"&&(t=""+t);let i=e;if(t.id!==void 0){const d=(e??"").split(".")[0];if(t.source){let c=t.source+":";t.source==="shared-questions"&&(c+="shared_questions."),i=`${c}${t.id??""}`}else i=`layers:${d}.tagRenderings.${t.id??""}`}if(typeof t=="string"){this.render=F.T(t,i+".render"),this.multiAnswer=!1;return}if(this.id=t.id??"",this.id.match(/^[a-zA-Z0-9 ()?\/=:;,_-]*$/)===null)throw"Invalid ID in "+e+": an id can only contain [a-zA-Z0-0_-] as characters. The offending id is: "+this.id;if(this.labels=t.labels??[],typeof t.classes=="string"?this.classes=t.classes.split(" "):this.classes=t.classes??[],this.render=F.T(t.render,i+".render"),this.question=F.T(t.question,i+".question"),this.questionhint=F.T(t.questionHint,i+".questionHint"),this.description=F.T(t.description,i+".description"),this.condition=se.Tag(t.condition??{and:[]},`${e}.condition`),typeof t.icon=="string"?(this.renderIcon=t.icon,this.renderIconClass="small"):typeof t.icon=="object"&&(this.renderIcon=t.icon.path,this.renderIconClass=t.icon.class),this.metacondition=se.Tag(t.metacondition??{and:[]},`${e}.metacondition`),t.freeform){if(t.freeform.addExtraTags!==void 0&&t.freeform.addExtraTags.map===void 0)throw`Freeform.addExtraTags should be a list of strings - not a single string (at ${e})`;if(t.freeform.type&&xt.availableTypes.indexOf(t.freeform.type)<0)throw`At ${e}: invalid type, perhaps you meant ${k.sortedByLevenshteinDistance(t.freeform.key,xt.availableTypes,h=>h)}`;const d=t.freeform.type??"string";let c=F.T(t.freeform.placeholder);if(c===void 0){const h=(o=F.t.validation[d])==null?void 0:o.description,m=t.freeform.key;h!==void 0?c=h.OnEveryLanguage(f=>m+" ("+f+")"):c=F.T(m+" ("+d+")")}if(this.freeform={key:t.freeform.key,type:d,placeholder:c,addExtraTags:((a=t.freeform.addExtraTags)==null?void 0:a.map((h,m)=>se.ParseUploadableTag(h,`${e}.extratag[${m}]`)))??[],inline:t.freeform.inline??!1,default:t.freeform.default,helperArgs:t.freeform.helperArgs},t.freeform.extraTags!==void 0)throw`Freeform.extraTags is defined. This should probably be 'freeform.addExtraTag' (at ${e})`;if(this.freeform.key===void 0||this.freeform.key==="")throw`Freeform.key is undefined or the empty string - this is not allowed; either fill out something or remove the freeform block alltogether. Error in ${e}`;if(t.freeform.args!==void 0)throw`Freeform.args is defined. This should probably be 'freeform.helperArgs' (at ${e})`;if(t.freeform.key==="questions"&&this.id!=="questions")throw`If you use a freeform key 'questions', the ID must be 'questions' too to trigger the special behaviour. The current id is '${this.id}' (at ${e})`;if(this.freeform.addExtraTags&&new ae(this.freeform.addExtraTags).usedKeys().indexOf(this.freeform.key)>=0)throw`The freeform key ${this.freeform.key} will be overwritten by one of the extra tags, as they use the same key too. This is in ${e}`}if(this.multiAnswer=t.multiAnswer??!1,t.mappings){if(!Array.isArray(t.mappings))throw"Tagrendering has a 'mappings'-object, but expected a list ("+e+")";const d=k.NoNull(t.mappings.map(c=>c.icon!==void 0?c.icon.class:void 0))[0]??"small";this.mappings=t.mappings.map((c,h)=>qt.ExtractMapping(c,h,i,e,this.multiAnswer,this.question!==void 0,d))}if(this.question&&((r=this.freeform)==null?void 0:r.key)===void 0&&this.mappings===void 0)throw`${e}: A question is defined, but no mappings nor freeform (key) are. The question is ${this.question.txt} at ${e}`;if(this.freeform){if(this.render===void 0)throw`${e}: Detected a freeform key without rendering... Key: ${this.freeform.key} in ${e}`;for(const d in this.render.translations){if(d.startsWith("_"))continue;const c=this.render.translations[d];if(c==="")throw e+" Rendering for language "+d+" is empty";if(!(c.indexOf("{"+this.freeform.key+"}")>=0||c.indexOf("&LBRACE"+this.freeform.key+"&RBRACE")||c.indexOf("{"+this.freeform.key+":")>=0||this.freeform.type==="opening_hours"&&c.indexOf("{opening_hours_table(")>=0||["canonical","fediverse_link"].some(m=>c.indexOf(`{${m}(${this.freeform.key}`)>=0))&&!(this.freeform.type==="wikidata"&&c.indexOf("{wikipedia("+this.freeform.key)>=0)&&!(this.freeform.key==="wikidata"&&c.indexOf("{wikipedia()")>=0)&&!(this.freeform.type==="wikidata"&&c.indexOf(`{wikidata_label(${this.freeform.key})`)>=0))throw`${e}: The rendering for language ${d} does not contain the freeform key {${this.freeform.key}}. This is a bug, as this rendering should show exactly this freeform key!
The rendering is ${c} `}}if(this.render&&this.question&&this.freeform===void 0)throw`${e}: Detected a tagrendering which takes input without freeform key in ${e}; the question is ${this.question.txt}`;if(!t.multiAnswer&&this.mappings!==void 0&&this.question!==void 0){let d=[];for(let c=0;c<this.mappings.length;c++){const h=this.mappings[c];if(h.if===void 0)throw`${e}.mappings[${c}].if is undefined`;d.push(...h.if.usedKeys())}d=k.Dedup(d);for(let c=0;c<this.mappings.length;c++){const h=this.mappings[c];if(h.hideInAnswer)continue;const m=h.if.usedKeys();for(const f of d)if(m.indexOf(f)<0){const v=`${e}.mappings[${c}]: This mapping only defines values for ${m.join(", ")}, but it should also give a value for ${f}`;this.configuration_warnings.push(v)}}}if(this.question!==void 0&&t.multiAnswer){if((((s=this.mappings)==null?void 0:s.length)??0)===0)throw`${e} MultiAnswer is set, but no mappings are defined`;let d=[],c=!0;for(const h of this.mappings)h.hideInAnswer||(h.ifnot===void 0&&(c=!1),d=d.concat(h.if.usedKeys()));if(d=k.Dedup(d),d.length>1&&!c)throw`${e}: A multi-answer is defined, which generates values over multiple keys. Please define ifnot-tags too on every mapping`;if(d.length>1&&((p=this.freeform)==null?void 0:p.key)!==void 0)throw`${e}: A multi-answer is defined, which generates values over multiple keys. This is incompatible with having a freeform key`}}static ExtractMapping(t,e,i,o,a,r,s="small"){var u;const p=`${i}.mappings.${e}`;if(t.if===void 0)throw`${p}: Invalid mapping: "if" is not defined in ${JSON.stringify(t)}`;if(t.then===void 0)throw t.render!==void 0?`${p}: Invalid mapping: no 'then'-clause found. You might have typed 'render' instead of 'then', change it in ${JSON.stringify(t)}`:`${p}: Invalid mapping: no 'then'-clause found in ${JSON.stringify(t)}`;if(t.ifnot!==void 0&&!a)throw`${p}: Invalid mapping: 'ifnot' is defined, but the tagrendering is not a multianswer. Either remove ifnot or set 'multiAnswer:true' to enable checkboxes instead of radiobuttons`;if(t.render!==void 0)throw`${p}: Invalid mapping: a 'render'-key is present, this is probably a bug: ${JSON.stringify(t)}`;if(typeof t.if!="string"&&t.if.length!==void 0)throw`${p}: Invalid mapping: "if" is defined as an array. Use {"and": <your conditions>} or {"or": <your conditions>} instead`;if(t.addExtraTags!==void 0&&a)throw`${p}: Invalid mapping: got a multi-Answer with addExtraTags; this is not allowed`;let d=!1;typeof t.hideInAnswer=="boolean"?d=t.hideInAnswer:t.hideInAnswer!==void 0&&(d=se.Tag(t.hideInAnswer,`${o}.mapping[${e}].hideInAnswer`));const c=(t.addExtraTags??[]).map(($,S)=>se.SimpleTag($,`${p}.addExtraTags[${S}]`));if(d===!0&&c.length>0)throw`${p}: Invalid mapping: 'hideInAnswer' is set to 'true', but 'addExtraTags' is enabled as well. This means that extra tags will be applied if this mapping is chosen as answer, but it cannot be chosen as answer. This either indicates a thought error or obsolete code that must be removed.`;let h,m=s;if(t.icon!==void 0)if(typeof t.icon=="string"&&t.icon!==""){let $=t.icon;$.endsWith(".svg")&&($=$.substring(0,$.length-4)),we.All[$+".svg"]!==void 0?(h="./assets/svg/"+t.icon,h.endsWith(".svg")||(h+=".svg")):h=t.icon}else h=t.icon.path,m=t.icon.class??m;const f=t.priorityIf!==void 0?se.Tag(t.priorityIf):void 0,v={if:se.Tag(t.if,`${p}.if`),ifnot:t.ifnot!==void 0?se.Tag(t.ifnot,`${p}.ifnot`):void 0,then:F.T(t.then,`${p}.then`),hideInAnswer:d,icon:h,iconClass:m,addExtraTags:c,searchTerms:t.searchTerms,priorityIf:f};if(r){if(d!==!0&&v.if!==void 0&&!v.if.isUsableAsAnswer())throw`${o}.mapping[${e}].if: This value cannot be used to answer a question, probably because it contains a regex or an OR. Either change it or set 'hideInAnswer'`;if(d!==!0&&!(((u=v.ifnot)==null?void 0:u.isUsableAsAnswer())??!0))throw`${o}.mapping[${e}].ifnot: This value cannot be used to answer a question, probably because it contains a regex or an OR. If a contributor were to pick this as an option, MapComplete wouldn't be able to determine which tags to add.
    Either change it or set 'hideInAnswer'`}return v}IsKnown(t){var e;if(this.condition&&!this.condition.matchesProperties(t))return!0;if(this.multiAnswer){for(const o of this.mappings??[])if(se.MatchesMultiAnswer(o.if,t))return!0;const i=(e=this.freeform)==null?void 0:e.key;if(i!==void 0){const o=t[i];return o!==void 0&&o!==""}return!1}return this.GetRenderValue(t)!==void 0}GetRenderValues(t){var a,r;if(!this.multiAnswer)return[this.GetRenderValueWithImage(t)];let e=((a=this.freeform)==null?void 0:a.key)!==void 0,i=new Set;const o=k.NoNull((r=this.mappings??[])==null?void 0:r.map(s=>{if(s.if===void 0)return s;if(se.MatchesMultiAnswer(s.if,t)){if(e&&s.if.isUsableAsAnswer()){const p=s.if.asChange({}).find(d=>d.k===this.freeform.key).v;i.add(p)}return s}}));if(e&&t[this.freeform.key]!==void 0){const p=t[this.freeform.key].split(";").filter(d=>!i.has(d));for(const d of p)o.push({then:new Yl(this.render.replace("{"+this.freeform.key+"}",d).translations)})}return o}GetRenderValue(t){var e;return(e=this.GetRenderValueWithImage(t))==null?void 0:e.then}GetRenderValueWithImage(t){var e;if(!(this.condition!==void 0&&!this.condition.matchesProperties(t))){if(this.mappings!==void 0&&!this.multiAnswer){for(const i of this.mappings)if(i.if===void 0||i.if.matchesProperties(t))return i}if(((e=this.freeform)==null?void 0:e.key)===void 0||t[this.freeform.key]!==void 0)return{then:this.render,icon:this.renderIcon,iconClass:this.renderIconClass}}}EnumerateTranslations(){const t=[];for(const e in this){if(!this.hasOwnProperty(e))continue;const i=this[e];i instanceof Xn&&t.push(i)}return t}FreeformValues(){var t,e;try{const i=(t=this.freeform)==null?void 0:t.key,o=(e=this.mappings)==null?void 0:e.filter(r=>r.hideInAnswer!==!0);if(i===void 0){let r=k.NoNull((o==null?void 0:o.map(c=>c.if.asChange({})))??[]);if(r.length===0)return;const s=r.map(c=>c.map(h=>h.k));let p=s[0];for(const c of s)p=p.filter(h=>c.indexOf(h)>=0);const d=p[0];return d===void 0?void 0:{key:d,values:k.NoNull(r.map(c=>{var h;return(h=c.filter(m=>m.k===d)[0])==null?void 0:h.v}))}}let a=k.NoNull((o==null?void 0:o.map(r=>{var s;return(s=r.if.asChange({}).filter(p=>p.k===i)[0])==null?void 0:s.v}))??[]);return a.length===void 0&&(a=void 0),{key:i,type:this.freeform.type,values:a}}catch{console.error("Could not create FreeformValues for tagrendering",this.id);return}}constructChangeSpecification(t,e,i,o){var p;t=t==null?void 0:t.trim();const a=xt.get((p=this.freeform)==null?void 0:p.type);if(a&&t&&(t=a.reformat(t,()=>o._country)),t===""&&(t=void 0),t===void 0&&e===void 0&&i===void 0||this.mappings===void 0&&t===void 0)return;if(this.freeform!==void 0&&(this.mappings===void 0||this.mappings.length==0||e===this.mappings.length&&!this.multiAnswer))return new ae([new Ie(this.freeform.key,t),...this.freeform.addExtraTags??[]]);if(this.multiAnswer){let d=this.mappings.filter((m,f)=>i[f]).map(m=>new ae([m.if,...m.addExtraTags??[]])),c=this.mappings.filter((m,f)=>!i[f]).map(m=>m.ifnot);i.at(-1)&&this.freeform&&d.push(new ae([new Ie(this.freeform.key,t),...this.freeform.addExtraTags??[]]));const h=se.FlattenMultiAnswer([...d,...c]);return h.and.length===0?void 0:h}const r=this.mappings.some(d=>typeof d.hideInAnswer=="boolean"?!d.hideInAnswer:!d.hideInAnswer.matchesProperties(o)),s=t!==void 0&&(e===this.mappings.length||!r||e===void 0);if(s)return new ae([new Ie(this.freeform.key,t),...this.freeform.addExtraTags??[]]);if(e!==void 0)return new ae([this.mappings[e].if,...this.mappings[e].addExtraTags??[]]);console.error("TagRenderingConfig.ConstructSpecification has a weird fallback for",{freeformValue:t,singleSelectedMapping:e,multiSelectedMapping:i,currentProperties:o,useFreeform:s})}GenerateDocumentation(){var a,r,s;let t=[];((a=this.freeform)==null?void 0:a.key)!==void 0&&(t=["This rendering asks information about the property ",nt.OsmWiki(this.freeform.key),new Tc(new P(["This is rendered with ",new Ce(this.render.txt).SetClass("code font-bold")]))]);let e;this.mappings!==void 0&&(e=new Ji([].concat(...this.mappings.map(p=>{const d=[new P([new Ce(p.then.txt).SetClass("font-bold")," corresponds with ",new Ce(p.if.asHumanString(!1,!1,{})).SetClass("code")])];return p.hideInAnswer===!0&&d.push(new Ce("This option cannot be chosen as answer").SetClass("italic")),p.ifnot!==void 0&&d.push("Unselecting this answer will add "+p.ifnot.asHumanString(!0,!1,{})),d}))));let i;this.condition!==void 0&&!((r=this.condition)!=null&&r.matchesProperties({}))&&(i=new P(["This tagrendering is only visible in the popup if the following condition is met:",new Ce(this.condition.asHumanString(!1,!1,{})).SetClass("code")]));let o;return((s=this.labels)==null?void 0:s.length)>0&&(o=new P(["This tagrendering has labels ",...this.labels.map(p=>new Ce(p).SetClass("code"))]).SetClass("flex")),new P([new je(this.id,3),this.description,this.question!==void 0?new P(["The question is ",new Ce(this.question.txt).SetClass("font-bold bold")]):new Ce("This tagrendering has no question and is thus read-only").SetClass("italic"),new P(t),e,i,o]).SetClass("flex flex-col")}}class Ui{constructor(t,e){y(this,"id");y(this,"options");y(this,"defaultSelection");if(t.options===void 0)throw`A filter without options was given at ${e}`;if(t.id===void 0)throw`A filter without id was found at ${e}`;if(t.id.match(/^[a-zA-Z0-9_-]*$/)===null)throw`A filter with invalid id was found at ${e}. Ids should only contain letters, numbers or - _`;if(t.options.map===void 0)throw`A filter was given where the options aren't a list at ${e}`;this.id=t.id;let i;if(this.options=t.options.map((o,a)=>{var c;const r=`${e}.options.${a}`,s=F.T(o.question,`${r}.question`);let p;if((((c=o.fields)==null?void 0:c.length)??0)==0&&o.osmTags!==void 0&&(p=se.Tag(o.osmTags,`${r}.osmTags`),Ui.validateSearch(p,r)),s===void 0)throw`Invalid filter: no question given at ${r}`;const d=(o.fields??[]).map((h,m)=>{const f=h.type??"string";if(h.name===void 0||h.name===""||h.name.match(/[a-z0-9_-]+/)==null)throw`Invalid filter: a variable name should match [a-z0-9_-]+ at ${r}.fields[${m}]`;return{name:h.name,type:f}});for(const h of d)for(let m in s.translations){const f=s.translations[m];if(!m.startsWith("_")&&f.indexOf("{"+h.name+"}")<0)throw"Error in filter with fields at "+e+".question."+m+": The question text should contain every field, but it doesn't contain `{"+h+"}`: "+f}if(o.default)if(i===void 0)i=a;else throw`Invalid filter: multiple filters are set as default, namely ${a} and ${i} at ${e}`;return o.osmTags!==void 0&&Ui.validateSearch(se.Tag(o.osmTags),r),{question:s,osmTags:p,fields:d,originalTagsSpec:o.osmTags}}),this.defaultSelection=i,this.options.some(o=>o.fields.length>0)&&this.options.length>1)throw`Invalid filter at ${e}: a filter with textfields should only offer a single option.`;if(this.options.length>1&&this.options[0].osmTags!==void 0)throw"Error in "+e+"."+this.id+": the first option of a multi-filter should always be the 'reset' option and not have any filters"}static validateSearch(t,e){t.visit(i=>{if(i instanceof le&&typeof i.value!="string"&&!(i.value.source=="^..*$"||i.value.source==".+"||i.value.source=="^[\\s\\S][\\s\\S]*$")&&!i.value.ignoreCase)throw`At ${e}: The filter for key '${i.key}' uses a regex '${i.value}', but you should use a case invariant regex with ~i~ instead, as search should be case insensitive`})}initState(t){var a;let e="";this.options.length>1?e=""+(this.defaultSelection??0):((a=this.options[0].fields)==null?void 0:a.length)>0?e="{}":this.defaultSelection===0?e="true":e="false";const i=ec.GetQueryParameter(`filter-${t}-${this.id}`,e,"State of filter "+this.id);return this.options.length>1?i.sync(r=>{const s=Number(r);if(!isNaN(s))return s},[],r=>""+r):this.options[0].fields.length>0?i:i.sync(r=>{if(r==="true")return 0},[],r=>r===void 0?"false":"true")}GenerateDocs(){const t=this.options.some(e=>{var i;return((i=e.fields)==null?void 0:i.length)>0});return new Dn(k.NoNull(["id","question","osmTags",t?"fields":void 0]),this.options.map((e,i)=>{var a,r;const o=this.options.length>1&&(this.defaultSelection??0)==i;return k.NoNull([this.id+"."+i,o?new P([e.question.SetClass("font-bold"),"(default)"]):e.question,((a=e.osmTags)==null?void 0:a.asHumanString(!1,!1,{}))??"",((r=e.fields)==null?void 0:r.length)>0?new P(e.fields.map(s=>s.name+" ("+s.type+")")):void 0])}))}}class Im{constructor(t,e,i){y(this,"canonical");y(this,"_canonicalSingular");y(this,"useAsDefaultInput");y(this,"useIfNoUnitGiven");y(this,"prefix");y(this,"alternativeDenominations");y(this,"_human");y(this,"_humanSingular");var o,a,r;if(i=`${i}.unit(${t.canonicalDenomination})`,this.canonical=t.canonicalDenomination.trim(),this.canonical===void 0)throw`${i}: this unit has no decent canonical value defined`;if(this._canonicalSingular=(o=t.canonicalDenominationSingular)==null?void 0:o.trim(),(a=t.alternativeDenomination)==null||a.forEach((s,p)=>{if(((s==null?void 0:s.trim())??"")==="")throw`${i}.alternativeDenomination.${p}: invalid alternative denomination: undefined, null or only whitespace`}),this.alternativeDenominations=((r=t.alternativeDenomination)==null?void 0:r.map(s=>s.trim()))??[],t.default!==void 0)throw`${i} uses the old 'default'-key. Use "useIfNoUnitGiven" or "useAsDefaultInput" instead`;this.useIfNoUnitGiven=t.useIfNoUnitGiven,this.useAsDefaultInput=e??t.useIfNoUnitGiven,this._human=F.T(t.human,i+"human"),this._humanSingular=F.T(t.humanSingular,i+"humanSingular"),this.prefix=t.prefix??!1}get human(){return this._human.Clone()}get humanSingular(){return(this._humanSingular??this._human).Clone()}canonicalValue(t,e){if(t===void 0)return;const i=this.StrippedValue(t,e);return i===null?null:i==="1"&&this._canonicalSingular!==void 0?("1 "+this._canonicalSingular).trim():(i+" "+this.canonical).trim()}StrippedValue(t,e){if(t===void 0)return;t=t.toLowerCase();const i=this;function o(s){return i.prefix?t.startsWith(s):t.endsWith(s)}function a(s){return i.prefix?t.substr(s.length).trim():t.substring(0,t.length-s.length).trim()}if(this.canonical!==""&&o(this.canonical.toLowerCase()))return a(this.canonical);if(this._canonicalSingular!==void 0&&this._canonicalSingular!==""&&o(this._canonicalSingular))return a(this._canonicalSingular);for(const s of this.alternativeDenominations)if(o(s))return a(s);if(!e)return null;const r=Number(t.trim());return isNaN(r)?null:t.trim()}isDefaultDenomination(t){return this.useIfNoUnitGiven===!0?!0:this.useIfNoUnitGiven===!1?!1:this.useIfNoUnitGiven.indexOf(t())>=0}}class Na{constructor(t,e,i){y(this,"appliesToKeys");y(this,"denominations");y(this,"denominationsSorted");y(this,"eraseInvalid");this.appliesToKeys=new Set(t),this.denominations=e,this.eraseInvalid=i;const o=new Set;for(const s of this.denominations){if(o.has(s.canonical))throw"This canonical unit is already defined in another denomination: "+s.canonical;const p=s.alternativeDenominations.filter(d=>o.has(d));if(p.length>0)throw"A denomination is used multiple times: "+p.join(", ");o.add(s.canonical),s.alternativeDenominations.forEach(d=>o.add(d))}this.denominationsSorted=[...this.denominations],this.denominationsSorted.sort((s,p)=>p.canonical.length-s.canonical.length);const a=new Set;function r(s){if(s!==void 0){s=s.toLowerCase();for(let p=0;p<s.length+1;p++){const d=s.substring(0,p);a.add(d)}}}for(const s of this.denominations)r(s.canonical),r(s._canonicalSingular),s.alternativeDenominations.forEach(r)}static fromJson(t,e){const i=t.appliesToKey;for(let a=0;a<i.length;a++){let r=i[a];if(r.trim()!==r)throw`${e}.appliesToKey[${a}] is invalid: it starts or ends with whitespace`}if((t.applicableUnits??[]).length===0)throw`${e}: define at least one applicable unit`;const o=t.applicableUnits.map((a,r)=>new Im(a,a.canonicalDenomination===void 0?void 0:a.canonicalDenomination.trim()===t.defaultInput,`${e}.units[${r}]`));if(t.defaultInput&&!o.some(a=>a.canonical.trim()===t.defaultInput))throw`${e}: no denomination has the specified default denomination. The default denomination is '${t.defaultInput}', but the available denominations are ${o.map(a=>a.canonical).join(", ")}`;return new Na(i,o,t.eraseInvalidValues??!1)}isApplicableToKey(t){return t===void 0?!1:this.appliesToKeys.has(t)}findDenomination(t,e){if(t===void 0)return;const i=this.getDefaultDenomination(e);for(const o of this.denominationsSorted){const a=o.StrippedValue(t,i===o);if(a!==null)return[a,o]}return[void 0,void 0]}asHumanLongValue(t,e){if(t===void 0)return;const[i,o]=this.findDenomination(t,e),a=i==="1"?o==null?void 0:o.humanSingular:o==null?void 0:o.human;if(a===void 0)return new Ce(i??t);const r=o.prefix?[a,i]:[i,a];return new P(r)}getDefaultInput(t){console.log("Searching the default denomination for input",t);for(const e of this.denominations){if(e.useAsDefaultInput===!0)return e;if(e.useAsDefaultInput===void 0||e.useAsDefaultInput===!1)continue;let i=t();typeof i=="string"&&(i=i.split(","));const o=e.useAsDefaultInput;if(i.some(a=>o.indexOf(a)>=0))return e}return this.denominations[0]}getDefaultDenomination(t){for(const e of this.denominations){if(e.useIfNoUnitGiven===!0||e.canonical==="")return e;if(e.useIfNoUnitGiven===void 0||e.useIfNoUnitGiven===!1)continue;let i=t()??[];typeof i=="string"&&(i=i.split(","));const o=e.useIfNoUnitGiven;if(i.some(a=>o.indexOf(a)>=0))return e}return this.denominations[0]}}const Zi=class{constructor(t,e){y(this,"deleteReasons");y(this,"nonDeleteMappings");y(this,"softDeletionTags");y(this,"neededChangesets");if(this.deleteReasons=(t.extraDeleteReasons??[]).map((i,o)=>{const a=`${e}.extraDeleteReasons[${o}]`;if((i.changesetMessage??"").length<=5)throw`${a}.explanation is too short, needs at least 4 characters`;return{explanation:F.T(i.explanation,a+".explanation"),changesetMessage:i.changesetMessage}}),!t.omitDefaultDeleteReasons)for(const i of Zi.defaultDeleteReasons)this.deleteReasons.push({changesetMessage:i.changesetMessage,explanation:i.explanation.Clone()});if(this.nonDeleteMappings=(t.nonDeleteMappings??[]).map((i,o)=>{const a=`${e}.extraDeleteReasons[${o}]`;return se.Tag(i.if,a+".if"),{if:i.if,then:F.T(i.then,a+".then")}}),this.nonDeleteMappings.length+this.deleteReasons.length==0)throw"At "+e+": a deleteconfig should have some reasons to delete: either the default delete reasons or a nonDeleteMapping or extraDeletereason should be given";if(this.softDeletionTags=void 0,t.softDeletionTags!==void 0&&(this.softDeletionTags=se.Tag(t.softDeletionTags,`${e}.softDeletionTags`)),t.hardDeletionTags!==void 0)throw`You probably meant 'softDeletionTags' instead of 'hardDeletionTags' (at ${e})`;this.neededChangesets=t.neededChangesets}constructTagRendering(){const t=F.t.delete,e=[];for(const o of this.nonDeleteMappings)e.push({if:o.if,then:o.then.translations});for(const o of this.deleteReasons)e.push({if:Zi.deleteReasonKey+"="+o.changesetMessage,then:o.explanation.translations});const i={question:t.whyDelete.translations,mappings:e};return new qt(i)}};let Kn=Zi;y(Kn,"deleteReasonKey","_delete_reason"),y(Kn,"defaultDeleteReasons",[{changesetMessage:"testing point",explanation:F.t.delete.reasons.test},{changesetMessage:"disused",explanation:F.t.delete.reasons.disused},{changesetMessage:"not found",explanation:F.t.delete.reasons.notFound},{changesetMessage:"duplicate",explanation:F.t.delete.reasons.duplicate}]);class xs{constructor(t,e){y(this,"enableImproveAccuracy");y(this,"enableRelocation");if(this.enableImproveAccuracy=t.enableImproveAccuracy??!0,this.enableRelocation=t.enableRelocation??!0,!(this.enableRelocation||this.enableImproveAccuracy))throw"At least one default move reason should be allowed (at "+e+")"}}class Fa{constructor(t,e){y(this,"_context");y(this,"_json");this._json=t,this._context=e}tr(t,e,i){const o=this._json[t];if(o==null)return e===void 0?void 0:new qt(e,`${i??this._context}.${t}.default value`);if(Object.keys(o).length===1&&typeof o.render=="string")throw`At ${i??"<unknown>"}: use the content directly instead of {${t}: ${JSON.stringify(o)}}`;return new qt(o,`${i??this._context}.${t}`)}ParseTagRenderings(t,e){if(t===void 0)return[];const i=this._context;e=e??{},e.prepConfig===void 0&&(e.prepConfig=a=>a);const o=[];for(let a=0;a<t.length;a++){const r=t[a],s=new qt(r,`${i}.tagrendering[${a}]`);if(e.readOnlyMode&&s.question!==void 0)throw`A question is defined for ${i}.tagrendering[${a}], but this is not allowed at this position - probably because this rendering is an icon, badge or label`;if(e.requiresId&&s.id==="")throw`${i}.tagrendering[${a}] has an invalid ID - make sure it is defined and not empty`;o.push(s)}return o}}const wn=class extends Fa{constructor(e,i){var a,r;super(e,i);y(this,"location");y(this,"icon");y(this,"iconBadges");y(this,"iconSize");y(this,"anchor");y(this,"label");y(this,"labelCss");y(this,"labelCssClasses");y(this,"rotation");y(this,"cssDef");y(this,"cssClasses");y(this,"pitchAlignment");y(this,"rotationAlignment");if(e==null)throw"Invalid PointRenderingConfig: undefined or null";if(typeof e.location=="string"&&(e.location=[e.location]),this.location=new Set(e.location),this.location.forEach(s=>{const p=wn.allowed_location_codes;if(!p.has(s))throw`A point rendering has an invalid location: '${s}' is not one of ${Array.from(p).join(", ")} (at ${i}.location)`}),e.icon===void 0&&e.label===void 0)throw"A point rendering should define at least an icon or a label";if(this.location.size==0)throw"A pointRendering should have at least one 'location' to defined where it should be rendered. (At "+i+".location)";this.icon=this.tr("icon",void 0),e.css!==void 0&&(this.cssDef=this.tr("css",void 0)),this.cssClasses=this.tr("cssClasses",void 0),this.labelCss=this.tr("labelCss",void 0),this.labelCssClasses=this.tr("labelCssClasses",void 0),this.iconBadges=(e.iconBadges??[]).map((s,p)=>({if:se.Tag(s.if),then:new qt(s.then,`iconBadges.${p}`)}));const o=(r=(a=this.icon)==null?void 0:a.GetRenderValue({id:"node/-1"}))==null?void 0:r.txt;if(o!==void 0&&o.startsWith(k.assets_path)){const s=o.substr(k.assets_path.length);if(we.All[s]===void 0)throw i+": builtin SVG asset not found: "+o}if(typeof e.iconSize=="string"){const s=e.iconSize;if(["bottom","top","center"].some(p=>s.endsWith(p)))throw"At "+i+" in : iconSize uses legacy ,bottom, center or top postfix. Use the field `anchor` instead."}this.iconSize=this.tr("iconSize","40,40"),this.anchor=this.tr("anchor","center"),this.label=this.tr("label",void 0),this.rotation=this.tr("rotation","0"),this.pitchAlignment=this.tr("pitchAlignment","canvas"),this.rotationAlignment=this.tr("rotationAlignment",e.pitchAlignment==="map"?"map":"canvas")}static FromHtmlSpec(e,i,o=!1){if(e===void 0)return;const a=e.match(/([a-zA-Z0-9_]*):([^;]*)/);if(a!==null&&we.All[a[1]+".svg"]!==void 0){const r=we.All[a[1]+".svg"],s=a[2],p=new na(r.replace(/(rgb\(0%,0%,0%\)|#000000|#000)/g,s),!0).SetStyle(i);return o&&p.SetClass("badge"),p}else if(we.All[e+".svg"]!==void 0){const r=we.All[e+".svg"],s=new na(r,!0).SetStyle(i);return o&&s.SetClass("badge"),s}else return new Ce(`<img src="${e}" style="${i}" />`)}static FromHtmlMulti(e,i,o,a=void 0,r){var c;if(e===void 0)return a;const s=`width:100%;height:100%;transform: rotate( ${i} );display:block;position: absolute; top: 0; left: 0`,p=((c=e.trim())==null?void 0:c.split(";"))??[],d=k.NoEmpty(p).map(h=>wn.FromHtmlSpec(h,s,o));if(d.length===0)return a;{const h=new P(d).SetClass("relative block");return r!=null&&r.noFullWidth||h.SetClass("w-full h-full"),h}}GetBaseIcon(e,i){var s,p,d,c;e=e??{id:"node/-1"};let o;if(this.label===void 0&&(o=we.teardrop_with_hole_green_svg()),this.icon===void 0)return o;const a=k.SubstituteKeys(((p=(s=this.rotation)==null?void 0:s.GetRenderValue(e))==null?void 0:p.txt)??"0deg",e),r=k.SubstituteKeys((c=(d=this.icon)==null?void 0:d.GetRenderValue(e))==null?void 0:c.txt,e);if(r!==void 0)return r.startsWith("<")&&r.endsWith(">")?new Ce(k.SubstituteKeys(r,e)):wn.FromHtmlMulti(r,a,!1,o,i)}GetSimpleIcon(e){const i=this;if(this.icon!==void 0)return new Yn(e.map(o=>i.GetBaseIcon(o))).SetClass("w-full h-full block")}RenderIcon(e,i,o){var T,_,M,A,I;function a(B,N=40){const L=Number(B);return isNaN(L)?N:L}function r(B,N){var Q;if(e===void 0)return N;const L=((Q=B==null?void 0:B.GetRenderValue(e.data))==null?void 0:Q.txt)??N;return k.SubstituteKeys(L,e.data).replace(/{.*}/g,"")}const s=r(this.iconSize,"40,40").split(","),p=a(s[0]);let d=a(s[1]);const c=r(this.anchor,"center"),h=((T=c==null?void 0:c.trim())==null?void 0:T.toLowerCase())??"center";let m=0,f=0;h==="left"&&(m=-p/2),h==="right"&&(m=p/2),h==="top"&&(f=d/2),h==="bottom"&&(f=-d/2);const v=this.GetSimpleIcon(e);let u;((o==null?void 0:o.includeBadges)??!0)&&(u=this.GetBadges(e));const $=new P([v,u]).SetClass("block relative");o!=null&&o.noSize?$.SetClass("w-full h-full"):$.SetStyle(`width: ${p}px; height: ${d}px`);const S=(M=(_=this.cssDef)==null?void 0:_.GetRenderValue(e.data))==null?void 0:M.txt,R=(I=(A=this.cssClasses)==null?void 0:A.GetRenderValue(e.data))==null?void 0:I.txt;let C=this.GetLabel(e),D;return v===void 0&&C===void 0?D=void 0:v===void 0?D=new P([C]):C===void 0?D=new P([$]):D=new P([$,C]).SetStyle("flex flex-col"),S!==void 0&&(D==null||D.SetStyle(S)),R!==void 0&&(D==null||D.SetClass(R)),{html:D,iconAnchor:[m,f]}}GetBadges(e){if(this.iconBadges.length!==0)return new Yn(e.map(i=>{const o=this.iconBadges.map(a=>{var p,d;if(!a.if.matchesProperties(i))return;const r=k.SubstituteKeys((p=a.then.GetRenderValue(i))==null?void 0:p.txt,i);if(r.startsWith("<")&&r.endsWith(">"))return new Ce(k.SubstituteKeys(r,i)).SetStyle("width: 1.5rem").SetClass("block");const s=(d=wn.FromHtmlMulti(r,"0",!0))==null?void 0:d.SetClass("block relative");if(s!==void 0)return new P([s]).SetStyle("width: 1.5rem").SetClass("block")});return new P(o).SetClass("inline-flex h-full")})).SetClass("absolute bottom-0 right-1/3 h-1/2 w-0")}GetLabel(e){var r,s,p,d;if(this.label===void 0)return;const i=(s=(r=this.labelCss)==null?void 0:r.GetRenderValue(e.data))==null?void 0:s.txt,o=(d=(p=this.labelCssClasses)==null?void 0:p.GetRenderValue(e.data))==null?void 0:d.txt,a=this;return new Yn(e.map(c=>{var m,f,v,u;const h=(u=(v=(f=(m=a.label)==null?void 0:m.GetRenderValue(c))==null?void 0:f.Subs(c))==null?void 0:v.SetClass("block center absolute text-center "))==null?void 0:u.SetClass(o);return i&&h.SetStyle(i),new P([h]).SetClass("flex flex-col items-center")}))}};let Oi=wn;y(Oi,"allowed_location_codes",new Set(["point","centroid","start","end","projected_centerpoint"]));class Em extends Fa{constructor(e,i){super(e,i);y(this,"color");y(this,"width");y(this,"dashArray");y(this,"lineCap");y(this,"offset");y(this,"fill");y(this,"fillColor");y(this,"leftRightSensitive");this.color=this.tr("color","#0000ff"),this.width=this.tr("width","7"),this.dashArray=this.tr("dashArray",""),this.lineCap=this.tr("lineCap","round"),this.fill=this.tr("fill",void 0),this.fillColor=this.tr("fillColor",void 0),typeof e.offset=="string"&&(e.offset=parseFloat(e.offset)),this.leftRightSensitive=e.offset!==void 0&&e.offset!==0,this.offset=this.tr("offset","0")}GenerateLeafletStyle(e){function i(c,h){const m=Number(o(c,""+h)),f=Number(m);return isNaN(f)?h:f}function o(c,h){var f,v;if(e===void 0||c===void 0)return h;const m=((f=c==null?void 0:c.GetRenderValue(e))==null?void 0:f.txt)??h;return m===""?h:(v=k.SubstituteKeys(m,e))==null?void 0:v.replace(/{.*}/g,"")}const a=o(this.dashArray);let r=o(this.color,"#00f");r.startsWith("--")&&(r=getComputedStyle(document.body).getPropertyValue("--catch-detail-color"));const s={color:r,dashArray:a,weight:i(this.width,5),lineCap:o(this.lineCap),offset:i(this.offset,0)},p=o(this.fill,void 0);p!==void 0&&p!==""&&(s.fill=p==="yes"||p==="true");const d=o(this.fillColor,void 0);return d!==void 0&&(s.fillColor=d),s}}class Ba{constructor(t,e,i,o,a=!0){y(this,"_filter");y(this,"_interpreterUrl");y(this,"_timeout");y(this,"_extraScripts");y(this,"_includeMeta");this._timeout=o??new va(90),this._interpreterUrl=i;const r=t.optimize();if(r===!0||r===!1)throw"Invalid filter: optimizes to true of false";this._filter=r,this._extraScripts=e,this._includeMeta=a}async queryGeoJson(t){const e="[bbox:"+t.getSouth()+","+t.getWest()+","+t.getNorth()+","+t.getEast()+"]",i=this.buildScript(e);return await this.ExecuteQuery(i)}buildUrl(t){return`${this._interpreterUrl}?data=${encodeURIComponent(t)}`}async ExecuteQuery(t){const e=await k.downloadJson(this.buildUrl(t));if(e.elements.length===0&&e.remark!==void 0)throw console.warn("Timeout or other runtime error while querying overpass",e.remark),`Runtime error (timeout or similar)${e.remark}`;e.elements.length===0&&console.warn("No features for",e);const i=lc(e),o=new Date(e.osm3s.timestamp_osm_base);return[i,o]}buildScript(t,e="",i=!1){const o=this._filter.asOverpass();let a="";for(const r of o)i&&(a+="    "),a+="nwr"+r+e+";",i&&(a+=`
`);for(const r of this._extraScripts)a+="("+r+");";return`[out:json][timeout:${this._timeout.data}]${t};(${a});out body;${this._includeMeta?"out meta;":""}>;out skel qt;`}buildScriptInArea(t,e=!1){const i=this._filter.asOverpass();let o="";for(const r of i)e&&(o+="    "),o+="nwr"+r+"(area.searchArea);",e&&(o+=`
`);for(const r of this._extraScripts)o+="("+r+");";let a=t.osm_id;return t.osm_type==="relation"&&(a+=36e8),`[out:json][timeout:${this._timeout.data}];
        area(id:${a})->.searchArea;
        (${o});
        out body;${this._includeMeta?"out meta;":""}>;out skel qt;`}buildQuery(t){return this.buildUrl(this.buildScript(t))}static AsOverpassTurboLink(t){const i=new Ba(t,[],"",void 0,!1).buildScript("","({{bbox}})",!0);return"http://overpass-turbo.eu/?Q="+encodeURIComponent(i)}}const Xi=class extends Fa{constructor(e,i,o=!0){var s,p,d,c;i=i+"."+e.id;const a="layers:"+e.id;super(e,i);y(this,"id");y(this,"name");y(this,"description");y(this,"source");y(this,"calculatedTags");y(this,"doNotDownload");y(this,"passAllFeatures");y(this,"isShown");y(this,"minzoom");y(this,"minzoomVisible");y(this,"maxzoom");y(this,"title");y(this,"titleIcons");y(this,"mapRendering");y(this,"lineRendering");y(this,"units");y(this,"deletion");y(this,"allowMove");y(this,"allowSplit");y(this,"shownByDefault");y(this,"maxAgeOfCache");y(this,"presets");y(this,"tagRenderings");y(this,"filters");y(this,"filterIsSameAs");y(this,"forceLoad");y(this,"syncSelection");y(this,"_needsFullNodeDatabase");y(this,"popupInFloatover");if(this.id=e.id,typeof e=="string")throw`Not a valid layer: the layerConfig is a string. 'npm run generate:layeroverview' might be needed (at ${i})`;if(e.id===void 0)throw`Not a valid layer: id is undefined: ${JSON.stringify(e)} (At ${i})`;if(e.source===void 0)throw"Layer "+this.id+" does not define a source section ("+i+")";if(e.source==="special"||e.source==="special:library")this.source=null;else if(e.source.osmTags===void 0)throw"Layer "+this.id+" does not define a osmTags in the source section - these should always be present, even for geojson layers ("+i+")";if(e.id.toLowerCase()!==e.id)throw`${i}: The id of a layer should be lowercase: ${e.id}`;if(e.id.match(/[a-z0-9-_]/)==null)throw`${i}: The id of a layer should match [a-z0-9-_]*: ${e.id}`;if(e.syncSelection!==void 0&&Xi.syncSelectionAllowed.indexOf(e.syncSelection)<0)throw i+" Invalid sync-selection: must be one of "+Xi.syncSelectionAllowed.map(h=>`'${h}'`).join(", ")+" but got '"+e.syncSelection+"'";if(this.syncSelection=e.syncSelection??"no",typeof e.source!="string"){this.maxAgeOfCache=e.source.maxCacheAge??24*60*60*30;const h=se.Tag(e.source.osmTags,i+"source.osmTags");if(h.isNegative())throw i+`The source states tags which give a very wide selection: it only uses negative expressions, which will result in too much and unexpected data. Add at least one required tag. The tags are:
	`+h.asHumanString(!1,!1,{});this.source=new Cc({osmTags:h,geojsonSource:e.source.geoJson,geojsonSourceLevel:e.source.geoJsonZoomLevel,overpassScript:e.source.overpassScript,isOsmCache:e.source.isOsmCache,mercatorCrs:e.source.mercatorCrs,idKey:e.source.idKey},e.id)}if(e.source.geoJsonSource!==void 0)throw i+"Use 'geoJson' instead of 'geoJsonSource'";if(e.source.geojson!==void 0)throw i+"Use 'geoJson' instead of 'geojson' (the J is a capital letter)";if(this.allowSplit=e.allowSplit??!1,this.name=F.T(e.name,a+".name"),e.units!==void 0&&!Array.isArray(e.units))throw"At "+i+".units: the 'units'-section should be a list; you probably have an object there";if(this.units=(e.units??[]).map((h,m)=>Na.fromJson(h,`${i}.unit[${m}]`)),e.description!==void 0&&Object.keys(e.description).length===0&&(e.description=void 0),this.description=F.T(e.description,a+".description"),this.calculatedTags=void 0,e.calculatedTags!==void 0){o||console.warn(`Unofficial theme ${this.id} with custom javascript! This is a security risk`),this.calculatedTags=[];for(const h of e.calculatedTags){const m=h.indexOf("=");let f=h.substring(0,m).trim();const v="[a-z_][a-z0-9:]*";if(f.match(v)===null)throw"At "+i+" invalid key for calculated tag: "+f+"; it should match "+v;const u=f.endsWith(":");u&&(f=f.substr(0,f.length-1));const $=h.substring(m+1);this.calculatedTags.push([f,$,u])}}if(this.doNotDownload=e.doNotDownload??!1,this.passAllFeatures=e.passAllFeatures??!1,this.minzoom=e.minzoom??0,this._needsFullNodeDatabase=e.fullNodeDatabase??!1,e.minZoom!==void 0)throw"At "+i+": minzoom is written all lowercase";if(this.minzoomVisible=e.minzoomVisible??this.minzoom,this.shownByDefault=e.shownByDefault??!0,this.forceLoad=e.forceLoad??!1,e.presets===null&&(e.presets=void 0),e.presets!==void 0&&((s=e.presets)==null?void 0:s.map)===void 0)throw"Presets should be a list of items (at "+i+")";if(this.presets=(e.presets??[]).map((h,m)=>{let f={preferredBackground:["photo"],snapToLayers:void 0,maxSnapDistance:void 0};if(h.preciseInput!==void 0)throw"Layer "+this.id+" still uses the old 'preciseInput'-field";if(h.snapToLayer!==void 0){let u;typeof h.snapToLayer=="string"?u=[h.snapToLayer]:u=h.snapToLayer,f={snapToLayers:u,maxSnapDistance:h.maxSnapDistance??10}}else if(h.maxSnapDistance!==void 0)throw"Layer "+this.id+" defines a maxSnapDistance, but does not include a `snapToLayer`";return{title:F.T(h.title,`${a}.presets.${m}.title`),tags:h.tags.map(u=>se.SimpleTag(u)),description:F.T(h.description,`${a}.presets.${m}.description`),preciseInput:f,exampleImages:h.exampleImages}}),e.mapRendering===void 0)throw"MapRendering is undefined in "+i;if(e.mapRendering===null)this.mapRendering=[],this.lineRendering=[];else{this.mapRendering=k.NoNull(e.mapRendering).filter(m=>m.location!==void 0).map((m,f)=>new Oi(m,i+".mapRendering["+f+"]")),this.lineRendering=k.NoNull(e.mapRendering).filter(m=>m.location===void 0).map((m,f)=>new Em(m,i+".mapRendering["+f+"]"));const h=this.mapRendering.some(m=>m.location.has("centroid")||m.location.has("projected_centerpoint")||m.location.has("start")||m.location.has("end"));if(this.lineRendering.length===0&&this.mapRendering.length===0)throw"The layer "+this.id+" does not have any maprenderings defined and will thus not show up on the map at all. If this is intentional, set maprenderings to 'null' instead of '[]'";if(!h&&this.lineRendering.length===0&&fe.priviliged_layers.indexOf(this.id)<0&&!((d=(p=this.source)==null?void 0:p.geojsonSource)!=null&&d.startsWith("https://api.openstreetmap.org/api/0.6/notes.json")))throw"The layer "+this.id+" might not render ways. This might result in dropped information (at "+i+")"}const r=((c=k.NoNull(e.tagRenderings))==null?void 0:c.filter(h=>typeof h!="string"&&h.builtin===void 0&&h.id===void 0&&h.rewrite===void 0))??[];if((r==null?void 0:r.length)>0&&o)throw console.error("Some tagRenderings of",this.id,"are missing an id:",r),"Missing ids in tagrenderings";this.tagRenderings=(k.NoNull(e.tagRenderings)??[]).map((h,m)=>new qt(h,this.id+".tagRenderings["+m+"]")),e.filter!==void 0&&e.filter!==null&&e.filter.sameAs!==void 0?(this.filterIsSameAs=e.filter.sameAs,this.filters=[]):this.filters=(e.filter??[]).map((h,m)=>new Ui(h,`layers:${this.id}.filter.${m}`));{const h=k.Duplicates(this.filters.map(m=>m.id));if(h.length>0)throw`Some filters have a duplicate id: ${h} (at ${i}.filters)`}if(e.filters!==void 0)throw"Error in "+i+": use 'filter' instead of 'filters'";if(this.titleIcons=this.ParseTagRenderings(e.titleIcons??[],{readOnlyMode:!0}),this.title=this.tr("title",void 0,a),this.isShown=se.TagD(e.isShown,i+".isShown"),this.deletion=null,e.deletion===!0&&(e.deletion={}),e.deletion!==void 0&&e.deletion!==!1&&(this.deletion=new Kn(e.deletion,`${i}.deletion`)),this.allowMove=null,e.allowMove===!1?this.allowMove=null:e.allowMove===!0?this.allowMove=new xs({},i+".allowMove"):e.allowMove!==void 0&&(this.allowMove=new xs(e.allowMove,i+".allowMove")),e.showIf!==void 0)throw"Invalid key on layerconfig "+this.id+": showIf. Did you mean 'isShown' instead?";this.popupInFloatover=e.popupInFloatover??!1}defaultIcon(){if(this.mapRendering===void 0||this.mapRendering===null)return;const e=this.mapRendering.filter(i=>i.location.has("point"))[0];if(e!==void 0)return e.GetBaseIcon(this.GetBaseTags(),{noFullWidth:!0})}GetBaseTags(){var e,i;return se.changeAsProperties(((i=(e=this.source)==null?void 0:e.osmTags)==null?void 0:i.asChange({id:"node/-1"}))??[{k:"id",v:"node/-1"}])}GenerateDocumentation(e,i,o=[],a=!1,r=!0){var $,S,R;const s=[];s.push("This layer is shown at zoomlevel **"+this.minzoom+"** and higher"),r?(a&&s.push("**This layer is included automatically in every theme. This layer might contain no points**"),this.shownByDefault===!1&&s.push("This layer is not visible by default and must be enabled in the filter by the user. "),this.title===void 0&&s.push("Elements don't have a title set and cannot be toggled nor will they show up in the dashboard. If you import this layer in your theme, override `title` to make this toggleable."),this.name===void 0&&this.shownByDefault===!1&&s.push("This layer is not visible by default and the visibility cannot be toggled, effectively resulting in a fully hidden layer. This can be useful, e.g. to calculate some metatags. If you want to render this layer (e.g. for debugging), enable it by setting the URL-parameter layer-<id>=true"),this.name===void 0&&s.push("Not visible in the layer selection by default. If you want to make this layer toggable, override `name`"),this.mapRendering.length===0&&s.push("Not rendered on the map by default. If you want to rendering this on the map, override `mapRenderings`"),(($=this.source)==null?void 0:$.geojsonSource)!==void 0&&s.push(new P([k.runningFromConsole?"<img src='../warning.svg' height='1rem'/>":void 0,"This layer is loaded from an external source, namely ",new Ce(this.source.geojsonSource).SetClass("code")]))):s.push("This layer can **not** be included in a theme. It is solely used by [special renderings](SpecialRenderings.md) showing a minimap with custom data.");let p=[];(e==null?void 0:e.length)>0&&!a&&(p=[new je("Themes using this layer",4),new Ji((e??[]).map(C=>new nt(C,"https://mapcomplete.org/"+C)))]);for(const C of o)s.push(new P(["This layer will automatically load ",new nt(C.neededLayer,"./"+C.neededLayer+".md")," into the layout as it depends on it: ",C.reason,"("+C.context+")"]));for(const C of k.Dedup((i==null?void 0:i.get(this.id))??[]))s.push(new P(["This layer is needed as dependency for layer",new nt(C,"#"+C)]));let d=k.NoNull([(S=this.source)==null?void 0:S.osmTags]);((R=this.source)==null?void 0:R.osmTags.and)!==void 0&&(d=this.source.osmTags.and);let c=k.NoNull(this.tagRenderings.map(C=>C.FreeformValues()).map(C=>{var T;if(C==null)return;const D=((T=C.values)==null?void 0:T.map(_=>nt.OsmWiki(C.key,_,!0).SetClass("mr-2")))??["_no preset options defined, or no values in them_"];return[new P([new nt(k.runningFromConsole?"<img src='https://mapcomplete.org/assets/svg/statistics.svg' height='18px'>":we.statistics_svg().SetClass("w-4 h-4 mr-2"),"https://taginfo.openstreetmap.org/keys/"+C.key+"#values",!0),nt.OsmWiki(C.key)]).SetClass("flex"),C.type===void 0?"Multiple choice":new nt(C.type,"../SpecialInputElements.md#"+C.type),new P(D).SetClass("flex")]})),h;c.length>0&&(h=new P([new Ce("Warning: ").SetClass("bold"),"this quick overview is incomplete",new Dn(["attribute","type","values which are supported by this layer"],c).SetClass("zebra-table")]).SetClass("flex-col flex"));let m=new Ce("");if(k.runningFromConsole){const C=this.mapRendering.filter(D=>D.location.has("point")).map(D=>{var T,_;return(_=(T=D.icon)==null?void 0:T.render)==null?void 0:_.txt}).find(D=>D!==void 0);C!==void 0&&(m=new Ce(`<img src='https://mapcomplete.org/${C}' height="100px"> `))}else m=this.mapRendering.filter(C=>C.location.has("point")).map(C=>C.RenderIcon(new va({id:"node/-1"}),!1,{includeBadges:!1}).html).find(C=>C!==void 0);let f;if(this.source!==void 0)try{f=new nt("Execute on overpass",Ba.AsOverpassTurboLink(new ae(d).optimize()))}catch{console.error("Could not generate overpasslink for "+this.id)}const v=[];this.filters.length>0&&(v.push(new je("Filters",4)),v.push(...this.filters.map(C=>C.GenerateDocs())));const u=[];return this.source===null?u.push(new je("Basic tags for this layer",2),"Elements must have the all of following tags to be shown on this layer:",new Ji(d.map(C=>C.asHumanString(!0,!1,{}))),f):u.push("This is a special layer - data is not sourced from OpenStreetMap"),new P([new P([new je(this.id,1),m,this.description,`
`]).SetClass("flex flex-col"),new Ji(s),...p,...u,new je("Supported attributes",2),h,...this.tagRenderings.map(C=>C.GenerateDocumentation()),...v]).SetClass("flex-col").SetClass("link-underline")}CustomCodeSnippets(){return this.calculatedTags===void 0?[]:this.calculatedTags.map(e=>e[1])}AllTagRenderings(){return k.NoNull([...this.tagRenderings,...this.titleIcons,this.title])}isLeftRightSensitive(){return this.lineRendering.some(e=>e.leftRightSensitive)}};let Qo=Xi;y(Qo,"syncSelectionAllowed",["no","local","theme-only","global"]);class It{constructor(t,e=[],i){y(this,"modifiedAttributes");y(this,"name");y(this,"doc");this.modifiedAttributes=e,this.doc=t+`

Modified attributes are
`+e.join(", "),this.name=i}static strict(t){var o,a,r,s;(o=t.information)==null||o.forEach(p=>console.log("    ",p));const e=p=>"\x1B[33m"+p+"\x1B[0m",i=p=>"\x1B[31m"+p+"\x1B[0m";if((a=t.warnings)==null||a.forEach(p=>console.warn(i("<!> "),e(p))),(t==null?void 0:t.errors)!==void 0&&((r=t==null?void 0:t.errors)==null?void 0:r.length)>0)throw(s=t.errors)==null||s.forEach(p=>console.error(i("ERR "+p))),"Detected one or more errors, stopping now";return t.result}convertStrict(t,e){const i=this.convert(t,e);return ai.strict(i)}convertJoin(t,e,i,o,a){const r=this.convert(t,e);return i==null||i.push(...r.errors??[]),o==null||o.push(...r.warnings??[]),a==null||a.push(...r.information??[]),r.result}andThenF(t){return new Om(this,new Nm(t))}}class ai extends It{}class Om extends It{constructor(e,i){super("Merges two steps with different types",[],`Pipe(${e.name}, ${i.name})`);y(this,"_step0");y(this,"_step1");this._step0=e,this._step1=i}convert(e,i){const o=this._step0.convert(e,i),{result:a,errors:r,information:s,warnings:p}=o;if(a===void 0&&r.length>0)return{...o,result:void 0};const d=this._step1.convert(a,i);return k.PushList(r,d.errors),k.PushList(p,d.warnings),k.PushList(s,d.information),{result:d.result,errors:r,warnings:p,information:s}}}class Nm extends It{constructor(e){super("Wrapper around a pure function",[],"Pure");y(this,"_f");this._f=e}convert(e,i){return{result:this._f(e)}}}class Fm extends It{constructor(e){super("Applies the given step on every element of the list",[],"OnEach("+e.name+")");y(this,"_step");this._step=e}convert(e,i){if(e==null)return{result:void 0};const o=[],a=[],r=[],s=this._step,p=[];for(let d=0;d<e.length;d++){const c=s.convert(e[d],i+"["+d+"]");k.PushList(o,c.information),k.PushList(a,c.warnings),k.PushList(r,c.errors),p.push(c.result)}return{information:o,errors:r,warnings:a,result:p}}}class ly extends ai{constructor(e,i){super("Applies "+i.name+" onto property `"+e+"`",[e],`On(${e}, ${i.name})`);y(this,"key");y(this,"step");typeof i=="function"?this.step=i:this.step=o=>i,this.key=e}convert(e,i){e={...e};const o=this.step(e),a=this.key,r=e[a];if(r==null)return{result:e};const s=o.convert(r,i+"."+a);return e[a]=s.result,{...s,result:e}}}class cy extends It{constructor(t){super(t??"Does nothing, often to swap out steps in testing",[],"Pass")}convert(t,e){return{result:t}}}class hy extends It{constructor(e){super("Executes the given step, flattens the resulting list",[],"Concat("+e.name+")");y(this,"_step");this._step=e}convert(e,i){if(e==null)return{result:void 0};const o=new Fm(this._step).convert(e,i),a=o.result,r=[].concat(...a);return{...o,result:r}}}class gy extends It{constructor(e){super("Picks the first result of the conversion step",[],"FirstOf("+e.name+")");y(this,"_conversion");this._conversion=e}convert(e,i){const o=this._conversion.convert(e,i);return{...o,result:o.result[0]}}}class uy extends ai{constructor(e,...i){super((e??"")+"This fused pipeline of the following steps: "+i.map(o=>o.name).join(", "),k.Dedup([].concat(...i.map(o=>o.modifiedAttributes))),"Fuse of "+i.map(o=>o.name).join(", "));y(this,"steps");this.steps=k.NoNull(i)}convert(e,i){var s;const o=[],a=[],r=[];for(let p=0;p<this.steps.length;p++){const d=this.steps[p];try{let c=d.convert(e,"While running step "+d.name+": "+i);if((s=c.result.tagRenderings)!=null&&s.some(h=>h===void 0))throw d.name+" introduced an undefined tagRendering";if(o.push(...c.errors??[]),a.push(...c.warnings??[]),r.push(...c.information??[]),e=c.result,o.length>0)break}catch(c){throw console.error("Step "+d.name+" failed due to ",c,c.stack),c}}return{result:e,errors:o,warnings:a,information:r}}}class my extends ai{constructor(e,i,o=!1){super("Sets "+e+" to a default value if undefined",[],"SetDefault of "+e);y(this,"value");y(this,"key");y(this,"_overrideEmptyString");this.key=e,this.value=i,this._overrideEmptyString=o}convert(e,i){return(e[this.key]===void 0||e[this.key]===""&&this._overrideEmptyString)&&(e={...e},e[this.key]=this.value),{result:e}}}const bd=[{path:[],type:"object",description:`Defines the entire theme.

A theme is the collection of the layers that are shown; the intro text, the icon, ...
It more or less defines the entire experience.

Most of the fields defined here are metadata about the theme, such as its name, description, supported languages, default starting location, ...

The main chunk of the json will however be the 'layers'-array, where the details of your layers are.

General remark: a type (string | any) indicates either a fixed or a translatable string.`},{path:["id"],type:"string",description:`The id of this layout.

This is used as hashtag in the changeset message, which will read something like "Adding data with #mapcomplete for theme #<the theme id>"
Make sure it is something decent and descriptive, it should be a simple, lowercase string.

On official themes, it'll become the name of the page, e.g.
'cyclestreets' which become 'cyclestreets.html'`},{path:["credits"],type:"string",description:"Who helped to create this theme and should be attributed?"},{path:["mustHaveLanguage"],type:"array",description:`Only used in 'generateLayerOverview': if present, every translation will be checked to make sure it is fully translated.

This must be a list of two-letter, lowercase codes which identifies the language, e.g. "en", "nl", ...`},{path:["title"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The title, as shown in the welcome message and the more-screen."},{path:["shortDescription"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A short description, showed as social description and in the 'more theme'-buttons.
Note that if this one is not defined, the first sentence of 'description' is used`},{path:["description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The description, as shown in the welcome message and the more-screen"},{path:["descriptionTail"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A part of the description, shown under the login-button."},{path:["icon"],typeHint:"icon",type:"string",description:`The icon representing this theme.
Used as logo in the more-screen and (for official themes) as favicon, webmanifest logo, ...
Either a URL or a base64 encoded value (which should include 'data:image/svg+xml;base64)

Type: icon`},{path:["socialImage"],typeHint:"image",type:"string",description:`Link to a 'social image' which is included as og:image-tag on official themes.
Useful to share the theme on social media.
See https://www.h3xed.com/web-and-internet/how-to-use-og-image-meta-tag-facebook-reddit for more information$

Type: image`},{path:["startZoom"],type:"number",description:`Default location and zoom to start.
Note that this is barely used. Once the user has visited mapcomplete at least once, the previous location of the user will be used`},{path:["widenFactor"],type:"number",description:`When a query is run, the data within bounds of the visible map is loaded.
However, users tend to pan and zoom a lot. It is pretty annoying if every single pan means a reloading of the data.
For this, the bounds are widened in order to make a small pan still within bounds of the loaded data.

IF widenfactor is 1, this feature is disabled. A recommended value is between 1 and 3`},{path:["overpassMaxZoom"],type:"number",description:`At low zoom levels, overpass is used to query features.
At high zoom level, the OSM api is used to fetch one or more BBOX aligning with a slippy tile.
The overpassMaxZoom controls the flipoverpoint: if the zoom is this or lower, overpass is used.`},{path:["osmApiTileSize"],type:"number",description:`When the OSM-api is used to fetch features, it does so in a tiled fashion.
These tiles are using a ceratin zoom level, that can be controlled here
Default: overpassMaxZoom + 1`},{path:["defaultBackgroundId"],type:"string",description:"The id of the default background. BY default: vanilla OSM"},{path:["tileLayerSources"],type:"array",description:"Define some (overlay) slippy map tilesources"},{path:["tileLayerSources","name"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"The name of the imagery source"},{path:["layers"],type:[{$ref:"#/definitions/LayerConfigJson"},{type:"object",properties:{builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<LayerConfigJson>"},hideTagRenderingsWithLabels:{description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`,type:"array",items:{type:"string"}}},required:["builtin","override"]},{type:"string"}],description:`The layers to display.

Every layer contains a description of which feature to display - the overpassTags which are queried.
Instead of running one query for every layer, the query is fused.

Afterwards, every layer is given the list of features.
Every layer takes away the features that match with them*, and give the leftovers to the next layers.

This implies that the _order_ of the layers is important in the case of features with the same tags;
as the later layers might never receive their feature.

*layers can also remove 'leftover'-features if the leftovers overlap with a feature in the layer itself

Note that builtin layers can be reused. Either put in the name of the layer to reuse, or use {builtin: "layername", override: ...}

The 'override'-object will be copied over the original values of the layer, which allows to change certain aspects of the layer

For example: If you would like to use layer nature reserves, but only from a specific operator (eg. Natuurpunt) you would use the following in your theme:

\`\`\`
"layer": {
 "builtin": "nature_reserve",
 "override": {"source":
 {"osmTags": {
 "+and":["operator=Natuurpunt"]
   }
  }
 }
}
\`\`\`

It's also possible to load multiple layers at once, for example, if you would like for both drinking water and benches to start at the zoomlevel at 12, you would use the following:

\`\`\`
"layer": {
 "builtin": ["benches", "drinking_water"],
 "override": {"minzoom": 12}
}
\`\`\``},{path:["layers"],type:"object",description:"Configuration for a single layer"},{path:["layers","id"],type:"string",description:`The id of this layer.
This should be a simple, lowercase, human readable string that is used to identify the layer.`},{path:["layers","name"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The name of this layer
Used in the layer control panel and the 'Personal theme'.

If not given, will be hidden (and thus not toggable) in the layer control`},{path:["layers","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for this layer.
Shown in the layer selections and in the personel theme`},{path:["layers","source"],type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:"Every source must set which tags have to be present in order to load the given layer."},maxCacheAge:{description:"The maximum amount of seconds that a tile is allowed to linger in the cache",type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`,type:"string"},geoJsonZoomLevel:{description:"To load a tiled geojson layer, set the zoomlevel of the tiles",type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache`,type:"boolean"},mercatorCrs:{description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this",type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.

If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.

Every source _must_ define which tags _must_ be present in order to be picked up.

Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","source","osmTags"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","source","osmTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","source","osmTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","source","maxCacheAge"],type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","source","geoJson"],type:"string",description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","source","geoJsonZoomLevel"],type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","source","isOsmCache"],type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache`},{path:["layers","source","mercatorCrs"],type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","source","idKey"],type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","calculatedTags"],type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
 "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]

The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.

If a tag has to be evaluated strictly, use ':=' instead:

[
"_some_key:=some_javascript_expression"
]`},{path:["layers","doNotDownload"],type:"boolean",description:`If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.
Works well together with 'passAllFeatures', to add decoration`},{path:["layers","isShown"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view.

Important: hiding features does not work dynamically, but is only calculated when the data is first renders.
This implies that it is not possible to hide a feature after a tagging change

The default value is 'yes'`},{path:["layers","isShown"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","isShown","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","isShown","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","isShown"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","isShown","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","isShown","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","isShown","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","forceLoad"],type:"boolean",description:`Advanced option - might be set by the theme compiler

If true, this data will _always_ be loaded, even if the theme is disabled`},{path:["layers","minzoom"],type:"number",description:`The minimum needed zoomlevel required before loading of the data start
Default: 0`},{path:["layers","shownByDefault"],type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it where appropriate (e.g. for snapping to it)`},{path:["layers","minzoomVisible"],type:"number",description:`The zoom level at which point the data is hidden again
Default: 100 (thus: always visible`},{path:["layers","title"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","title"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","title","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","title","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","title","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","title","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","title","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","title","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","title","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","title","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","title","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","title","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","title","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","title","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","title","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","title","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","title","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","title","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","titleIcons"],typeHint:"icon[]",type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)

Type: icon[]`},{path:["layers","titleIcons"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","titleIcons","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","titleIcons","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","titleIcons","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","titleIcons","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","titleIcons","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","titleIcons","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","titleIcons","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","titleIcons","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","titleIcons","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","titleIcons","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","titleIcons","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","titleIcons","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","titleIcons","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","titleIcons","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","titleIcons","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","titleIcons","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering"],type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_4"},{$ref:"#/definitions/default_5"},{$ref:"#/definitions/default<default|default|default[]|default[]>"}]}},{type:"null"}],description:"Visualisation of the items on the map"},{path:["layers","mapRendering"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","mapRendering","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","mapRendering","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","mapRendering","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","mapRendering","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","mapRendering","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","mapRendering","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","mapRendering","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","mapRendering","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","mapRendering","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","mapRendering","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","mapRendering","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","mapRendering","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","mapRendering","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","mapRendering","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","mapRendering","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","mapRendering","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","mapRendering","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","mapRendering","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","mapRendering","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","mapRendering","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","mapRendering","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","mapRendering","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering"],type:"object",description:`Rewrites and multiplies the given renderings of type T.

This can be used for introducing many similar questions automatically,
which also makes translations easier.

(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)

For example:

\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:

[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }

]`},{path:["layers","mapRendering","renderings"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","mapRendering","renderings","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","mapRendering","renderings","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","mapRendering","renderings","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","mapRendering","renderings","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","mapRendering","renderings","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","mapRendering","renderings","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","mapRendering","renderings","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","mapRendering","renderings","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","mapRendering","renderings","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","mapRendering","renderings","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","mapRendering","renderings","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","mapRendering","renderings","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","mapRendering","renderings","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","mapRendering","renderings","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","mapRendering","renderings","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","mapRendering","renderings","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","mapRendering","renderings","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","mapRendering","renderings","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","mapRendering","renderings","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","mapRendering","renderings","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","mapRendering","renderings","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","mapRendering","renderings","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","mapRendering","renderings","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","mapRendering","renderings","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","mapRendering","renderings","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","mapRendering","renderings","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","mapRendering","renderings","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","mapRendering","renderings","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","mapRendering","renderings","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","mapRendering","renderings","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","mapRendering","renderings","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","mapRendering","renderings","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","mapRendering","renderings","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","mapRendering","renderings","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","mapRendering","renderings","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","mapRendering","renderings","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","mapRendering","renderings","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","mapRendering","renderings","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","mapRendering","renderings","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","mapRendering","renderings","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","mapRendering","renderings","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","mapRendering","renderings","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","mapRendering","renderings","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","mapRendering","renderings","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","mapRendering","renderings","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","mapRendering","renderings","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","mapRendering","renderings","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","mapRendering","renderings","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","passAllFeatures"],type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directionss on cameras`},{path:["layers","presets"],type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.

The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.

Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.

Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","presets","title"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The title - shown on the 'add-new'-button.

This should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.
This text will be inserted into \`Add {category} here\`, becoming \`Add a hydrant here\`.

Do _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!`},{path:["layers","presets","tags"],type:"array",description:"The tags to add. It determines the icon too"},{path:["layers","presets","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.

(The first sentence is until the first '.'-character in the description)`},{path:["layers","presets","exampleImages"],typeHint:"image",type:"array",description:`Example images, which show real-life pictures of what such a feature might look like

Type: image`},{path:["layers","presets","preciseInput"],type:[{type:"object",properties:{preferredBackground:{description:"The type of background picture",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},snapToLayer:{description:"If specified, these layers will be shown to and the new point will be snapped towards it",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},maxSnapDistance:{description:`If specified, a new point will only be snapped if it is within this range.
Distance in meter

Default: 10`,type:"number"}}},{enum:[!0],type:"boolean"}],description:`If set, the user will prompted to confirm the location before actually adding the data.
This will be with a 'drag crosshair'-method.

If 'preferredBackgroundCategory' is set, the element will attempt to pick a background layer of that category.`},{path:["layers","presets","preciseInput","preferredBackground"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"The type of background picture"},{path:["layers","presets","preciseInput","snapToLayer"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"If specified, these layers will be shown to and the new point will be snapped towards it"},{path:["layers","presets","preciseInput","maxSnapDistance"],type:"number",description:`If specified, a new point will only be snapped if it is within this range.
Distance in meter

Default: 10`},{path:["layers","tagRenderings"],type:[{$ref:"#/definitions/QuestionableTagRenderingConfigJson"},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`All the tag renderings.
A tag rendering is a block that either shows the known value or asks a question.

Refer to the class \`TagRenderingConfigJson\` to see the possibilities.

Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override

A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.

At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","tagRenderings"],type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["layers","tagRenderings","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","tagRenderings","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","tagRenderings","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","tagRenderings","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","tagRenderings","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","tagRenderings","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","tagRenderings","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","tagRenderings","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","tagRenderings","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","tagRenderings","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","tagRenderings","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","tagRenderings","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","tagRenderings","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","tagRenderings","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","tagRenderings","override","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","override","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","override","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","override","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","override","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","override","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","override","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","tagRenderings","override","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","tagRenderings","override","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","override","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","override","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","tagRenderings","override","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","tagRenderings","override","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","tagRenderings","override","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","tagRenderings","override","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","tagRenderings","override","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","override","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","tagRenderings","override","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","tagRenderings","override","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","tagRenderings","override","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","tagRenderings","override","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","tagRenderings","override","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","override","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","override","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings"],type:"object",description:`Rewrites and multiplies the given renderings of type T.

This can be used for introducing many similar questions automatically,
which also makes translations easier.

(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)

For example:

\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:

[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }

]`},{path:["layers","tagRenderings","renderings"],type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["layers","tagRenderings","renderings","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","tagRenderings","renderings","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","tagRenderings","renderings","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","tagRenderings","renderings","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","tagRenderings","renderings","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","tagRenderings","renderings","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","tagRenderings","renderings","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","tagRenderings","renderings","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","tagRenderings","renderings","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","tagRenderings","renderings","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","tagRenderings","renderings","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","tagRenderings","renderings","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","tagRenderings","renderings","override","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","tagRenderings","renderings","override","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","tagRenderings","renderings","override","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","tagRenderings","renderings","override","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","tagRenderings","renderings","override","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","tagRenderings","renderings","override","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","tagRenderings","renderings","override","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","tagRenderings","renderings","override","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","tagRenderings","renderings","override","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","tagRenderings","renderings","override","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","tagRenderings","renderings","override","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","tagRenderings","renderings","override","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","tagRenderings","renderings","override","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","tagRenderings","renderings","override","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","tagRenderings","renderings","override","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","tagRenderings","renderings","override","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","tagRenderings","renderings","override","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","tagRenderings","renderings","override","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","tagRenderings","renderings","override","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","tagRenderings","renderings","override","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","tagRenderings","renderings","override","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","tagRenderings","renderings","override","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","tagRenderings","renderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter"],type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","filter","id"],type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","filter","options"],type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.

An example which searches by name:

\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","filter","options","osmTags"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter","options","osmTags","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter","options","osmTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter","options","osmTags","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","filter","options","osmTags","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter","options","osmTags","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","filter","options","fields","name"],type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","filter","#"],type:"string",description:'Used for comments or to disable a check\n\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","deletion"],type:[{$ref:"#/definitions/DeleteConfigJson"},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.

To configure, the following values are possible:

- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)

 The delete dialog
 =================



#### Hard deletion if enough experience

A feature can only be deleted from OpenStreetMap by mapcomplete if:

- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)

In all other cases, a 'soft deletion' is used.

#### Soft deletion

A 'soft deletion' is when the point isn't deleted from OSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.

Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme

#### No-delete options

In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)

The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","deletion","extraDeleteReasons"],type:"array",description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","deletion","extraDeleteReasons","explanation"],description:"The text that will be shown to the user - translatable"},{path:["layers","deletion","extraDeleteReasons","changesetMessage"],type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","deletion","nonDeleteMappings"],type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","deletion","nonDeleteMappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","nonDeleteMappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","nonDeleteMappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","nonDeleteMappings","then"],description:"The human explanation for the options"},{path:["layers","deletion","softDeletionTags"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","deletion","softDeletionTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","softDeletionTags","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","softDeletionTags","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","softDeletionTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","softDeletionTags","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","deletion","softDeletionTags","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","softDeletionTags","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","deletion","neededChangesets"],type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","deletion","omitDefaultDeleteReasons"],type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","allowMove"],type:[{$ref:"#/definitions/default_3"},{type:"boolean"}],description:`Indicates if a point can be moved and configures the modalities.

A feature can be moved by MapComplete if:

- It is a point
- The point is _not_ part of a way or a a relation.

Off by default. Can be enabled by setting this flag or by configuring.`},{path:["layers","allowMove","enableImproveAccuracy"],type:"boolean",description:`One default reason to move a point is to improve accuracy.
Set to false to disable this reason`},{path:["layers","allowMove","enableRelocation"],type:"boolean",description:`One default reason to move a point is because it has relocated
Set to false to disable this reason`},{path:["layers","allowSplit"],type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.

If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","units"],type:"object",description:`In some cases, a value is represented in a certain unit (such as meters for heigt/distance/..., km/h for speed, ...)

Sometimes, multiple denominations are possible (e.g. km/h vs mile/h; megawatt vs kilowatt vs gigawatt for power generators, ...)

This brings in some troubles, as there are multiple ways to write it (no denomitation, 'm' vs 'meter' 'metre', ...)

Not only do we want to write consistent data to OSM, we also want to present this consistently to the user.
This is handled by defining units.

# Rendering

To render a value with long (human) denomination, use {canonical(key)}

# Usage

First of all, you define which keys have units applied, for example:

\`\`\`
units: [
 appliesTo: ["maxspeed", "maxspeed:hgv", "maxspeed:bus"]
 applicableUnits: [
     ...
 ]
]
\`\`\`

ApplicableUnits defines which is the canonical extension, how it is presented to the user, ...:

\`\`\`
applicableUnits: [
{
    canonicalDenomination: "km/h",
    alternativeDenomination: ["km/u", "kmh", "kph"]
    default: true,
    human: {
        en: "kilometer/hour",
        nl: "kilometer/uur"
    },
    humanShort: {
        en: "km/h",
        nl: "km/u"
    }
},
{
    canoncialDenomination: "mph",
    ... similar for miles an hour ...
}
]
\`\`\`


If this is defined, then every key which the denominations apply to (\`maxspeed\`, \`maxspeed:hgv\` and \`maxspeed:bus\`) will be rewritten at the metatagging stage:
every value will be parsed and the canonical extension will be added add presented to the other parts of the code.

Also, if a freeform text field is used, an extra dropdown with applicable denominations will be given`},{path:["layers","units","appliesToKey"],type:"array",description:`Every key from this list will be normalized.

To render a united value properly, use`},{path:["layers","units","eraseInvalidValues"],type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","units","applicableUnits"],type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","units","applicableUnits","useIfNoUnitGiven"],type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation

E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.

If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","units","applicableUnits","canonicalDenomination"],type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.

Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","units","applicableUnits","canonicalDenominationSingular"],type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\n\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","units","applicableUnits","alternativeDenomination"],type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","units","applicableUnits","human"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","units","applicableUnits","humanSingular"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","units","applicableUnits","prefix"],type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","units","defaultInput"],type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.

When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","syncSelection"],type:"string",description:`If set, synchronizes whether or not this layer is enabled.

no: Do not sync at all, always revert to default
local: keep selection on local storage
theme-only: sync via OSM, but this layer will only be toggled in this theme
global: all layers with this ID will be synced accross all themes`},{path:["layers","#"],type:"string",description:`Used for comments and/or to disable some checks

no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","override","id"],type:"string",description:`The id of this layer.
This should be a simple, lowercase, human readable string that is used to identify the layer.`},{path:["layers","override","name"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The name of this layer
Used in the layer control panel and the 'Personal theme'.

If not given, will be hidden (and thus not toggable) in the layer control`},{path:["layers","override","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A description for this layer.
Shown in the layer selections and in the personel theme`},{path:["layers","override","source"],type:[{type:"object",properties:{osmTags:{$ref:"#/definitions/TagConfigJson",description:"Every source must set which tags have to be present in order to load the given layer."},maxCacheAge:{description:"The maximum amount of seconds that a tile is allowed to linger in the cache",type:"number"}},required:["osmTags"]},{type:"object",properties:{geoJson:{description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`,type:"string"},geoJsonZoomLevel:{description:"To load a tiled geojson layer, set the zoomlevel of the tiles",type:"number"},isOsmCache:{description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache`,type:"boolean"},mercatorCrs:{description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this",type:"boolean"},idKey:{description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`,type:"string"}},required:["geoJson"]},{enum:["special","special:library"],type:"string"}],description:`This determines where the data for the layer is fetched: from OSM or from an external geojson dataset.

If no 'geojson' is defined, data will be fetched from overpass and the OSM-API.

Every source _must_ define which tags _must_ be present in order to be picked up.

Note: a source must always be defined. 'special' is only allowed if this is a builtin-layer`},{path:["layers","override","source","osmTags"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","source","osmTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","source","osmTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","source","maxCacheAge"],type:"number",description:"The maximum amount of seconds that a tile is allowed to linger in the cache"},{path:["layers","override","source","geoJson"],type:"string",description:`The actual source of the data to load, if loaded via geojson.

# A single geojson-file
source: {geoJson: "https://my.source.net/some-geo-data.geojson"}
 fetches a geojson from a third party source

# A tiled geojson source
source: {geoJson: "https://my.source.net/some-tile-geojson-{layer}-{z}-{x}-{y}.geojson", geoJsonZoomLevel: 14}
 to use a tiled geojson source. The web server must offer multiple geojsons. {z}, {x} and {y} are substituted by the location; {layer} is substituted with the id of the loaded layer

Some API's use a BBOX instead of a tile, this can be used by specifying {y_min}, {y_max}, {x_min} and {x_max}`},{path:["layers","override","source","geoJsonZoomLevel"],type:"number",description:"To load a tiled geojson layer, set the zoomlevel of the tiles"},{path:["layers","override","source","isOsmCache"],type:"boolean",description:`Indicates that the upstream geojson data is OSM-derived.
Useful for e.g. merging or for scripts generating this cache`},{path:["layers","override","source","mercatorCrs"],type:"boolean",description:"Some API's use a mercator-projection (EPSG:900913) instead of WGS84. Set the flag `mercatorCrs: true`  in the source for this"},{path:["layers","override","source","idKey"],type:"string",description:`Some API's have an id-field, but give it a different name.
Setting this key will rename this field into 'id'`},{path:["layers","override","calculatedTags"],type:"array",description:`A list of extra tags to calculate, specified as "keyToAssignTo=javascript-expression".
There are a few extra functions available. Refer to <a>Docs/CalculatedTags.md</a> for more information
The functions will be run in order, e.g.
[
 "_max_overlap_m2=Math.max(...feat.overlapsWith("someOtherLayer").map(o => o.overlap))
 "_max_overlap_ratio=Number(feat._max_overlap_m2)/feat.area
]

The specified tags are evaluated lazily. E.g. if a calculated tag is only used in the popup (e.g. the number of nearby features),
the expensive calculation will only be performed then for that feature. This avoids clogging up the contributors PC when all features are loaded.

If a tag has to be evaluated strictly, use ':=' instead:

[
"_some_key:=some_javascript_expression"
]`},{path:["layers","override","doNotDownload"],type:"boolean",description:`If set, this layer will not query overpass; but it'll still match the tags above which are by chance returned by other layers.
Works well together with 'passAllFeatures', to add decoration`},{path:["layers","override","isShown"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, only features matching this extra tag will be shown.
This is useful to hide certain features from view.

Important: hiding features does not work dynamically, but is only calculated when the data is first renders.
This implies that it is not possible to hide a feature after a tagging change

The default value is 'yes'`},{path:["layers","override","isShown"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","isShown","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","isShown","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","isShown"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","isShown","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","isShown","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","isShown","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","forceLoad"],type:"boolean",description:`Advanced option - might be set by the theme compiler

If true, this data will _always_ be loaded, even if the theme is disabled`},{path:["layers","override","minzoom"],type:"number",description:`The minimum needed zoomlevel required before loading of the data start
Default: 0`},{path:["layers","override","shownByDefault"],type:"boolean",description:`Indicates if this layer is shown by default;
can be used to hide a layer from start, or to load the layer but only to show it where appropriate (e.g. for snapping to it)`},{path:["layers","override","minzoomVisible"],type:"number",description:`The zoom level at which point the data is hidden again
Default: 100 (thus: always visible`},{path:["layers","override","title"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The title shown in a popup for elements of this layer."},{path:["layers","override","title"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","title","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","title","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","title","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","title","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","title","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","title","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","title","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","title","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","title","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","title","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","title","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","title","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","title","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","title","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","title","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","title","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","titleIcons"],typeHint:"icon[]",type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}]}},{type:"array",items:[{type:"string",enum:["defaults"]}],minItems:1,maxItems:1}],description:`Small icons shown next to the title.
If not specified, the OsmLink and wikipedia links will be used by default.
Use an empty array to hide them.
Note that "defaults" will insert all the default titleIcons (which are added automatically)

Type: icon[]`},{path:["layers","override","titleIcons"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","titleIcons","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","titleIcons","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","titleIcons","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","titleIcons","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","titleIcons","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","titleIcons","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","titleIcons","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","titleIcons","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","titleIcons","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","titleIcons","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","titleIcons","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","titleIcons","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","titleIcons","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","titleIcons","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","titleIcons","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","titleIcons","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering"],type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_4"},{$ref:"#/definitions/default_5"},{$ref:"#/definitions/default<default|default|default[]|default[]>"}]}},{type:"null"}],description:"Visualisation of the items on the map"},{path:["layers","override","mapRendering"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","override","mapRendering","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","override","mapRendering","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","override","mapRendering","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","override","mapRendering","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","override","mapRendering","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","override","mapRendering","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","override","mapRendering","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","override","mapRendering","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","override","mapRendering","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","override","mapRendering","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","override","mapRendering","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","override","mapRendering","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","override","mapRendering","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","override","mapRendering","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","override","mapRendering","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","override","mapRendering","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","override","mapRendering","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","override","mapRendering","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","override","mapRendering","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","override","mapRendering","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","override","mapRendering","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","override","mapRendering","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering"],type:"object",description:`Rewrites and multiplies the given renderings of type T.

This can be used for introducing many similar questions automatically,
which also makes translations easier.

(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)

For example:

\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:

[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }

]`},{path:["layers","override","mapRendering","renderings"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","override","mapRendering","renderings","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","override","mapRendering","renderings","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","override","mapRendering","renderings","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","override","mapRendering","renderings","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","override","mapRendering","renderings","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","override","mapRendering","renderings","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","override","mapRendering","renderings","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","override","mapRendering","renderings","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","override","mapRendering","renderings","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","override","mapRendering","renderings","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","override","mapRendering","renderings","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","override","mapRendering","renderings","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","override","mapRendering","renderings","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","override","mapRendering","renderings","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","override","mapRendering","renderings","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","override","mapRendering","renderings","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","override","mapRendering","renderings","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","override","mapRendering","renderings","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","override","mapRendering","renderings","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","override","mapRendering","renderings","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings"],type:"object",description:`The LineRenderingConfig gives all details onto how to render a single line of a feature.

This can be used if:

- The feature is a line
- The feature is an area`},{path:["layers","override","mapRendering","renderings","color"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color for way-elements and SVG-elements.
If the value starts with "--", the style of the body element will be queried for the corresponding variable instead`},{path:["layers","override","mapRendering","renderings","color"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","color","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","color","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","color","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","color","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","color","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","color","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","color","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","color","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","color","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","color","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","color","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","color","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","width"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:["string","number"]}],description:"The stroke-width for way-elements"},{path:["layers","override","mapRendering","renderings","width"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","width","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","width","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","width","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","width","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","width","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","width","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","width","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","width","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","width","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","width","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","width","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","width","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","dashArray"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A dasharray, e.g. "5 6"
The dasharray defines 'pixels of line, pixels of gap, pixels of line, pixels of gap',
Default value: "" (empty string == full line)`},{path:["layers","override","mapRendering","renderings","dashArray"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","dashArray","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","dashArray","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","dashArray","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","dashArray","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","dashArray","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","dashArray","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","dashArray","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","dashArray","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","lineCap"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The form at the end of a line"},{path:["layers","override","mapRendering","renderings","lineCap"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","lineCap","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","lineCap","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","lineCap","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","lineCap","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","lineCap","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","lineCap","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","lineCap","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","lineCap","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","fill"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["no","yes"],type:"string"}],description:"Whether or not to fill polygons"},{path:["layers","override","mapRendering","renderings","fill"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","fill","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","fill","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","fill","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","fill","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","fill","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","fill","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","fill","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","fill","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fill","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","fill","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","fill","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","fill","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","fillColor"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The color to fill a polygon with.
If undefined, this will be slightly more opaque version of the stroke line`},{path:["layers","override","mapRendering","renderings","fillColor"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","fillColor","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","fillColor","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","fillColor","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","fillColor","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","fillColor","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","fillColor","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","fillColor","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","fillColor","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","offset"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"number"}],description:`The number of pixels this line should be moved.
Use a positive numbe to move to the right, a negative to move to the left (left/right as defined by the drawing direction of the line).

IMPORTANT: MapComplete will already normalize 'key:both:property' and 'key:both' into the corresponding 'key:left' and 'key:right' tagging (same for 'sidewalk=left/right/both' which is rewritten to 'sidewalk:left' and 'sidewalk:right')
This simplifies programming. Refer to the CalculatedTags.md-documentation for more details`},{path:["layers","override","mapRendering","renderings","offset"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","offset","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","offset","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","offset","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","offset","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","offset","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","offset","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","offset","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","offset","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","offset","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","offset","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","offset","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","offset","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings"],type:"object",description:`The PointRenderingConfig gives all details onto how to render a single point of a feature.

This can be used if:

- The feature is a point
- To render something at the centroid of an area, or at the start, end or projected centroid of a way`},{path:["layers","override","mapRendering","renderings","location"],type:"array",description:"All the locations that this point should be rendered at.\nPossible values are:\n- `point`: only renders points at their location\n- `centroid`: show a symbol at the centerpoint of a (multi)Linestring and (multi)polygon. Points will _not_ be rendered with this\n- `projected_centerpoint`: Only on (multi)linestrings: calculate the centerpoint and snap it to the way\n- `start` and `end`: only on linestrings: add a point to the first/last coordinate of the LineString"},{path:["layers","override","mapRendering","renderings","icon"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`The icon for an element.
Note that this also doubles as the icon for this layer (rendered with the overpass-tags) ánd the icon in the presets.

The result of the icon is rendered as follows:
the resulting string is interpreted as a _list_ of items, separated by ";". The bottommost layer is the first layer.
As a result, on could use a generic pin, then overlay it with a specific icon.
To make things even more practical, one can use all SVG's from the folder "assets/svg" and _substitute the color_ in it.
E.g. to draw a red pin, use "pin:#f00", to have a green circle with your icon on top, use \`circle:#0f0;<path to my icon.svg>\`

Type: icon`},{path:["layers","override","mapRendering","renderings","icon"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","icon","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","icon","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","icon","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","icon","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","icon","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","icon","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","icon","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","icon","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","icon","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","icon","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","icon","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","icon","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","iconBadges"],type:"array",description:`A list of extra badges to show next to the icon as small badge
They will be added as a 25% height icon at the bottom right of the icon, with all the badges in a flex layout.

Note: strings are interpreted as icons, so layering and substituting is supported. You can use \`circle:white;./my_icon.svg\` to add a background circle`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then"],typeHint:"icon",type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`Badge to show
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","iconBadges","then","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","iconBadges","then","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","iconBadges","then","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","iconBadges","then","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","iconBadges","then","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","iconBadges","then","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","iconBadges","then","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","iconSize"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A string containing "width,height" or "width,height,anchorpoint" where anchorpoint is any of 'center', 'top', 'bottom', 'left', 'right', 'bottomleft','topright', ...
Default is '40,40,center'`},{path:["layers","override","mapRendering","renderings","iconSize"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","iconSize","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","iconSize","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","iconSize","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","iconSize","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","iconSize","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","iconSize","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","iconSize","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","iconSize","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","rotation"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"The rotation of an icon, useful for e.g. directions.\nUsage: as if it were a css property for 'rotate', thus has to end with 'deg', e.g. `90deg`, `{direction}deg`, `calc(90deg - {camera:direction}deg)``"},{path:["layers","override","mapRendering","renderings","rotation"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","rotation","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","rotation","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","rotation","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","rotation","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","rotation","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","rotation","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","rotation","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotation","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","rotation","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","label"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:`A HTML-fragment that is shown below the icon, for example:
<div style="background: white">{name}</div>

If the icon is undefined, then the label is shown in the center of the feature.
Note that, if the wayhandling hides the icon then no label is shown as well.`},{path:["layers","override","mapRendering","renderings","label"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","label","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","label","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","label","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","label","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","label","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","label","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","label","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","label","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","label","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","label","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","label","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","label","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","css"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css code which is applied onto the container of the entire marker"},{path:["layers","override","mapRendering","renderings","css"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","css","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","css","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","css","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","css","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","css","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","css","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","css","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","css","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","css","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","css","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","css","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","css","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","cssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"A snippet of css-classes which are applied onto the container of the entire marker. They can be space-separated"},{path:["layers","override","mapRendering","renderings","cssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","cssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","cssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","cssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","cssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","cssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","cssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","cssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","labelCss"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css that is applied onto the label"},{path:["layers","override","mapRendering","renderings","labelCss"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","labelCss","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","labelCss","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","labelCss","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","labelCss","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","labelCss","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","labelCss","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","labelCss","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCss","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","labelCssClasses"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{type:"string"}],description:"Css classes that are applied onto the label; can be space-separated"},{path:["layers","override","mapRendering","renderings","labelCssClasses"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","labelCssClasses","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","labelCssClasses","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","labelCssClasses","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","labelCssClasses","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","labelCssClasses","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","labelCssClasses","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","labelCssClasses","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","pitchAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:`If the map is pitched, the marker will stay parallel to the screen.
Set to 'map' if you want to put it flattened on the map`},{path:["layers","override","mapRendering","renderings","pitchAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","pitchAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","pitchAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","pitchAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","pitchAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","pitchAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","pitchAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","pitchAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","mapRendering","renderings","rotationAlignment"],type:[{$ref:"#/definitions/TagRenderingConfigJson"},{enum:["canvas","map"],type:"string"}],description:"If the map is rotated, the icon will still point to the north if no rotation was applied"},{path:["layers","override","mapRendering","renderings","rotationAlignment"],type:"object",description:`A TagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
For an _editable_ tagRendering, use 'QuestionableTagRenderingConfigJson' instead, which extends this one`},{path:["layers","override","mapRendering","renderings","rotationAlignment","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","mapRendering","renderings","rotationAlignment","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","mapRendering","renderings","rotationAlignment","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","mapRendering","renderings","rotationAlignment","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","mapRendering","renderings","rotationAlignment","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","mapRendering","renderings","rotationAlignment","freeform","key"],type:"string",description:`If this key is present, then 'render' is used to display the value.
If this is undefined, the rendering is _always_ shown`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","then"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"If the condition `if` is met, the text `then` will be rendered.\nIf not known yet, the user will be presented with `then` as an option\nType: rendered"},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the icon
Type: icon`,type:"string"},class:{description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`,type:"string"}},required:["path"]},{type:"string"}],description:`An icon supporting this mapping; typically shown pretty small
Type: icon`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the icon
Type: icon`},{path:["layers","override","mapRendering","renderings","rotationAlignment","mappings","icon","class"],type:"string",description:`A hint to mapcomplete on how to render this icon within the mapping.
This is translated to 'mapping-icon-<classtype>', so defining your own in combination with a custom CSS is possible (but discouraged)`},{path:["layers","override","passAllFeatures"],type:"boolean",description:`If set, this layer will pass all the features it receives onto the next layer.
This is ideal for decoration, e.g. directionss on cameras`},{path:["layers","override","presets"],type:"array",description:`Presets for this layer.
A preset shows up when clicking the map on a without data (or when right-clicking/long-pressing);
it will prompt the user to add a new point.

The most important aspect are the tags, which define which tags the new point will have;
The title is shown in the dialog, along with the first sentence of the description.

Upon confirmation, the full description is shown beneath the buttons - perfect to add pictures and examples.

Note: the icon of the preset is determined automatically based on the tags and the icon above. Don't worry about that!
NB: if no presets are defined, the popup to add new points doesn't show up at all`},{path:["layers","override","presets","title"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The title - shown on the 'add-new'-button.

This should include the article of the noun, e.g. 'a hydrant', 'a bicycle pump'.
This text will be inserted into \`Add {category} here\`, becoming \`Add a hydrant here\`.

Do _not_ indicate 'new': 'add a new shop here' is incorrect, as the shop might have existed forever, it could just be unmapped!`},{path:["layers","override","presets","tags"],type:"array",description:"The tags to add. It determines the icon too"},{path:["layers","override","presets","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The _first sentence_ of the description is shown on the button of the \`add\` menu.
The full description is shown in the confirmation dialog.

(The first sentence is until the first '.'-character in the description)`},{path:["layers","override","presets","exampleImages"],typeHint:"image",type:"array",description:`Example images, which show real-life pictures of what such a feature might look like

Type: image`},{path:["layers","override","presets","preciseInput"],type:[{type:"object",properties:{preferredBackground:{description:"The type of background picture",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},snapToLayer:{description:"If specified, these layers will be shown to and the new point will be snapped towards it",anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},maxSnapDistance:{description:`If specified, a new point will only be snapped if it is within this range.
Distance in meter

Default: 10`,type:"number"}}},{enum:[!0],type:"boolean"}],description:`If set, the user will prompted to confirm the location before actually adding the data.
This will be with a 'drag crosshair'-method.

If 'preferredBackgroundCategory' is set, the element will attempt to pick a background layer of that category.`},{path:["layers","override","presets","preciseInput","preferredBackground"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"The type of background picture"},{path:["layers","override","presets","preciseInput","snapToLayer"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"If specified, these layers will be shown to and the new point will be snapped towards it"},{path:["layers","override","presets","preciseInput","maxSnapDistance"],type:"number",description:`If specified, a new point will only be snapped if it is within this range.
Distance in meter

Default: 10`},{path:["layers","override","tagRenderings"],type:[{$ref:"#/definitions/QuestionableTagRenderingConfigJson"},{type:"object",properties:{id:{type:"string"},builtin:{anyOf:[{type:"array",items:{type:"string"}},{type:"string"}]},override:{$ref:"#/definitions/Partial<QuestionableTagRenderingConfigJson>"}},required:["builtin","override"]},{allOf:[{$ref:"#/definitions/default<(string|QuestionableTagRenderingConfigJson|{builtin:string;override:Partial<QuestionableTagRenderingConfigJson>;})[]>"},{type:"object",properties:{id:{type:"string"}},required:["id"]}]},{type:"string"}],description:`All the tag renderings.
A tag rendering is a block that either shows the known value or asks a question.

Refer to the class \`TagRenderingConfigJson\` to see the possibilities.

Note that we can also use a string here - where the string refers to a tag rendering defined in \`assets/questions/questions.json\`,
where a few very general questions are defined e.g. website, phone number, ...
Furthermore, _all_ the questions of another layer can be reused with \`otherlayer.*\`
If you need only a single of the tagRenderings, use \`otherlayer.tagrenderingId\`
If one or more questions have a 'group' or 'label' set, select all the entries with the corresponding group or label with \`otherlayer.*group\`
Remark: if a tagRendering is 'lent' from another layer, the 'source'-tags are copied and added as condition.
If they are not wanted, remove them with an override

A special value is 'questions', which indicates the location of the questions box. If not specified, it'll be appended to the bottom of the featureInfobox.

At last, one can define a group of renderings where parts of all strings will be replaced by multiple other strings.
This is mainly create questions for a 'left' and a 'right' side of the road.
These will be grouped and questions will be asked together`},{path:["layers","override","tagRenderings"],type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["layers","override","tagRenderings","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","override","tagRenderings","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","override","tagRenderings","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","override","tagRenderings","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","override","tagRenderings","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","override","tagRenderings","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","override","tagRenderings","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","override","tagRenderings","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","tagRenderings","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","tagRenderings","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","tagRenderings","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","tagRenderings","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","tagRenderings","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","override","tagRenderings","override","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","override","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","override","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","override","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","override","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","override","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","override","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","override","tagRenderings","override","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","override","tagRenderings","override","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","override","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","override","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","override","tagRenderings","override","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","override","tagRenderings","override","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","override","tagRenderings","override","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","override","tagRenderings","override","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","override","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","tagRenderings","override","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","tagRenderings","override","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","tagRenderings","override","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","tagRenderings","override","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","tagRenderings","override","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","override","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","override","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings"],type:"object",description:`Rewrites and multiplies the given renderings of type T.

This can be used for introducing many similar questions automatically,
which also makes translations easier.

(Note that the key does _not_ need to be wrapped in {}.
However, we recommend to use them if the key is used in a translation, as missing keys will be picked up and warned for by the translation scripts)

For example:

\`\`\`
{
    rewrite: {
        sourceString: ["key", "a|b|c"],
        into: [
            ["X", 0]
            ["Y", 1],
            ["Z", 2]
        ],
        renderings: [{
            "key":"a|b|c"
        }]
    }
}
\`\`\`
will result in _three_ copies (as the values to rewrite into have three values, namely:

[
  {
  # The first pair: key --> X, a|b|c --> 0
      "X": 0
  },
  {
      "Y": 1
  },
  {
      "Z": 2
  }

]`},{path:["layers","override","tagRenderings","renderings"],type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["layers","override","tagRenderings","renderings","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","override","tagRenderings","renderings","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","override","tagRenderings","renderings","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","override","tagRenderings","renderings","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","override","tagRenderings","renderings","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","override","tagRenderings","renderings","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","override","tagRenderings","renderings","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","tagRenderings","renderings","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","tagRenderings","renderings","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","tagRenderings","renderings","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","tagRenderings","renderings","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","tagRenderings","renderings","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["layers","override","tagRenderings","renderings","override","questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["layers","override","tagRenderings","renderings","override","freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["layers","override","tagRenderings","renderings","override","freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["layers","override","tagRenderings","renderings","override","freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["layers","override","tagRenderings","renderings","override","freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["layers","override","tagRenderings","renderings","override","freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["layers","override","tagRenderings","renderings","override","freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["layers","override","tagRenderings","renderings","override","freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["layers","override","tagRenderings","renderings","override","multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["layers","override","tagRenderings","renderings","override","mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["layers","override","tagRenderings","renderings","override","mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["layers","override","tagRenderings","renderings","override","mappings","icon","class"],type:"string",description:"Size of the image"},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["layers","override","tagRenderings","renderings","override","id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["layers","override","tagRenderings","renderings","override","labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["layers","override","tagRenderings","renderings","override","classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["layers","override","tagRenderings","renderings","override","description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["layers","override","tagRenderings","renderings","override","render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["layers","override","tagRenderings","renderings","override","condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["layers","override","tagRenderings","renderings","override","condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","tagRenderings","renderings","override","metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter"],type:[{type:"array",items:{anyOf:[{$ref:"#/definitions/default_1"},{type:"string"}]}},{type:"object",properties:{sameAs:{type:"string"}},required:["sameAs"]}],description:"All the extra questions for filtering.\nIf a string is given, mapComplete will search in 'filters.json' for the appropriate filter or will try to parse it as `layername.filterid` and us that one"},{path:["layers","override","filter","id"],type:"string",description:"An id/name for this filter, used to set the URL parameters"},{path:["layers","override","filter","options"],type:"array",description:`The options for a filter
If there are multiple options these will be a list of radio buttons
If there is only one option this will be a checkbox
Filtering is done based on the given osmTags that are compared to the objects in that layer.

An example which searches by name:

\`\`\`
{
      "id": "shop-name",
      "options": [
        {
          "fields": [
            {
              "name": "search",
              "type": "string"
            }
          ],
          "osmTags": "name~i~.*{search}.*",
          "question": {
            "en": "Only show shops with name {search}",
          }
        }
      ]
    }
    \`\`\``},{path:["layers","override","filter","options","osmTags"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter","options","osmTags","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter","options","osmTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter","options","osmTags","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","filter","options","osmTags","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter","options","osmTags","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","filter","options","fields","name"],type:"string",description:'If name is `search`, use  "_first_comment~.*{search}.*" as osmTags'},{path:["layers","override","filter","#"],type:"string",description:'Used for comments or to disable a check\n\n"ignore-possible-duplicate": disables a check in `DetectDuplicateFilters` which complains that a filter can be replaced by a filter from the `filters`-library-layer'},{path:["layers","override","deletion"],type:[{$ref:"#/definitions/DeleteConfigJson"},{type:"boolean"}],description:`This block defines under what circumstances the delete dialog is shown for objects of this layer.
If set, a dialog is shown to the user to (soft) delete the point.
The dialog is built to be user friendly and to prevent mistakes.
If deletion is not possible, the dialog will hide itself and show the reason of non-deletability instead.

To configure, the following values are possible:

- false: never ever show the delete button
- true: show the default delete button
- undefined: use the mapcomplete default to show deletion or not. Currently, this is the same as 'false' but this will change in the future
- or: a hash with options (see below)

 The delete dialog
 =================



#### Hard deletion if enough experience

A feature can only be deleted from OpenStreetMap by mapcomplete if:

- It is a node
- No ways or relations use the node
- The logged-in user has enough experience OR the user is the only one to have edited the point previously
- The logged-in user has no unread messages (or has a ton of experience)
- The user did not select one of the 'non-delete-options' (see below)

In all other cases, a 'soft deletion' is used.

#### Soft deletion

A 'soft deletion' is when the point isn't deleted from OSM but retagged so that it'll won't how up in the mapcomplete theme anymore.
This makes it look like it was deleted, without doing damage. A fixme will be added to the point.

Note that a soft deletion is _only_ possible if these tags are provided by the theme creator, as they'll be different for every theme

#### No-delete options

In some cases, the contributor might want to delete something for the wrong reason (e.g. someone who wants to have a path removed "because the path is on their private property").
However, the path exists in reality and should thus be on OSM - otherwise the next contributor will pass by and notice "hey, there is a path missing here! Let me redraw it in OSM!)

The correct approach is to retag the feature in such a way that it is semantically correct *and* that it doesn't show up on the theme anymore.
A no-delete option is offered as 'reason to delete it', but secretly retags.`},{path:["layers","override","deletion","extraDeleteReasons"],type:"array",description:`*
By default, three reasons to delete a point are shown:

- The point does not exist anymore
- The point was a testing point
- THe point could not be found

However, for some layers, there might be different or more specific reasons for deletion which can be user friendly to set, e.g.:

- the shop has closed
- the climbing route has been closed of for nature conservation reasons
- ...

These reasons can be stated here and will be shown in the list of options the user can choose from`},{path:["layers","override","deletion","extraDeleteReasons","explanation"],description:"The text that will be shown to the user - translatable"},{path:["layers","override","deletion","extraDeleteReasons","changesetMessage"],type:"string",description:`The text that will be uploaded into the changeset or will be used in the fixme in case of a soft deletion
Should be a few words, in english`},{path:["layers","override","deletion","nonDeleteMappings"],type:"array",description:`In some cases, a (starting) contributor might wish to delete a feature even though deletion is not appropriate.
(The most relevant case are small paths running over private property. These should be marked as 'private' instead of deleted, as the community might trace the path again from aerial imagery, gettting us back to the original situation).

By adding a 'nonDeleteMapping', an option can be added into the list which will retag the feature.
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!`},{path:["layers","override","deletion","nonDeleteMappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","nonDeleteMappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","nonDeleteMappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","nonDeleteMappings","then"],description:"The human explanation for the options"},{path:["layers","override","deletion","softDeletionTags"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`In some cases, the contributor is not allowed to delete the current feature (e.g. because it isn't a point, the point is referenced by a relation or the user isn't experienced enough).
To still offer the user a 'delete'-option, the feature is retagged with these tags. This is a soft deletion, as the point isn't actually removed from OSM but rather marked as 'disused'
It is important that the feature will be retagged in such a way that it won't be picked up by the layer anymore!

Example (note that "amenity=" erases the 'amenity'-key alltogether):
\`\`\`
{
    "and": ["disussed:amenity=public_bookcase", "amenity="]
}
\`\`\`

or (notice the use of the ':='-tag to copy the old value of 'shop=*' into 'disused:shop='):
\`\`\`
{
    "and": ["disused:shop:={shop}", "shop="]
}
\`\`\``},{path:["layers","override","deletion","softDeletionTags"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","softDeletionTags","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","softDeletionTags","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","softDeletionTags"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","softDeletionTags","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["layers","override","deletion","softDeletionTags","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","softDeletionTags","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["layers","override","deletion","neededChangesets"],type:"number",description:`*
By default, the contributor needs 20 previous changesets to delete points edited by others.
For some small features (e.g. bicycle racks) this is too much and this requirement can be lowered or dropped, which can be done here.`},{path:["layers","override","deletion","omitDefaultDeleteReasons"],type:"boolean",description:`Set this flag if the default delete reasons should be omitted from the dialog.
This requires at least one extraDeleteReason or nonDeleteMapping`},{path:["layers","override","allowMove"],type:[{$ref:"#/definitions/default_3"},{type:"boolean"}],description:`Indicates if a point can be moved and configures the modalities.

A feature can be moved by MapComplete if:

- It is a point
- The point is _not_ part of a way or a a relation.

Off by default. Can be enabled by setting this flag or by configuring.`},{path:["layers","override","allowMove","enableImproveAccuracy"],type:"boolean",description:`One default reason to move a point is to improve accuracy.
Set to false to disable this reason`},{path:["layers","override","allowMove","enableRelocation"],type:"boolean",description:`One default reason to move a point is because it has relocated
Set to false to disable this reason`},{path:["layers","override","allowSplit"],type:"boolean",description:`If set, a 'split this way' button is shown on objects rendered as LineStrings, e.g. highways.

If the way is part of a relation, MapComplete will attempt to update this relation as well`},{path:["layers","override","units"],type:"object",description:`In some cases, a value is represented in a certain unit (such as meters for heigt/distance/..., km/h for speed, ...)

Sometimes, multiple denominations are possible (e.g. km/h vs mile/h; megawatt vs kilowatt vs gigawatt for power generators, ...)

This brings in some troubles, as there are multiple ways to write it (no denomitation, 'm' vs 'meter' 'metre', ...)

Not only do we want to write consistent data to OSM, we also want to present this consistently to the user.
This is handled by defining units.

# Rendering

To render a value with long (human) denomination, use {canonical(key)}

# Usage

First of all, you define which keys have units applied, for example:

\`\`\`
units: [
 appliesTo: ["maxspeed", "maxspeed:hgv", "maxspeed:bus"]
 applicableUnits: [
     ...
 ]
]
\`\`\`

ApplicableUnits defines which is the canonical extension, how it is presented to the user, ...:

\`\`\`
applicableUnits: [
{
    canonicalDenomination: "km/h",
    alternativeDenomination: ["km/u", "kmh", "kph"]
    default: true,
    human: {
        en: "kilometer/hour",
        nl: "kilometer/uur"
    },
    humanShort: {
        en: "km/h",
        nl: "km/u"
    }
},
{
    canoncialDenomination: "mph",
    ... similar for miles an hour ...
}
]
\`\`\`


If this is defined, then every key which the denominations apply to (\`maxspeed\`, \`maxspeed:hgv\` and \`maxspeed:bus\`) will be rewritten at the metatagging stage:
every value will be parsed and the canonical extension will be added add presented to the other parts of the code.

Also, if a freeform text field is used, an extra dropdown with applicable denominations will be given`},{path:["layers","override","units","appliesToKey"],type:"array",description:`Every key from this list will be normalized.

To render a united value properly, use`},{path:["layers","override","units","eraseInvalidValues"],type:"boolean",description:`If set, invalid values will be erased in the MC application (but not in OSM of course!)
Be careful with setting this`},{path:["layers","override","units","applicableUnits"],type:"array",description:`The possible denominations for this unit.
For length, denominations could be "meter", "kilometer", "miles", "foot"`},{path:["layers","override","units","applicableUnits","useIfNoUnitGiven"],type:[{type:"array",items:{type:"string"}},{type:"boolean"}],description:`If this evaluates to true and the value to interpret has _no_ unit given, assumes that this unit is meant.
Alternatively, a list of country codes can be given where this acts as the default interpretation

E.g., a denomination using "meter" would probably set this flag to "true";
a denomination for "mp/h" will use the condition "_country=gb" to indicate that it is the default in the UK.

If none of the units indicate that they are the default, the first denomination will be used instead`},{path:["layers","override","units","applicableUnits","canonicalDenomination"],type:"string",description:`The canonical value for this denomination which will be added to the value in OSM.
e.g. "m" for meters
If the user inputs '42', the canonical value will be added and it'll become '42m'.

Important: often, _no_ canonical values are expected, e.g. in the case of 'maxspeed' where 'km/h' is the default.
In this case, an empty string should be used`},{path:["layers","override","units","applicableUnits","canonicalDenominationSingular"],type:"string",description:"The canonical denomination in the case that the unit is precisely '1'.\nUsed for display purposes only.\n\nE.g.: for duration of something in minutes: `2 minutes` but `1 minute`; the `minute` goes here"},{path:["layers","override","units","applicableUnits","alternativeDenomination"],type:"array",description:"A list of alternative values which can occur in the OSM database - used for parsing.\nE.g.: while 'm' is canonical, `meter`, `mtrs`, ... can occur as well"},{path:["layers","override","units","applicableUnits","human"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "meter",
    "fr": "metre"
}`},{path:["layers","override","units","applicableUnits","humanSingular"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`The value for humans in the dropdown. This should not use abbreviations and should be translated, e.g.
{
    "en": "minute",
    "nl": "minuut"
}`},{path:["layers","override","units","applicableUnits","prefix"],type:"boolean",description:`If set, then the canonical value will be prefixed instead, e.g. for '€'
Note that if all values use 'prefix', the dropdown might move to before the text field`},{path:["layers","override","units","defaultInput"],type:"string",description:`In some cases, the default denomination is not the most user friendly to input.
E.g., when measuring kerb heights, it is illogical to ask contributors to input an amount in meters.

When a default input method should be used, this can be specified by setting the canonical denomination here, e.g.
\`defaultInput: "cm"\`. This must be a denomination which appears in the applicableUnits`},{path:["layers","override","syncSelection"],type:"string",description:`If set, synchronizes whether or not this layer is enabled.

no: Do not sync at all, always revert to default
local: keep selection on local storage
theme-only: sync via OSM, but this layer will only be toggled in this theme
global: all layers with this ID will be synced accross all themes`},{path:["layers","override","#"],type:"string",description:`Used for comments and/or to disable some checks

no-question-hint-check: disables a check in MiscTagRenderingChecks which complains about 'div', 'span' or 'class=subtle'-HTML elements in the tagRendering`},{path:["layers","hideTagRenderingsWithLabels"],type:"array",description:`TagRenderings with any of these labels will be removed from the layer.
Note that the 'id' and 'group' are considered labels too`},{path:["customCss"],type:"string",description:"The URL of a custom CSS stylesheet to modify the layout"},{path:["hideFromOverview"],type:"boolean",description:"If set to true, this layout will not be shown in the overview with more themes"},{path:["lockLocation"],type:[{type:"array",items:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2},{type:"array",items:{type:"array",items:{type:"number"}}}],description:`If set to true, the basemap will not scroll outside of the area visible on initial zoom.
If set to [[lon, lat], [lon, lat]], the map will not scroll outside of those bounds.
Off by default, which will enable panning to the entire world`},{path:["enableUserBadge"],type:"boolean",description:`If set to false, disables logging in.
The userbadge will be hidden, all login-buttons will be hidden and editing will be disabled`},{path:["enableShareScreen"],type:"boolean",description:"If false, hides the tab 'share'-tab in the welcomeMessage"},{path:["enableMoreQuests"],type:"boolean",description:"Hides the tab with more themes in the welcomeMessage"},{path:["enableLayers"],type:"boolean",description:`If false, the layer selection/filter view will be hidden
The corresponding URL-parameter is 'fs-filters' instead of 'fs-layers'`},{path:["enableSearch"],type:"boolean",description:"If set to false, hides the search bar"},{path:["enableAddNewPoints"],type:"boolean",description:`If set to false, the ability to add new points or nodes will be disabled.
Editing already existing features will still be possible`},{path:["enableGeolocation"],type:"boolean",description:"If set to false, the 'geolocation'-button will be hidden."},{path:["enableBackgroundLayerSelection"],type:"boolean",description:`Enable switching the backgroundlayer.
If false, the quickswitch-buttons are removed (bottom left) and the dropdown in the layer selection is removed as well`},{path:["enableShowAllQuestions"],type:"boolean",description:"If set to true, will show _all_ unanswered questions in a popup instead of just the next one"},{path:["enableDownload"],type:"boolean",description:"If set to true, download button for the data will be shown (offers downloading as geojson and csv)"},{path:["enablePdfDownload"],type:"boolean",description:"If set to true, exporting a pdf is enabled"},{path:["enableNoteImports"],type:"boolean",description:`If true, notes will be loaded and parsed. If a note is an import (as created by the import_helper.html-tool from mapcomplete),
these notes will be shown if a relevant layer is present.

Default is true for official layers and false for unofficial (sideloaded) layers`},{path:["overpassUrl"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:"Set one or more overpass URLs to use for this theme.."},{path:["overpassTimeout"],type:"number",description:"Set a different timeout for overpass queries - in seconds. Default: 30s"},{path:["enableNodeDatabase"],type:"boolean",description:`Enables tracking of all nodes when data is loaded.
This is useful for the 'ImportWay' and 'ConflateWay'-buttons who need this database.

Note: this flag will be automatically set.`}],yd=[{path:[],type:"object",description:`A QuestionableTagRenderingConfigJson is a single piece of code which converts one ore more tags into a HTML-snippet.
If the desired tags are missing and a question is defined, a question will be shown instead.`},{path:["question"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`If it turns out that this tagRendering doesn't match _any_ value, then we show this question.
If undefined, the question is never asked and this tagrendering is read-only`},{path:["questionHint"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:`A hint which is shown in subtle text under the question.
This can give some extra information on what the answer should ook like`},{path:["freeform"],type:"object",description:"Allow freeform text input from the user"},{path:["freeform","type"],type:"string",description:`The type of the text-field, e.g. 'string', 'nat', 'float', 'date',...
See Docs/SpecialInputElements.md and UI/Input/ValidatedTextField.ts for supported values`},{path:["freeform","placeholder"],description:"A (translated) text that is shown (as gray text) within the textfield"},{path:["freeform","helperArgs"],type:"array",description:`Extra parameters to initialize the input helper arguments.
For semantics, see the 'SpecialInputElements.md'`},{path:["freeform","addExtraTags"],type:"array",description:`If a value is added with the textfield, these extra tag is addded.
Useful to add a 'fixme=freeform textfield used - to be checked'`},{path:["freeform","inline"],type:"boolean",description:`When set, influences the way a question is asked.
Instead of showing a full-width text field, the text field will be shown within the rendering of the question.

This combines badly with special input elements, as it'll distort the layout.
Note that this will be set automatically if no special elements are present.`},{path:["freeform","default"],type:"string",description:`default value to enter if no previous tagging is present.
Normally undefined (aka do not enter anything)`},{path:["multiAnswer"],type:"boolean",description:"If true, use checkboxes instead of radio buttons when asking the question"},{path:["mappings"],type:"array",description:"Allows fixed-tag inputs, shown either as radiobuttons or as checkboxes"},{path:["mappings","if"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","if"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","if"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","then"],typeHint:"rendered",description:`Shown if the 'if is fulfilled
Type: rendered`},{path:["mappings","icon"],typeHint:"icon",type:[{type:"object",properties:{path:{description:`The path to the  icon
Type: icon`,type:"string"},class:{description:"Size of the image",type:"string"}},required:["path"]},{type:"string"}],description:`An extra icon supporting the choice
Type: icon`},{path:["mappings","icon","path"],typeHint:"icon",type:"string",description:`The path to the  icon
Type: icon`},{path:["mappings","icon","class"],type:"string",description:"Size of the image"},{path:["mappings","hideInAnswer"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:["string","boolean"]}],description:`In some cases, multiple taggings exist (e.g. a default assumption, or a commonly mapped abbreviation and a fully written variation).

In the latter case, a correct text should be shown, but only a single, canonical tagging should be selectable by the user.
In this case, one of the mappings can be hiden by setting this flag.

To demonstrate an example making a default assumption:

mappings: [
 {
     if: "access=", -- no access tag present, we assume accessible
     then: "Accessible to the general public",
     hideInAnswer: true
 },
 {
     if: "access=yes",
     then: "Accessible to the general public", -- the user selected this, we add that to OSM
 },
 {
     if: "access=no",
     then: "Not accessible to the public"
 }
]


For example, for an operator, we have \`operator=Agentschap Natuur en Bos\`, which is often abbreviated to \`operator=ANB\`.
Then, we would add two mappings:
{
    if: "operator=Agentschap Natuur en Bos" -- the non-abbreviated version which should be uploaded
    then: "Maintained by Agentschap Natuur en Bos"
},
{
    if: "operator=ANB", -- we don't want to upload abbreviations
    then: "Maintained by Agentschap Natuur en Bos"
    hideInAnswer: true
}

Hide in answer can also be a tagsfilter, e.g. to make sure an option is only shown when appropriate.
Keep in mind that this is reverse logic: it will be hidden in the answer if the condition is true, it will thus only show in the case of a mismatch

e.g., for toilets: if "wheelchair=no", we know there is no wheelchair dedicated room.
For the location of the changing table, the option "in the wheelchair accessible toilet is weird", so we write:

{
    "question": "Where is the changing table located?"
    "mappings": [
        {"if":"changing_table:location=female","then":"In the female restroom"},
       {"if":"changing_table:location=male","then":"In the male restroom"},
       {"if":"changing_table:location=wheelchair","then":"In the wheelchair accessible restroom", "hideInAnswer": "wheelchair=no"},

    ]
}

Also have a look for the meta-tags
{
    if: "operator=Agentschap Natuur en Bos",
    then: "Maintained by Agentschap Natuur en Bos",
    hideInAnswer: "_country!=be"
}`},{path:["mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","hideInAnswer","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","hideInAnswer","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","hideInAnswer"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","hideInAnswer","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","hideInAnswer","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","ifnot"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:"Only applicable if 'multiAnswer' is set.\nThis is for situations such as:\n`accepts:coins=no` where one can select all the possible payment methods. However, we want to make explicit that some options _were not_ selected.\nThis can be done with `ifnot`\nNote that we can not explicitly render this negative case to the user, we cannot show `does _not_ accept coins`.\nIf this is important to your usecase, consider using multiple radiobutton-fields without `multiAnswer`"},{path:["mappings","ifnot"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","ifnot","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","ifnot"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","ifnot","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","ifnot","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","addExtraTags"],type:"array",description:`If chosen as answer, these tags will be applied as well onto the object.
Not compatible with multiAnswer.

This can be used e.g. to erase other keys which indicate the 'not' value:
\`\`\`json
{
    "if": "crossing:marking=rainbow",
    "then": "This is a rainbow crossing",
    "addExtraTags": "not:crossing:marking="
}
\`\`\``},{path:["mappings","priorityIf"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If the searchable selector is picked, mappings with this item will have priority and show up even if the others are hidden
Use this sparingly`},{path:["mappings","priorityIf"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","priorityIf","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","priorityIf","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","priorityIf"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","priorityIf","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","priorityIf","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["mappings","#"],type:"string",description:"Used for comments or to disable a validation\n\nignore-image-in-then: normally, a `then`-clause is not allowed to have an `img`-html-element as icons are preferred. In some cases (most notably title-icons), this is allowed"},{path:["id"],type:"string",description:`The id of the tagrendering, should be an unique string.
Used to keep the translations in sync. Only used in the tagRenderings-array of a layerConfig, not requered otherwise.

Use 'questions' to trigger the question box of this group (if a group is defined)`},{path:["labels"],type:"array",description:"A list of labels. These are strings that are used for various purposes, e.g. to filter them away"},{path:["classes"],type:[{type:"array",items:{type:"string"}},{type:"string"}],description:`A list of css-classes to apply to the entire tagRendering if the answer is known (not applied on the question).
This is only for advanced users`},{path:["description"],type:[{$ref:"#/definitions/Record<string,string>"},{type:"string"}],description:"A human-readable text explaining what this tagRendering does"},{path:["render"],typeHint:"rendered",type:[{$ref:"#/definitions/Record<string,string>"},{type:"object",properties:{special:{allOf:[{$ref:"#/definitions/Record<string,string|Record<string,string>>"},{type:"object",properties:{type:{type:"string"}},required:["type"]}]}},required:["special"]},{type:"string"}],description:`Renders this value. Note that "{key}"-parts are substituted by the corresponding values of the element.
If neither 'textFieldQuestion' nor 'mappings' are defined, this text is simply shown as default value.

Note that this is a HTML-interpreted value, so you can add links as e.g. '<a href='{website}'>{website}</a>' or include images such as \`This is of type A <br><img src='typeA-icon.svg' />\`
type: rendered`},{path:["condition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`Only show this tagrendering (or ask the question) if the selected object also matches the tags specified as \`condition\`.

This is useful to ask a follow-up question.
For example, within toilets, asking _where_ the diaper changing table is is only useful _if_ there is one.
This can be done by adding \`"condition": "changing_table=yes"\`

A full example would be:
\`\`\`json
    {
      "question": "Where is the changing table located?",
      "render": "The changing table is located at {changing_table:location}",
      "condition": "changing_table=yes",
      "freeform": {
        "key": "changing_table:location",
        "inline": true
      },
      "mappings": [
        {
          "then": "The changing table is in the toilet for women.",
          "if": "changing_table:location=female_toilet"
        },
        {
          "then": "The changing table is in the toilet for men.",
          "if": "changing_table:location=male_toilet"
        },
        {
          "if": "changing_table:location=wheelchair_toilet",
          "then": "The changing table is in the toilet for wheelchair users.",
        },
        {
          "if": "changing_table:location=dedicated_room",
          "then": "The changing table is in a dedicated room. ",
        }
      ],
      "id": "toilet-changing_table:location"
    },
\`\`\``},{path:["condition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["condition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["condition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["condition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["condition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["condition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["condition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["metacondition"],type:[{$ref:"#/definitions/AndTagConfigJson",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{$ref:"#/definitions/OrTagConfigJson",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{type:"string"}],description:`If set, this tag will be evaluated agains the _usersettings/application state_ table.
Enable 'show debug info' in user settings to see available options.
Note that values with an underscore depicts _application state_ (including metainfo about the user) whereas values without an underscore depict _user settings_`},{path:["metacondition"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["metacondition","and"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition","and"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["metacondition"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["metacondition","or"],type:[{$ref:"#/definitions/AndTagConfigJson"},{description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`,type:"object",properties:{or:{type:"array",items:{$ref:"#/definitions/TagConfigJson"}}},required:["or"]},{type:"string"}],description:`The main representation of Tags.
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for more documentation`},{path:["metacondition","or"],type:"object",description:`Chain many tags, to match, a single of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`},{path:["metacondition","or"],type:"object",description:`Chain many tags, to match, all of these should be true
See https://github.com/pietervdvn/MapComplete/blob/develop/Docs/Tags_format.md for documentation`}];var xe={},oo={},xn={},An={},Bm={get exports(){return An},set exports(n){An=n}};/*! https://mths.be/he v1.2.0 by @mathias | MIT license */(function(n,t){(function(e){var i=t,o=n&&n.exports==i&&n,a=typeof q=="object"&&q;(a.global===a||a.window===a)&&(e=a);var r=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,s=/[\x01-\x7F]/g,p=/[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,d=/<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g,c={"­":"shy","‌":"zwnj","‍":"zwj","‎":"lrm","⁣":"ic","⁢":"it","⁡":"af","‏":"rlm","​":"ZeroWidthSpace","⁠":"NoBreak","̑":"DownBreve","⃛":"tdot","⃜":"DotDot","	":"Tab","\n":"NewLine"," ":"puncsp"," ":"MediumSpace"," ":"thinsp"," ":"hairsp"," ":"emsp13"," ":"ensp"," ":"emsp14"," ":"emsp"," ":"numsp"," ":"nbsp","  ":"ThickSpace","‾":"oline",_:"lowbar","‐":"dash","–":"ndash","—":"mdash","―":"horbar",",":"comma",";":"semi","⁏":"bsemi",":":"colon","⩴":"Colone","!":"excl","¡":"iexcl","?":"quest","¿":"iquest",".":"period","‥":"nldr","…":"mldr","·":"middot","'":"apos","‘":"lsquo","’":"rsquo","‚":"sbquo","‹":"lsaquo","›":"rsaquo",'"':"quot","“":"ldquo","”":"rdquo","„":"bdquo","«":"laquo","»":"raquo","(":"lpar",")":"rpar","[":"lsqb","]":"rsqb","{":"lcub","}":"rcub","⌈":"lceil","⌉":"rceil","⌊":"lfloor","⌋":"rfloor","⦅":"lopar","⦆":"ropar","⦋":"lbrke","⦌":"rbrke","⦍":"lbrkslu","⦎":"rbrksld","⦏":"lbrksld","⦐":"rbrkslu","⦑":"langd","⦒":"rangd","⦓":"lparlt","⦔":"rpargt","⦕":"gtlPar","⦖":"ltrPar","⟦":"lobrk","⟧":"robrk","⟨":"lang","⟩":"rang","⟪":"Lang","⟫":"Rang","⟬":"loang","⟭":"roang","❲":"lbbrk","❳":"rbbrk","‖":"Vert","§":"sect","¶":"para","@":"commat","*":"ast","/":"sol",undefined:null,"&":"amp","#":"num","%":"percnt","‰":"permil","‱":"pertenk","†":"dagger","‡":"Dagger","•":"bull","⁃":"hybull","′":"prime","″":"Prime","‴":"tprime","⁗":"qprime","‵":"bprime","⁁":"caret","`":"grave","´":"acute","˜":"tilde","^":"Hat","¯":"macr","˘":"breve","˙":"dot","¨":"die","˚":"ring","˝":"dblac","¸":"cedil","˛":"ogon","ˆ":"circ","ˇ":"caron","°":"deg","©":"copy","®":"reg","℗":"copysr","℘":"wp","℞":"rx","℧":"mho","℩":"iiota","←":"larr","↚":"nlarr","→":"rarr","↛":"nrarr","↑":"uarr","↓":"darr","↔":"harr","↮":"nharr","↕":"varr","↖":"nwarr","↗":"nearr","↘":"searr","↙":"swarr","↝":"rarrw","↝̸":"nrarrw","↞":"Larr","↟":"Uarr","↠":"Rarr","↡":"Darr","↢":"larrtl","↣":"rarrtl","↤":"mapstoleft","↥":"mapstoup","↦":"map","↧":"mapstodown","↩":"larrhk","↪":"rarrhk","↫":"larrlp","↬":"rarrlp","↭":"harrw","↰":"lsh","↱":"rsh","↲":"ldsh","↳":"rdsh","↵":"crarr","↶":"cularr","↷":"curarr","↺":"olarr","↻":"orarr","↼":"lharu","↽":"lhard","↾":"uharr","↿":"uharl","⇀":"rharu","⇁":"rhard","⇂":"dharr","⇃":"dharl","⇄":"rlarr","⇅":"udarr","⇆":"lrarr","⇇":"llarr","⇈":"uuarr","⇉":"rrarr","⇊":"ddarr","⇋":"lrhar","⇌":"rlhar","⇐":"lArr","⇍":"nlArr","⇑":"uArr","⇒":"rArr","⇏":"nrArr","⇓":"dArr","⇔":"iff","⇎":"nhArr","⇕":"vArr","⇖":"nwArr","⇗":"neArr","⇘":"seArr","⇙":"swArr","⇚":"lAarr","⇛":"rAarr","⇝":"zigrarr","⇤":"larrb","⇥":"rarrb","⇵":"duarr","⇽":"loarr","⇾":"roarr","⇿":"hoarr","∀":"forall","∁":"comp","∂":"part","∂̸":"npart","∃":"exist","∄":"nexist","∅":"empty","∇":"Del","∈":"in","∉":"notin","∋":"ni","∌":"notni","϶":"bepsi","∏":"prod","∐":"coprod","∑":"sum","+":"plus","±":"pm","÷":"div","×":"times","<":"lt","≮":"nlt","<⃒":"nvlt","=":"equals","≠":"ne","=⃥":"bne","⩵":"Equal",">":"gt","≯":"ngt",">⃒":"nvgt","¬":"not","|":"vert","¦":"brvbar","−":"minus","∓":"mp","∔":"plusdo","⁄":"frasl","∖":"setmn","∗":"lowast","∘":"compfn","√":"Sqrt","∝":"prop","∞":"infin","∟":"angrt","∠":"ang","∠⃒":"nang","∡":"angmsd","∢":"angsph","∣":"mid","∤":"nmid","∥":"par","∦":"npar","∧":"and","∨":"or","∩":"cap","∩︀":"caps","∪":"cup","∪︀":"cups","∫":"int","∬":"Int","∭":"tint","⨌":"qint","∮":"oint","∯":"Conint","∰":"Cconint","∱":"cwint","∲":"cwconint","∳":"awconint","∴":"there4","∵":"becaus","∶":"ratio","∷":"Colon","∸":"minusd","∺":"mDDot","∻":"homtht","∼":"sim","≁":"nsim","∼⃒":"nvsim","∽":"bsim","∽̱":"race","∾":"ac","∾̳":"acE","∿":"acd","≀":"wr","≂":"esim","≂̸":"nesim","≃":"sime","≄":"nsime","≅":"cong","≇":"ncong","≆":"simne","≈":"ap","≉":"nap","≊":"ape","≋":"apid","≋̸":"napid","≌":"bcong","≍":"CupCap","≭":"NotCupCap","≍⃒":"nvap","≎":"bump","≎̸":"nbump","≏":"bumpe","≏̸":"nbumpe","≐":"doteq","≐̸":"nedot","≑":"eDot","≒":"efDot","≓":"erDot","≔":"colone","≕":"ecolon","≖":"ecir","≗":"cire","≙":"wedgeq","≚":"veeeq","≜":"trie","≟":"equest","≡":"equiv","≢":"nequiv","≡⃥":"bnequiv","≤":"le","≰":"nle","≤⃒":"nvle","≥":"ge","≱":"nge","≥⃒":"nvge","≦":"lE","≦̸":"nlE","≧":"gE","≧̸":"ngE","≨︀":"lvnE","≨":"lnE","≩":"gnE","≩︀":"gvnE","≪":"ll","≪̸":"nLtv","≪⃒":"nLt","≫":"gg","≫̸":"nGtv","≫⃒":"nGt","≬":"twixt","≲":"lsim","≴":"nlsim","≳":"gsim","≵":"ngsim","≶":"lg","≸":"ntlg","≷":"gl","≹":"ntgl","≺":"pr","⊀":"npr","≻":"sc","⊁":"nsc","≼":"prcue","⋠":"nprcue","≽":"sccue","⋡":"nsccue","≾":"prsim","≿":"scsim","≿̸":"NotSucceedsTilde","⊂":"sub","⊄":"nsub","⊂⃒":"vnsub","⊃":"sup","⊅":"nsup","⊃⃒":"vnsup","⊆":"sube","⊈":"nsube","⊇":"supe","⊉":"nsupe","⊊︀":"vsubne","⊊":"subne","⊋︀":"vsupne","⊋":"supne","⊍":"cupdot","⊎":"uplus","⊏":"sqsub","⊏̸":"NotSquareSubset","⊐":"sqsup","⊐̸":"NotSquareSuperset","⊑":"sqsube","⋢":"nsqsube","⊒":"sqsupe","⋣":"nsqsupe","⊓":"sqcap","⊓︀":"sqcaps","⊔":"sqcup","⊔︀":"sqcups","⊕":"oplus","⊖":"ominus","⊗":"otimes","⊘":"osol","⊙":"odot","⊚":"ocir","⊛":"oast","⊝":"odash","⊞":"plusb","⊟":"minusb","⊠":"timesb","⊡":"sdotb","⊢":"vdash","⊬":"nvdash","⊣":"dashv","⊤":"top","⊥":"bot","⊧":"models","⊨":"vDash","⊭":"nvDash","⊩":"Vdash","⊮":"nVdash","⊪":"Vvdash","⊫":"VDash","⊯":"nVDash","⊰":"prurel","⊲":"vltri","⋪":"nltri","⊳":"vrtri","⋫":"nrtri","⊴":"ltrie","⋬":"nltrie","⊴⃒":"nvltrie","⊵":"rtrie","⋭":"nrtrie","⊵⃒":"nvrtrie","⊶":"origof","⊷":"imof","⊸":"mumap","⊹":"hercon","⊺":"intcal","⊻":"veebar","⊽":"barvee","⊾":"angrtvb","⊿":"lrtri","⋀":"Wedge","⋁":"Vee","⋂":"xcap","⋃":"xcup","⋄":"diam","⋅":"sdot","⋆":"Star","⋇":"divonx","⋈":"bowtie","⋉":"ltimes","⋊":"rtimes","⋋":"lthree","⋌":"rthree","⋍":"bsime","⋎":"cuvee","⋏":"cuwed","⋐":"Sub","⋑":"Sup","⋒":"Cap","⋓":"Cup","⋔":"fork","⋕":"epar","⋖":"ltdot","⋗":"gtdot","⋘":"Ll","⋘̸":"nLl","⋙":"Gg","⋙̸":"nGg","⋚︀":"lesg","⋚":"leg","⋛":"gel","⋛︀":"gesl","⋞":"cuepr","⋟":"cuesc","⋦":"lnsim","⋧":"gnsim","⋨":"prnsim","⋩":"scnsim","⋮":"vellip","⋯":"ctdot","⋰":"utdot","⋱":"dtdot","⋲":"disin","⋳":"isinsv","⋴":"isins","⋵":"isindot","⋵̸":"notindot","⋶":"notinvc","⋷":"notinvb","⋹":"isinE","⋹̸":"notinE","⋺":"nisd","⋻":"xnis","⋼":"nis","⋽":"notnivc","⋾":"notnivb","⌅":"barwed","⌆":"Barwed","⌌":"drcrop","⌍":"dlcrop","⌎":"urcrop","⌏":"ulcrop","⌐":"bnot","⌒":"profline","⌓":"profsurf","⌕":"telrec","⌖":"target","⌜":"ulcorn","⌝":"urcorn","⌞":"dlcorn","⌟":"drcorn","⌢":"frown","⌣":"smile","⌭":"cylcty","⌮":"profalar","⌶":"topbot","⌽":"ovbar","⌿":"solbar","⍼":"angzarr","⎰":"lmoust","⎱":"rmoust","⎴":"tbrk","⎵":"bbrk","⎶":"bbrktbrk","⏜":"OverParenthesis","⏝":"UnderParenthesis","⏞":"OverBrace","⏟":"UnderBrace","⏢":"trpezium","⏧":"elinters","␣":"blank","─":"boxh","│":"boxv","┌":"boxdr","┐":"boxdl","└":"boxur","┘":"boxul","├":"boxvr","┤":"boxvl","┬":"boxhd","┴":"boxhu","┼":"boxvh","═":"boxH","║":"boxV","╒":"boxdR","╓":"boxDr","╔":"boxDR","╕":"boxdL","╖":"boxDl","╗":"boxDL","╘":"boxuR","╙":"boxUr","╚":"boxUR","╛":"boxuL","╜":"boxUl","╝":"boxUL","╞":"boxvR","╟":"boxVr","╠":"boxVR","╡":"boxvL","╢":"boxVl","╣":"boxVL","╤":"boxHd","╥":"boxhD","╦":"boxHD","╧":"boxHu","╨":"boxhU","╩":"boxHU","╪":"boxvH","╫":"boxVh","╬":"boxVH","▀":"uhblk","▄":"lhblk","█":"block","░":"blk14","▒":"blk12","▓":"blk34","□":"squ","▪":"squf","▫":"EmptyVerySmallSquare","▭":"rect","▮":"marker","▱":"fltns","△":"xutri","▴":"utrif","▵":"utri","▸":"rtrif","▹":"rtri","▽":"xdtri","▾":"dtrif","▿":"dtri","◂":"ltrif","◃":"ltri","◊":"loz","○":"cir","◬":"tridot","◯":"xcirc","◸":"ultri","◹":"urtri","◺":"lltri","◻":"EmptySmallSquare","◼":"FilledSmallSquare","★":"starf","☆":"star","☎":"phone","♀":"female","♂":"male","♠":"spades","♣":"clubs","♥":"hearts","♦":"diams","♪":"sung","✓":"check","✗":"cross","✠":"malt","✶":"sext","❘":"VerticalSeparator","⟈":"bsolhsub","⟉":"suphsol","⟵":"xlarr","⟶":"xrarr","⟷":"xharr","⟸":"xlArr","⟹":"xrArr","⟺":"xhArr","⟼":"xmap","⟿":"dzigrarr","⤂":"nvlArr","⤃":"nvrArr","⤄":"nvHarr","⤅":"Map","⤌":"lbarr","⤍":"rbarr","⤎":"lBarr","⤏":"rBarr","⤐":"RBarr","⤑":"DDotrahd","⤒":"UpArrowBar","⤓":"DownArrowBar","⤖":"Rarrtl","⤙":"latail","⤚":"ratail","⤛":"lAtail","⤜":"rAtail","⤝":"larrfs","⤞":"rarrfs","⤟":"larrbfs","⤠":"rarrbfs","⤣":"nwarhk","⤤":"nearhk","⤥":"searhk","⤦":"swarhk","⤧":"nwnear","⤨":"toea","⤩":"tosa","⤪":"swnwar","⤳":"rarrc","⤳̸":"nrarrc","⤵":"cudarrr","⤶":"ldca","⤷":"rdca","⤸":"cudarrl","⤹":"larrpl","⤼":"curarrm","⤽":"cularrp","⥅":"rarrpl","⥈":"harrcir","⥉":"Uarrocir","⥊":"lurdshar","⥋":"ldrushar","⥎":"LeftRightVector","⥏":"RightUpDownVector","⥐":"DownLeftRightVector","⥑":"LeftUpDownVector","⥒":"LeftVectorBar","⥓":"RightVectorBar","⥔":"RightUpVectorBar","⥕":"RightDownVectorBar","⥖":"DownLeftVectorBar","⥗":"DownRightVectorBar","⥘":"LeftUpVectorBar","⥙":"LeftDownVectorBar","⥚":"LeftTeeVector","⥛":"RightTeeVector","⥜":"RightUpTeeVector","⥝":"RightDownTeeVector","⥞":"DownLeftTeeVector","⥟":"DownRightTeeVector","⥠":"LeftUpTeeVector","⥡":"LeftDownTeeVector","⥢":"lHar","⥣":"uHar","⥤":"rHar","⥥":"dHar","⥦":"luruhar","⥧":"ldrdhar","⥨":"ruluhar","⥩":"rdldhar","⥪":"lharul","⥫":"llhard","⥬":"rharul","⥭":"lrhard","⥮":"udhar","⥯":"duhar","⥰":"RoundImplies","⥱":"erarr","⥲":"simrarr","⥳":"larrsim","⥴":"rarrsim","⥵":"rarrap","⥶":"ltlarr","⥸":"gtrarr","⥹":"subrarr","⥻":"suplarr","⥼":"lfisht","⥽":"rfisht","⥾":"ufisht","⥿":"dfisht","⦚":"vzigzag","⦜":"vangrt","⦝":"angrtvbd","⦤":"ange","⦥":"range","⦦":"dwangle","⦧":"uwangle","⦨":"angmsdaa","⦩":"angmsdab","⦪":"angmsdac","⦫":"angmsdad","⦬":"angmsdae","⦭":"angmsdaf","⦮":"angmsdag","⦯":"angmsdah","⦰":"bemptyv","⦱":"demptyv","⦲":"cemptyv","⦳":"raemptyv","⦴":"laemptyv","⦵":"ohbar","⦶":"omid","⦷":"opar","⦹":"operp","⦻":"olcross","⦼":"odsold","⦾":"olcir","⦿":"ofcir","⧀":"olt","⧁":"ogt","⧂":"cirscir","⧃":"cirE","⧄":"solb","⧅":"bsolb","⧉":"boxbox","⧍":"trisb","⧎":"rtriltri","⧏":"LeftTriangleBar","⧏̸":"NotLeftTriangleBar","⧐":"RightTriangleBar","⧐̸":"NotRightTriangleBar","⧜":"iinfin","⧝":"infintie","⧞":"nvinfin","⧣":"eparsl","⧤":"smeparsl","⧥":"eqvparsl","⧫":"lozf","⧴":"RuleDelayed","⧶":"dsol","⨀":"xodot","⨁":"xoplus","⨂":"xotime","⨄":"xuplus","⨆":"xsqcup","⨍":"fpartint","⨐":"cirfnint","⨑":"awint","⨒":"rppolint","⨓":"scpolint","⨔":"npolint","⨕":"pointint","⨖":"quatint","⨗":"intlarhk","⨢":"pluscir","⨣":"plusacir","⨤":"simplus","⨥":"plusdu","⨦":"plussim","⨧":"plustwo","⨩":"mcomma","⨪":"minusdu","⨭":"loplus","⨮":"roplus","⨯":"Cross","⨰":"timesd","⨱":"timesbar","⨳":"smashp","⨴":"lotimes","⨵":"rotimes","⨶":"otimesas","⨷":"Otimes","⨸":"odiv","⨹":"triplus","⨺":"triminus","⨻":"tritime","⨼":"iprod","⨿":"amalg","⩀":"capdot","⩂":"ncup","⩃":"ncap","⩄":"capand","⩅":"cupor","⩆":"cupcap","⩇":"capcup","⩈":"cupbrcap","⩉":"capbrcup","⩊":"cupcup","⩋":"capcap","⩌":"ccups","⩍":"ccaps","⩐":"ccupssm","⩓":"And","⩔":"Or","⩕":"andand","⩖":"oror","⩗":"orslope","⩘":"andslope","⩚":"andv","⩛":"orv","⩜":"andd","⩝":"ord","⩟":"wedbar","⩦":"sdote","⩪":"simdot","⩭":"congdot","⩭̸":"ncongdot","⩮":"easter","⩯":"apacir","⩰":"apE","⩰̸":"napE","⩱":"eplus","⩲":"pluse","⩳":"Esim","⩷":"eDDot","⩸":"equivDD","⩹":"ltcir","⩺":"gtcir","⩻":"ltquest","⩼":"gtquest","⩽":"les","⩽̸":"nles","⩾":"ges","⩾̸":"nges","⩿":"lesdot","⪀":"gesdot","⪁":"lesdoto","⪂":"gesdoto","⪃":"lesdotor","⪄":"gesdotol","⪅":"lap","⪆":"gap","⪇":"lne","⪈":"gne","⪉":"lnap","⪊":"gnap","⪋":"lEg","⪌":"gEl","⪍":"lsime","⪎":"gsime","⪏":"lsimg","⪐":"gsiml","⪑":"lgE","⪒":"glE","⪓":"lesges","⪔":"gesles","⪕":"els","⪖":"egs","⪗":"elsdot","⪘":"egsdot","⪙":"el","⪚":"eg","⪝":"siml","⪞":"simg","⪟":"simlE","⪠":"simgE","⪡":"LessLess","⪡̸":"NotNestedLessLess","⪢":"GreaterGreater","⪢̸":"NotNestedGreaterGreater","⪤":"glj","⪥":"gla","⪦":"ltcc","⪧":"gtcc","⪨":"lescc","⪩":"gescc","⪪":"smt","⪫":"lat","⪬":"smte","⪬︀":"smtes","⪭":"late","⪭︀":"lates","⪮":"bumpE","⪯":"pre","⪯̸":"npre","⪰":"sce","⪰̸":"nsce","⪳":"prE","⪴":"scE","⪵":"prnE","⪶":"scnE","⪷":"prap","⪸":"scap","⪹":"prnap","⪺":"scnap","⪻":"Pr","⪼":"Sc","⪽":"subdot","⪾":"supdot","⪿":"subplus","⫀":"supplus","⫁":"submult","⫂":"supmult","⫃":"subedot","⫄":"supedot","⫅":"subE","⫅̸":"nsubE","⫆":"supE","⫆̸":"nsupE","⫇":"subsim","⫈":"supsim","⫋︀":"vsubnE","⫋":"subnE","⫌︀":"vsupnE","⫌":"supnE","⫏":"csub","⫐":"csup","⫑":"csube","⫒":"csupe","⫓":"subsup","⫔":"supsub","⫕":"subsub","⫖":"supsup","⫗":"suphsub","⫘":"supdsub","⫙":"forkv","⫚":"topfork","⫛":"mlcp","⫤":"Dashv","⫦":"Vdashl","⫧":"Barv","⫨":"vBar","⫩":"vBarv","⫫":"Vbar","⫬":"Not","⫭":"bNot","⫮":"rnmid","⫯":"cirmid","⫰":"midcir","⫱":"topcir","⫲":"nhpar","⫳":"parsim","⫽":"parsl","⫽⃥":"nparsl","♭":"flat","♮":"natur","♯":"sharp","¤":"curren","¢":"cent",$:"dollar","£":"pound","¥":"yen","€":"euro","¹":"sup1","½":"half","⅓":"frac13","¼":"frac14","⅕":"frac15","⅙":"frac16","⅛":"frac18","²":"sup2","⅔":"frac23","⅖":"frac25","³":"sup3","¾":"frac34","⅗":"frac35","⅜":"frac38","⅘":"frac45","⅚":"frac56","⅝":"frac58","⅞":"frac78","𝒶":"ascr","𝕒":"aopf","𝔞":"afr","𝔸":"Aopf","𝔄":"Afr","𝒜":"Ascr",ª:"ordf",á:"aacute",Á:"Aacute",à:"agrave",À:"Agrave",ă:"abreve",Ă:"Abreve",â:"acirc",Â:"Acirc",å:"aring",Å:"angst",ä:"auml",Ä:"Auml",ã:"atilde",Ã:"Atilde",ą:"aogon",Ą:"Aogon",ā:"amacr",Ā:"Amacr",æ:"aelig",Æ:"AElig","𝒷":"bscr","𝕓":"bopf","𝔟":"bfr","𝔹":"Bopf",ℬ:"Bscr","𝔅":"Bfr","𝔠":"cfr","𝒸":"cscr","𝕔":"copf",ℭ:"Cfr","𝒞":"Cscr",ℂ:"Copf",ć:"cacute",Ć:"Cacute",ĉ:"ccirc",Ĉ:"Ccirc",č:"ccaron",Č:"Ccaron",ċ:"cdot",Ċ:"Cdot",ç:"ccedil",Ç:"Ccedil","℅":"incare","𝔡":"dfr","ⅆ":"dd","𝕕":"dopf","𝒹":"dscr","𝒟":"Dscr","𝔇":"Dfr","ⅅ":"DD","𝔻":"Dopf",ď:"dcaron",Ď:"Dcaron",đ:"dstrok",Đ:"Dstrok",ð:"eth",Ð:"ETH","ⅇ":"ee",ℯ:"escr","𝔢":"efr","𝕖":"eopf",ℰ:"Escr","𝔈":"Efr","𝔼":"Eopf",é:"eacute",É:"Eacute",è:"egrave",È:"Egrave",ê:"ecirc",Ê:"Ecirc",ě:"ecaron",Ě:"Ecaron",ë:"euml",Ë:"Euml",ė:"edot",Ė:"Edot",ę:"eogon",Ę:"Eogon",ē:"emacr",Ē:"Emacr","𝔣":"ffr","𝕗":"fopf","𝒻":"fscr","𝔉":"Ffr","𝔽":"Fopf",ℱ:"Fscr",ﬀ:"fflig",ﬃ:"ffilig",ﬄ:"ffllig",ﬁ:"filig",fj:"fjlig",ﬂ:"fllig",ƒ:"fnof",ℊ:"gscr","𝕘":"gopf","𝔤":"gfr","𝒢":"Gscr","𝔾":"Gopf","𝔊":"Gfr",ǵ:"gacute",ğ:"gbreve",Ğ:"Gbreve",ĝ:"gcirc",Ĝ:"Gcirc",ġ:"gdot",Ġ:"Gdot",Ģ:"Gcedil","𝔥":"hfr",ℎ:"planckh","𝒽":"hscr","𝕙":"hopf",ℋ:"Hscr",ℌ:"Hfr",ℍ:"Hopf",ĥ:"hcirc",Ĥ:"Hcirc",ℏ:"hbar",ħ:"hstrok",Ħ:"Hstrok","𝕚":"iopf","𝔦":"ifr","𝒾":"iscr","ⅈ":"ii","𝕀":"Iopf",ℐ:"Iscr",ℑ:"Im",í:"iacute",Í:"Iacute",ì:"igrave",Ì:"Igrave",î:"icirc",Î:"Icirc",ï:"iuml",Ï:"Iuml",ĩ:"itilde",Ĩ:"Itilde",İ:"Idot",į:"iogon",Į:"Iogon",ī:"imacr",Ī:"Imacr",ĳ:"ijlig",Ĳ:"IJlig",ı:"imath","𝒿":"jscr","𝕛":"jopf","𝔧":"jfr","𝒥":"Jscr","𝔍":"Jfr","𝕁":"Jopf",ĵ:"jcirc",Ĵ:"Jcirc","ȷ":"jmath","𝕜":"kopf","𝓀":"kscr","𝔨":"kfr","𝒦":"Kscr","𝕂":"Kopf","𝔎":"Kfr",ķ:"kcedil",Ķ:"Kcedil","𝔩":"lfr","𝓁":"lscr",ℓ:"ell","𝕝":"lopf",ℒ:"Lscr","𝔏":"Lfr","𝕃":"Lopf",ĺ:"lacute",Ĺ:"Lacute",ľ:"lcaron",Ľ:"Lcaron",ļ:"lcedil",Ļ:"Lcedil",ł:"lstrok",Ł:"Lstrok",ŀ:"lmidot",Ŀ:"Lmidot","𝔪":"mfr","𝕞":"mopf","𝓂":"mscr","𝔐":"Mfr","𝕄":"Mopf",ℳ:"Mscr","𝔫":"nfr","𝕟":"nopf","𝓃":"nscr",ℕ:"Nopf","𝒩":"Nscr","𝔑":"Nfr",ń:"nacute",Ń:"Nacute",ň:"ncaron",Ň:"Ncaron",ñ:"ntilde",Ñ:"Ntilde",ņ:"ncedil",Ņ:"Ncedil","№":"numero",ŋ:"eng",Ŋ:"ENG","𝕠":"oopf","𝔬":"ofr",ℴ:"oscr","𝒪":"Oscr","𝔒":"Ofr","𝕆":"Oopf",º:"ordm",ó:"oacute",Ó:"Oacute",ò:"ograve",Ò:"Ograve",ô:"ocirc",Ô:"Ocirc",ö:"ouml",Ö:"Ouml",ő:"odblac",Ő:"Odblac",õ:"otilde",Õ:"Otilde",ø:"oslash",Ø:"Oslash",ō:"omacr",Ō:"Omacr",œ:"oelig",Œ:"OElig","𝔭":"pfr","𝓅":"pscr","𝕡":"popf",ℙ:"Popf","𝔓":"Pfr","𝒫":"Pscr","𝕢":"qopf","𝔮":"qfr","𝓆":"qscr","𝒬":"Qscr","𝔔":"Qfr",ℚ:"Qopf",ĸ:"kgreen","𝔯":"rfr","𝕣":"ropf","𝓇":"rscr",ℛ:"Rscr",ℜ:"Re",ℝ:"Ropf",ŕ:"racute",Ŕ:"Racute",ř:"rcaron",Ř:"Rcaron",ŗ:"rcedil",Ŗ:"Rcedil","𝕤":"sopf","𝓈":"sscr","𝔰":"sfr","𝕊":"Sopf","𝔖":"Sfr","𝒮":"Sscr","Ⓢ":"oS",ś:"sacute",Ś:"Sacute",ŝ:"scirc",Ŝ:"Scirc",š:"scaron",Š:"Scaron",ş:"scedil",Ş:"Scedil",ß:"szlig","𝔱":"tfr","𝓉":"tscr","𝕥":"topf","𝒯":"Tscr","𝔗":"Tfr","𝕋":"Topf",ť:"tcaron",Ť:"Tcaron",ţ:"tcedil",Ţ:"Tcedil","™":"trade",ŧ:"tstrok",Ŧ:"Tstrok","𝓊":"uscr","𝕦":"uopf","𝔲":"ufr","𝕌":"Uopf","𝔘":"Ufr","𝒰":"Uscr",ú:"uacute",Ú:"Uacute",ù:"ugrave",Ù:"Ugrave",ŭ:"ubreve",Ŭ:"Ubreve",û:"ucirc",Û:"Ucirc",ů:"uring",Ů:"Uring",ü:"uuml",Ü:"Uuml",ű:"udblac",Ű:"Udblac",ũ:"utilde",Ũ:"Utilde",ų:"uogon",Ų:"Uogon",ū:"umacr",Ū:"Umacr","𝔳":"vfr","𝕧":"vopf","𝓋":"vscr","𝔙":"Vfr","𝕍":"Vopf","𝒱":"Vscr","𝕨":"wopf","𝓌":"wscr","𝔴":"wfr","𝒲":"Wscr","𝕎":"Wopf","𝔚":"Wfr",ŵ:"wcirc",Ŵ:"Wcirc","𝔵":"xfr","𝓍":"xscr","𝕩":"xopf","𝕏":"Xopf","𝔛":"Xfr","𝒳":"Xscr","𝔶":"yfr","𝓎":"yscr","𝕪":"yopf","𝒴":"Yscr","𝔜":"Yfr","𝕐":"Yopf",ý:"yacute",Ý:"Yacute",ŷ:"ycirc",Ŷ:"Ycirc",ÿ:"yuml",Ÿ:"Yuml","𝓏":"zscr","𝔷":"zfr","𝕫":"zopf",ℨ:"Zfr",ℤ:"Zopf","𝒵":"Zscr",ź:"zacute",Ź:"Zacute",ž:"zcaron",Ž:"Zcaron",ż:"zdot",Ż:"Zdot",Ƶ:"imped",þ:"thorn",Þ:"THORN",ŉ:"napos",α:"alpha",Α:"Alpha",β:"beta",Β:"Beta",γ:"gamma",Γ:"Gamma",δ:"delta",Δ:"Delta",ε:"epsi","ϵ":"epsiv",Ε:"Epsilon",ϝ:"gammad",Ϝ:"Gammad",ζ:"zeta",Ζ:"Zeta",η:"eta",Η:"Eta",θ:"theta",ϑ:"thetav",Θ:"Theta",ι:"iota",Ι:"Iota",κ:"kappa",ϰ:"kappav",Κ:"Kappa",λ:"lambda",Λ:"Lambda",μ:"mu",µ:"micro",Μ:"Mu",ν:"nu",Ν:"Nu",ξ:"xi",Ξ:"Xi",ο:"omicron",Ο:"Omicron",π:"pi",ϖ:"piv",Π:"Pi",ρ:"rho",ϱ:"rhov",Ρ:"Rho",σ:"sigma",Σ:"Sigma",ς:"sigmaf",τ:"tau",Τ:"Tau",υ:"upsi",Υ:"Upsilon",ϒ:"Upsi",φ:"phi",ϕ:"phiv",Φ:"Phi",χ:"chi",Χ:"Chi",ψ:"psi",Ψ:"Psi",ω:"omega",Ω:"ohm",а:"acy",А:"Acy",б:"bcy",Б:"Bcy",в:"vcy",В:"Vcy",г:"gcy",Г:"Gcy",ѓ:"gjcy",Ѓ:"GJcy",д:"dcy",Д:"Dcy",ђ:"djcy",Ђ:"DJcy",е:"iecy",Е:"IEcy",ё:"iocy",Ё:"IOcy",є:"jukcy",Є:"Jukcy",ж:"zhcy",Ж:"ZHcy",з:"zcy",З:"Zcy",ѕ:"dscy",Ѕ:"DScy",и:"icy",И:"Icy",і:"iukcy",І:"Iukcy",ї:"yicy",Ї:"YIcy",й:"jcy",Й:"Jcy",ј:"jsercy",Ј:"Jsercy",к:"kcy",К:"Kcy",ќ:"kjcy",Ќ:"KJcy",л:"lcy",Л:"Lcy",љ:"ljcy",Љ:"LJcy",м:"mcy",М:"Mcy",н:"ncy",Н:"Ncy",њ:"njcy",Њ:"NJcy",о:"ocy",О:"Ocy",п:"pcy",П:"Pcy",р:"rcy",Р:"Rcy",с:"scy",С:"Scy",т:"tcy",Т:"Tcy",ћ:"tshcy",Ћ:"TSHcy",у:"ucy",У:"Ucy",ў:"ubrcy",Ў:"Ubrcy",ф:"fcy",Ф:"Fcy",х:"khcy",Х:"KHcy",ц:"tscy",Ц:"TScy",ч:"chcy",Ч:"CHcy",џ:"dzcy",Џ:"DZcy",ш:"shcy",Ш:"SHcy",щ:"shchcy",Щ:"SHCHcy",ъ:"hardcy",Ъ:"HARDcy",ы:"ycy",Ы:"Ycy",ь:"softcy",Ь:"SOFTcy",э:"ecy",Э:"Ecy",ю:"yucy",Ю:"YUcy",я:"yacy",Я:"YAcy",ℵ:"aleph",ℶ:"beth",ℷ:"gimel",ℸ:"daleth"},h=/["&'<>`]/g,m={'"':"&quot;","&":"&amp;","'":"&#x27;","<":"&lt;",">":"&gt;","`":"&#x60;"},f=/&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/,v=/[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,u=/&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g,$={aacute:"á",Aacute:"Á",abreve:"ă",Abreve:"Ă",ac:"∾",acd:"∿",acE:"∾̳",acirc:"â",Acirc:"Â",acute:"´",acy:"а",Acy:"А",aelig:"æ",AElig:"Æ",af:"⁡",afr:"𝔞",Afr:"𝔄",agrave:"à",Agrave:"À",alefsym:"ℵ",aleph:"ℵ",alpha:"α",Alpha:"Α",amacr:"ā",Amacr:"Ā",amalg:"⨿",amp:"&",AMP:"&",and:"∧",And:"⩓",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",aogon:"ą",Aogon:"Ą",aopf:"𝕒",Aopf:"𝔸",ap:"≈",apacir:"⩯",ape:"≊",apE:"⩰",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",aring:"å",Aring:"Å",ascr:"𝒶",Ascr:"𝒜",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",bcy:"б",Bcy:"Б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",beta:"β",Beta:"Β",beth:"ℶ",between:"≬",bfr:"𝔟",Bfr:"𝔅",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bnot:"⌐",bNot:"⫭",bopf:"𝕓",Bopf:"𝔹",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxhD:"╥",boxHd:"╤",boxHD:"╦",boxhu:"┴",boxhU:"╨",boxHu:"╧",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpe:"≏",bumpE:"⪮",bumpeq:"≏",Bumpeq:"≎",cacute:"ć",Cacute:"Ć",cap:"∩",Cap:"⋒",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",ccaron:"č",Ccaron:"Č",ccedil:"ç",Ccedil:"Ç",ccirc:"ĉ",Ccirc:"Ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",cdot:"ċ",Cdot:"Ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",chcy:"ч",CHcy:"Ч",check:"✓",checkmark:"✓",chi:"χ",Chi:"Χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cire:"≗",cirE:"⧃",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",colone:"≔",Colone:"⩴",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",cscr:"𝒸",Cscr:"𝒞",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cup:"∪",Cup:"⋓",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",dArr:"⇓",Darr:"↡",dash:"‐",dashv:"⊣",Dashv:"⫤",dbkarow:"⤏",dblac:"˝",dcaron:"ď",Dcaron:"Ď",dcy:"д",Dcy:"Д",dd:"ⅆ",DD:"ⅅ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",delta:"δ",Delta:"Δ",demptyv:"⦱",dfisht:"⥿",dfr:"𝔡",Dfr:"𝔇",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",djcy:"ђ",DJcy:"Ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",dopf:"𝕕",Dopf:"𝔻",dot:"˙",Dot:"¨",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",downarrow:"↓",Downarrow:"⇓",DownArrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",dscr:"𝒹",Dscr:"𝒟",dscy:"ѕ",DScy:"Ѕ",dsol:"⧶",dstrok:"đ",Dstrok:"Đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",dzcy:"џ",DZcy:"Џ",dzigrarr:"⟿",eacute:"é",Eacute:"É",easter:"⩮",ecaron:"ě",Ecaron:"Ě",ecir:"≖",ecirc:"ê",Ecirc:"Ê",ecolon:"≕",ecy:"э",Ecy:"Э",eDDot:"⩷",edot:"ė",eDot:"≑",Edot:"Ė",ee:"ⅇ",efDot:"≒",efr:"𝔢",Efr:"𝔈",eg:"⪚",egrave:"è",Egrave:"È",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",emacr:"ē",Emacr:"Ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",eng:"ŋ",ENG:"Ŋ",ensp:" ",eogon:"ę",Eogon:"Ę",eopf:"𝕖",Eopf:"𝔼",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",epsilon:"ε",Epsilon:"Ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",esim:"≂",Esim:"⩳",eta:"η",Eta:"Η",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",fcy:"ф",Fcy:"Ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",ffr:"𝔣",Ffr:"𝔉",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",fopf:"𝕗",Fopf:"𝔽",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",gamma:"γ",Gamma:"Γ",gammad:"ϝ",Gammad:"Ϝ",gap:"⪆",gbreve:"ğ",Gbreve:"Ğ",Gcedil:"Ģ",gcirc:"ĝ",Gcirc:"Ĝ",gcy:"г",Gcy:"Г",gdot:"ġ",Gdot:"Ġ",ge:"≥",gE:"≧",gel:"⋛",gEl:"⪌",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",gfr:"𝔤",Gfr:"𝔊",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",gjcy:"ѓ",GJcy:"Ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",gopf:"𝕘",Gopf:"𝔾",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",gscr:"ℊ",Gscr:"𝒢",gsim:"≳",gsime:"⪎",gsiml:"⪐",gt:">",Gt:"≫",GT:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",hardcy:"ъ",HARDcy:"Ъ",harr:"↔",hArr:"⇔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",hcirc:"ĥ",Hcirc:"Ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",hstrok:"ħ",Hstrok:"Ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",iacute:"í",Iacute:"Í",ic:"⁣",icirc:"î",Icirc:"Î",icy:"и",Icy:"И",Idot:"İ",iecy:"е",IEcy:"Е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",igrave:"ì",Igrave:"Ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",ijlig:"ĳ",IJlig:"Ĳ",Im:"ℑ",imacr:"ī",Imacr:"Ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",int:"∫",Int:"∬",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",iocy:"ё",IOcy:"Ё",iogon:"į",Iogon:"Į",iopf:"𝕚",Iopf:"𝕀",iota:"ι",Iota:"Ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",itilde:"ĩ",Itilde:"Ĩ",iukcy:"і",Iukcy:"І",iuml:"ï",Iuml:"Ï",jcirc:"ĵ",Jcirc:"Ĵ",jcy:"й",Jcy:"Й",jfr:"𝔧",Jfr:"𝔍",jmath:"ȷ",jopf:"𝕛",Jopf:"𝕁",jscr:"𝒿",Jscr:"𝒥",jsercy:"ј",Jsercy:"Ј",jukcy:"є",Jukcy:"Є",kappa:"κ",Kappa:"Κ",kappav:"ϰ",kcedil:"ķ",Kcedil:"Ķ",kcy:"к",Kcy:"К",kfr:"𝔨",Kfr:"𝔎",kgreen:"ĸ",khcy:"х",KHcy:"Х",kjcy:"ќ",KJcy:"Ќ",kopf:"𝕜",Kopf:"𝕂",kscr:"𝓀",Kscr:"𝒦",lAarr:"⇚",lacute:"ĺ",Lacute:"Ĺ",laemptyv:"⦴",lagran:"ℒ",lambda:"λ",Lambda:"Λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larr:"←",lArr:"⇐",Larr:"↞",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",latail:"⤙",lAtail:"⤛",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",lcaron:"ľ",Lcaron:"Ľ",lcedil:"ļ",Lcedil:"Ļ",lceil:"⌈",lcub:"{",lcy:"л",Lcy:"Л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",leftarrow:"←",Leftarrow:"⇐",LeftArrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",Leftrightarrow:"⇔",LeftRightArrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",leg:"⋚",lEg:"⪋",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",lfr:"𝔩",Lfr:"𝔏",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",ljcy:"љ",LJcy:"Љ",ll:"≪",Ll:"⋘",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",lmidot:"ŀ",Lmidot:"Ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",Longleftarrow:"⟸",LongLeftArrow:"⟵",longleftrightarrow:"⟷",Longleftrightarrow:"⟺",LongLeftRightArrow:"⟷",longmapsto:"⟼",longrightarrow:"⟶",Longrightarrow:"⟹",LongRightArrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",lopf:"𝕝",Lopf:"𝕃",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",lstrok:"ł",Lstrok:"Ł",lt:"<",Lt:"≪",LT:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",Map:"⤅",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",mcy:"м",Mcy:"М",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",mfr:"𝔪",Mfr:"𝔐",mho:"℧",micro:"µ",mid:"∣",midast:"*",midcir:"⫰",middot:"·",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",mopf:"𝕞",Mopf:"𝕄",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",mu:"μ",Mu:"Μ",multimap:"⊸",mumap:"⊸",nabla:"∇",nacute:"ń",Nacute:"Ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",ncaron:"ň",Ncaron:"Ň",ncedil:"ņ",Ncedil:"Ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",ncy:"н",Ncy:"Н",ndash:"–",ne:"≠",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:`
`,nexist:"∄",nexists:"∄",nfr:"𝔫",Nfr:"𝔑",nge:"≱",ngE:"≧̸",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",ngt:"≯",nGt:"≫⃒",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",njcy:"њ",NJcy:"Њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nle:"≰",nlE:"≦̸",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nlt:"≮",nLt:"≪⃒",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",not:"¬",Not:"⫬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrarr:"↛",nrArr:"⇏",nrarrc:"⤳̸",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",nscr:"𝓃",Nscr:"𝒩",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsube:"⊈",nsubE:"⫅̸",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupe:"⊉",nsupE:"⫆̸",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",ntilde:"ñ",Ntilde:"Ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",nu:"ν",Nu:"Ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",oacute:"ó",Oacute:"Ó",oast:"⊛",ocir:"⊚",ocirc:"ô",Ocirc:"Ô",ocy:"о",Ocy:"О",odash:"⊝",odblac:"ő",Odblac:"Ő",odiv:"⨸",odot:"⊙",odsold:"⦼",oelig:"œ",OElig:"Œ",ofcir:"⦿",ofr:"𝔬",Ofr:"𝔒",ogon:"˛",ograve:"ò",Ograve:"Ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",omacr:"ō",Omacr:"Ō",omega:"ω",Omega:"Ω",omicron:"ο",Omicron:"Ο",omid:"⦶",ominus:"⊖",oopf:"𝕠",Oopf:"𝕆",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",or:"∨",Or:"⩔",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",oscr:"ℴ",Oscr:"𝒪",oslash:"ø",Oslash:"Ø",osol:"⊘",otilde:"õ",Otilde:"Õ",otimes:"⊗",Otimes:"⨷",otimesas:"⨶",ouml:"ö",Ouml:"Ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"¶",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",pcy:"п",Pcy:"П",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",pfr:"𝔭",Pfr:"𝔓",phi:"φ",Phi:"Φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",pi:"π",Pi:"Π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",pr:"≺",Pr:"⪻",prap:"⪷",prcue:"≼",pre:"⪯",prE:"⪳",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",pscr:"𝓅",Pscr:"𝒫",psi:"ψ",Psi:"Ψ",puncsp:" ",qfr:"𝔮",Qfr:"𝔔",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",qscr:"𝓆",Qscr:"𝒬",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",racute:"ŕ",Racute:"Ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarr:"→",rArr:"⇒",Rarr:"↠",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",rarrtl:"↣",Rarrtl:"⤖",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",rcaron:"ř",Rcaron:"Ř",rcedil:"ŗ",Rcedil:"Ŗ",rceil:"⌉",rcub:"}",rcy:"р",Rcy:"Р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",rho:"ρ",Rho:"Ρ",rhov:"ϱ",RightAngleBracket:"⟩",rightarrow:"→",Rightarrow:"⇒",RightArrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",sacute:"ś",Sacute:"Ś",sbquo:"‚",sc:"≻",Sc:"⪼",scap:"⪸",scaron:"š",Scaron:"Š",sccue:"≽",sce:"⪰",scE:"⪴",scedil:"ş",Scedil:"Ş",scirc:"ŝ",Scirc:"Ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",scy:"с",Scy:"С",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",sfr:"𝔰",Sfr:"𝔖",sfrown:"⌢",sharp:"♯",shchcy:"щ",SHCHcy:"Щ",shcy:"ш",SHcy:"Ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",sigma:"σ",Sigma:"Σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",softcy:"ь",SOFTcy:"Ь",sol:"/",solb:"⧄",solbar:"⌿",sopf:"𝕤",Sopf:"𝕊",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",sscr:"𝓈",Sscr:"𝒮",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",star:"☆",Star:"⋆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",sube:"⊆",subE:"⫅",subedot:"⫃",submult:"⫁",subne:"⊊",subnE:"⫋",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup:"⊃",Sup:"⋑",sup1:"¹",sup2:"²",sup3:"³",supdot:"⪾",supdsub:"⫘",supe:"⊇",supE:"⫆",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supne:"⊋",supnE:"⫌",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"	",target:"⌖",tau:"τ",Tau:"Τ",tbrk:"⎴",tcaron:"ť",Tcaron:"Ť",tcedil:"ţ",Tcedil:"Ţ",tcy:"т",Tcy:"Т",tdot:"⃛",telrec:"⌕",tfr:"𝔱",Tfr:"𝔗",there4:"∴",therefore:"∴",Therefore:"∴",theta:"θ",Theta:"Θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",thorn:"þ",THORN:"Þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"×",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",topf:"𝕥",Topf:"𝕋",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",tscr:"𝓉",Tscr:"𝒯",tscy:"ц",TScy:"Ц",tshcy:"ћ",TSHcy:"Ћ",tstrok:"ŧ",Tstrok:"Ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",uacute:"ú",Uacute:"Ú",uarr:"↑",uArr:"⇑",Uarr:"↟",Uarrocir:"⥉",ubrcy:"ў",Ubrcy:"Ў",ubreve:"ŭ",Ubreve:"Ŭ",ucirc:"û",Ucirc:"Û",ucy:"у",Ucy:"У",udarr:"⇅",udblac:"ű",Udblac:"Ű",udhar:"⥮",ufisht:"⥾",ufr:"𝔲",Ufr:"𝔘",ugrave:"ù",Ugrave:"Ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",umacr:"ū",Umacr:"Ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",uogon:"ų",Uogon:"Ų",uopf:"𝕦",Uopf:"𝕌",uparrow:"↑",Uparrow:"⇑",UpArrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",updownarrow:"↕",Updownarrow:"⇕",UpDownArrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",upsilon:"υ",Upsilon:"Υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",uring:"ů",Uring:"Ů",urtri:"◹",uscr:"𝓊",Uscr:"𝒰",utdot:"⋰",utilde:"ũ",Utilde:"Ũ",utri:"▵",utrif:"▴",uuarr:"⇈",uuml:"ü",Uuml:"Ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",vcy:"в",Vcy:"В",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",vee:"∨",Vee:"⋁",veebar:"⊻",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",vfr:"𝔳",Vfr:"𝔙",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",vopf:"𝕧",Vopf:"𝕍",vprop:"∝",vrtri:"⊳",vscr:"𝓋",Vscr:"𝒱",vsubne:"⊊︀",vsubnE:"⫋︀",vsupne:"⊋︀",vsupnE:"⫌︀",Vvdash:"⊪",vzigzag:"⦚",wcirc:"ŵ",Wcirc:"Ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",wfr:"𝔴",Wfr:"𝔚",wopf:"𝕨",Wopf:"𝕎",wp:"℘",wr:"≀",wreath:"≀",wscr:"𝓌",Wscr:"𝒲",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",xfr:"𝔵",Xfr:"𝔛",xharr:"⟷",xhArr:"⟺",xi:"ξ",Xi:"Ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",xopf:"𝕩",Xopf:"𝕏",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",xscr:"𝓍",Xscr:"𝒳",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",yacute:"ý",Yacute:"Ý",yacy:"я",YAcy:"Я",ycirc:"ŷ",Ycirc:"Ŷ",ycy:"ы",Ycy:"Ы",yen:"¥",yfr:"𝔶",Yfr:"𝔜",yicy:"ї",YIcy:"Ї",yopf:"𝕪",Yopf:"𝕐",yscr:"𝓎",Yscr:"𝒴",yucy:"ю",YUcy:"Ю",yuml:"ÿ",Yuml:"Ÿ",zacute:"ź",Zacute:"Ź",zcaron:"ž",Zcaron:"Ž",zcy:"з",Zcy:"З",zdot:"ż",Zdot:"Ż",zeetrf:"ℨ",ZeroWidthSpace:"​",zeta:"ζ",Zeta:"Ζ",zfr:"𝔷",Zfr:"ℨ",zhcy:"ж",ZHcy:"Ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",zscr:"𝓏",Zscr:"𝒵",zwj:"‍",zwnj:"‌"},S={aacute:"á",Aacute:"Á",acirc:"â",Acirc:"Â",acute:"´",aelig:"æ",AElig:"Æ",agrave:"à",Agrave:"À",amp:"&",AMP:"&",aring:"å",Aring:"Å",atilde:"ã",Atilde:"Ã",auml:"ä",Auml:"Ä",brvbar:"¦",ccedil:"ç",Ccedil:"Ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",eacute:"é",Eacute:"É",ecirc:"ê",Ecirc:"Ê",egrave:"è",Egrave:"È",eth:"ð",ETH:"Ð",euml:"ë",Euml:"Ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",iacute:"í",Iacute:"Í",icirc:"î",Icirc:"Î",iexcl:"¡",igrave:"ì",Igrave:"Ì",iquest:"¿",iuml:"ï",Iuml:"Ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",ntilde:"ñ",Ntilde:"Ñ",oacute:"ó",Oacute:"Ó",ocirc:"ô",Ocirc:"Ô",ograve:"ò",Ograve:"Ò",ordf:"ª",ordm:"º",oslash:"ø",Oslash:"Ø",otilde:"õ",Otilde:"Õ",ouml:"ö",Ouml:"Ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",thorn:"þ",THORN:"Þ",times:"×",uacute:"ú",Uacute:"Ú",ucirc:"û",Ucirc:"Û",ugrave:"ù",Ugrave:"Ù",uml:"¨",uuml:"ü",Uuml:"Ü",yacute:"ý",Yacute:"Ý",yen:"¥",yuml:"ÿ"},R={0:"�",128:"€",130:"‚",131:"ƒ",132:"„",133:"…",134:"†",135:"‡",136:"ˆ",137:"‰",138:"Š",139:"‹",140:"Œ",142:"Ž",145:"‘",146:"’",147:"“",148:"”",149:"•",150:"–",151:"—",152:"˜",153:"™",154:"š",155:"›",156:"œ",158:"ž",159:"Ÿ"},C=[1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65e3,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111],D=String.fromCharCode,T={},_=T.hasOwnProperty,M=function(E,G){return _.call(E,G)},A=function(E,G){for(var ee=-1,ne=E.length;++ee<ne;)if(E[ee]==G)return!0;return!1},I=function(E,G){if(!E)return G;var ee={},ne;for(ne in G)ee[ne]=M(E,ne)?E[ne]:G[ne];return ee},B=function(E,G){var ee="";return E>=55296&&E<=57343||E>1114111?(G&&Q("character reference outside the permissible Unicode range"),"�"):M(R,E)?(G&&Q("disallowed character reference"),R[E]):(G&&A(C,E)&&Q("disallowed character reference"),E>65535&&(E-=65536,ee+=D(E>>>10&1023|55296),E=56320|E&1023),ee+=D(E),ee)},N=function(E){return"&#x"+E.toString(16).toUpperCase()+";"},L=function(E){return"&#"+E+";"},Q=function(E){throw Error("Parse error: "+E)},V=function(E,G){G=I(G,V.options);var ee=G.strict;ee&&v.test(E)&&Q("forbidden code point");var ne=G.encodeEverything,pe=G.useNamedReferences,H=G.allowUnsafeSymbols,te=G.decimal?L:N,re=function(ie){return te(ie.charCodeAt(0))};return ne?(E=E.replace(s,function(ie){return pe&&M(c,ie)?"&"+c[ie]+";":re(ie)}),pe&&(E=E.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;").replace(/&#x66;&#x6A;/g,"&fjlig;")),pe&&(E=E.replace(d,function(ie){return"&"+c[ie]+";"}))):pe?(H||(E=E.replace(h,function(ie){return"&"+c[ie]+";"})),E=E.replace(/&gt;\u20D2/g,"&nvgt;").replace(/&lt;\u20D2/g,"&nvlt;"),E=E.replace(d,function(ie){return"&"+c[ie]+";"})):H||(E=E.replace(h,re)),E.replace(r,function(ie){var be=ie.charCodeAt(0),_e=ie.charCodeAt(1),he=(be-55296)*1024+_e-56320+65536;return te(he)}).replace(p,re)};V.options={allowUnsafeSymbols:!1,encodeEverything:!1,strict:!1,useNamedReferences:!1,decimal:!1};var De=function(E,G){G=I(G,De.options);var ee=G.strict;return ee&&f.test(E)&&Q("malformed character reference"),E.replace(u,function(ne,pe,H,te,re,ie,be,_e,he){var U,K,pt,nn,Te,Ze;return pe?(Te=pe,$[Te]):H?(Te=H,Ze=te,Ze&&G.isAttributeValue?(ee&&Ze=="="&&Q("`&` did not start a character reference"),ne):(ee&&Q("named character reference was not terminated by a semicolon"),S[Te]+(Ze||""))):re?(pt=re,K=ie,ee&&!K&&Q("character reference was not terminated by a semicolon"),U=parseInt(pt,10),B(U,ee)):be?(nn=be,K=_e,ee&&!K&&Q("character reference was not terminated by a semicolon"),U=parseInt(nn,16),B(U,ee)):(ee&&Q("named character reference was not terminated by a semicolon"),ne)})};De.options={isAttributeValue:!1,strict:!1};var ve=function(E){return E.replace(h,function(G){return m[G]})},qe={version:"1.2.0",encode:V,decode:De,escape:ve,unescape:De};if(i&&!i.nodeType)if(o)o.exports=qe;else for(var Ae in qe)M(qe,Ae)&&(i[Ae]=qe[Ae]);else e.he=qe})(q)})(Bm,An);Object.defineProperty(xn,"__esModule",{value:!0});var js=An,Lm=function(){function n(t,e){t===void 0&&(t=null),this.parentNode=t,this.childNodes=[],Object.defineProperty(this,"range",{enumerable:!1,writable:!0,configurable:!0,value:e??[-1,-1]})}return n.prototype.remove=function(){var t=this;if(this.parentNode){var e=this.parentNode.childNodes;this.parentNode.childNodes=e.filter(function(i){return t!==i}),this.parentNode=null}return this},Object.defineProperty(n.prototype,"innerText",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"textContent",{get:function(){return(0,js.decode)(this.rawText)},set:function(t){this.rawText=(0,js.encode)(t)},enumerable:!1,configurable:!0}),n}();xn.default=Lm;var Yt={};Object.defineProperty(Yt,"__esModule",{value:!0});var ca;(function(n){n[n.ELEMENT_NODE=1]="ELEMENT_NODE",n[n.TEXT_NODE=3]="TEXT_NODE",n[n.COMMENT_NODE=8]="COMMENT_NODE"})(ca||(ca={}));Yt.default=ca;var Hm=q&&q.__extends||function(){var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(i[a]=o[a])},n(t,e)};return function(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");n(t,e);function i(){this.constructor=t}t.prototype=e===null?Object.create(e):(i.prototype=e.prototype,new i)}}(),vd=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(oo,"__esModule",{value:!0});var Pm=vd(xn),Um=vd(Yt),zm=function(n){Hm(t,n);function t(e,i,o){var a=n.call(this,i,o)||this;return a.rawText=e,a.nodeType=Um.default.COMMENT_NODE,a}return t.prototype.clone=function(){return new t(this.rawText,null)},Object.defineProperty(t.prototype,"text",{get:function(){return this.rawText},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"<!--".concat(this.rawText,"-->")},t}(Pm.default);oo.default=zm;var Tt={},Cd={},Td={},Ge={},en={},ao={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.Doctype=n.CDATA=n.Tag=n.Style=n.Script=n.Comment=n.Directive=n.Text=n.Root=n.isTag=n.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=n.ElementType||(n.ElementType={}));function e(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}n.isTag=e,n.Root=t.Root,n.Text=t.Text,n.Directive=t.Directive,n.Comment=t.Comment,n.Script=t.Script,n.Style=t.Style,n.Tag=t.Tag,n.CDATA=t.CDATA,n.Doctype=t.Doctype})(ao);var Z={},Et=q&&q.__extends||function(){var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(i[a]=o[a])},n(t,e)};return function(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");n(t,e);function i(){this.constructor=t}t.prototype=e===null?Object.create(e):(i.prototype=e.prototype,new i)}}(),ei=q&&q.__assign||function(){return ei=Object.assign||function(n){for(var t,e=1,i=arguments.length;e<i;e++){t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},ei.apply(this,arguments)};Object.defineProperty(Z,"__esModule",{value:!0});Z.cloneNode=Z.hasChildren=Z.isDocument=Z.isDirective=Z.isComment=Z.isText=Z.isCDATA=Z.isTag=Z.Element=Z.Document=Z.CDATA=Z.NodeWithChildren=Z.ProcessingInstruction=Z.Comment=Z.Text=Z.DataNode=Z.Node=void 0;var Pe=ao,La=function(){function n(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(n.prototype,"parentNode",{get:function(){return this.parent},set:function(t){this.parent=t},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"previousSibling",{get:function(){return this.prev},set:function(t){this.prev=t},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"nextSibling",{get:function(){return this.next},set:function(t){this.next=t},enumerable:!1,configurable:!0}),n.prototype.cloneNode=function(t){return t===void 0&&(t=!1),Ha(this,t)},n}();Z.Node=La;var ro=function(n){Et(t,n);function t(e){var i=n.call(this)||this;return i.data=e,i}return Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(e){this.data=e},enumerable:!1,configurable:!0}),t}(La);Z.DataNode=ro;var wd=function(n){Et(t,n);function t(){var e=n!==null&&n.apply(this,arguments)||this;return e.type=Pe.ElementType.Text,e}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(ro);Z.Text=wd;var _d=function(n){Et(t,n);function t(){var e=n!==null&&n.apply(this,arguments)||this;return e.type=Pe.ElementType.Comment,e}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(ro);Z.Comment=_d;var Rd=function(n){Et(t,n);function t(e,i){var o=n.call(this,i)||this;return o.name=e,o.type=Pe.ElementType.Directive,o}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(ro);Z.ProcessingInstruction=Rd;var so=function(n){Et(t,n);function t(e){var i=n.call(this)||this;return i.children=e,i}return Object.defineProperty(t.prototype,"firstChild",{get:function(){var e;return(e=this.children[0])!==null&&e!==void 0?e:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(e){this.children=e},enumerable:!1,configurable:!0}),t}(La);Z.NodeWithChildren=so;var Dd=function(n){Et(t,n);function t(){var e=n!==null&&n.apply(this,arguments)||this;return e.type=Pe.ElementType.CDATA,e}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(so);Z.CDATA=Dd;var Ad=function(n){Et(t,n);function t(){var e=n!==null&&n.apply(this,arguments)||this;return e.type=Pe.ElementType.Root,e}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(so);Z.Document=Ad;var Sd=function(n){Et(t,n);function t(e,i,o,a){o===void 0&&(o=[]),a===void 0&&(a=e==="script"?Pe.ElementType.Script:e==="style"?Pe.ElementType.Style:Pe.ElementType.Tag);var r=n.call(this,o)||this;return r.name=e,r.attribs=i,r.type=a,r}return Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(e){this.name=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var e=this;return Object.keys(this.attribs).map(function(i){var o,a;return{name:i,value:e.attribs[i],namespace:(o=e["x-attribsNamespace"])===null||o===void 0?void 0:o[i],prefix:(a=e["x-attribsPrefix"])===null||a===void 0?void 0:a[i]}})},enumerable:!1,configurable:!0}),t}(so);Z.Element=Sd;function $d(n){return(0,Pe.isTag)(n)}Z.isTag=$d;function Md(n){return n.type===Pe.ElementType.CDATA}Z.isCDATA=Md;function xd(n){return n.type===Pe.ElementType.Text}Z.isText=xd;function jd(n){return n.type===Pe.ElementType.Comment}Z.isComment=jd;function qd(n){return n.type===Pe.ElementType.Directive}Z.isDirective=qd;function kd(n){return n.type===Pe.ElementType.Root}Z.isDocument=kd;function Vm(n){return Object.prototype.hasOwnProperty.call(n,"children")}Z.hasChildren=Vm;function Ha(n,t){t===void 0&&(t=!1);var e;if(xd(n))e=new wd(n.data);else if(jd(n))e=new _d(n.data);else if($d(n)){var i=t?Ko(n.children):[],o=new Sd(n.name,ei({},n.attribs),i);i.forEach(function(p){return p.parent=o}),n.namespace!=null&&(o.namespace=n.namespace),n["x-attribsNamespace"]&&(o["x-attribsNamespace"]=ei({},n["x-attribsNamespace"])),n["x-attribsPrefix"]&&(o["x-attribsPrefix"]=ei({},n["x-attribsPrefix"])),e=o}else if(Md(n)){var i=t?Ko(n.children):[],a=new Dd(i);i.forEach(function(d){return d.parent=a}),e=a}else if(kd(n)){var i=t?Ko(n.children):[],r=new Ad(i);i.forEach(function(d){return d.parent=r}),n["x-mode"]&&(r["x-mode"]=n["x-mode"]),e=r}else if(qd(n)){var s=new Rd(n.name,n.data);n["x-name"]!=null&&(s["x-name"]=n["x-name"],s["x-publicId"]=n["x-publicId"],s["x-systemId"]=n["x-systemId"]),e=s}else throw new Error("Not implemented yet: ".concat(n.type));return e.startIndex=n.startIndex,e.endIndex=n.endIndex,n.sourceCodeLocation!=null&&(e.sourceCodeLocation=n.sourceCodeLocation),e}Z.cloneNode=Ha;function Ko(n){for(var t=n.map(function(i){return Ha(i,!0)}),e=1;e<t.length;e++)t[e].prev=t[e-1],t[e-1].next=t[e];return t}(function(n){var t=q&&q.__createBinding||(Object.create?function(s,p,d,c){c===void 0&&(c=d);var h=Object.getOwnPropertyDescriptor(p,d);(!h||("get"in h?!p.__esModule:h.writable||h.configurable))&&(h={enumerable:!0,get:function(){return p[d]}}),Object.defineProperty(s,c,h)}:function(s,p,d,c){c===void 0&&(c=d),s[c]=p[d]}),e=q&&q.__exportStar||function(s,p){for(var d in s)d!=="default"&&!Object.prototype.hasOwnProperty.call(p,d)&&t(p,s,d)};Object.defineProperty(n,"__esModule",{value:!0}),n.DomHandler=void 0;var i=ao,o=Z;e(Z,n);var a={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},r=function(){function s(p,d,c){this.dom=[],this.root=new o.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,typeof d=="function"&&(c=d,d=a),typeof p=="object"&&(d=p,p=void 0),this.callback=p??null,this.options=d??a,this.elementCB=c??null}return s.prototype.onparserinit=function(p){this.parser=p},s.prototype.onreset=function(){this.dom=[],this.root=new o.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},s.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},s.prototype.onerror=function(p){this.handleCallback(p)},s.prototype.onclosetag=function(){this.lastNode=null;var p=this.tagStack.pop();this.options.withEndIndices&&(p.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(p)},s.prototype.onopentag=function(p,d){var c=this.options.xmlMode?i.ElementType.Tag:void 0,h=new o.Element(p,d,void 0,c);this.addNode(h),this.tagStack.push(h)},s.prototype.ontext=function(p){var d=this.lastNode;if(d&&d.type===i.ElementType.Text)d.data+=p,this.options.withEndIndices&&(d.endIndex=this.parser.endIndex);else{var c=new o.Text(p);this.addNode(c),this.lastNode=c}},s.prototype.oncomment=function(p){if(this.lastNode&&this.lastNode.type===i.ElementType.Comment){this.lastNode.data+=p;return}var d=new o.Comment(p);this.addNode(d),this.lastNode=d},s.prototype.oncommentend=function(){this.lastNode=null},s.prototype.oncdatastart=function(){var p=new o.Text(""),d=new o.CDATA([p]);this.addNode(d),p.parent=d,this.lastNode=p},s.prototype.oncdataend=function(){this.lastNode=null},s.prototype.onprocessinginstruction=function(p,d){var c=new o.ProcessingInstruction(p,d);this.addNode(c)},s.prototype.handleCallback=function(p){if(typeof this.callback=="function")this.callback(p,this.dom);else if(p)throw p},s.prototype.addNode=function(p){var d=this.tagStack[this.tagStack.length-1],c=d.children[d.children.length-1];this.options.withStartIndices&&(p.startIndex=this.parser.startIndex),this.options.withEndIndices&&(p.endIndex=this.parser.endIndex),d.children.push(p),c&&(p.prev=c,c.next=p),p.parent=d,this.lastNode=null},s}();n.DomHandler=r,n.default=r})(en);var ri={},Jd={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.Doctype=n.CDATA=n.Tag=n.Style=n.Script=n.Comment=n.Directive=n.Text=n.Root=n.isTag=n.ElementType=void 0;var t;(function(i){i.Root="root",i.Text="text",i.Directive="directive",i.Comment="comment",i.Script="script",i.Style="style",i.Tag="tag",i.CDATA="cdata",i.Doctype="doctype"})(t=n.ElementType||(n.ElementType={}));function e(i){return i.type===t.Tag||i.type===t.Script||i.type===t.Style}n.isTag=e,n.Root=t.Root,n.Text=t.Text,n.Directive=t.Directive,n.Comment=t.Comment,n.Script=t.Script,n.Style=t.Style,n.Tag=t.Tag,n.CDATA=t.CDATA,n.Doctype=t.Doctype})(Jd);var Id={},ha={},Pa={};Object.defineProperty(Pa,"__esModule",{value:!0});Pa.default=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map(function(n){return n.charCodeAt(0)}));var Ua={};Object.defineProperty(Ua,"__esModule",{value:!0});Ua.default=new Uint16Array("Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map(function(n){return n.charCodeAt(0)}));var ga={};(function(n){var t;Object.defineProperty(n,"__esModule",{value:!0}),n.replaceCodePoint=n.fromCodePoint=void 0;var e=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);n.fromCodePoint=(t=String.fromCodePoint)!==null&&t!==void 0?t:function(a){var r="";return a>65535&&(a-=65536,r+=String.fromCharCode(a>>>10&1023|55296),a=56320|a&1023),r+=String.fromCharCode(a),r};function i(a){var r;return a>=55296&&a<=57343||a>1114111?65533:(r=e.get(a))!==null&&r!==void 0?r:a}n.replaceCodePoint=i;function o(a){return(0,n.fromCodePoint)(i(a))}n.default=o})(ga);(function(n){var t=q&&q.__importDefault||function(u){return u&&u.__esModule?u:{default:u}};Object.defineProperty(n,"__esModule",{value:!0}),n.decodeXML=n.decodeHTMLStrict=n.decodeHTML=n.determineBranch=n.BinTrieFlags=n.fromCodePoint=n.replaceCodePoint=n.decodeCodePoint=n.xmlDecodeTree=n.htmlDecodeTree=void 0;var e=t(Pa);n.htmlDecodeTree=e.default;var i=t(Ua);n.xmlDecodeTree=i.default;var o=t(ga);n.decodeCodePoint=o.default;var a=ga;Object.defineProperty(n,"replaceCodePoint",{enumerable:!0,get:function(){return a.replaceCodePoint}}),Object.defineProperty(n,"fromCodePoint",{enumerable:!0,get:function(){return a.fromCodePoint}});var r;(function(u){u[u.NUM=35]="NUM",u[u.SEMI=59]="SEMI",u[u.ZERO=48]="ZERO",u[u.NINE=57]="NINE",u[u.LOWER_A=97]="LOWER_A",u[u.LOWER_F=102]="LOWER_F",u[u.LOWER_X=120]="LOWER_X",u[u.To_LOWER_BIT=32]="To_LOWER_BIT"})(r||(r={}));var s;(function(u){u[u.VALUE_LENGTH=49152]="VALUE_LENGTH",u[u.BRANCH_LENGTH=16256]="BRANCH_LENGTH",u[u.JUMP_TABLE=127]="JUMP_TABLE"})(s=n.BinTrieFlags||(n.BinTrieFlags={}));function p(u){return function(S,R){for(var C="",D=0,T=0;(T=S.indexOf("&",T))>=0;){if(C+=S.slice(D,T),D=T,T+=1,S.charCodeAt(T)===r.NUM){var _=T+1,M=10,A=S.charCodeAt(_);(A|r.To_LOWER_BIT)===r.LOWER_X&&(M=16,T+=1,_+=1);do A=S.charCodeAt(++T);while(A>=r.ZERO&&A<=r.NINE||M===16&&(A|r.To_LOWER_BIT)>=r.LOWER_A&&(A|r.To_LOWER_BIT)<=r.LOWER_F);if(_!==T){var I=S.substring(_,T),B=parseInt(I,M);if(S.charCodeAt(T)===r.SEMI)T+=1;else if(R)continue;C+=(0,o.default)(B),D=T}continue}for(var N=0,L=1,Q=0,V=u[Q];T<S.length&&(Q=d(u,V,Q+1,S.charCodeAt(T)),!(Q<0));T++,L++){V=u[Q];var De=V&s.VALUE_LENGTH;if(De){(!R||S.charCodeAt(T)===r.SEMI)&&(N=Q,L=0);var ve=(De>>14)-1;if(ve===0)break;Q+=ve}}if(N!==0){var ve=(u[N]&s.VALUE_LENGTH)>>14;C+=ve===1?String.fromCharCode(u[N]&~s.VALUE_LENGTH):ve===2?String.fromCharCode(u[N+1]):String.fromCharCode(u[N+1],u[N+2]),D=T-L+1}}return C+S.slice(D)}}function d(u,$,S,R){var C=($&s.BRANCH_LENGTH)>>7,D=$&s.JUMP_TABLE;if(C===0)return D!==0&&R===D?S:-1;if(D){var T=R-D;return T<0||T>=C?-1:u[S+T]-1}for(var _=S,M=_+C-1;_<=M;){var A=_+M>>>1,I=u[A];if(I<R)_=A+1;else if(I>R)M=A-1;else return u[A+C]}return-1}n.determineBranch=d;var c=p(e.default),h=p(i.default);function m(u){return c(u,!1)}n.decodeHTML=m;function f(u){return c(u,!0)}n.decodeHTMLStrict=f;function v(u){return h(u,!0)}n.decodeXML=v})(ha);var Zt={},za={};Object.defineProperty(za,"__esModule",{value:!0});function xi(n){for(var t=1;t<n.length;t++)n[t][0]+=n[t-1][0]+1;return n}za.default=new Map(xi([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(xi([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(xi([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(xi([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]));var zi={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.escapeText=n.escapeAttribute=n.escapeUTF8=n.escape=n.encodeXML=n.getCodePoint=n.xmlReplacer=void 0,n.xmlReplacer=/["&'<>$\x80-\uFFFF]/g;var t=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]);n.getCodePoint=String.prototype.codePointAt!=null?function(o,a){return o.codePointAt(a)}:function(o,a){return(o.charCodeAt(a)&64512)===55296?(o.charCodeAt(a)-55296)*1024+o.charCodeAt(a+1)-56320+65536:o.charCodeAt(a)};function e(o){for(var a="",r=0,s;(s=n.xmlReplacer.exec(o))!==null;){var p=s.index,d=o.charCodeAt(p),c=t.get(d);c!==void 0?(a+=o.substring(r,p)+c,r=p+1):(a+="".concat(o.substring(r,p),"&#x").concat((0,n.getCodePoint)(o,p).toString(16),";"),r=n.xmlReplacer.lastIndex+=Number((d&64512)===55296))}return a+o.substr(r)}n.encodeXML=e,n.escape=e;function i(o,a){return function(s){for(var p,d=0,c="";p=o.exec(s);)d!==p.index&&(c+=s.substring(d,p.index)),c+=a.get(p[0].charCodeAt(0)),d=p.index+1;return c+s.substring(d)}}n.escapeUTF8=i(/[&<>'"]/g,t),n.escapeAttribute=i(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),n.escapeText=i(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]))})(zi);var Gm=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Zt,"__esModule",{value:!0});Zt.encodeNonAsciiHTML=Zt.encodeHTML=void 0;var Wm=Gm(za),Ed=zi,Qm=/[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;function Km(n){return Od(Qm,n)}Zt.encodeHTML=Km;function Zm(n){return Od(Ed.xmlReplacer,n)}Zt.encodeNonAsciiHTML=Zm;function Od(n,t){for(var e="",i=0,o;(o=n.exec(t))!==null;){var a=o.index;e+=t.substring(i,a);var r=t.charCodeAt(a),s=Wm.default.get(r);if(typeof s=="object"){if(a+1<t.length){var p=t.charCodeAt(a+1),d=typeof s.n=="number"?s.n===p?s.o:void 0:s.n.get(p);if(d!==void 0){e+=d,i=n.lastIndex+=1;continue}}s=s.v}if(s!==void 0)e+=s,i=a+1;else{var c=(0,Ed.getCodePoint)(t,a);e+="&#x".concat(c.toString(16),";"),i=n.lastIndex+=Number(c!==r)}}return e+t.substr(i)}(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.decodeXMLStrict=n.decodeHTML5Strict=n.decodeHTML4Strict=n.decodeHTML5=n.decodeHTML4=n.decodeHTMLStrict=n.decodeHTML=n.decodeXML=n.encodeHTML5=n.encodeHTML4=n.encodeNonAsciiHTML=n.encodeHTML=n.escapeText=n.escapeAttribute=n.escapeUTF8=n.escape=n.encodeXML=n.encode=n.decodeStrict=n.decode=n.EncodingMode=n.DecodingMode=n.EntityLevel=void 0;var t=ha,e=Zt,i=zi,o;(function(f){f[f.XML=0]="XML",f[f.HTML=1]="HTML"})(o=n.EntityLevel||(n.EntityLevel={}));var a;(function(f){f[f.Legacy=0]="Legacy",f[f.Strict=1]="Strict"})(a=n.DecodingMode||(n.DecodingMode={}));var r;(function(f){f[f.UTF8=0]="UTF8",f[f.ASCII=1]="ASCII",f[f.Extensive=2]="Extensive",f[f.Attribute=3]="Attribute",f[f.Text=4]="Text"})(r=n.EncodingMode||(n.EncodingMode={}));function s(f,v){v===void 0&&(v=o.XML);var u=typeof v=="number"?{level:v}:v;return u.level===o.HTML?u.mode===a.Strict?(0,t.decodeHTMLStrict)(f):(0,t.decodeHTML)(f):(0,t.decodeXML)(f)}n.decode=s;function p(f,v){v===void 0&&(v=o.XML);var u=typeof v=="number"?{level:v}:v;return u.level===o.HTML?u.mode===a.Legacy?(0,t.decodeHTML)(f):(0,t.decodeHTMLStrict)(f):(0,t.decodeXML)(f)}n.decodeStrict=p;function d(f,v){v===void 0&&(v=o.XML);var u=typeof v=="number"?{level:v}:v;return u.mode===r.UTF8?(0,i.escapeUTF8)(f):u.mode===r.Attribute?(0,i.escapeAttribute)(f):u.mode===r.Text?(0,i.escapeText)(f):u.level===o.HTML?u.mode===r.ASCII?(0,e.encodeNonAsciiHTML)(f):(0,e.encodeHTML)(f):(0,i.encodeXML)(f)}n.encode=d;var c=zi;Object.defineProperty(n,"encodeXML",{enumerable:!0,get:function(){return c.encodeXML}}),Object.defineProperty(n,"escape",{enumerable:!0,get:function(){return c.escape}}),Object.defineProperty(n,"escapeUTF8",{enumerable:!0,get:function(){return c.escapeUTF8}}),Object.defineProperty(n,"escapeAttribute",{enumerable:!0,get:function(){return c.escapeAttribute}}),Object.defineProperty(n,"escapeText",{enumerable:!0,get:function(){return c.escapeText}});var h=Zt;Object.defineProperty(n,"encodeHTML",{enumerable:!0,get:function(){return h.encodeHTML}}),Object.defineProperty(n,"encodeNonAsciiHTML",{enumerable:!0,get:function(){return h.encodeNonAsciiHTML}}),Object.defineProperty(n,"encodeHTML4",{enumerable:!0,get:function(){return h.encodeHTML}}),Object.defineProperty(n,"encodeHTML5",{enumerable:!0,get:function(){return h.encodeHTML}});var m=ha;Object.defineProperty(n,"decodeXML",{enumerable:!0,get:function(){return m.decodeXML}}),Object.defineProperty(n,"decodeHTML",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTMLStrict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeHTML4",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTML5",{enumerable:!0,get:function(){return m.decodeHTML}}),Object.defineProperty(n,"decodeHTML4Strict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeHTML5Strict",{enumerable:!0,get:function(){return m.decodeHTMLStrict}}),Object.defineProperty(n,"decodeXMLStrict",{enumerable:!0,get:function(){return m.decodeXML}})})(Id);var Sn={};Object.defineProperty(Sn,"__esModule",{value:!0});Sn.attributeNames=Sn.elementNames=void 0;Sn.elementNames=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map(function(n){return[n.toLowerCase(),n]}));Sn.attributeNames=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map(function(n){return[n.toLowerCase(),n]}));var fn=q&&q.__assign||function(){return fn=Object.assign||function(n){for(var t,e=1,i=arguments.length;e<i;e++){t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},fn.apply(this,arguments)},Xm=q&&q.__createBinding||(Object.create?function(n,t,e,i){i===void 0&&(i=e);var o=Object.getOwnPropertyDescriptor(t,e);(!o||("get"in o?!t.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return t[e]}}),Object.defineProperty(n,i,o)}:function(n,t,e,i){i===void 0&&(i=e),n[i]=t[e]}),Ym=q&&q.__setModuleDefault||(Object.create?function(n,t){Object.defineProperty(n,"default",{enumerable:!0,value:t})}:function(n,t){n.default=t}),ef=q&&q.__importStar||function(n){if(n&&n.__esModule)return n;var t={};if(n!=null)for(var e in n)e!=="default"&&Object.prototype.hasOwnProperty.call(n,e)&&Xm(t,n,e);return Ym(t,n),t};Object.defineProperty(ri,"__esModule",{value:!0});ri.render=void 0;var ut=ef(Jd),Vi=Id,Nd=Sn,tf=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function nf(n){return n.replace(/"/g,"&quot;")}function of(n,t){var e;if(n){var i=((e=t.encodeEntities)!==null&&e!==void 0?e:t.decodeEntities)===!1?nf:t.xmlMode||t.encodeEntities!=="utf8"?Vi.encodeXML:Vi.escapeAttribute;return Object.keys(n).map(function(o){var a,r,s=(a=n[o])!==null&&a!==void 0?a:"";return t.xmlMode==="foreign"&&(o=(r=Nd.attributeNames.get(o))!==null&&r!==void 0?r:o),!t.emptyAttrs&&!t.xmlMode&&s===""?o:"".concat(o,'="').concat(i(s),'"')}).join(" ")}}var qs=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function po(n,t){t===void 0&&(t={});for(var e=("length"in n)?n:[n],i="",o=0;o<e.length;o++)i+=af(e[o],t);return i}ri.render=po;ri.default=po;function af(n,t){switch(n.type){case ut.Root:return po(n.children,t);case ut.Doctype:case ut.Directive:return pf(n);case ut.Comment:return hf(n);case ut.CDATA:return cf(n);case ut.Script:case ut.Style:case ut.Tag:return df(n,t);case ut.Text:return lf(n,t)}}var rf=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),sf=new Set(["svg","math"]);function df(n,t){var e;t.xmlMode==="foreign"&&(n.name=(e=Nd.elementNames.get(n.name))!==null&&e!==void 0?e:n.name,n.parent&&rf.has(n.parent.name)&&(t=fn(fn({},t),{xmlMode:!1}))),!t.xmlMode&&sf.has(n.name)&&(t=fn(fn({},t),{xmlMode:"foreign"}));var i="<".concat(n.name),o=of(n.attribs,t);return o&&(i+=" ".concat(o)),n.children.length===0&&(t.xmlMode?t.selfClosingTags!==!1:t.selfClosingTags&&qs.has(n.name))?(t.xmlMode||(i+=" "),i+="/>"):(i+=">",n.children.length>0&&(i+=po(n.children,t)),(t.xmlMode||!qs.has(n.name))&&(i+="</".concat(n.name,">"))),i}function pf(n){return"<".concat(n.data,">")}function lf(n,t){var e,i=n.data||"";return((e=t.encodeEntities)!==null&&e!==void 0?e:t.decodeEntities)!==!1&&!(!t.xmlMode&&n.parent&&tf.has(n.parent.name))&&(i=t.xmlMode||t.encodeEntities!=="utf8"?(0,Vi.encodeXML)(i):(0,Vi.escapeText)(i)),i}function cf(n){return"<![CDATA[".concat(n.children[0].data,"]]>")}function hf(n){return"<!--".concat(n.data,"-->")}var gf=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Ge,"__esModule",{value:!0});Ge.innerText=Ge.textContent=Ge.getText=Ge.getInnerHTML=Ge.getOuterHTML=void 0;var dt=en,uf=gf(ri),mf=ao;function Fd(n,t){return(0,uf.default)(n,t)}Ge.getOuterHTML=Fd;function ff(n,t){return(0,dt.hasChildren)(n)?n.children.map(function(e){return Fd(e,t)}).join(""):""}Ge.getInnerHTML=ff;function Ni(n){return Array.isArray(n)?n.map(Ni).join(""):(0,dt.isTag)(n)?n.name==="br"?`
`:Ni(n.children):(0,dt.isCDATA)(n)?Ni(n.children):(0,dt.isText)(n)?n.data:""}Ge.getText=Ni;function ua(n){return Array.isArray(n)?n.map(ua).join(""):(0,dt.hasChildren)(n)&&!(0,dt.isComment)(n)?ua(n.children):(0,dt.isText)(n)?n.data:""}Ge.textContent=ua;function ma(n){return Array.isArray(n)?n.map(ma).join(""):(0,dt.hasChildren)(n)&&(n.type===mf.ElementType.Tag||(0,dt.isCDATA)(n))?ma(n.children):(0,dt.isText)(n)?n.data:""}Ge.innerText=ma;var Re={};Object.defineProperty(Re,"__esModule",{value:!0});Re.prevElementSibling=Re.nextElementSibling=Re.getName=Re.hasAttrib=Re.getAttributeValue=Re.getSiblings=Re.getParent=Re.getChildren=void 0;var Va=en;function Bd(n){return(0,Va.hasChildren)(n)?n.children:[]}Re.getChildren=Bd;function Ld(n){return n.parent||null}Re.getParent=Ld;function bf(n){var t,e,i=Ld(n);if(i!=null)return Bd(i);for(var o=[n],a=n.prev,r=n.next;a!=null;)o.unshift(a),t=a,a=t.prev;for(;r!=null;)o.push(r),e=r,r=e.next;return o}Re.getSiblings=bf;function yf(n,t){var e;return(e=n.attribs)===null||e===void 0?void 0:e[t]}Re.getAttributeValue=yf;function vf(n,t){return n.attribs!=null&&Object.prototype.hasOwnProperty.call(n.attribs,t)&&n.attribs[t]!=null}Re.hasAttrib=vf;function Cf(n){return n.name}Re.getName=Cf;function Tf(n){for(var t,e=n.next;e!==null&&!(0,Va.isTag)(e);)t=e,e=t.next;return e}Re.nextElementSibling=Tf;function wf(n){for(var t,e=n.prev;e!==null&&!(0,Va.isTag)(e);)t=e,e=t.prev;return e}Re.prevElementSibling=wf;var He={};Object.defineProperty(He,"__esModule",{value:!0});He.prepend=He.prependChild=He.append=He.appendChild=He.replaceElement=He.removeElement=void 0;function si(n){if(n.prev&&(n.prev.next=n.next),n.next&&(n.next.prev=n.prev),n.parent){var t=n.parent.children;t.splice(t.lastIndexOf(n),1)}}He.removeElement=si;function _f(n,t){var e=t.prev=n.prev;e&&(e.next=t);var i=t.next=n.next;i&&(i.prev=t);var o=t.parent=n.parent;if(o){var a=o.children;a[a.lastIndexOf(n)]=t,n.parent=null}}He.replaceElement=_f;function Rf(n,t){if(si(t),t.next=null,t.parent=n,n.children.push(t)>1){var e=n.children[n.children.length-2];e.next=t,t.prev=e}else t.prev=null}He.appendChild=Rf;function Df(n,t){si(t);var e=n.parent,i=n.next;if(t.next=i,t.prev=n,n.next=t,t.parent=e,i){if(i.prev=t,e){var o=e.children;o.splice(o.lastIndexOf(i),0,t)}}else e&&e.children.push(t)}He.append=Df;function Af(n,t){if(si(t),t.parent=n,t.prev=null,n.children.unshift(t)!==1){var e=n.children[1];e.prev=t,t.next=e}else t.next=null}He.prependChild=Af;function Sf(n,t){si(t);var e=n.parent;if(e){var i=e.children;i.splice(i.indexOf(n),0,t)}n.prev&&(n.prev.next=t),t.parent=e,t.prev=n.prev,t.next=n,n.prev=t}He.prepend=Sf;var Oe={};Object.defineProperty(Oe,"__esModule",{value:!0});Oe.findAll=Oe.existsOne=Oe.findOne=Oe.findOneChild=Oe.find=Oe.filter=void 0;var ii=en;function $f(n,t,e,i){return e===void 0&&(e=!0),i===void 0&&(i=1/0),Array.isArray(t)||(t=[t]),Ga(n,t,e,i)}Oe.filter=$f;function Ga(n,t,e,i){for(var o=[],a=0,r=t;a<r.length;a++){var s=r[a];if(n(s)&&(o.push(s),--i<=0))break;if(e&&(0,ii.hasChildren)(s)&&s.children.length>0){var p=Ga(n,s.children,e,i);if(o.push.apply(o,p),i-=p.length,i<=0)break}}return o}Oe.find=Ga;function Mf(n,t){return t.find(n)}Oe.findOneChild=Mf;function Hd(n,t,e){e===void 0&&(e=!0);for(var i=null,o=0;o<t.length&&!i;o++){var a=t[o];if((0,ii.isTag)(a))n(a)?i=a:e&&a.children.length>0&&(i=Hd(n,a.children,!0));else continue}return i}Oe.findOne=Hd;function Pd(n,t){return t.some(function(e){return(0,ii.isTag)(e)&&(n(e)||e.children.length>0&&Pd(n,e.children))})}Oe.existsOne=Pd;function xf(n,t){for(var e,i=[],o=t.filter(ii.isTag),a;a=o.shift();){var r=(e=a.children)===null||e===void 0?void 0:e.filter(ii.isTag);r&&r.length>0&&o.unshift.apply(o,r),n(a)&&i.push(a)}return i}Oe.findAll=xf;var We={};Object.defineProperty(We,"__esModule",{value:!0});We.getElementsByTagType=We.getElementsByTagName=We.getElementById=We.getElements=We.testElement=void 0;var Wt=en,lo=Oe,Gi={tag_name:function(n){return typeof n=="function"?function(t){return(0,Wt.isTag)(t)&&n(t.name)}:n==="*"?Wt.isTag:function(t){return(0,Wt.isTag)(t)&&t.name===n}},tag_type:function(n){return typeof n=="function"?function(t){return n(t.type)}:function(t){return t.type===n}},tag_contains:function(n){return typeof n=="function"?function(t){return(0,Wt.isText)(t)&&n(t.data)}:function(t){return(0,Wt.isText)(t)&&t.data===n}}};function Ud(n,t){return typeof t=="function"?function(e){return(0,Wt.isTag)(e)&&t(e.attribs[n])}:function(e){return(0,Wt.isTag)(e)&&e.attribs[n]===t}}function jf(n,t){return function(e){return n(e)||t(e)}}function zd(n){var t=Object.keys(n).map(function(e){var i=n[e];return Object.prototype.hasOwnProperty.call(Gi,e)?Gi[e](i):Ud(e,i)});return t.length===0?null:t.reduce(jf)}function qf(n,t){var e=zd(n);return e?e(t):!0}We.testElement=qf;function kf(n,t,e,i){i===void 0&&(i=1/0);var o=zd(n);return o?(0,lo.filter)(o,t,e,i):[]}We.getElements=kf;function Jf(n,t,e){return e===void 0&&(e=!0),Array.isArray(t)||(t=[t]),(0,lo.findOne)(Ud("id",n),t,e)}We.getElementById=Jf;function If(n,t,e,i){return e===void 0&&(e=!0),i===void 0&&(i=1/0),(0,lo.filter)(Gi.tag_name(n),t,e,i)}We.getElementsByTagName=If;function Ef(n,t,e,i){return e===void 0&&(e=!0),i===void 0&&(i=1/0),(0,lo.filter)(Gi.tag_type(n),t,e,i)}We.getElementsByTagType=Ef;var Vd={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.uniqueSort=n.compareDocumentPosition=n.DocumentPosition=n.removeSubsets=void 0;var t=en;function e(r){for(var s=r.length;--s>=0;){var p=r[s];if(s>0&&r.lastIndexOf(p,s-1)>=0){r.splice(s,1);continue}for(var d=p.parent;d;d=d.parent)if(r.includes(d)){r.splice(s,1);break}}return r}n.removeSubsets=e;var i;(function(r){r[r.DISCONNECTED=1]="DISCONNECTED",r[r.PRECEDING=2]="PRECEDING",r[r.FOLLOWING=4]="FOLLOWING",r[r.CONTAINS=8]="CONTAINS",r[r.CONTAINED_BY=16]="CONTAINED_BY"})(i=n.DocumentPosition||(n.DocumentPosition={}));function o(r,s){var p=[],d=[];if(r===s)return 0;for(var c=(0,t.hasChildren)(r)?r:r.parent;c;)p.unshift(c),c=c.parent;for(c=(0,t.hasChildren)(s)?s:s.parent;c;)d.unshift(c),c=c.parent;for(var h=Math.min(p.length,d.length),m=0;m<h&&p[m]===d[m];)m++;if(m===0)return i.DISCONNECTED;var f=p[m-1],v=f.children,u=p[m],$=d[m];return v.indexOf(u)>v.indexOf($)?f===s?i.FOLLOWING|i.CONTAINED_BY:i.FOLLOWING:f===r?i.PRECEDING|i.CONTAINS:i.PRECEDING}n.compareDocumentPosition=o;function a(r){return r=r.filter(function(s,p,d){return!d.includes(s,p+1)}),r.sort(function(s,p){var d=o(s,p);return d&i.PRECEDING?-1:d&i.FOLLOWING?1:0}),r}n.uniqueSort=a})(Vd);var co={};Object.defineProperty(co,"__esModule",{value:!0});co.getFeed=void 0;var Of=Ge,di=We;function Nf(n){var t=Wi(Pf,n);return t?t.name==="feed"?Ff(t):Bf(t):null}co.getFeed=Nf;function Ff(n){var t,e=n.children,i={type:"atom",items:(0,di.getElementsByTagName)("entry",e).map(function(r){var s,p=r.children,d={media:Gd(p)};Le(d,"id","id",p),Le(d,"title","title",p);var c=(s=Wi("link",p))===null||s===void 0?void 0:s.attribs.href;c&&(d.link=c);var h=Qt("summary",p)||Qt("content",p);h&&(d.description=h);var m=Qt("updated",p);return m&&(d.pubDate=new Date(m)),d})};Le(i,"id","id",e),Le(i,"title","title",e);var o=(t=Wi("link",e))===null||t===void 0?void 0:t.attribs.href;o&&(i.link=o),Le(i,"description","subtitle",e);var a=Qt("updated",e);return a&&(i.updated=new Date(a)),Le(i,"author","email",e,!0),i}function Bf(n){var t,e,i=(e=(t=Wi("channel",n.children))===null||t===void 0?void 0:t.children)!==null&&e!==void 0?e:[],o={type:n.name.substr(0,3),id:"",items:(0,di.getElementsByTagName)("item",n.children).map(function(r){var s=r.children,p={media:Gd(s)};Le(p,"id","guid",s),Le(p,"title","title",s),Le(p,"link","link",s),Le(p,"description","description",s);var d=Qt("pubDate",s);return d&&(p.pubDate=new Date(d)),p})};Le(o,"title","title",i),Le(o,"link","link",i),Le(o,"description","description",i);var a=Qt("lastBuildDate",i);return a&&(o.updated=new Date(a)),Le(o,"author","managingEditor",i,!0),o}var Lf=["url","type","lang"],Hf=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function Gd(n){return(0,di.getElementsByTagName)("media:content",n).map(function(t){for(var e=t.attribs,i={medium:e.medium,isDefault:!!e.isDefault},o=0,a=Lf;o<a.length;o++){var r=a[o];e[r]&&(i[r]=e[r])}for(var s=0,p=Hf;s<p.length;s++){var r=p[s];e[r]&&(i[r]=parseInt(e[r],10))}return e.expression&&(i.expression=e.expression),i})}function Wi(n,t){return(0,di.getElementsByTagName)(n,t,!0,1)[0]}function Qt(n,t,e){return e===void 0&&(e=!1),(0,Of.textContent)((0,di.getElementsByTagName)(n,t,e,1)).trim()}function Le(n,t,e,i,o){o===void 0&&(o=!1);var a=Qt(e,i,o);a&&(n[t]=a)}function Pf(n){return n==="rss"||n==="feed"||n==="rdf:RDF"}(function(n){var t=q&&q.__createBinding||(Object.create?function(o,a,r,s){s===void 0&&(s=r);var p=Object.getOwnPropertyDescriptor(a,r);(!p||("get"in p?!a.__esModule:p.writable||p.configurable))&&(p={enumerable:!0,get:function(){return a[r]}}),Object.defineProperty(o,s,p)}:function(o,a,r,s){s===void 0&&(s=r),o[s]=a[r]}),e=q&&q.__exportStar||function(o,a){for(var r in o)r!=="default"&&!Object.prototype.hasOwnProperty.call(a,r)&&t(a,o,r)};Object.defineProperty(n,"__esModule",{value:!0}),n.hasChildren=n.isDocument=n.isComment=n.isText=n.isCDATA=n.isTag=void 0,e(Ge,n),e(Re,n),e(He,n),e(Oe,n),e(We,n),e(Vd,n),e(co,n);var i=en;Object.defineProperty(n,"isTag",{enumerable:!0,get:function(){return i.isTag}}),Object.defineProperty(n,"isCDATA",{enumerable:!0,get:function(){return i.isCDATA}}),Object.defineProperty(n,"isText",{enumerable:!0,get:function(){return i.isText}}),Object.defineProperty(n,"isComment",{enumerable:!0,get:function(){return i.isComment}}),Object.defineProperty(n,"isDocument",{enumerable:!0,get:function(){return i.isDocument}}),Object.defineProperty(n,"hasChildren",{enumerable:!0,get:function(){return i.hasChildren}})})(Td);var jn={trueFunc:function(){return!0},falseFunc:function(){return!1}},kt={},Y;(function(n){n.Attribute="attribute",n.Pseudo="pseudo",n.PseudoElement="pseudo-element",n.Tag="tag",n.Universal="universal",n.Adjacent="adjacent",n.Child="child",n.Descendant="descendant",n.Parent="parent",n.Sibling="sibling",n.ColumnCombinator="column-combinator"})(Y||(Y={}));const Uf={Unknown:null,QuirksMode:"quirks",IgnoreCase:!0,CaseSensitive:!1};var ue;(function(n){n.Any="any",n.Element="element",n.End="end",n.Equals="equals",n.Exists="exists",n.Hyphen="hyphen",n.Not="not",n.Start="start"})(ue||(ue={}));const ks=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,zf=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,Vf=new Map([[126,ue.Element],[94,ue.Start],[36,ue.End],[42,ue.Any],[33,ue.Not],[124,ue.Hyphen]]),Gf=new Set(["has","not","matches","is","where","host","host-context"]);function Wd(n){switch(n.type){case Y.Adjacent:case Y.Child:case Y.Descendant:case Y.Parent:case Y.Sibling:case Y.ColumnCombinator:return!0;default:return!1}}const Wf=new Set(["contains","icontains"]);function Qf(n,t,e){const i=parseInt(t,16)-65536;return i!==i||e?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,i&1023|56320)}function Pn(n){return n.replace(zf,Qf)}function Zo(n){return n===39||n===34}function Js(n){return n===32||n===9||n===10||n===12||n===13}function Kf(n){const t=[],e=Qd(t,`${n}`,0);if(e<n.length)throw new Error(`Unmatched selector: ${n.slice(e)}`);return t}function Qd(n,t,e){let i=[];function o(m){const f=t.slice(e+m).match(ks);if(!f)throw new Error(`Expected name, found ${t.slice(e)}`);const[v]=f;return e+=m+v.length,Pn(v)}function a(m){for(e+=m;e<t.length&&Js(t.charCodeAt(e));)e++}function r(){e+=1;const m=e;let f=1;for(;f>0&&e<t.length;e++)t.charCodeAt(e)===40&&!s(e)?f++:t.charCodeAt(e)===41&&!s(e)&&f--;if(f)throw new Error("Parenthesis not matched");return Pn(t.slice(m,e-1))}function s(m){let f=0;for(;t.charCodeAt(--m)===92;)f++;return(f&1)===1}function p(){if(i.length>0&&Wd(i[i.length-1]))throw new Error("Did not expect successive traversals.")}function d(m){if(i.length>0&&i[i.length-1].type===Y.Descendant){i[i.length-1].type=m;return}p(),i.push({type:m})}function c(m,f){i.push({type:Y.Attribute,name:m,action:f,value:o(1),namespace:null,ignoreCase:"quirks"})}function h(){if(i.length&&i[i.length-1].type===Y.Descendant&&i.pop(),i.length===0)throw new Error("Empty sub-selector");n.push(i)}if(a(0),t.length===e)return e;e:for(;e<t.length;){const m=t.charCodeAt(e);switch(m){case 32:case 9:case 10:case 12:case 13:{(i.length===0||i[0].type!==Y.Descendant)&&(p(),i.push({type:Y.Descendant})),a(1);break}case 62:{d(Y.Child),a(1);break}case 60:{d(Y.Parent),a(1);break}case 126:{d(Y.Sibling),a(1);break}case 43:{d(Y.Adjacent),a(1);break}case 46:{c("class",ue.Element);break}case 35:{c("id",ue.Equals);break}case 91:{a(1);let f,v=null;t.charCodeAt(e)===124?f=o(1):t.startsWith("*|",e)?(v="*",f=o(2)):(f=o(0),t.charCodeAt(e)===124&&t.charCodeAt(e+1)!==61&&(v=f,f=o(1))),a(0);let u=ue.Exists;const $=Vf.get(t.charCodeAt(e));if($){if(u=$,t.charCodeAt(e+1)!==61)throw new Error("Expected `=`");a(2)}else t.charCodeAt(e)===61&&(u=ue.Equals,a(1));let S="",R=null;if(u!=="exists"){if(Zo(t.charCodeAt(e))){const T=t.charCodeAt(e);let _=e+1;for(;_<t.length&&(t.charCodeAt(_)!==T||s(_));)_+=1;if(t.charCodeAt(_)!==T)throw new Error("Attribute value didn't end");S=Pn(t.slice(e+1,_)),e=_+1}else{const T=e;for(;e<t.length&&(!Js(t.charCodeAt(e))&&t.charCodeAt(e)!==93||s(e));)e+=1;S=Pn(t.slice(T,e))}a(0);const D=t.charCodeAt(e)|32;D===115?(R=!1,a(1)):D===105&&(R=!0,a(1))}if(t.charCodeAt(e)!==93)throw new Error("Attribute selector didn't terminate");e+=1;const C={type:Y.Attribute,name:f,action:u,value:S,namespace:v,ignoreCase:R};i.push(C);break}case 58:{if(t.charCodeAt(e+1)===58){i.push({type:Y.PseudoElement,name:o(2).toLowerCase(),data:t.charCodeAt(e)===40?r():null});continue}const f=o(1).toLowerCase();let v=null;if(t.charCodeAt(e)===40)if(Gf.has(f)){if(Zo(t.charCodeAt(e+1)))throw new Error(`Pseudo-selector ${f} cannot be quoted`);if(v=[],e=Qd(v,t,e+1),t.charCodeAt(e)!==41)throw new Error(`Missing closing parenthesis in :${f} (${t})`);e+=1}else{if(v=r(),Wf.has(f)){const u=v.charCodeAt(0);u===v.charCodeAt(v.length-1)&&Zo(u)&&(v=v.slice(1,-1))}v=Pn(v)}i.push({type:Y.Pseudo,name:f,data:v});break}case 44:{h(),i=[],a(1);break}default:{if(t.startsWith("/*",e)){const u=t.indexOf("*/",e+2);if(u<0)throw new Error("Comment was not terminated");e=u+2,i.length===0&&a(0);break}let f=null,v;if(m===42)e+=1,v="*";else if(m===124){if(v="",t.charCodeAt(e+1)===124){d(Y.ColumnCombinator),a(2);break}}else if(ks.test(t.slice(e)))v=o(0);else break e;t.charCodeAt(e)===124&&t.charCodeAt(e+1)!==124&&(f=v,t.charCodeAt(e+1)===42?(v="*",e+=2):v=o(1)),i.push(v==="*"?{type:Y.Universal,namespace:f}:{type:Y.Tag,name:v,namespace:f})}}}return h(),e}const Kd=["\\",'"'],Zd=[...Kd,"(",")"],Zf=new Set(Kd.map(n=>n.charCodeAt(0))),Is=new Set(Zd.map(n=>n.charCodeAt(0))),bn=new Set([...Zd,"~","^","$","*","+","!","|",":","[","]"," ","."].map(n=>n.charCodeAt(0)));function Xd(n){return n.map(t=>t.map(Xf).join("")).join(", ")}function Xf(n,t,e){switch(n.type){case Y.Child:return t===0?"> ":" > ";case Y.Parent:return t===0?"< ":" < ";case Y.Sibling:return t===0?"~ ":" ~ ";case Y.Adjacent:return t===0?"+ ":" + ";case Y.Descendant:return" ";case Y.ColumnCombinator:return t===0?"|| ":" || ";case Y.Universal:return n.namespace==="*"&&t+1<e.length&&"name"in e[t+1]?"":`${Yd(n.namespace)}*`;case Y.Tag:return Es(n);case Y.PseudoElement:return`::${bt(n.name,bn)}${n.data===null?"":`(${bt(n.data,Is)})`}`;case Y.Pseudo:return`:${bt(n.name,bn)}${n.data===null?"":`(${typeof n.data=="string"?bt(n.data,Is):Xd(n.data)})`}`;case Y.Attribute:{if(n.name==="id"&&n.action===ue.Equals&&n.ignoreCase==="quirks"&&!n.namespace)return`#${bt(n.value,bn)}`;if(n.name==="class"&&n.action===ue.Element&&n.ignoreCase==="quirks"&&!n.namespace)return`.${bt(n.value,bn)}`;const i=Es(n);return n.action===ue.Exists?`[${i}]`:`[${i}${Yf(n.action)}="${bt(n.value,Zf)}"${n.ignoreCase===null?"":n.ignoreCase?" i":" s"}]`}}}function Yf(n){switch(n){case ue.Equals:return"";case ue.Element:return"~";case ue.Start:return"^";case ue.End:return"$";case ue.Any:return"*";case ue.Not:return"!";case ue.Hyphen:return"|";case ue.Exists:throw new Error("Shouldn't be here")}}function Es(n){return`${Yd(n.namespace)}${bt(n.name,bn)}`}function Yd(n){return n!==null?`${n==="*"?"*":bt(n,bn)}|`:""}function bt(n,t){let e=0,i="";for(let o=0;o<n.length;o++)t.has(n.charCodeAt(o))&&(i+=`${n.slice(e,o)}\\${n.charAt(o)}`,e=o+1);return i.length>0?i+n.slice(e):n}const eb=Object.freeze(Object.defineProperty({__proto__:null,get AttributeAction(){return ue},IgnoreCaseMode:Uf,get SelectorType(){return Y},isTraversal:Wd,parse:Kf,stringify:Xd},Symbol.toStringTag,{value:"Module"})),ho=Us(eb);var qn={};Object.defineProperty(qn,"__esModule",{value:!0});qn.isTraversal=void 0;var Ve=ho,ep=new Map([[Ve.SelectorType.Universal,50],[Ve.SelectorType.Tag,30],[Ve.SelectorType.Attribute,1],[Ve.SelectorType.Pseudo,0]]);function tb(n){return!ep.has(n.type)}qn.isTraversal=tb;var nb=new Map([[Ve.AttributeAction.Exists,10],[Ve.AttributeAction.Equals,8],[Ve.AttributeAction.Not,7],[Ve.AttributeAction.Start,6],[Ve.AttributeAction.End,6],[Ve.AttributeAction.Any,5]]);function ib(n){for(var t=n.map(tp),e=1;e<n.length;e++){var i=t[e];if(!(i<0))for(var o=e-1;o>=0&&i<t[o];o--){var a=n[o+1];n[o+1]=n[o],n[o]=a,t[o+1]=t[o],t[o]=i}}}qn.default=ib;function tp(n){var t,e,i=(t=ep.get(n.type))!==null&&t!==void 0?t:-1;return n.type===Ve.SelectorType.Attribute?(i=(e=nb.get(n.action))!==null&&e!==void 0?e:4,n.action===Ve.AttributeAction.Equals&&n.name==="id"&&(i=9),n.ignoreCase&&(i>>=1)):n.type===Ve.SelectorType.Pseudo&&(n.data?n.name==="has"||n.name==="contains"?i=0:Array.isArray(n.data)?(i=Math.min.apply(Math,n.data.map(function(o){return Math.min.apply(Math,o.map(tp))})),i<0&&(i=0)):i=2:i=3),i}var go={},uo={},ob=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(uo,"__esModule",{value:!0});uo.attributeRules=void 0;var ji=ob(jn),ab=/[-[\]{}()*+?.,\\^$|#\s]/g;function Os(n){return n.replace(ab,"\\$&")}var rb=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function Gt(n,t){return typeof n.ignoreCase=="boolean"?n.ignoreCase:n.ignoreCase==="quirks"?!!t.quirksMode:!t.xmlMode&&rb.has(n.name)}uo.attributeRules={equals:function(n,t,e){var i=e.adapter,o=t.name,a=t.value;return Gt(t,e)?(a=a.toLowerCase(),function(r){var s=i.getAttributeValue(r,o);return s!=null&&s.length===a.length&&s.toLowerCase()===a&&n(r)}):function(r){return i.getAttributeValue(r,o)===a&&n(r)}},hyphen:function(n,t,e){var i=e.adapter,o=t.name,a=t.value,r=a.length;return Gt(t,e)?(a=a.toLowerCase(),function(p){var d=i.getAttributeValue(p,o);return d!=null&&(d.length===r||d.charAt(r)==="-")&&d.substr(0,r).toLowerCase()===a&&n(p)}):function(p){var d=i.getAttributeValue(p,o);return d!=null&&(d.length===r||d.charAt(r)==="-")&&d.substr(0,r)===a&&n(p)}},element:function(n,t,e){var i=e.adapter,o=t.name,a=t.value;if(/\s/.test(a))return ji.default.falseFunc;var r=new RegExp("(?:^|\\s)".concat(Os(a),"(?:$|\\s)"),Gt(t,e)?"i":"");return function(p){var d=i.getAttributeValue(p,o);return d!=null&&d.length>=a.length&&r.test(d)&&n(p)}},exists:function(n,t,e){var i=t.name,o=e.adapter;return function(a){return o.hasAttrib(a,i)&&n(a)}},start:function(n,t,e){var i=e.adapter,o=t.name,a=t.value,r=a.length;return r===0?ji.default.falseFunc:Gt(t,e)?(a=a.toLowerCase(),function(s){var p=i.getAttributeValue(s,o);return p!=null&&p.length>=r&&p.substr(0,r).toLowerCase()===a&&n(s)}):function(s){var p;return!!(!((p=i.getAttributeValue(s,o))===null||p===void 0)&&p.startsWith(a))&&n(s)}},end:function(n,t,e){var i=e.adapter,o=t.name,a=t.value,r=-a.length;return r===0?ji.default.falseFunc:Gt(t,e)?(a=a.toLowerCase(),function(s){var p;return((p=i.getAttributeValue(s,o))===null||p===void 0?void 0:p.substr(r).toLowerCase())===a&&n(s)}):function(s){var p;return!!(!((p=i.getAttributeValue(s,o))===null||p===void 0)&&p.endsWith(a))&&n(s)}},any:function(n,t,e){var i=e.adapter,o=t.name,a=t.value;if(a==="")return ji.default.falseFunc;if(Gt(t,e)){var r=new RegExp(Os(a),"i");return function(p){var d=i.getAttributeValue(p,o);return d!=null&&d.length>=a.length&&r.test(d)&&n(p)}}return function(s){var p;return!!(!((p=i.getAttributeValue(s,o))===null||p===void 0)&&p.includes(a))&&n(s)}},not:function(n,t,e){var i=e.adapter,o=t.name,a=t.value;return a===""?function(r){return!!i.getAttributeValue(r,o)&&n(r)}:Gt(t,e)?(a=a.toLowerCase(),function(r){var s=i.getAttributeValue(r,o);return(s==null||s.length!==a.length||s.toLowerCase()!==a)&&n(r)}):function(r){return i.getAttributeValue(r,o)!==a&&n(r)}}};var Wa={},np={},ip={},mo={};Object.defineProperty(mo,"__esModule",{value:!0});mo.parse=void 0;var sb=new Set([9,10,12,13,32]),Ns="0".charCodeAt(0),db="9".charCodeAt(0);function pb(n){if(n=n.trim().toLowerCase(),n==="even")return[2,0];if(n==="odd")return[2,1];var t=0,e=0,i=a(),o=r();if(t<n.length&&n.charAt(t)==="n"&&(t++,e=i*(o??1),s(),t<n.length?(i=a(),s(),o=r()):i=o=0),o===null||t<n.length)throw new Error("n-th rule couldn't be parsed ('".concat(n,"')"));return[e,i*o];function a(){return n.charAt(t)==="-"?(t++,-1):(n.charAt(t)==="+"&&t++,1)}function r(){for(var p=t,d=0;t<n.length&&n.charCodeAt(t)>=Ns&&n.charCodeAt(t)<=db;)d=d*10+(n.charCodeAt(t)-Ns),t++;return t===p?null:d}function s(){for(;t<n.length&&sb.has(n.charCodeAt(t));)t++}}mo.parse=pb;var $n={},lb=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty($n,"__esModule",{value:!0});$n.generate=$n.compile=void 0;var Fs=lb(jn);function cb(n){var t=n[0],e=n[1]-1;if(e<0&&t<=0)return Fs.default.falseFunc;if(t===-1)return function(a){return a<=e};if(t===0)return function(a){return a===e};if(t===1)return e<0?Fs.default.trueFunc:function(a){return a>=e};var i=Math.abs(t),o=(e%i+i)%i;return t>1?function(a){return a>=e&&a%i===o}:function(a){return a<=e&&a%i===o}}$n.compile=cb;function hb(n){var t=n[0],e=n[1]-1,i=0;if(t<0){var o=-t,a=(e%o+o)%o;return function(){var r=a+o*i++;return r>e?null:r}}return t===0?e<0?function(){return null}:function(){return i++===0?e:null}:(e<0&&(e+=t*Math.ceil(-e/t)),function(){return t*i+++e})}$n.generate=hb;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.sequence=n.generate=n.compile=n.parse=void 0;var t=mo;Object.defineProperty(n,"parse",{enumerable:!0,get:function(){return t.parse}});var e=$n;Object.defineProperty(n,"compile",{enumerable:!0,get:function(){return e.compile}}),Object.defineProperty(n,"generate",{enumerable:!0,get:function(){return e.generate}});function i(a){return(0,e.compile)((0,t.parse)(a))}n.default=i;function o(a){return(0,e.generate)((0,t.parse)(a))}n.sequence=o})(ip);(function(n){var t=q&&q.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};Object.defineProperty(n,"__esModule",{value:!0}),n.filters=void 0;var e=t(ip),i=t(jn);function o(r,s){return function(p){var d=s.getParent(p);return d!=null&&s.isTag(d)&&r(p)}}n.filters={contains:function(r,s,p){var d=p.adapter;return function(h){return r(h)&&d.getText(h).includes(s)}},icontains:function(r,s,p){var d=p.adapter,c=s.toLowerCase();return function(m){return r(m)&&d.getText(m).toLowerCase().includes(c)}},"nth-child":function(r,s,p){var d=p.adapter,c=p.equals,h=(0,e.default)(s);return h===i.default.falseFunc?i.default.falseFunc:h===i.default.trueFunc?o(r,d):function(f){for(var v=d.getSiblings(f),u=0,$=0;$<v.length&&!c(f,v[$]);$++)d.isTag(v[$])&&u++;return h(u)&&r(f)}},"nth-last-child":function(r,s,p){var d=p.adapter,c=p.equals,h=(0,e.default)(s);return h===i.default.falseFunc?i.default.falseFunc:h===i.default.trueFunc?o(r,d):function(f){for(var v=d.getSiblings(f),u=0,$=v.length-1;$>=0&&!c(f,v[$]);$--)d.isTag(v[$])&&u++;return h(u)&&r(f)}},"nth-of-type":function(r,s,p){var d=p.adapter,c=p.equals,h=(0,e.default)(s);return h===i.default.falseFunc?i.default.falseFunc:h===i.default.trueFunc?o(r,d):function(f){for(var v=d.getSiblings(f),u=0,$=0;$<v.length;$++){var S=v[$];if(c(f,S))break;d.isTag(S)&&d.getName(S)===d.getName(f)&&u++}return h(u)&&r(f)}},"nth-last-of-type":function(r,s,p){var d=p.adapter,c=p.equals,h=(0,e.default)(s);return h===i.default.falseFunc?i.default.falseFunc:h===i.default.trueFunc?o(r,d):function(f){for(var v=d.getSiblings(f),u=0,$=v.length-1;$>=0;$--){var S=v[$];if(c(f,S))break;d.isTag(S)&&d.getName(S)===d.getName(f)&&u++}return h(u)&&r(f)}},root:function(r,s,p){var d=p.adapter;return function(c){var h=d.getParent(c);return(h==null||!d.isTag(h))&&r(c)}},scope:function(r,s,p,d){var c=p.equals;return!d||d.length===0?n.filters.root(r,s,p):d.length===1?function(h){return c(d[0],h)&&r(h)}:function(h){return d.includes(h)&&r(h)}},hover:a("isHovered"),visited:a("isVisited"),active:a("isActive")};function a(r){return function(p,d,c){var h=c.adapter,m=h[r];return typeof m!="function"?i.default.falseFunc:function(v){return m(v)&&p(v)}}}})(np);var Mn={};Object.defineProperty(Mn,"__esModule",{value:!0});Mn.verifyPseudoArgs=Mn.pseudos=void 0;Mn.pseudos={empty:function(n,t){var e=t.adapter;return!e.getChildren(n).some(function(i){return e.isTag(i)||e.getText(i)!==""})},"first-child":function(n,t){var e=t.adapter,i=t.equals;if(e.prevElementSibling)return e.prevElementSibling(n)==null;var o=e.getSiblings(n).find(function(a){return e.isTag(a)});return o!=null&&i(n,o)},"last-child":function(n,t){for(var e=t.adapter,i=t.equals,o=e.getSiblings(n),a=o.length-1;a>=0;a--){if(i(n,o[a]))return!0;if(e.isTag(o[a]))break}return!1},"first-of-type":function(n,t){for(var e=t.adapter,i=t.equals,o=e.getSiblings(n),a=e.getName(n),r=0;r<o.length;r++){var s=o[r];if(i(n,s))return!0;if(e.isTag(s)&&e.getName(s)===a)break}return!1},"last-of-type":function(n,t){for(var e=t.adapter,i=t.equals,o=e.getSiblings(n),a=e.getName(n),r=o.length-1;r>=0;r--){var s=o[r];if(i(n,s))return!0;if(e.isTag(s)&&e.getName(s)===a)break}return!1},"only-of-type":function(n,t){var e=t.adapter,i=t.equals,o=e.getName(n);return e.getSiblings(n).every(function(a){return i(n,a)||!e.isTag(a)||e.getName(a)!==o})},"only-child":function(n,t){var e=t.adapter,i=t.equals;return e.getSiblings(n).every(function(o){return i(n,o)||!e.isTag(o)})}};function gb(n,t,e,i){if(e===null){if(n.length>i)throw new Error("Pseudo-class :".concat(t," requires an argument"))}else if(n.length===i)throw new Error("Pseudo-class :".concat(t," doesn't have any arguments"))}Mn.verifyPseudoArgs=gb;var fo={};Object.defineProperty(fo,"__esModule",{value:!0});fo.aliases=void 0;fo.aliases={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:`:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"};var bo={};(function(n){var t=q&&q.__spreadArray||function(d,c,h){if(h||arguments.length===2)for(var m=0,f=c.length,v;m<f;m++)(v||!(m in c))&&(v||(v=Array.prototype.slice.call(c,0,m)),v[m]=c[m]);return d.concat(v||Array.prototype.slice.call(c))},e=q&&q.__importDefault||function(d){return d&&d.__esModule?d:{default:d}};Object.defineProperty(n,"__esModule",{value:!0}),n.subselects=n.getNextSiblings=n.ensureIsTag=n.PLACEHOLDER_ELEMENT=void 0;var i=e(jn),o=qn;n.PLACEHOLDER_ELEMENT={};function a(d,c){return d===i.default.falseFunc?i.default.falseFunc:function(h){return c.isTag(h)&&d(h)}}n.ensureIsTag=a;function r(d,c){var h=c.getSiblings(d);if(h.length<=1)return[];var m=h.indexOf(d);return m<0||m===h.length-1?[]:h.slice(m+1).filter(c.isTag)}n.getNextSiblings=r;function s(d){return{xmlMode:!!d.xmlMode,lowerCaseAttributeNames:!!d.lowerCaseAttributeNames,lowerCaseTags:!!d.lowerCaseTags,quirksMode:!!d.quirksMode,cacheResults:!!d.cacheResults,pseudos:d.pseudos,adapter:d.adapter,equals:d.equals}}var p=function(d,c,h,m,f){var v=f(c,s(h),m);return v===i.default.trueFunc?d:v===i.default.falseFunc?i.default.falseFunc:function(u){return v(u)&&d(u)}};n.subselects={is:p,matches:p,where:p,not:function(d,c,h,m,f){var v=f(c,s(h),m);return v===i.default.falseFunc?d:v===i.default.trueFunc?i.default.falseFunc:function(u){return!v(u)&&d(u)}},has:function(d,c,h,m,f){var v=h.adapter,u=s(h);u.relativeSelector=!0;var $=c.some(function(T){return T.some(o.isTraversal)})?[n.PLACEHOLDER_ELEMENT]:void 0,S=f(c,u,$);if(S===i.default.falseFunc)return i.default.falseFunc;var R=a(S,v);if($&&S!==i.default.trueFunc){var C=S.shouldTestNextSiblings,D=C===void 0?!1:C;return function(T){if(!d(T))return!1;$[0]=T;var _=v.getChildren(T),M=D?t(t([],_,!0),r(T,v),!0):_;return v.existsOne(R,M)}}return function(T){return d(T)&&v.existsOne(R,v.getChildren(T))}}}})(bo);(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.compilePseudoSelector=n.aliases=n.pseudos=n.filters=void 0;var t=ho,e=np;Object.defineProperty(n,"filters",{enumerable:!0,get:function(){return e.filters}});var i=Mn;Object.defineProperty(n,"pseudos",{enumerable:!0,get:function(){return i.pseudos}});var o=fo;Object.defineProperty(n,"aliases",{enumerable:!0,get:function(){return o.aliases}});var a=bo;function r(s,p,d,c,h){var m,f=p.name,v=p.data;if(Array.isArray(v)){if(!(f in a.subselects))throw new Error("Unknown pseudo-class :".concat(f,"(").concat(v,")"));return a.subselects[f](s,v,d,c,h)}var u=(m=d.pseudos)===null||m===void 0?void 0:m[f],$=typeof u=="string"?u:o.aliases[f];if(typeof $=="string"){if(v!=null)throw new Error("Pseudo ".concat(f," doesn't have any arguments"));var S=(0,t.parse)($);return a.subselects.is(s,S,d,c,h)}if(typeof u=="function")return(0,i.verifyPseudoArgs)(u,f,v,1),function(C){return u(C,v)&&s(C)};if(f in e.filters)return e.filters[f](s,v,d,c);if(f in i.pseudos){var R=i.pseudos[f];return(0,i.verifyPseudoArgs)(R,f,v,2),function(C){return R(C,d,v)&&s(C)}}throw new Error("Unknown pseudo-class :".concat(f))}n.compilePseudoSelector=r})(Wa);Object.defineProperty(go,"__esModule",{value:!0});go.compileGeneralSelector=void 0;var ub=uo,mb=Wa,tt=ho;function Xo(n,t){var e=t.getParent(n);return e&&t.isTag(e)?e:null}function fb(n,t,e,i,o){var a=e.adapter,r=e.equals;switch(t.type){case tt.SelectorType.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case tt.SelectorType.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case tt.SelectorType.Attribute:{if(t.namespace!=null)throw new Error("Namespaced attributes are not yet supported by css-select");return(!e.xmlMode||e.lowerCaseAttributeNames)&&(t.name=t.name.toLowerCase()),ub.attributeRules[t.action](n,t,e)}case tt.SelectorType.Pseudo:return(0,mb.compilePseudoSelector)(n,t,e,i,o);case tt.SelectorType.Tag:{if(t.namespace!=null)throw new Error("Namespaced tag names are not yet supported by css-select");var s=t.name;return(!e.xmlMode||e.lowerCaseTags)&&(s=s.toLowerCase()),function(c){return a.getName(c)===s&&n(c)}}case tt.SelectorType.Descendant:{if(e.cacheResults===!1||typeof WeakSet>"u")return function(c){for(var h=c;h=Xo(h,a);)if(n(h))return!0;return!1};var p=new WeakSet;return function(c){for(var h=c;h=Xo(h,a);)if(!p.has(h)){if(a.isTag(h)&&n(h))return!0;p.add(h)}return!1}}case"_flexibleDescendant":return function(c){var h=c;do if(n(h))return!0;while(h=Xo(h,a));return!1};case tt.SelectorType.Parent:return function(c){return a.getChildren(c).some(function(h){return a.isTag(h)&&n(h)})};case tt.SelectorType.Child:return function(c){var h=a.getParent(c);return h!=null&&a.isTag(h)&&n(h)};case tt.SelectorType.Sibling:return function(c){for(var h=a.getSiblings(c),m=0;m<h.length;m++){var f=h[m];if(r(c,f))break;if(a.isTag(f)&&n(f))return!0}return!1};case tt.SelectorType.Adjacent:return a.prevElementSibling?function(c){var h=a.prevElementSibling(c);return h!=null&&n(h)}:function(c){for(var h=a.getSiblings(c),m,f=0;f<h.length;f++){var v=h[f];if(r(c,v))break;a.isTag(v)&&(m=v)}return!!m&&n(m)};case tt.SelectorType.Universal:{if(t.namespace!=null&&t.namespace!=="*")throw new Error("Namespaced universal selectors are not yet supported by css-select");return n}}}go.compileGeneralSelector=fb;var bb=q&&q.__createBinding||(Object.create?function(n,t,e,i){i===void 0&&(i=e);var o=Object.getOwnPropertyDescriptor(t,e);(!o||("get"in o?!t.__esModule:o.writable||o.configurable))&&(o={enumerable:!0,get:function(){return t[e]}}),Object.defineProperty(n,i,o)}:function(n,t,e,i){i===void 0&&(i=e),n[i]=t[e]}),yb=q&&q.__setModuleDefault||(Object.create?function(n,t){Object.defineProperty(n,"default",{enumerable:!0,value:t})}:function(n,t){n.default=t}),vb=q&&q.__importStar||function(n){if(n&&n.__esModule)return n;var t={};if(n!=null)for(var e in n)e!=="default"&&Object.prototype.hasOwnProperty.call(n,e)&&bb(t,n,e);return yb(t,n),t},Cb=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(kt,"__esModule",{value:!0});kt.compileToken=kt.compileUnsafe=kt.compile=void 0;var vt=ho,jt=Cb(jn),fa=vb(qn),Tb=go,op=bo;function wb(n,t,e){var i=ap(n,t,e);return(0,op.ensureIsTag)(i,t.adapter)}kt.compile=wb;function ap(n,t,e){var i=typeof n=="string"?(0,vt.parse)(n):n;return Qa(i,t,e)}kt.compileUnsafe=ap;function rp(n){return n.type===vt.SelectorType.Pseudo&&(n.name==="scope"||Array.isArray(n.data)&&n.data.some(function(t){return t.some(rp)}))}var _b={type:vt.SelectorType.Descendant},Rb={type:"_flexibleDescendant"},Db={type:vt.SelectorType.Pseudo,name:"scope",data:null};function Ab(n,t,e){for(var i=t.adapter,o=!!(e!=null&&e.every(function(p){var d=i.isTag(p)&&i.getParent(p);return p===op.PLACEHOLDER_ELEMENT||d&&i.isTag(d)})),a=0,r=n;a<r.length;a++){var s=r[a];if(!(s.length>0&&(0,fa.isTraversal)(s[0])&&s[0].type!==vt.SelectorType.Descendant))if(o&&!s.some(rp))s.unshift(_b);else continue;s.unshift(Db)}}function Qa(n,t,e){var i;n.forEach(fa.default),e=(i=t.context)!==null&&i!==void 0?i:e;var o=Array.isArray(e),a=e&&(Array.isArray(e)?e:[e]);if(t.relativeSelector!==!1)Ab(n,t,a);else if(n.some(function(p){return p.length>0&&(0,fa.isTraversal)(p[0])}))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");var r=!1,s=n.map(function(p){if(p.length>=2){var d=p[0],c=p[1];d.type!==vt.SelectorType.Pseudo||d.name!=="scope"||(o&&c.type===vt.SelectorType.Descendant?p[1]=Rb:(c.type===vt.SelectorType.Adjacent||c.type===vt.SelectorType.Sibling)&&(r=!0))}return Sb(p,t,a)}).reduce($b,jt.default.falseFunc);return s.shouldTestNextSiblings=r,s}kt.compileToken=Qa;function Sb(n,t,e){var i;return n.reduce(function(o,a){return o===jt.default.falseFunc?jt.default.falseFunc:(0,Tb.compileGeneralSelector)(o,a,t,e,Qa)},(i=t.rootFunc)!==null&&i!==void 0?i:jt.default.trueFunc)}function $b(n,t){return t===jt.default.falseFunc||n===jt.default.trueFunc?n:n===jt.default.falseFunc||t===jt.default.trueFunc?t:function(i){return n(i)||t(i)}}(function(n){var t=q&&q.__createBinding||(Object.create?function(R,C,D,T){T===void 0&&(T=D);var _=Object.getOwnPropertyDescriptor(C,D);(!_||("get"in _?!C.__esModule:_.writable||_.configurable))&&(_={enumerable:!0,get:function(){return C[D]}}),Object.defineProperty(R,T,_)}:function(R,C,D,T){T===void 0&&(T=D),R[T]=C[D]}),e=q&&q.__setModuleDefault||(Object.create?function(R,C){Object.defineProperty(R,"default",{enumerable:!0,value:C})}:function(R,C){R.default=C}),i=q&&q.__importStar||function(R){if(R&&R.__esModule)return R;var C={};if(R!=null)for(var D in R)D!=="default"&&Object.prototype.hasOwnProperty.call(R,D)&&t(C,R,D);return e(C,R),C},o=q&&q.__importDefault||function(R){return R&&R.__esModule?R:{default:R}};Object.defineProperty(n,"__esModule",{value:!0}),n.aliases=n.pseudos=n.filters=n.is=n.selectOne=n.selectAll=n.prepareContext=n._compileToken=n._compileUnsafe=n.compile=void 0;var a=i(Td),r=o(jn),s=kt,p=bo,d=function(R,C){return R===C},c={adapter:a,equals:d};function h(R){var C,D,T,_,M=R??c;return(C=M.adapter)!==null&&C!==void 0||(M.adapter=a),(D=M.equals)!==null&&D!==void 0||(M.equals=(_=(T=M.adapter)===null||T===void 0?void 0:T.equals)!==null&&_!==void 0?_:d),M}function m(R){return function(D,T,_){var M=h(T);return R(D,M,_)}}n.compile=m(s.compile),n._compileUnsafe=m(s.compileUnsafe),n._compileToken=m(s.compileToken);function f(R){return function(D,T,_){var M=h(_);typeof D!="function"&&(D=(0,s.compileUnsafe)(D,M,T));var A=v(T,M.adapter,D.shouldTestNextSiblings);return R(D,A,M)}}function v(R,C,D){return D===void 0&&(D=!1),D&&(R=u(R,C)),Array.isArray(R)?C.removeSubsets(R):C.getChildren(R)}n.prepareContext=v;function u(R,C){for(var D=Array.isArray(R)?R.slice(0):[R],T=D.length,_=0;_<T;_++){var M=(0,p.getNextSiblings)(D[_],C);D.push.apply(D,M)}return D}n.selectAll=f(function(R,C,D){return R===r.default.falseFunc||!C||C.length===0?[]:D.adapter.findAll(R,C)}),n.selectOne=f(function(R,C,D){return R===r.default.falseFunc||!C||C.length===0?null:D.adapter.findOne(R,C)});function $(R,C,D){var T=h(D);return(typeof C=="function"?C:(0,s.compile)(C,T))(R)}n.is=$,n.default=n.selectAll;var S=Wa;Object.defineProperty(n,"filters",{enumerable:!0,get:function(){return S.filters}}),Object.defineProperty(n,"pseudos",{enumerable:!0,get:function(){return S.pseudos}}),Object.defineProperty(n,"aliases",{enumerable:!0,get:function(){return S.aliases}})})(Cd);var Ka={};Object.defineProperty(Ka,"__esModule",{value:!0});function Mb(n){return n[n.length-1]}Ka.default=Mb;var Za={},xb=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Za,"__esModule",{value:!0});var jb=xb(Yt);function yo(n){return n&&n.nodeType===jb.default.ELEMENT_NODE}function sp(n,t){return yo(n)?n.getAttribute(t):void 0}function qb(n){return(n&&n.rawTagName||"").toLowerCase()}function pi(n){return n&&n.childNodes}function Xa(n){return n?n.parentNode:null}function kb(n){return n.text}function Jb(n){for(var t=n.length,e,i,o;--t>-1;){for(e=i=n[t],n[t]=null,o=!0;i;){if(n.indexOf(i)>-1){o=!1,n.splice(t,1);break}i=Xa(i)}o&&(n[t]=e)}return n}function dp(n,t){return t.some(function(e){return yo(e)?n(e)||dp(n,pi(e)):!1})}function Ib(n){var t=Xa(n);return t?pi(t):[]}function Eb(n,t){return sp(n,t)!==void 0}function pp(n,t){for(var e=null,i=0,o=t==null?void 0:t.length;i<o&&!e;i++){var a=t[i];if(n(a))e=a;else{var r=pi(a);r&&r.length>0&&(e=pp(n,r))}}return e}function lp(n,t){for(var e=[],i=0,o=t.length;i<o;i++)if(yo(t[i])){n(t[i])&&e.push(t[i]);var a=pi(t[i]);a&&(e=e.concat(lp(n,a)))}return e}Za.default={isTag:yo,getAttributeValue:sp,getName:qb,getChildren:pi,getParent:Xa,getText:kb,removeSubsets:Jb,existsOne:dp,getSiblings:Ib,hasAttrib:Eb,findOne:pp,findAll:lp};var Ya={};Object.defineProperty(Ya,"__esModule",{value:!0});var Ob=function(){function n(t,e){t===void 0&&(t=!1),this.addClosingSlash=t,Array.isArray(e)?this.voidTags=e.reduce(function(i,o){return i.add(o.toLowerCase())},new Set):this.voidTags=["area","base","br","col","embed","hr","img","input","link","meta","param","source","track","wbr"].reduce(function(i,o){return i.add(o)},new Set)}return n.prototype.formatNode=function(t,e,i){var o=this.addClosingSlash,a=o&&e&&!e.endsWith(" ")?" ":"",r=o?"".concat(a,"/"):"";return this.isVoidElement(t.toLowerCase())?"<".concat(t).concat(e).concat(r,">"):"<".concat(t).concat(e,">").concat(i,"</").concat(t,">")},n.prototype.isVoidElement=function(t){return this.voidTags.has(t)},n}();Ya.default=Ob;var vo={},Nb=q&&q.__extends||function(){var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(i[a]=o[a])},n(t,e)};return function(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");n(t,e);function i(){this.constructor=t}t.prototype=e===null?Object.create(e):(i.prototype=e.prototype,new i)}}(),cp=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(vo,"__esModule",{value:!0});var Fb=An,Bb=cp(xn),Lb=cp(Yt),Hb=function(n){Nb(t,n);function t(e,i,o){var a=n.call(this,i,o)||this;return a.nodeType=Lb.default.TEXT_NODE,a._rawText=e,a}return t.prototype.clone=function(){return new t(this._rawText,null)},Object.defineProperty(t.prototype,"rawText",{get:function(){return this._rawText},set:function(e){this._rawText=e,this._trimmedRawText=void 0,this._trimmedText=void 0},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trimmedRawText",{get:function(){return this._trimmedRawText!==void 0?this._trimmedRawText:(this._trimmedRawText=Bs(this.rawText),this._trimmedRawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trimmedText",{get:function(){return this._trimmedText!==void 0?this._trimmedText:(this._trimmedText=Bs(this.text),this._trimmedText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return(0,Fb.decode)(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isWhitespace",{get:function(){return/^(\s|&nbsp;)*$/.test(this.rawText)},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return this.rawText},t}(Bb.default);vo.default=Hb;function Bs(n){for(var t=0,e,i;t>=0&&t<n.length;)/\S/.test(n[t])&&(e===void 0?(e=t,t=n.length):(i=t,t=void 0)),e===void 0?t++:t--;e===void 0&&(e=0),i===void 0&&(i=n.length-1);var o=e>0&&/[^\S\r\n]/.test(n[e-1]),a=i<n.length-1&&/[^\S\r\n]/.test(n[i+1]);return(o?" ":"")+n.slice(e,i+1)+(a?" ":"")}var Pb=q&&q.__extends||function(){var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(i,o){i.__proto__=o}||function(i,o){for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(i[a]=o[a])},n(t,e)};return function(t,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");n(t,e);function i(){this.constructor=t}t.prototype=e===null?Object.create(e):(i.prototype=e.prototype,new i)}}(),yn=q&&q.__assign||function(){return yn=Object.assign||function(n){for(var t,e=1,i=arguments.length;e<i;e++){t=arguments[e];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(n[o]=t[o])}return n},yn.apply(this,arguments)},Un=q&&q.__spreadArray||function(n,t,e){if(e||arguments.length===2)for(var i=0,o=t.length,a;i<o;i++)(a||!(i in t))&&(a||(a=Array.prototype.slice.call(t,0,i)),a[i]=t[i]);return n.concat(a||Array.prototype.slice.call(t))},Ot=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(Tt,"__esModule",{value:!0});Tt.parse=Tt.base_parse=void 0;var Yo=Cd,Ub=Ot(An),vn=Ot(Ka),ea=Ot(Za),hp=Ot(Ya),zb=Ot(oo),ta=Ot(xn),Cn=Ot(vo),at=Ot(Yt);function zn(n){return JSON.parse(JSON.stringify(Ub.default.decode(n)))}var Vb=["h1","h2","h3","h4","h5","h6","header","hgroup"],Gb=["details","dialog","dd","div","dt"],Wb=["fieldset","figcaption","figure","footer","form"],Qb=["table","td","tr"],Kb=["address","article","aside","blockquote","br","hr","li","main","nav","ol","p","pre","section","ul"],ba=new Set;function Zb(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];for(var e=function(r){for(var s=0;s<r.length;s++){var p=r[s];ba.add(p),ba.add(p.toUpperCase())}},i=0,o=n;i<o.length;i++){var a=o[i];e(a)}}Zb(Vb,Gb,Wb,Qb,Kb);var Xb=function(){function n(t,e){t===void 0&&(t=[]),e===void 0&&(e=function(){return null}),this._set=new Set(t),this._afterUpdate=e}return n.prototype._validate=function(t){if(/\s/.test(t))throw new Error("DOMException in DOMTokenList.add: The token '".concat(t,"' contains HTML space characters, which are not valid in tokens."))},n.prototype.add=function(t){this._validate(t),this._set.add(t),this._afterUpdate(this)},n.prototype.replace=function(t,e){this._validate(e),this._set.delete(t),this._set.add(e),this._afterUpdate(this)},n.prototype.remove=function(t){this._set.delete(t)&&this._afterUpdate(this)},n.prototype.toggle=function(t){this._validate(t),this._set.has(t)?this._set.delete(t):this._set.add(t),this._afterUpdate(this)},n.prototype.contains=function(t){return this._set.has(t)},Object.defineProperty(n.prototype,"length",{get:function(){return this._set.size},enumerable:!1,configurable:!0}),n.prototype.values=function(){return this._set.values()},Object.defineProperty(n.prototype,"value",{get:function(){return Array.from(this._set.values())},enumerable:!1,configurable:!0}),n.prototype.toString=function(){return Array.from(this._set.values()).join(" ")},n}(),ya=function(n){Pb(t,n);function t(e,i,o,a,r,s,p){o===void 0&&(o=""),s===void 0&&(s=new hp.default),p===void 0&&(p={});var d=n.call(this,a,r)||this;if(d.rawAttrs=o,d.voidTag=s,d.nodeType=at.default.ELEMENT_NODE,d.rawTagName=e,d.rawAttrs=o||"",d.id=i.id||"",d.childNodes=[],d._parseOptions=p,d.classList=new Xb(i.class?i.class.split(/\s+/):[],function(h){return d.setAttribute("class",h.toString())}),i.id&&(o||(d.rawAttrs='id="'.concat(i.id,'"'))),i.class&&!o){var c='class="'.concat(d.classList.toString(),'"');d.rawAttrs?d.rawAttrs+=" ".concat(c):d.rawAttrs=c}return d}return t.prototype.quoteAttribute=function(e){return e==null?"null":JSON.stringify(e.replace(/"/g,"&quot;"))},t.prototype.removeChild=function(e){return this.childNodes=this.childNodes.filter(function(i){return i!==e}),this},t.prototype.exchangeChild=function(e,i){var o=this.childNodes;return this.childNodes=o.map(function(a){return a===e?i:a}),this},Object.defineProperty(t.prototype,"tagName",{get:function(){return this.rawTagName?this.rawTagName.toUpperCase():this.rawTagName},set:function(e){this.rawTagName=e.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"localName",{get:function(){return this.rawTagName.toLowerCase()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isVoidElement",{get:function(){return this.voidTag.isVoidElement(this.localName)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rawText",{get:function(){return this.childNodes.reduce(function(e,i){return e+=i.rawText},"")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textContent",{get:function(){return zn(this.rawText)},set:function(e){var i=[new Cn.default(e,this)];this.childNodes=i},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return zn(this.rawText)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"structuredText",{get:function(){var e=[],i=[e];function o(a){if(a.nodeType===at.default.ELEMENT_NODE)ba.has(a.rawTagName)?(e.length>0&&i.push(e=[]),a.childNodes.forEach(o),e.length>0&&i.push(e=[])):a.childNodes.forEach(o);else if(a.nodeType===at.default.TEXT_NODE)if(a.isWhitespace)e.prependWhitespace=!0;else{var r=a.trimmedText;e.prependWhitespace&&(r=" ".concat(r),e.prependWhitespace=!1),e.push(r)}}return o(this),i.map(function(a){return a.join("").replace(/\s{2,}/g," ")}).join(`
`).replace(/\s+$/,"")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){var e=this.rawTagName;if(e){var i=this.rawAttrs?" ".concat(this.rawAttrs):"";return this.voidTag.formatNode(e,i,this.innerHTML)}return this.innerHTML},Object.defineProperty(t.prototype,"innerHTML",{get:function(){return this.childNodes.map(function(e){return e.toString()}).join("")},set:function(e){var i=mn(e,this._parseOptions),o=i.childNodes.length?i.childNodes:[new Cn.default(e,this)];ft(o,this),ft(this.childNodes,null),this.childNodes=o},enumerable:!1,configurable:!0}),t.prototype.set_content=function(e,i){if(i===void 0&&(i={}),e instanceof ta.default)e=[e];else if(typeof e=="string"){i=yn(yn({},this._parseOptions),i);var o=mn(e,i);e=o.childNodes.length?o.childNodes:[new Cn.default(o.innerHTML,this)]}return ft(this.childNodes,null),ft(e,this),this.childNodes=e,this},t.prototype.replaceWith=function(){for(var e=this,i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];var a=this.parentNode,r=i.map(function(p){if(p instanceof ta.default)return[p];if(typeof p=="string"){var d=mn(p,e._parseOptions);return d.childNodes.length?d.childNodes:[new Cn.default(p,e)]}return[]}).flat(),s=a.childNodes.findIndex(function(p){return p===e});return ft([this],null),a.childNodes=Un(Un(Un([],a.childNodes.slice(0,s),!0),ft(r,a),!0),a.childNodes.slice(s+1),!0),this},Object.defineProperty(t.prototype,"outerHTML",{get:function(){return this.toString()},enumerable:!1,configurable:!0}),t.prototype.trimRight=function(e){for(var i=0;i<this.childNodes.length;i++){var o=this.childNodes[i];if(o.nodeType===at.default.ELEMENT_NODE)o.trimRight(e);else{var a=o.rawText.search(e);a>-1&&(o.rawText=o.rawText.substr(0,a),this.childNodes.length=i+1)}}return this},Object.defineProperty(t.prototype,"structure",{get:function(){var e=[],i=0;function o(r){e.push("  ".repeat(i)+r)}function a(r){var s=r.id?"#".concat(r.id):"",p=r.classList.length?".".concat(r.classList.value.join(".")):"";o("".concat(r.rawTagName).concat(s).concat(p)),i++,r.childNodes.forEach(function(d){d.nodeType===at.default.ELEMENT_NODE?a(d):d.nodeType===at.default.TEXT_NODE&&(d.isWhitespace||o("#text"))}),i--}return a(this),e.join(`
`)},enumerable:!1,configurable:!0}),t.prototype.removeWhitespace=function(){var e=this,i=0;return this.childNodes.forEach(function(o){if(o.nodeType===at.default.TEXT_NODE){if(o.isWhitespace)return;o.rawText=o.trimmedRawText}else o.nodeType===at.default.ELEMENT_NODE&&o.removeWhitespace();e.childNodes[i++]=o}),this.childNodes.length=i,this},t.prototype.querySelectorAll=function(e){return(0,Yo.selectAll)(e,this,{xmlMode:!0,adapter:ea.default})},t.prototype.querySelector=function(e){return(0,Yo.selectOne)(e,this,{xmlMode:!0,adapter:ea.default})},t.prototype.getElementsByTagName=function(e){for(var i=e.toUpperCase(),o=[],a=[],r=this,s=0;s!==void 0;){var p=void 0;do p=r.childNodes[s++];while(s<r.childNodes.length&&p===void 0);if(p===void 0){r=r.parentNode,s=a.pop();continue}p.nodeType===at.default.ELEMENT_NODE&&((e==="*"||p.tagName===i)&&o.push(p),p.childNodes.length>0&&(a.push(s),r=p,s=0))}return o},t.prototype.getElementById=function(e){for(var i=[],o=this,a=0;a!==void 0;){var r=void 0;do r=o.childNodes[a++];while(a<o.childNodes.length&&r===void 0);if(r===void 0){o=o.parentNode,a=i.pop();continue}if(r.nodeType===at.default.ELEMENT_NODE){if(r.id===e)return r;r.childNodes.length>0&&(i.push(a),o=r,a=0)}}return null},t.prototype.closest=function(e){var i=new Map,o=this,a=null;function r(p,d){for(var c=null,h=0,m=d.length;h<m&&!c;h++){var f=d[h];if(p(f))c=f;else{var v=i.get(f);v&&(c=r(p,[v]))}}return c}for(;o;)i.set(o,a),a=o,o=o.parentNode;for(o=this;o;){var s=(0,Yo.selectOne)(e,o,{xmlMode:!0,adapter:yn(yn({},ea.default),{getChildren:function(p){var d=i.get(p);return d&&[d]},getSiblings:function(p){return[p]},findOne:r,findAll:function(){return[]}})});if(s)return s;o=o.parentNode}return null},t.prototype.appendChild=function(e){return e.remove(),this.childNodes.push(e),e.parentNode=this,e},Object.defineProperty(t.prototype,"firstChild",{get:function(){return this.childNodes[0]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return(0,vn.default)(this.childNodes)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attrs",{get:function(){if(this._attrs)return this._attrs;this._attrs={};var e=this.rawAttributes;for(var i in e){var o=e[i]||"";this._attrs[i.toLowerCase()]=zn(o)}return this._attrs},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var e={},i=this.rawAttributes;for(var o in i){var a=i[o]||"";e[o]=zn(a)}return e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"rawAttributes",{get:function(){if(this._rawAttrs)return this._rawAttrs;var e={};if(this.rawAttrs)for(var i=/([a-zA-Z()[\]#@$.?:][a-zA-Z0-9-_:()[\]#]*)(?:\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+))?/g,o=void 0;o=i.exec(this.rawAttrs);){var a=o[1],r=o[2]||null;r&&(r[0]==="'"||r[0]==='"')&&(r=r.slice(1,r.length-1)),e[a]=e[a]||r}return this._rawAttrs=e,e},enumerable:!1,configurable:!0}),t.prototype.removeAttribute=function(e){var i=this.rawAttributes;return delete i[e],this._attrs&&delete this._attrs[e],this.rawAttrs=Object.keys(i).map(function(o){var a=JSON.stringify(i[o]);return a===void 0||a==="null"?o:"".concat(o,"=").concat(a)}).join(" "),e==="id"&&(this.id=""),this},t.prototype.hasAttribute=function(e){return e.toLowerCase()in this.attrs},t.prototype.getAttribute=function(e){return this.attrs[e.toLowerCase()]},t.prototype.setAttribute=function(e,i){var o=this;if(arguments.length<2)throw new Error("Failed to execute 'setAttribute' on 'Element'");var a=e.toLowerCase(),r=this.rawAttributes;for(var s in r)if(s.toLowerCase()===a){e=s;break}return r[e]=String(i),this._attrs&&(this._attrs[a]=zn(r[e])),this.rawAttrs=Object.keys(r).map(function(p){var d=o.quoteAttribute(r[p]);return d==="null"||d==='""'?p:"".concat(p,"=").concat(d)}).join(" "),e==="id"&&(this.id=i),this},t.prototype.setAttributes=function(e){var i=this;return this._attrs&&delete this._attrs,this._rawAttrs&&delete this._rawAttrs,this.rawAttrs=Object.keys(e).map(function(o){var a=e[o];return a==="null"||a==='""'?o:"".concat(o,"=").concat(i.quoteAttribute(String(a)))}).join(" "),this},t.prototype.insertAdjacentHTML=function(e,i){var o,a,r,s=this;if(arguments.length<2)throw new Error("2 arguments required");var p=mn(i,this._parseOptions);if(e==="afterend"){var d=this.parentNode.childNodes.findIndex(function(c){return c===s});ft(p.childNodes,this.parentNode),(o=this.parentNode.childNodes).splice.apply(o,Un([d+1,0],p.childNodes,!1))}else if(e==="afterbegin")ft(p.childNodes,this),(a=this.childNodes).unshift.apply(a,p.childNodes);else if(e==="beforeend")p.childNodes.forEach(function(c){s.appendChild(c)});else if(e==="beforebegin"){var d=this.parentNode.childNodes.findIndex(function(h){return h===s});ft(p.childNodes,this.parentNode),(r=this.parentNode.childNodes).splice.apply(r,Un([d,0],p.childNodes,!1))}else throw new Error("The value provided ('".concat(e,"') is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'"));return this},Object.defineProperty(t.prototype,"nextSibling",{get:function(){if(this.parentNode){for(var e=this.parentNode.childNodes,i=0;i<e.length;){var o=e[i++];if(this===o)return e[i]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nextElementSibling",{get:function(){if(this.parentNode){for(var e=this.parentNode.childNodes,i=0,o=!1;i<e.length;){var a=e[i++];if(o){if(a instanceof t)return a||null}else this===a&&(o=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"previousSibling",{get:function(){if(this.parentNode){for(var e=this.parentNode.childNodes,i=e.length;i>0;){var o=e[--i];if(this===o)return e[i-1]||null}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"previousElementSibling",{get:function(){if(this.parentNode){for(var e=this.parentNode.childNodes,i=e.length,o=!1;i>0;){var a=e[--i];if(o){if(a instanceof t)return a||null}else this===a&&(o=!0)}return null}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"classNames",{get:function(){return this.classList.toString()},enumerable:!1,configurable:!0}),t.prototype.clone=function(){return mn(this.toString(),this._parseOptions).firstChild},t}(ta.default);Tt.default=ya;var mt=/<!--[\s\S]*?-->|<(\/?)([a-zA-Z][-.:0-9_a-zA-Z]*)((?:\s+[^>]*?(?:(?:'[^']*')|(?:"[^"]*"))?)*)\s*(\/?)>/g,Yb=/(?:^|\s)(id|class)\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+)/gi,ey={area:!0,AREA:!0,base:!0,BASE:!0,br:!0,BR:!0,col:!0,COL:!0,hr:!0,HR:!0,img:!0,IMG:!0,input:!0,INPUT:!0,link:!0,LINK:!0,meta:!0,META:!0,source:!0,SOURCE:!0,embed:!0,EMBED:!0,param:!0,PARAM:!0,track:!0,TRACK:!0,wbr:!0,WBR:!0},Ls={li:{li:!0,LI:!0},LI:{li:!0,LI:!0},p:{p:!0,div:!0,P:!0,DIV:!0},P:{p:!0,div:!0,P:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},td:{td:!0,th:!0,TD:!0,TH:!0},TD:{td:!0,th:!0,TD:!0,TH:!0},th:{td:!0,th:!0,TD:!0,TH:!0},TH:{td:!0,th:!0,TD:!0,TH:!0},h1:{h1:!0,H1:!0},H1:{h1:!0,H1:!0},h2:{h2:!0,H2:!0},H2:{h2:!0,H2:!0},h3:{h3:!0,H3:!0},H3:{h3:!0,H3:!0},h4:{h4:!0,H4:!0},H4:{h4:!0,H4:!0},h5:{h5:!0,H5:!0},H5:{h5:!0,H5:!0},h6:{h6:!0,H6:!0},H6:{h6:!0,H6:!0}},Hs={li:{ul:!0,ol:!0,UL:!0,OL:!0},LI:{ul:!0,ol:!0,UL:!0,OL:!0},a:{div:!0,DIV:!0},A:{div:!0,DIV:!0},b:{div:!0,DIV:!0},B:{div:!0,DIV:!0},i:{div:!0,DIV:!0},I:{div:!0,DIV:!0},p:{div:!0,DIV:!0},P:{div:!0,DIV:!0},td:{tr:!0,table:!0,TR:!0,TABLE:!0},TD:{tr:!0,table:!0,TR:!0,TABLE:!0},th:{tr:!0,table:!0,TR:!0,TABLE:!0},TH:{tr:!0,table:!0,TR:!0,TABLE:!0}},Vn="documentfragmentcontainer";function gp(n,t){var e,i;t===void 0&&(t={});var o=new hp.default((e=t==null?void 0:t.voidTag)===null||e===void 0?void 0:e.closingSlash,(i=t==null?void 0:t.voidTag)===null||i===void 0?void 0:i.tags),a=t.blockTextElements||{script:!0,noscript:!0,style:!0,pre:!0},r=Object.keys(a),s=r.map(function(re){return new RegExp("^".concat(re,"$"),"i")}),p=r.filter(function(re){return a[re]}).map(function(re){return new RegExp("^".concat(re,"$"),"i")});function d(re){return p.some(function(ie){return ie.test(re)})}function c(re){return s.some(function(ie){return ie.test(re)})}var h=function(re,ie){return[re-T,ie-T]},m=new ya(null,{},"",null,[0,n.length],o,t),f=m,v=[m],u=-1,$=void 0,S;n="<".concat(Vn,">").concat(n,"</").concat(Vn,">");for(var R=t.lowerCaseTagName,C=t.fixNestedATags,D=n.length-(Vn.length+2),T=Vn.length+2;S=mt.exec(n);){var _=S[0],M=S[1],A=S[2],I=S[3],B=S[4],N=_.length,L=mt.lastIndex-N,Q=mt.lastIndex;if(u>-1&&u+N<Q){var V=n.substring(u,L);f.appendChild(new Cn.default(V,f,h(u,L)))}if(u=mt.lastIndex,A!==Vn){if(_[1]==="!"){if(t.comment){var V=n.substring(L+4,Q-3);f.appendChild(new zb.default(V,f,h(L,Q)))}continue}if(R&&(A=A.toLowerCase()),!M){for(var De={},ve=void 0;ve=Yb.exec(I);){var qe=ve[1],Ae=ve[2],E=Ae[0]==="'"||Ae[0]==='"';De[qe.toLowerCase()]=E?Ae.slice(1,Ae.length-1):Ae}var G=f.rawTagName;!B&&Ls[G]&&Ls[G][A]&&(v.pop(),f=(0,vn.default)(v)),C&&(A==="a"||A==="A")&&($!==void 0&&(v.splice($),f=(0,vn.default)(v)),$=v.length);var ee=mt.lastIndex,ne=ee-N;if(f=f.appendChild(new ya(A,De,I.slice(1),null,h(ne,ee),o,t)),v.push(f),c(A)){var pe="</".concat(A,">"),H=R?n.toLocaleLowerCase().indexOf(pe,mt.lastIndex):n.indexOf(pe,mt.lastIndex),te=H===-1?D:H;if(d(A)){var V=n.substring(ee,te);V.length>0&&/\S/.test(V)&&f.appendChild(new Cn.default(V,f,h(ee,te)))}H===-1?u=mt.lastIndex=n.length+1:(u=mt.lastIndex=H+pe.length,M="/")}}if(M||B||ey[A])for(;;)if($!=null&&(A==="a"||A==="A")&&($=void 0),f.rawTagName===A){f.range[1]=h(-1,Math.max(u,Q))[1],v.pop(),f=(0,vn.default)(v);break}else{var G=f.tagName;if(Hs[G]&&Hs[G][A]){v.pop(),f=(0,vn.default)(v);continue}break}}}return v}Tt.base_parse=gp;function mn(n,t){t===void 0&&(t={});for(var e=gp(n,t),i=e[0],o=function(){var a=e.pop(),r=(0,vn.default)(e);a.parentNode&&a.parentNode.parentNode&&(a.parentNode===r&&a.tagName===r.tagName?t.parseNoneClosedTags!==!0&&(r.removeChild(a),a.childNodes.forEach(function(s){r.parentNode.appendChild(s)}),e.pop()):t.parseNoneClosedTags!==!0&&(r.removeChild(a),a.childNodes.forEach(function(s){r.appendChild(s)})))};e.length>1;)o();return i}Tt.parse=mn;function ft(n,t){return n.map(function(e){return e.parentNode=t,e})}var up={};(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=Tt;Object.defineProperty(n,"default",{enumerable:!0,get:function(){return t.parse}})})(up);var er={};Object.defineProperty(er,"__esModule",{value:!0});var ty=Tt;function ny(n,t){t===void 0&&(t={});var e=(0,ty.base_parse)(n,t);return Boolean(e.length===1)}er.default=ny;var tn=q&&q.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(xe,"__esModule",{value:!0});xe.NodeType=xe.TextNode=xe.Node=xe.valid=xe.CommentNode=xe.HTMLElement=wp=xe.parse=void 0;var mp=tn(oo);xe.CommentNode=mp.default;var fp=tn(Tt);xe.HTMLElement=fp.default;var bp=tn(xn);xe.Node=bp.default;var yp=tn(vo);xe.TextNode=yp.default;var vp=tn(Yt);xe.NodeType=vp.default;var Cp=tn(up),Tp=tn(er);xe.valid=Tp.default;function wt(n,t){return t===void 0&&(t={}),(0,Cp.default)(n,t)}xe.default=wt;var wp=xe.parse=wt;wt.parse=Cp.default;wt.HTMLElement=fp.default;wt.CommentNode=mp.default;wt.valid=Tp.default;wt.Node=bp.default;wt.TextNode=yp.default;wt.NodeType=vp.default;const _n=class extends It{constructor(e,i){super("Extract all images from a layoutConfig using the meta paths.",[],"ExctractImages");y(this,"_isOfficial");y(this,"_sharedTagRenderings");this._isOfficial=e,this._sharedTagRenderings=i}static mightBeTagRendering(e){var i;return Array.isArray(e.type)?((i=e.type)==null?void 0:i.some(o=>o.$ref=="#/definitions/TagRenderingConfigJson"||o.$ref=="#/definitions/QuestionableTagRenderingConfigJson"))??!1:!1}convert(e,i){var p,d,c;const o=[],a=[],r=[];for(const h of _n.layoutMetaPaths){const m=_n.mightBeTagRendering(h),f=h.typeHint==="icon"||h.typeHint==="image",v=k.CollectPath(h.path,e);if(m)for(const u of v){const $=u.path,S=u.leaf;if(typeof S=="string"){if(!f||(S==""&&r.push(i+"."+$.join(".")+" Found an empty image"),(p=this._sharedTagRenderings)!=null&&p.has(S)))continue;o.push({path:S,context:i+"."+$})}else for(const R of _n.tagRenderingMetaPaths){const C=k.CollectPath(R.path,S),D=R.typeHint==="rendered",T=R.typeHint==="icon"||R.typeHint==="image";for(const _ of C)f&&D&&(_.leaf===""||_.leaf.path==""?r.push(i+[...$,..._.path].join(".")+": Found an empty image at "):typeof _.leaf!="string"?(this._isOfficial?a:r).push(i+"."+_.path.join(".")+": found an image path that is not a string: "+JSON.stringify(_.leaf)):o.push({path:_.leaf,context:i+"."+$})),!f&&T&&o.push(...F.T(_.leaf,"extract_images from "+_.path.join(".")).ExtractImages(!1).map(M=>({path:M,context:i+"."+M})))}}else for(const u of v){if(u.leaf===""){r.push(i+"."+u.path.join(".")+" Found an empty image");continue}typeof u.leaf=="string"&&o.push({context:i+"."+u.path.join("."),path:u.leaf})}}const s=[];for(const h of o){if(h.path.startsWith("<")&&h.path.endsWith(">")){const f=wp(h.path),u=Array.from(f.getElementsByTagName("img")).map($=>$.getAttribute("src"));s.push(...u.map($=>({path:$,context:h.context+" (in html)"})));continue}const m=k.NoNull(k.NoEmpty((c=(d=h.path)==null?void 0:d.split(";"))==null?void 0:c.map(f=>f.split(":")[0])));for(const f of m)s.push({path:f,context:h.context})}return{result:s,errors:a,warnings:r}}};let Zn=_n;y(Zn,"layoutMetaPaths",bd.filter(e=>_n.mightBeTagRendering(e)||e.typeHint!==void 0&&(e.typeHint==="image"||e.typeHint==="icon"||e.typeHint==="image[]"||e.typeHint==="icon[]"))),y(Zn,"tagRenderingMetaPaths",yd);class fy extends ai{constructor(e){super("Walks over the entire theme and replaces images to the relative URL. Only works if the ID of the theme is an URL",[],"fixImages");y(this,"_knownImages");this._knownImages=e}convert(e,i){let o;try{o=new URL(e.id)}catch{return{result:e}}const a=[],r=o.protocol+"//"+o.host;let s=o.protocol+"//"+o.host+o.pathname;s=s.substring(0,s.lastIndexOf("/"));const p=this;s.endsWith("assets/generated/themes")&&(a.push("Detected 'assets/generated/themes' as relative URL. I'm assuming that you are loading your file for the MC-repository, so I'm rewriting all image links as if they were absolute instead of relative"),s=r);function d(c){return p._knownImages.has(c)?c:typeof c!="string"?(a.push("Found a non-string object while replacing images: "+JSON.stringify(c)),c):c.startsWith("./")?s+c.substring(1):c.startsWith("/")?r+c:c}e=k.Clone(e);for(const c of bd){if(c.typeHint!=="image"&&c.typeHint!=="icon")continue;const h=Zn.mightBeTagRendering(c);k.WalkPath(c.path,e,(m,f)=>{if(typeof m=="string")return d(m);if(h)for(const v of yd)v.typeHint==="rendered"&&k.WalkPath(v.path,m,u=>d(u));return m})}return{warnings:a,result:e}}}export{ae as A,fe as C,Kn as D,Zn as E,Ei as F,sd as I,Qo as L,Ee as O,Oi as P,le as R,my as S,Ie as T,xt as V,it as W,Ba as a,se as b,je as c,Dn as d,ja as e,Dg as f,Ag as g,Gn as h,Wn as i,dd as j,Ji as k,Qn as l,uy as m,ly as n,lc as o,Fm as p,ai as q,vc as r,hy as s,It as t,gy as u,cy as v,qt as w,wp as x,fy as y};
