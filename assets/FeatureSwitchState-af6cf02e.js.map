{"version":3,"file":"FeatureSwitchState-af6cf02e.js","sources":["../../src/Logic/State/FeatureSwitchState.ts"],"sourcesContent":["/**\n * The part of the global state which initializes the feature switches, based on default values and on the layoutToUse\n */\nimport LayoutConfig from \"../../Models/ThemeConfig/LayoutConfig\"\nimport { UIEventSource } from \"../UIEventSource\"\nimport { QueryParameters } from \"../Web/QueryParameters\"\nimport Constants from \"../../Models/Constants\"\nimport { Utils } from \"../../Utils\"\n\nclass FeatureSwitchUtils {\n    static initSwitch(key: string, deflt: boolean, documentation: string): UIEventSource<boolean> {\n        const defaultValue = deflt\n        const queryParam = QueryParameters.GetQueryParameter(\n            key,\n            \"\" + defaultValue,\n            documentation,\n            { stackOffset: -1 }\n        )\n\n        // It takes the current layout, extracts the default value for this query parameter. A query parameter event source is then retrieved and flattened\n        return queryParam.sync(\n            (str) => (str === undefined ? defaultValue : str !== \"false\"),\n            [],\n            (b) => (b == defaultValue ? undefined : \"\" + b)\n        )\n    }\n}\n\nexport class OsmConnectionFeatureSwitches {\n    public readonly featureSwitchFakeUser: UIEventSource<boolean>\n\n    constructor() {\n        this.featureSwitchFakeUser = QueryParameters.GetBooleanQueryParameter(\n            \"fake-user\",\n            false,\n            \"If true, 'dryrun' mode is activated and a fake user account is loaded\"\n        )\n    }\n}\n\nexport default class FeatureSwitchState extends OsmConnectionFeatureSwitches {\n    /**\n     * The layout that is being used in this run\n     */\n    public readonly layoutToUse: LayoutConfig\n\n    public readonly featureSwitchEnableLogin: UIEventSource<boolean>\n    public readonly featureSwitchSearch: UIEventSource<boolean>\n    public readonly featureSwitchBackgroundSelection: UIEventSource<boolean>\n    public readonly featureSwitchWelcomeMessage: UIEventSource<boolean>\n    public readonly featureSwitchCommunityIndex: UIEventSource<boolean>\n    public readonly featureSwitchExtraLinkEnabled: UIEventSource<boolean>\n    public readonly featureSwitchMoreQuests: UIEventSource<boolean>\n    public readonly featureSwitchShareScreen: UIEventSource<boolean>\n    public readonly featureSwitchGeolocation: UIEventSource<boolean>\n    public readonly featureSwitchIsTesting: UIEventSource<boolean>\n    public readonly featureSwitchIsDebugging: UIEventSource<boolean>\n    public readonly featureSwitchShowAllQuestions: UIEventSource<boolean>\n    public readonly featureSwitchFilter: UIEventSource<boolean>\n    public readonly featureSwitchEnableExport: UIEventSource<boolean>\n    public readonly overpassUrl: UIEventSource<string[]>\n    public readonly overpassTimeout: UIEventSource<number>\n    public readonly overpassMaxZoom: UIEventSource<number>\n    public readonly osmApiTileSize: UIEventSource<number>\n    public readonly backgroundLayerId: UIEventSource<string>\n\n    public constructor(layoutToUse?: LayoutConfig) {\n        super()\n        this.layoutToUse = layoutToUse\n\n        // Helper function to initialize feature switches\n\n        this.featureSwitchEnableLogin = FeatureSwitchUtils.initSwitch(\n            \"fs-enable-login\",\n            layoutToUse?.enableUserBadge ?? true,\n            \"Disables/Enables logging in and thus disables editing all together. This effectively puts MapComplete into read-only mode.\"\n        )\n        {\n            if (QueryParameters.wasInitialized(\"fs-userbadge\")) {\n                // userbadge is the legacy name for 'enable-login'\n                this.featureSwitchEnableLogin.setData(\n                    QueryParameters.GetBooleanQueryParameter(\"fs-userbadge\", undefined, \"Legacy\")\n                        .data\n                )\n            }\n        }\n\n        this.featureSwitchSearch = FeatureSwitchUtils.initSwitch(\n            \"fs-search\",\n            layoutToUse?.enableSearch ?? true,\n            \"Disables/Enables the search bar\"\n        )\n        this.featureSwitchBackgroundSelection = FeatureSwitchUtils.initSwitch(\n            \"fs-background\",\n            layoutToUse?.enableBackgroundLayerSelection ?? true,\n            \"Disables/Enables the background layer control\"\n        )\n\n        this.featureSwitchFilter = FeatureSwitchUtils.initSwitch(\n            \"fs-filter\",\n            layoutToUse?.enableLayers ?? true,\n            \"Disables/Enables the filter view\"\n        )\n\n        this.featureSwitchWelcomeMessage = FeatureSwitchUtils.initSwitch(\n            \"fs-welcome-message\",\n            true,\n            \"Disables/enables the help menu or welcome message\"\n        )\n        this.featureSwitchCommunityIndex = FeatureSwitchUtils.initSwitch(\n            \"fs-community-index\",\n            this.featureSwitchEnableLogin.data,\n            \"Disables/enables the button to get in touch with the community\"\n        )\n        this.featureSwitchExtraLinkEnabled = FeatureSwitchUtils.initSwitch(\n            \"fs-iframe-popout\",\n            true,\n            \"Disables/Enables the extraLink button. By default, if in iframe mode and the welcome message is hidden, a popout button to the full mapcomplete instance is shown instead (unless disabled with this switch or another extraLink button is enabled)\"\n        )\n        this.featureSwitchMoreQuests = FeatureSwitchUtils.initSwitch(\n            \"fs-more-quests\",\n            layoutToUse?.enableMoreQuests ?? true,\n            \"Disables/Enables the 'More Quests'-tab in the welcome message\"\n        )\n        this.featureSwitchShareScreen = FeatureSwitchUtils.initSwitch(\n            \"fs-share-screen\",\n            layoutToUse?.enableShareScreen ?? true,\n            \"Disables/Enables the 'Share-screen'-tab in the welcome message\"\n        )\n        this.featureSwitchGeolocation = FeatureSwitchUtils.initSwitch(\n            \"fs-geolocation\",\n            layoutToUse?.enableGeolocation ?? true,\n            \"Disables/Enables the geolocation button\"\n        )\n        this.featureSwitchShowAllQuestions = FeatureSwitchUtils.initSwitch(\n            \"fs-all-questions\",\n            layoutToUse?.enableShowAllQuestions ?? false,\n            \"Always show all questions\"\n        )\n\n        this.featureSwitchEnableExport = FeatureSwitchUtils.initSwitch(\n            \"fs-export\",\n            layoutToUse?.enableExportButton ?? true,\n            \"Enable the export as GeoJSON and CSV button\"\n        )\n\n        let testingDefaultValue = false\n        if (\n            !Utils.runningFromConsole &&\n            (location.hostname === \"localhost\" || location.hostname === \"127.0.0.1\")\n        ) {\n            testingDefaultValue = true\n        }\n\n        this.featureSwitchIsTesting = QueryParameters.GetBooleanQueryParameter(\n            \"test\",\n            testingDefaultValue,\n            \"If true, 'dryrun' mode is activated. The app will behave as normal, except that changes to OSM will be printed onto the console instead of actually uploaded to osm.org\"\n        )\n\n        this.featureSwitchIsDebugging = QueryParameters.GetBooleanQueryParameter(\n            \"debug\",\n            false,\n            \"If true, shows some extra debugging help such as all the available tags on every object\"\n        )\n\n        this.overpassUrl = QueryParameters.GetQueryParameter(\n            \"overpassUrl\",\n            (layoutToUse?.overpassUrl ?? Constants.defaultOverpassUrls).join(\",\"),\n            \"Point mapcomplete to a different overpass-instance. Example: https://overpass-api.de/api/interpreter\"\n        ).sync(\n            (param) => param?.split(\",\"),\n            [],\n            (urls) => urls?.join(\",\")\n        )\n\n        this.overpassTimeout = UIEventSource.asInt(\n            QueryParameters.GetQueryParameter(\n                \"overpassTimeout\",\n                \"\" + layoutToUse?.overpassTimeout,\n                \"Set a different timeout (in seconds) for queries in overpass\"\n            )\n        )\n\n        this.overpassMaxZoom = UIEventSource.asFloat(\n            QueryParameters.GetQueryParameter(\n                \"overpassMaxZoom\",\n                \"\" + layoutToUse?.overpassMaxZoom,\n                \" point to switch between OSM-api and overpass\"\n            )\n        )\n\n        this.osmApiTileSize = UIEventSource.asInt(\n            QueryParameters.GetQueryParameter(\n                \"osmApiTileSize\",\n                \"\" + layoutToUse?.osmApiTileSize,\n                \"Tilesize when the OSM-API is used to fetch data within a BBOX\"\n            )\n        )\n\n        this.backgroundLayerId = QueryParameters.GetQueryParameter(\n            \"background\",\n            layoutToUse?.defaultBackgroundId,\n            \"The id of the background layer to start with\"\n        )\n    }\n}\n"],"names":["FeatureSwitchUtils","key","deflt","documentation","defaultValue","QueryParameters","str","b","OsmConnectionFeatureSwitches","__publicField","FeatureSwitchState","layoutToUse","testingDefaultValue","Utils","Constants","param","urls","UIEventSource"],"mappings":"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"}