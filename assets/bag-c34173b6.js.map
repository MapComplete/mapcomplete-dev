{"version":3,"file":"bag-c34173b6.js","sources":["../../src/assets/generated/metatagging/bag.ts","../../index_bag.ts"],"sourcesContent":["import {Feature} from 'geojson'\nimport { ExtraFuncType } from \"../../../Logic/ExtraFunctions\";\nimport { Utils } from \"../../../Utils\"\nexport class ThemeMetaTagging {\n   public static readonly themeName = \"bag\"\n\n   public metaTaggging_for_osm_buildings(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      feat.properties['_surface:strict'] = feat(get)('_surface')\n   }\n   public metaTaggging_for_osm_adresses(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_bag_pand(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      Utils.AddLazyProperty(feat.properties, '_overlaps_with_buildings', () => overlapWith(feat)('osm:buildings').filter(f => f.feat.properties.id.indexOf('-') < 0) ) \n      Utils.AddLazyProperty(feat.properties, '_overlaps_with', () => feat(get)('_overlaps_with_buildings').find(f => f.overlap > 1 /* square meter */ ) ) \n      Utils.AddLazyProperty(feat.properties, '_overlaps_with_properties', () => feat(get)('_overlaps_with')?.feat?.properties ) \n      Utils.AddLazyProperty(feat.properties, '_overlap_percentage', () => Math.round(100 * (feat(get)('_overlaps_with')?.overlap / feat(get)('_overlaps_with_properties')['_surface:strict'])) ) \n      Utils.AddLazyProperty(feat.properties, '_reverse_overlap_percentage', () => Math.round(100 * (feat(get)('_overlaps_with')?.overlap / feat(get)('_surface'))) ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:in_construction', () => feat.properties.status.startsWith('Bouwvergunning verleend') || feat.properties.status.startsWith('Bouw gestart') ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:construction', () => (feat.properties.gebruiksdoel == 'woonfunctie') ? ((Number(feat.properties.aantal_verblijfsobjecten) == 1) ? 'house' : 'apartments') : 'yes' ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:building', () => (feat.properties.status.startsWith('Bouwvergunning verleend') || feat.properties.status.startsWith('Bouw gestart')) ? 'construction' : feat.properties['_bag_obj:construction'] ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:ref:bag', () => Number(feat.properties.identificatie) ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:source:date', () => new Date().toISOString().split('T')[0] ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:start_date', () => feat.properties.bouwjaar ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:id', () => feat(get)('_overlaps_with_properties')?.id ) \n      Utils.AddLazyProperty(feat.properties, '_osm_obj:building', () => feat(get)('_overlaps_with_properties')?.building ) \n      feat.properties['_imported_osm_object_found'] = Number(feat.properties.identificatie)==Number(feat(get)('_overlaps_with_properties')['ref:bag'])\n   }\n   public metaTaggging_for_bag_verblijfsobject(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n      feat.properties['_closed_osm_addr'] = closest(feat)('osm:adresses').properties\n      Utils.AddLazyProperty(feat.properties, '_bag_obj:addr:housenumber', () => `${feat.properties.huisnummer}${feat.properties.huisletter}${(feat.properties.toevoeging != '') ? '-' : ''}${feat.properties.toevoeging}` ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:ref:bag', () => Number(feat.properties.identificatie) ) \n      Utils.AddLazyProperty(feat.properties, '_bag_obj:source:date', () => new Date().toISOString().split('T')[0] ) \n      feat.properties['_osm_obj:addr:city'] = feat(get)('_closed_osm_addr')['addr:city']\n      feat.properties['_osm_obj:addr:housenumber'] = feat(get)('_closed_osm_addr')['addr:housenumber']\n      feat.properties['_osm_obj:addr:postcode'] = feat(get)('_closed_osm_addr')['addr:postcode']\n      feat.properties['_osm_obj:addr:street'] = feat(get)('_closed_osm_addr')['addr:street']\n      feat.properties['_imported_osm_object_found'] = (feat.properties.woonplaats==feat(get)('_closed_osm_addr')['addr:city'])&&(feat(get)('_bag_obj:addr:housenumber')==feat(get)('_closed_osm_addr')['addr:housenumber'])&&(feat.properties.postcode==feat(get)('_closed_osm_addr')['addr:postcode'])&&(feat.properties.openbare_ruimte==feat(get)('_closed_osm_addr')['addr:street'])\n   }\n   public metaTaggging_for_selected_element(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_location_history(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_home_location(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_gps_track(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_range(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n   public metaTaggging_for_last_click(feat: Feature, helperFunctions: Record<ExtraFuncType, (feature: Feature) => Function>) {\n      const {distanceTo, overlapWith, enclosingFeatures, intersectionsWith, closest, closestn, get} = helperFunctions\n   }\n}","import layout from \"./src/assets/generated/themes/bag.json\"\nimport { ThemeMetaTagging } from \"./src/assets/generated/metatagging/bag\"\nimport ThemeViewState from \"./src/Models/ThemeViewState\"\nimport SvelteUIElement from \"./src/UI/Base/SvelteUIElement\"\nimport ThemeViewGUI from \"./src/UI/ThemeViewGUI.svelte\"\nimport LayoutConfig from \"./src/Models/ThemeConfig/LayoutConfig\";\nimport MetaTagging from \"./src/Logic/MetaTagging\";\nimport { FixedUiElement } from \"./src/UI/Base/FixedUiElement\";\n\nfunction webgl_support() {\n    try {\n        var canvas = document.createElement(\"canvas\")\n        return (\n            !!window.WebGLRenderingContext &&\n            (canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\"))\n        )\n    } catch (e) {\n        return false\n    }\n}\n\nif (!webgl_support()) {\n     new FixedUiElement(\"WebGL is not supported or not enabled. This is essential for MapComplete to function, please enable this.\").SetClass(\"block alert\").AttachTo(\"maindiv\")\n}else{\n    MetaTagging.setThemeMetatagging(new ThemeMetaTagging())\n    const state = new ThemeViewState(new LayoutConfig(<any> layout))\n    const main = new SvelteUIElement(ThemeViewGUI, { state })\n    main.AttachTo(\"maindiv\")\n}    \n"],"names":["ThemeMetaTagging","feat","helperFunctions","distanceTo","overlapWith","enclosingFeatures","intersectionsWith","closest","closestn","get","Utils","f","_b","_a","__publicField","webgl_support","canvas","FixedUiElement","MetaTagging","state","ThemeViewState","LayoutConfig","layout","SvelteUIElement","ThemeViewGUI"],"mappings":"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"}